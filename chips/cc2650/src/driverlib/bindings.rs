/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _NEWLIB_VERSION_H__: u32 = 1;
pub const _NEWLIB_VERSION: &[u8; 6] = b"4.4.0\0";
pub const __NEWLIB__: u32 = 4;
pub const __NEWLIB_MINOR__: u32 = 4;
pub const __NEWLIB_PATCHLEVEL__: u32 = 0;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __ATFILE_VISIBLE: u32 = 1;
pub const __BSD_VISIBLE: u32 = 1;
pub const __GNU_VISIBLE: u32 = 0;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __LARGEFILE_VISIBLE: u32 = 0;
pub const __MISC_VISIBLE: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __SVID_VISIBLE: u32 = 1;
pub const __XSI_VISIBLE: u32 = 0;
pub const __SSP_FORTIFY_LEVEL: u32 = 0;
pub const __have_longlong64: u32 = 1;
pub const __have_long32: u32 = 1;
pub const ___int8_t_defined: u32 = 1;
pub const ___int16_t_defined: u32 = 1;
pub const ___int32_t_defined: u32 = 1;
pub const ___int64_t_defined: u32 = 1;
pub const ___int_least8_t_defined: u32 = 1;
pub const ___int_least16_t_defined: u32 = 1;
pub const ___int_least32_t_defined: u32 = 1;
pub const ___int_least64_t_defined: u32 = 1;
pub const __int20: u32 = 2;
pub const __int20__: u32 = 2;
pub const __INT8: &[u8; 3] = b"hh\0";
pub const __INT16: &[u8; 2] = b"h\0";
pub const __INT64: &[u8; 3] = b"ll\0";
pub const __FAST8: &[u8; 3] = b"hh\0";
pub const __FAST16: &[u8; 2] = b"h\0";
pub const __FAST64: &[u8; 3] = b"ll\0";
pub const __LEAST8: &[u8; 3] = b"hh\0";
pub const __LEAST16: &[u8; 2] = b"h\0";
pub const __LEAST64: &[u8; 3] = b"ll\0";
pub const __int8_t_defined: u32 = 1;
pub const __int16_t_defined: u32 = 1;
pub const __int32_t_defined: u32 = 1;
pub const __int64_t_defined: u32 = 1;
pub const __int_least8_t_defined: u32 = 1;
pub const __int_least16_t_defined: u32 = 1;
pub const __int_least32_t_defined: u32 = 1;
pub const __int_least64_t_defined: u32 = 1;
pub const __int_fast8_t_defined: u32 = 1;
pub const __int_fast16_t_defined: u32 = 1;
pub const __int_fast32_t_defined: u32 = 1;
pub const __int_fast64_t_defined: u32 = 1;
pub const WINT_MIN: u32 = 0;
pub const CC_GET_CHIP_FAMILY: u32 = 38;
pub const CC_GET_CHIP_OPTION: u32 = 0;
pub const CC_GET_CHIP_HWREV: u32 = 34;
pub const UART_O_DR: u32 = 0;
pub const UART_O_RSR: u32 = 4;
pub const UART_O_ECR: u32 = 4;
pub const UART_O_FR: u32 = 24;
pub const UART_O_IBRD: u32 = 36;
pub const UART_O_FBRD: u32 = 40;
pub const UART_O_LCRH: u32 = 44;
pub const UART_O_CTL: u32 = 48;
pub const UART_O_IFLS: u32 = 52;
pub const UART_O_IMSC: u32 = 56;
pub const UART_O_RIS: u32 = 60;
pub const UART_O_MIS: u32 = 64;
pub const UART_O_ICR: u32 = 68;
pub const UART_O_DMACTL: u32 = 72;
pub const UART_DR_OE: u32 = 2048;
pub const UART_DR_OE_BITN: u32 = 11;
pub const UART_DR_OE_M: u32 = 2048;
pub const UART_DR_OE_S: u32 = 11;
pub const UART_DR_BE: u32 = 1024;
pub const UART_DR_BE_BITN: u32 = 10;
pub const UART_DR_BE_M: u32 = 1024;
pub const UART_DR_BE_S: u32 = 10;
pub const UART_DR_PE: u32 = 512;
pub const UART_DR_PE_BITN: u32 = 9;
pub const UART_DR_PE_M: u32 = 512;
pub const UART_DR_PE_S: u32 = 9;
pub const UART_DR_FE: u32 = 256;
pub const UART_DR_FE_BITN: u32 = 8;
pub const UART_DR_FE_M: u32 = 256;
pub const UART_DR_FE_S: u32 = 8;
pub const UART_DR_DATA_W: u32 = 8;
pub const UART_DR_DATA_M: u32 = 255;
pub const UART_DR_DATA_S: u32 = 0;
pub const UART_RSR_OE: u32 = 8;
pub const UART_RSR_OE_BITN: u32 = 3;
pub const UART_RSR_OE_M: u32 = 8;
pub const UART_RSR_OE_S: u32 = 3;
pub const UART_RSR_BE: u32 = 4;
pub const UART_RSR_BE_BITN: u32 = 2;
pub const UART_RSR_BE_M: u32 = 4;
pub const UART_RSR_BE_S: u32 = 2;
pub const UART_RSR_PE: u32 = 2;
pub const UART_RSR_PE_BITN: u32 = 1;
pub const UART_RSR_PE_M: u32 = 2;
pub const UART_RSR_PE_S: u32 = 1;
pub const UART_RSR_FE: u32 = 1;
pub const UART_RSR_FE_BITN: u32 = 0;
pub const UART_RSR_FE_M: u32 = 1;
pub const UART_RSR_FE_S: u32 = 0;
pub const UART_ECR_OE: u32 = 8;
pub const UART_ECR_OE_BITN: u32 = 3;
pub const UART_ECR_OE_M: u32 = 8;
pub const UART_ECR_OE_S: u32 = 3;
pub const UART_ECR_BE: u32 = 4;
pub const UART_ECR_BE_BITN: u32 = 2;
pub const UART_ECR_BE_M: u32 = 4;
pub const UART_ECR_BE_S: u32 = 2;
pub const UART_ECR_PE: u32 = 2;
pub const UART_ECR_PE_BITN: u32 = 1;
pub const UART_ECR_PE_M: u32 = 2;
pub const UART_ECR_PE_S: u32 = 1;
pub const UART_ECR_FE: u32 = 1;
pub const UART_ECR_FE_BITN: u32 = 0;
pub const UART_ECR_FE_M: u32 = 1;
pub const UART_ECR_FE_S: u32 = 0;
pub const UART_FR_TXFE: u32 = 128;
pub const UART_FR_TXFE_BITN: u32 = 7;
pub const UART_FR_TXFE_M: u32 = 128;
pub const UART_FR_TXFE_S: u32 = 7;
pub const UART_FR_RXFF: u32 = 64;
pub const UART_FR_RXFF_BITN: u32 = 6;
pub const UART_FR_RXFF_M: u32 = 64;
pub const UART_FR_RXFF_S: u32 = 6;
pub const UART_FR_TXFF: u32 = 32;
pub const UART_FR_TXFF_BITN: u32 = 5;
pub const UART_FR_TXFF_M: u32 = 32;
pub const UART_FR_TXFF_S: u32 = 5;
pub const UART_FR_RXFE: u32 = 16;
pub const UART_FR_RXFE_BITN: u32 = 4;
pub const UART_FR_RXFE_M: u32 = 16;
pub const UART_FR_RXFE_S: u32 = 4;
pub const UART_FR_BUSY: u32 = 8;
pub const UART_FR_BUSY_BITN: u32 = 3;
pub const UART_FR_BUSY_M: u32 = 8;
pub const UART_FR_BUSY_S: u32 = 3;
pub const UART_FR_CTS: u32 = 1;
pub const UART_FR_CTS_BITN: u32 = 0;
pub const UART_FR_CTS_M: u32 = 1;
pub const UART_FR_CTS_S: u32 = 0;
pub const UART_IBRD_DIVINT_W: u32 = 16;
pub const UART_IBRD_DIVINT_M: u32 = 65535;
pub const UART_IBRD_DIVINT_S: u32 = 0;
pub const UART_FBRD_DIVFRAC_W: u32 = 6;
pub const UART_FBRD_DIVFRAC_M: u32 = 63;
pub const UART_FBRD_DIVFRAC_S: u32 = 0;
pub const UART_LCRH_SPS: u32 = 128;
pub const UART_LCRH_SPS_BITN: u32 = 7;
pub const UART_LCRH_SPS_M: u32 = 128;
pub const UART_LCRH_SPS_S: u32 = 7;
pub const UART_LCRH_WLEN_W: u32 = 2;
pub const UART_LCRH_WLEN_M: u32 = 96;
pub const UART_LCRH_WLEN_S: u32 = 5;
pub const UART_LCRH_WLEN_8: u32 = 96;
pub const UART_LCRH_WLEN_7: u32 = 64;
pub const UART_LCRH_WLEN_6: u32 = 32;
pub const UART_LCRH_WLEN_5: u32 = 0;
pub const UART_LCRH_FEN: u32 = 16;
pub const UART_LCRH_FEN_BITN: u32 = 4;
pub const UART_LCRH_FEN_M: u32 = 16;
pub const UART_LCRH_FEN_S: u32 = 4;
pub const UART_LCRH_FEN_EN: u32 = 16;
pub const UART_LCRH_FEN_DIS: u32 = 0;
pub const UART_LCRH_STP2: u32 = 8;
pub const UART_LCRH_STP2_BITN: u32 = 3;
pub const UART_LCRH_STP2_M: u32 = 8;
pub const UART_LCRH_STP2_S: u32 = 3;
pub const UART_LCRH_EPS: u32 = 4;
pub const UART_LCRH_EPS_BITN: u32 = 2;
pub const UART_LCRH_EPS_M: u32 = 4;
pub const UART_LCRH_EPS_S: u32 = 2;
pub const UART_LCRH_EPS_EVEN: u32 = 4;
pub const UART_LCRH_EPS_ODD: u32 = 0;
pub const UART_LCRH_PEN: u32 = 2;
pub const UART_LCRH_PEN_BITN: u32 = 1;
pub const UART_LCRH_PEN_M: u32 = 2;
pub const UART_LCRH_PEN_S: u32 = 1;
pub const UART_LCRH_PEN_EN: u32 = 2;
pub const UART_LCRH_PEN_DIS: u32 = 0;
pub const UART_LCRH_BRK: u32 = 1;
pub const UART_LCRH_BRK_BITN: u32 = 0;
pub const UART_LCRH_BRK_M: u32 = 1;
pub const UART_LCRH_BRK_S: u32 = 0;
pub const UART_CTL_CTSEN: u32 = 32768;
pub const UART_CTL_CTSEN_BITN: u32 = 15;
pub const UART_CTL_CTSEN_M: u32 = 32768;
pub const UART_CTL_CTSEN_S: u32 = 15;
pub const UART_CTL_CTSEN_EN: u32 = 32768;
pub const UART_CTL_CTSEN_DIS: u32 = 0;
pub const UART_CTL_RTSEN: u32 = 16384;
pub const UART_CTL_RTSEN_BITN: u32 = 14;
pub const UART_CTL_RTSEN_M: u32 = 16384;
pub const UART_CTL_RTSEN_S: u32 = 14;
pub const UART_CTL_RTSEN_EN: u32 = 16384;
pub const UART_CTL_RTSEN_DIS: u32 = 0;
pub const UART_CTL_RTS: u32 = 2048;
pub const UART_CTL_RTS_BITN: u32 = 11;
pub const UART_CTL_RTS_M: u32 = 2048;
pub const UART_CTL_RTS_S: u32 = 11;
pub const UART_CTL_RXE: u32 = 512;
pub const UART_CTL_RXE_BITN: u32 = 9;
pub const UART_CTL_RXE_M: u32 = 512;
pub const UART_CTL_RXE_S: u32 = 9;
pub const UART_CTL_RXE_EN: u32 = 512;
pub const UART_CTL_RXE_DIS: u32 = 0;
pub const UART_CTL_TXE: u32 = 256;
pub const UART_CTL_TXE_BITN: u32 = 8;
pub const UART_CTL_TXE_M: u32 = 256;
pub const UART_CTL_TXE_S: u32 = 8;
pub const UART_CTL_TXE_EN: u32 = 256;
pub const UART_CTL_TXE_DIS: u32 = 0;
pub const UART_CTL_LBE: u32 = 128;
pub const UART_CTL_LBE_BITN: u32 = 7;
pub const UART_CTL_LBE_M: u32 = 128;
pub const UART_CTL_LBE_S: u32 = 7;
pub const UART_CTL_LBE_EN: u32 = 128;
pub const UART_CTL_LBE_DIS: u32 = 0;
pub const UART_CTL_UARTEN: u32 = 1;
pub const UART_CTL_UARTEN_BITN: u32 = 0;
pub const UART_CTL_UARTEN_M: u32 = 1;
pub const UART_CTL_UARTEN_S: u32 = 0;
pub const UART_CTL_UARTEN_EN: u32 = 1;
pub const UART_CTL_UARTEN_DIS: u32 = 0;
pub const UART_IFLS_RXSEL_W: u32 = 3;
pub const UART_IFLS_RXSEL_M: u32 = 56;
pub const UART_IFLS_RXSEL_S: u32 = 3;
pub const UART_IFLS_RXSEL_7_8: u32 = 32;
pub const UART_IFLS_RXSEL_6_8: u32 = 24;
pub const UART_IFLS_RXSEL_4_8: u32 = 16;
pub const UART_IFLS_RXSEL_2_8: u32 = 8;
pub const UART_IFLS_RXSEL_1_8: u32 = 0;
pub const UART_IFLS_TXSEL_W: u32 = 3;
pub const UART_IFLS_TXSEL_M: u32 = 7;
pub const UART_IFLS_TXSEL_S: u32 = 0;
pub const UART_IFLS_TXSEL_7_8: u32 = 4;
pub const UART_IFLS_TXSEL_6_8: u32 = 3;
pub const UART_IFLS_TXSEL_4_8: u32 = 2;
pub const UART_IFLS_TXSEL_2_8: u32 = 1;
pub const UART_IFLS_TXSEL_1_8: u32 = 0;
pub const UART_IMSC_OEIM: u32 = 1024;
pub const UART_IMSC_OEIM_BITN: u32 = 10;
pub const UART_IMSC_OEIM_M: u32 = 1024;
pub const UART_IMSC_OEIM_S: u32 = 10;
pub const UART_IMSC_BEIM: u32 = 512;
pub const UART_IMSC_BEIM_BITN: u32 = 9;
pub const UART_IMSC_BEIM_M: u32 = 512;
pub const UART_IMSC_BEIM_S: u32 = 9;
pub const UART_IMSC_PEIM: u32 = 256;
pub const UART_IMSC_PEIM_BITN: u32 = 8;
pub const UART_IMSC_PEIM_M: u32 = 256;
pub const UART_IMSC_PEIM_S: u32 = 8;
pub const UART_IMSC_FEIM: u32 = 128;
pub const UART_IMSC_FEIM_BITN: u32 = 7;
pub const UART_IMSC_FEIM_M: u32 = 128;
pub const UART_IMSC_FEIM_S: u32 = 7;
pub const UART_IMSC_RTIM: u32 = 64;
pub const UART_IMSC_RTIM_BITN: u32 = 6;
pub const UART_IMSC_RTIM_M: u32 = 64;
pub const UART_IMSC_RTIM_S: u32 = 6;
pub const UART_IMSC_TXIM: u32 = 32;
pub const UART_IMSC_TXIM_BITN: u32 = 5;
pub const UART_IMSC_TXIM_M: u32 = 32;
pub const UART_IMSC_TXIM_S: u32 = 5;
pub const UART_IMSC_RXIM: u32 = 16;
pub const UART_IMSC_RXIM_BITN: u32 = 4;
pub const UART_IMSC_RXIM_M: u32 = 16;
pub const UART_IMSC_RXIM_S: u32 = 4;
pub const UART_IMSC_CTSMIM: u32 = 2;
pub const UART_IMSC_CTSMIM_BITN: u32 = 1;
pub const UART_IMSC_CTSMIM_M: u32 = 2;
pub const UART_IMSC_CTSMIM_S: u32 = 1;
pub const UART_RIS_OERIS: u32 = 1024;
pub const UART_RIS_OERIS_BITN: u32 = 10;
pub const UART_RIS_OERIS_M: u32 = 1024;
pub const UART_RIS_OERIS_S: u32 = 10;
pub const UART_RIS_BERIS: u32 = 512;
pub const UART_RIS_BERIS_BITN: u32 = 9;
pub const UART_RIS_BERIS_M: u32 = 512;
pub const UART_RIS_BERIS_S: u32 = 9;
pub const UART_RIS_PERIS: u32 = 256;
pub const UART_RIS_PERIS_BITN: u32 = 8;
pub const UART_RIS_PERIS_M: u32 = 256;
pub const UART_RIS_PERIS_S: u32 = 8;
pub const UART_RIS_FERIS: u32 = 128;
pub const UART_RIS_FERIS_BITN: u32 = 7;
pub const UART_RIS_FERIS_M: u32 = 128;
pub const UART_RIS_FERIS_S: u32 = 7;
pub const UART_RIS_RTRIS: u32 = 64;
pub const UART_RIS_RTRIS_BITN: u32 = 6;
pub const UART_RIS_RTRIS_M: u32 = 64;
pub const UART_RIS_RTRIS_S: u32 = 6;
pub const UART_RIS_TXRIS: u32 = 32;
pub const UART_RIS_TXRIS_BITN: u32 = 5;
pub const UART_RIS_TXRIS_M: u32 = 32;
pub const UART_RIS_TXRIS_S: u32 = 5;
pub const UART_RIS_RXRIS: u32 = 16;
pub const UART_RIS_RXRIS_BITN: u32 = 4;
pub const UART_RIS_RXRIS_M: u32 = 16;
pub const UART_RIS_RXRIS_S: u32 = 4;
pub const UART_RIS_CTSRMIS: u32 = 2;
pub const UART_RIS_CTSRMIS_BITN: u32 = 1;
pub const UART_RIS_CTSRMIS_M: u32 = 2;
pub const UART_RIS_CTSRMIS_S: u32 = 1;
pub const UART_MIS_OEMIS: u32 = 1024;
pub const UART_MIS_OEMIS_BITN: u32 = 10;
pub const UART_MIS_OEMIS_M: u32 = 1024;
pub const UART_MIS_OEMIS_S: u32 = 10;
pub const UART_MIS_BEMIS: u32 = 512;
pub const UART_MIS_BEMIS_BITN: u32 = 9;
pub const UART_MIS_BEMIS_M: u32 = 512;
pub const UART_MIS_BEMIS_S: u32 = 9;
pub const UART_MIS_PEMIS: u32 = 256;
pub const UART_MIS_PEMIS_BITN: u32 = 8;
pub const UART_MIS_PEMIS_M: u32 = 256;
pub const UART_MIS_PEMIS_S: u32 = 8;
pub const UART_MIS_FEMIS: u32 = 128;
pub const UART_MIS_FEMIS_BITN: u32 = 7;
pub const UART_MIS_FEMIS_M: u32 = 128;
pub const UART_MIS_FEMIS_S: u32 = 7;
pub const UART_MIS_RTMIS: u32 = 64;
pub const UART_MIS_RTMIS_BITN: u32 = 6;
pub const UART_MIS_RTMIS_M: u32 = 64;
pub const UART_MIS_RTMIS_S: u32 = 6;
pub const UART_MIS_TXMIS: u32 = 32;
pub const UART_MIS_TXMIS_BITN: u32 = 5;
pub const UART_MIS_TXMIS_M: u32 = 32;
pub const UART_MIS_TXMIS_S: u32 = 5;
pub const UART_MIS_RXMIS: u32 = 16;
pub const UART_MIS_RXMIS_BITN: u32 = 4;
pub const UART_MIS_RXMIS_M: u32 = 16;
pub const UART_MIS_RXMIS_S: u32 = 4;
pub const UART_MIS_CTSMMIS: u32 = 2;
pub const UART_MIS_CTSMMIS_BITN: u32 = 1;
pub const UART_MIS_CTSMMIS_M: u32 = 2;
pub const UART_MIS_CTSMMIS_S: u32 = 1;
pub const UART_ICR_OEIC: u32 = 1024;
pub const UART_ICR_OEIC_BITN: u32 = 10;
pub const UART_ICR_OEIC_M: u32 = 1024;
pub const UART_ICR_OEIC_S: u32 = 10;
pub const UART_ICR_BEIC: u32 = 512;
pub const UART_ICR_BEIC_BITN: u32 = 9;
pub const UART_ICR_BEIC_M: u32 = 512;
pub const UART_ICR_BEIC_S: u32 = 9;
pub const UART_ICR_PEIC: u32 = 256;
pub const UART_ICR_PEIC_BITN: u32 = 8;
pub const UART_ICR_PEIC_M: u32 = 256;
pub const UART_ICR_PEIC_S: u32 = 8;
pub const UART_ICR_FEIC: u32 = 128;
pub const UART_ICR_FEIC_BITN: u32 = 7;
pub const UART_ICR_FEIC_M: u32 = 128;
pub const UART_ICR_FEIC_S: u32 = 7;
pub const UART_ICR_RTIC: u32 = 64;
pub const UART_ICR_RTIC_BITN: u32 = 6;
pub const UART_ICR_RTIC_M: u32 = 64;
pub const UART_ICR_RTIC_S: u32 = 6;
pub const UART_ICR_TXIC: u32 = 32;
pub const UART_ICR_TXIC_BITN: u32 = 5;
pub const UART_ICR_TXIC_M: u32 = 32;
pub const UART_ICR_TXIC_S: u32 = 5;
pub const UART_ICR_RXIC: u32 = 16;
pub const UART_ICR_RXIC_BITN: u32 = 4;
pub const UART_ICR_RXIC_M: u32 = 16;
pub const UART_ICR_RXIC_S: u32 = 4;
pub const UART_ICR_CTSMIC: u32 = 2;
pub const UART_ICR_CTSMIC_BITN: u32 = 1;
pub const UART_ICR_CTSMIC_M: u32 = 2;
pub const UART_ICR_CTSMIC_S: u32 = 1;
pub const UART_DMACTL_DMAONERR: u32 = 4;
pub const UART_DMACTL_DMAONERR_BITN: u32 = 2;
pub const UART_DMACTL_DMAONERR_M: u32 = 4;
pub const UART_DMACTL_DMAONERR_S: u32 = 2;
pub const UART_DMACTL_TXDMAE: u32 = 2;
pub const UART_DMACTL_TXDMAE_BITN: u32 = 1;
pub const UART_DMACTL_TXDMAE_M: u32 = 2;
pub const UART_DMACTL_TXDMAE_S: u32 = 1;
pub const UART_DMACTL_RXDMAE: u32 = 1;
pub const UART_DMACTL_RXDMAE_BITN: u32 = 0;
pub const UART_DMACTL_RXDMAE_M: u32 = 1;
pub const UART_DMACTL_RXDMAE_S: u32 = 0;
pub const FLASHMEM_BASE: u32 = 0;
pub const BROM_BASE: u32 = 268435456;
pub const GPRAM_BASE: u32 = 285212672;
pub const SRAM_BASE: u32 = 536870912;
pub const RFC_RAM_BASE: u32 = 553648128;
pub const SSI0_BASE: u32 = 1073741824;
pub const UART0_BASE: u32 = 1073745920;
pub const I2C0_BASE: u32 = 1073750016;
pub const SSI1_BASE: u32 = 1073774592;
pub const GPT0_BASE: u32 = 1073807360;
pub const GPT1_BASE: u32 = 1073811456;
pub const GPT2_BASE: u32 = 1073815552;
pub const GPT3_BASE: u32 = 1073819648;
pub const UDMA0_BASE: u32 = 1073872896;
pub const I2S0_BASE: u32 = 1073876992;
pub const GPIO_BASE: u32 = 1073881088;
pub const CRYPTO_BASE: u32 = 1073889280;
pub const TRNG_BASE: u32 = 1073905664;
pub const FLASH_BASE: u32 = 1073938432;
pub const VIMS_BASE: u32 = 1073954816;
pub const RFC_PWR_BASE: u32 = 1074003968;
pub const RFC_DBELL_BASE: u32 = 1074008064;
pub const RFC_RAT_BASE: u32 = 1074016256;
pub const RFC_FSCA_BASE: u32 = 1074020352;
pub const WDT_BASE: u32 = 1074266112;
pub const IOC_BASE: u32 = 1074270208;
pub const PRCM_BASE: u32 = 1074274304;
pub const EVENT_BASE: u32 = 1074278400;
pub const SMPH_BASE: u32 = 1074282496;
pub const ADI2_BASE: u32 = 1074290688;
pub const ADI3_BASE: u32 = 1074291200;
pub const AON_SYSCTL_BASE: u32 = 1074331648;
pub const AON_WUC_BASE: u32 = 1074335744;
pub const AON_RTC_BASE: u32 = 1074339840;
pub const AON_EVENT_BASE: u32 = 1074343936;
pub const AON_IOC_BASE: u32 = 1074348032;
pub const AON_BATMON_BASE: u32 = 1074352128;
pub const AUX_AIODIO0_BASE: u32 = 1074532352;
pub const AUX_AIODIO1_BASE: u32 = 1074536448;
pub const AUX_TDC_BASE: u32 = 1074544640;
pub const AUX_EVCTL_BASE: u32 = 1074548736;
pub const AUX_WUC_BASE: u32 = 1074552832;
pub const AUX_TIMER_BASE: u32 = 1074556928;
pub const AUX_SMPH_BASE: u32 = 1074561024;
pub const AUX_ANAIF_BASE: u32 = 1074565120;
pub const AUX_DDI0_OSC_BASE: u32 = 1074569216;
pub const AUX_ADI4_BASE: u32 = 1074573312;
pub const AUX_RAM_BASE: u32 = 1074659328;
pub const AUX_SCE_BASE: u32 = 1074663424;
pub const FLASH_CFG_BASE: u32 = 1342177280;
pub const FCFG1_BASE: u32 = 1342181376;
pub const FCFG2_BASE: u32 = 1342185472;
pub const CCFG_BASE: u32 = 1342189568;
pub const CCFG_BASE_DEFAULT: u32 = 1342189568;
pub const SSI0_NONBUF_BASE: u32 = 1610612736;
pub const UART0_NONBUF_BASE: u32 = 1610616832;
pub const I2C0_NONBUF_BASE: u32 = 1610620928;
pub const SSI1_NONBUF_BASE: u32 = 1610645504;
pub const GPT0_NONBUF_BASE: u32 = 1610678272;
pub const GPT1_NONBUF_BASE: u32 = 1610682368;
pub const GPT2_NONBUF_BASE: u32 = 1610686464;
pub const GPT3_NONBUF_BASE: u32 = 1610690560;
pub const UDMA0_NONBUF_BASE: u32 = 1610743808;
pub const I2S0_NONBUF_BASE: u32 = 1610747904;
pub const GPIO_NONBUF_BASE: u32 = 1610752000;
pub const CRYPTO_NONBUF_BASE: u32 = 1610760192;
pub const TRNG_NONBUF_BASE: u32 = 1610776576;
pub const FLASH_NONBUF_BASE: u32 = 1610809344;
pub const VIMS_NONBUF_BASE: u32 = 1610825728;
pub const RFC_PWR_NONBUF_BASE: u32 = 1610874880;
pub const RFC_DBELL_NONBUF_BASE: u32 = 1610878976;
pub const RFC_RAT_NONBUF_BASE: u32 = 1610887168;
pub const RFC_FSCA_NONBUF_BASE: u32 = 1610891264;
pub const WDT_NONBUF_BASE: u32 = 1611137024;
pub const IOC_NONBUF_BASE: u32 = 1611141120;
pub const PRCM_NONBUF_BASE: u32 = 1611145216;
pub const EVENT_NONBUF_BASE: u32 = 1611149312;
pub const SMPH_NONBUF_BASE: u32 = 1611153408;
pub const ADI2_NONBUF_BASE: u32 = 1611161600;
pub const ADI3_NONBUF_BASE: u32 = 1611162112;
pub const AON_SYSCTL_NONBUF_BASE: u32 = 1611202560;
pub const AON_WUC_NONBUF_BASE: u32 = 1611206656;
pub const AON_RTC_NONBUF_BASE: u32 = 1611210752;
pub const AON_EVENT_NONBUF_BASE: u32 = 1611214848;
pub const AON_IOC_NONBUF_BASE: u32 = 1611218944;
pub const AON_BATMON_NONBUF_BASE: u32 = 1611223040;
pub const AUX_AIODIO0_NONBUF_BASE: u32 = 1611403264;
pub const AUX_AIODIO1_NONBUF_BASE: u32 = 1611407360;
pub const AUX_TDC_NONBUF_BASE: u32 = 1611415552;
pub const AUX_EVCTL_NONBUF_BASE: u32 = 1611419648;
pub const AUX_WUC_NONBUF_BASE: u32 = 1611423744;
pub const AUX_TIMER_NONBUF_BASE: u32 = 1611427840;
pub const AUX_SMPH_NONBUF_BASE: u32 = 1611431936;
pub const AUX_ANAIF_NONBUF_BASE: u32 = 1611436032;
pub const AUX_DDI0_OSC_NONBUF_BASE: u32 = 1611440128;
pub const AUX_ADI4_NONBUF_BASE: u32 = 1611444224;
pub const AUX_RAM_NONBUF_BASE: u32 = 1611530240;
pub const AUX_SCE_NONBUF_BASE: u32 = 1611534336;
pub const FLASHMEM_ALIAS_BASE: u32 = 2684354560;
pub const CPU_ITM_BASE: u32 = 3758096384;
pub const CPU_DWT_BASE: u32 = 3758100480;
pub const CPU_FPB_BASE: u32 = 3758104576;
pub const CPU_SCS_BASE: u32 = 3758153728;
pub const CPU_TPIU_BASE: u32 = 3758358528;
pub const CPU_TIPROP_BASE: u32 = 3759136768;
pub const CPU_ROM_TABLE_BASE: u32 = 3759140864;
pub const INT_NMI_FAULT: u32 = 2;
pub const INT_HARD_FAULT: u32 = 3;
pub const INT_MEMMANAGE_FAULT: u32 = 4;
pub const INT_BUS_FAULT: u32 = 5;
pub const INT_USAGE_FAULT: u32 = 6;
pub const INT_SVCALL: u32 = 11;
pub const INT_DEBUG: u32 = 12;
pub const INT_PENDSV: u32 = 14;
pub const INT_SYSTICK: u32 = 15;
pub const INT_AON_GPIO_EDGE: u32 = 16;
pub const INT_I2C_IRQ: u32 = 17;
pub const INT_RFC_CPE_1: u32 = 18;
pub const INT_AON_RTC_COMB: u32 = 20;
pub const INT_UART0_COMB: u32 = 21;
pub const INT_AUX_SWEV0: u32 = 22;
pub const INT_SSI0_COMB: u32 = 23;
pub const INT_SSI1_COMB: u32 = 24;
pub const INT_RFC_CPE_0: u32 = 25;
pub const INT_RFC_HW_COMB: u32 = 26;
pub const INT_RFC_CMD_ACK: u32 = 27;
pub const INT_I2S_IRQ: u32 = 28;
pub const INT_AUX_SWEV1: u32 = 29;
pub const INT_WDT_IRQ: u32 = 30;
pub const INT_GPT0A: u32 = 31;
pub const INT_GPT0B: u32 = 32;
pub const INT_GPT1A: u32 = 33;
pub const INT_GPT1B: u32 = 34;
pub const INT_GPT2A: u32 = 35;
pub const INT_GPT2B: u32 = 36;
pub const INT_GPT3A: u32 = 37;
pub const INT_GPT3B: u32 = 38;
pub const INT_CRYPTO_RESULT_AVAIL_IRQ: u32 = 39;
pub const INT_DMA_DONE_COMB: u32 = 40;
pub const INT_DMA_ERR: u32 = 41;
pub const INT_FLASH: u32 = 42;
pub const INT_SWEV0: u32 = 43;
pub const INT_AUX_COMB: u32 = 44;
pub const INT_AON_PROG0: u32 = 45;
pub const INT_PROG0: u32 = 46;
pub const INT_AUX_COMPA: u32 = 47;
pub const INT_AUX_ADC_IRQ: u32 = 48;
pub const INT_TRNG_IRQ: u32 = 49;
pub const NUM_INTERRUPTS: u32 = 50;
pub const NUM_PRIORITY_BITS: u32 = 3;
pub const NUM_PRIORITY: u32 = 8;
pub const INT_AON_AUX_SWEV0: u32 = 22;
pub const INT_AON_AUX_SWEV1: u32 = 29;
pub const ADI_O_DIR: u32 = 0;
pub const ADI_O_SET: u32 = 16;
pub const ADI_O_CLR: u32 = 32;
pub const ADI_O_MASK4B: u32 = 64;
pub const ADI_O_MASK8B: u32 = 96;
pub const ADI_O_MASK16B: u32 = 128;
pub const ADI_O_SLAVESTAT: u32 = 48;
pub const ADI_O_SLAVECONF: u32 = 56;
pub const ADI_SLAVESTAT_DI_REQ: u32 = 2;
pub const ADI_SLAVESTAT_DI_REQ_M: u32 = 2;
pub const ADI_SLAVESTAT_DI_REQ_S: u32 = 1;
pub const ADI_SLAVESTAT_DI_ACK: u32 = 1;
pub const ADI_SLAVESTAT_DI_ACK_M: u32 = 1;
pub const ADI_SLAVESTAT_DI_ACK_S: u32 = 0;
pub const ADI_SLAVECONF_CONFLOCK: u32 = 128;
pub const ADI_SLAVECONF_CONFLOCK_M: u32 = 128;
pub const ADI_SLAVECONF_CONFLOCK_S: u32 = 7;
pub const ADI_SLAVECONF_WAITFORACK: u32 = 4;
pub const ADI_SLAVECONF_WAITFORACK_M: u32 = 4;
pub const ADI_SLAVECONF_WAITFORACK_S: u32 = 2;
pub const ADI_SLAVECONF_ADICLKSPEED_M: u32 = 3;
pub const ADI_SLAVECONF_ADICLKSPEED_S: u32 = 0;
pub const ADI_O_DIR03: u32 = 0;
pub const ADI_O_DIR47: u32 = 4;
pub const ADI_O_DIR811: u32 = 8;
pub const ADI_O_DIR1215: u32 = 12;
pub const ADI_O_SET03: u32 = 16;
pub const ADI_O_SET47: u32 = 20;
pub const ADI_O_SET811: u32 = 24;
pub const ADI_O_SET1215: u32 = 28;
pub const ADI_O_CLR03: u32 = 32;
pub const ADI_O_CLR47: u32 = 36;
pub const ADI_O_CLR811: u32 = 40;
pub const ADI_O_CLR1215: u32 = 44;
pub const ADI_O_MASK4B01: u32 = 64;
pub const ADI_O_MASK4B23: u32 = 68;
pub const ADI_O_MASK4B45: u32 = 72;
pub const ADI_O_MASK4B67: u32 = 76;
pub const ADI_O_MASK4B89: u32 = 80;
pub const ADI_O_MASK4B1011: u32 = 84;
pub const ADI_O_MASK4B1213: u32 = 88;
pub const ADI_O_MASK4B1415: u32 = 92;
pub const ADI_O_MASK8B01: u32 = 96;
pub const ADI_O_MASK8B23: u32 = 100;
pub const ADI_O_MASK8B45: u32 = 104;
pub const ADI_O_MASK8B67: u32 = 108;
pub const ADI_O_MASK8B89: u32 = 112;
pub const ADI_O_MASK8B1011: u32 = 116;
pub const ADI_O_MASK8B1213: u32 = 120;
pub const ADI_O_MASK8B1415: u32 = 124;
pub const ADI_O_MASK16B01: u32 = 128;
pub const ADI_O_MASK16B23: u32 = 132;
pub const ADI_O_MASK16B45: u32 = 136;
pub const ADI_O_MASK16B67: u32 = 140;
pub const ADI_O_MASK16B89: u32 = 144;
pub const ADI_O_MASK16B1011: u32 = 148;
pub const ADI_O_MASK16B1213: u32 = 152;
pub const ADI_O_MASK16B1415: u32 = 156;
pub const ADI_DIR03_B3_M: u32 = 4278190080;
pub const ADI_DIR03_B3_S: u32 = 24;
pub const ADI_DIR03_B2_M: u32 = 16711680;
pub const ADI_DIR03_B2_S: u32 = 16;
pub const ADI_DIR03_B1_M: u32 = 65280;
pub const ADI_DIR03_B1_S: u32 = 8;
pub const ADI_DIR03_B0_M: u32 = 255;
pub const ADI_DIR03_B0_S: u32 = 0;
pub const ADI_DIR47_B3_M: u32 = 4278190080;
pub const ADI_DIR47_B3_S: u32 = 24;
pub const ADI_DIR47_B2_M: u32 = 16711680;
pub const ADI_DIR47_B2_S: u32 = 16;
pub const ADI_DIR47_B1_M: u32 = 65280;
pub const ADI_DIR47_B1_S: u32 = 8;
pub const ADI_DIR47_B0_M: u32 = 255;
pub const ADI_DIR47_B0_S: u32 = 0;
pub const ADI_DIR811_B3_M: u32 = 4278190080;
pub const ADI_DIR811_B3_S: u32 = 24;
pub const ADI_DIR811_B2_M: u32 = 16711680;
pub const ADI_DIR811_B2_S: u32 = 16;
pub const ADI_DIR811_B1_M: u32 = 65280;
pub const ADI_DIR811_B1_S: u32 = 8;
pub const ADI_DIR811_B0_M: u32 = 255;
pub const ADI_DIR811_B0_S: u32 = 0;
pub const ADI_DIR1215_B3_M: u32 = 4278190080;
pub const ADI_DIR1215_B3_S: u32 = 24;
pub const ADI_DIR1215_B2_M: u32 = 16711680;
pub const ADI_DIR1215_B2_S: u32 = 16;
pub const ADI_DIR1215_B1_M: u32 = 65280;
pub const ADI_DIR1215_B1_S: u32 = 8;
pub const ADI_DIR1215_B0_M: u32 = 255;
pub const ADI_DIR1215_B0_S: u32 = 0;
pub const ADI_SET03_S3_M: u32 = 4278190080;
pub const ADI_SET03_S3_S: u32 = 24;
pub const ADI_SET03_S2_M: u32 = 16711680;
pub const ADI_SET03_S2_S: u32 = 16;
pub const ADI_SET03_S1_M: u32 = 65280;
pub const ADI_SET03_S1_S: u32 = 8;
pub const ADI_SET03_S0_M: u32 = 255;
pub const ADI_SET03_S0_S: u32 = 0;
pub const ADI_SET47_S3_M: u32 = 4278190080;
pub const ADI_SET47_S3_S: u32 = 24;
pub const ADI_SET47_S2_M: u32 = 16711680;
pub const ADI_SET47_S2_S: u32 = 16;
pub const ADI_SET47_S1_M: u32 = 65280;
pub const ADI_SET47_S1_S: u32 = 8;
pub const ADI_SET47_S0_M: u32 = 255;
pub const ADI_SET47_S0_S: u32 = 0;
pub const ADI_SET811_S3_M: u32 = 4278190080;
pub const ADI_SET811_S3_S: u32 = 24;
pub const ADI_SET811_S2_M: u32 = 16711680;
pub const ADI_SET811_S2_S: u32 = 16;
pub const ADI_SET811_S1_M: u32 = 65280;
pub const ADI_SET811_S1_S: u32 = 8;
pub const ADI_SET811_S0_M: u32 = 255;
pub const ADI_SET811_S0_S: u32 = 0;
pub const ADI_SET1215_S3_M: u32 = 4278190080;
pub const ADI_SET1215_S3_S: u32 = 24;
pub const ADI_SET1215_S2_M: u32 = 16711680;
pub const ADI_SET1215_S2_S: u32 = 16;
pub const ADI_SET1215_S1_M: u32 = 65280;
pub const ADI_SET1215_S1_S: u32 = 8;
pub const ADI_SET1215_S0_M: u32 = 255;
pub const ADI_SET1215_S0_S: u32 = 0;
pub const ADI_CLR03_S3_M: u32 = 4278190080;
pub const ADI_CLR03_S3_S: u32 = 24;
pub const ADI_CLR03_S2_M: u32 = 16711680;
pub const ADI_CLR03_S2_S: u32 = 16;
pub const ADI_CLR03_S1_M: u32 = 65280;
pub const ADI_CLR03_S1_S: u32 = 8;
pub const ADI_CLR03_S0_M: u32 = 255;
pub const ADI_CLR03_S0_S: u32 = 0;
pub const ADI_CLR47_S3_M: u32 = 4278190080;
pub const ADI_CLR47_S3_S: u32 = 24;
pub const ADI_CLR47_S2_M: u32 = 16711680;
pub const ADI_CLR47_S2_S: u32 = 16;
pub const ADI_CLR47_S1_M: u32 = 65280;
pub const ADI_CLR47_S1_S: u32 = 8;
pub const ADI_CLR47_S0_M: u32 = 255;
pub const ADI_CLR47_S0_S: u32 = 0;
pub const ADI_CLR811_S3_M: u32 = 4278190080;
pub const ADI_CLR811_S3_S: u32 = 24;
pub const ADI_CLR811_S2_M: u32 = 16711680;
pub const ADI_CLR811_S2_S: u32 = 16;
pub const ADI_CLR811_S1_M: u32 = 65280;
pub const ADI_CLR811_S1_S: u32 = 8;
pub const ADI_CLR811_S0_M: u32 = 255;
pub const ADI_CLR811_S0_S: u32 = 0;
pub const ADI_CLR1215_S3_M: u32 = 4278190080;
pub const ADI_CLR1215_S3_S: u32 = 24;
pub const ADI_CLR1215_S2_M: u32 = 16711680;
pub const ADI_CLR1215_S2_S: u32 = 16;
pub const ADI_CLR1215_S1_M: u32 = 65280;
pub const ADI_CLR1215_S1_S: u32 = 8;
pub const ADI_CLR1215_S0_M: u32 = 255;
pub const ADI_CLR1215_S0_S: u32 = 0;
pub const ADI_MASK4B01_M1H_M: u32 = 4026531840;
pub const ADI_MASK4B01_M1H_S: u32 = 28;
pub const ADI_MASK4B01_D1H_M: u32 = 251658240;
pub const ADI_MASK4B01_D1H_S: u32 = 24;
pub const ADI_MASK4B01_M1L_M: u32 = 15728640;
pub const ADI_MASK4B01_M1L_S: u32 = 20;
pub const ADI_MASK4B01_D1L_M: u32 = 983040;
pub const ADI_MASK4B01_D1L_S: u32 = 16;
pub const ADI_MASK4B01_M0H_M: u32 = 61440;
pub const ADI_MASK4B01_M0H_S: u32 = 12;
pub const ADI_MASK4B01_D0H_M: u32 = 3840;
pub const ADI_MASK4B01_D0H_S: u32 = 8;
pub const ADI_MASK4B01_M0L_M: u32 = 240;
pub const ADI_MASK4B01_M0L_S: u32 = 4;
pub const ADI_MASK4B01_D0L_M: u32 = 15;
pub const ADI_MASK4B01_D0L_S: u32 = 0;
pub const ADI_MASK4B23_M1H_M: u32 = 4026531840;
pub const ADI_MASK4B23_M1H_S: u32 = 28;
pub const ADI_MASK4B23_D1H_M: u32 = 251658240;
pub const ADI_MASK4B23_D1H_S: u32 = 24;
pub const ADI_MASK4B23_M1L_M: u32 = 15728640;
pub const ADI_MASK4B23_M1L_S: u32 = 20;
pub const ADI_MASK4B23_D1L_M: u32 = 983040;
pub const ADI_MASK4B23_D1L_S: u32 = 16;
pub const ADI_MASK4B23_M0H_M: u32 = 61440;
pub const ADI_MASK4B23_M0H_S: u32 = 12;
pub const ADI_MASK4B23_D0H_M: u32 = 3840;
pub const ADI_MASK4B23_D0H_S: u32 = 8;
pub const ADI_MASK4B23_M0L_M: u32 = 240;
pub const ADI_MASK4B23_M0L_S: u32 = 4;
pub const ADI_MASK4B23_D0L_M: u32 = 15;
pub const ADI_MASK4B23_D0L_S: u32 = 0;
pub const ADI_MASK4B45_M1H_M: u32 = 4026531840;
pub const ADI_MASK4B45_M1H_S: u32 = 28;
pub const ADI_MASK4B45_D1H_M: u32 = 251658240;
pub const ADI_MASK4B45_D1H_S: u32 = 24;
pub const ADI_MASK4B45_M1L_M: u32 = 15728640;
pub const ADI_MASK4B45_M1L_S: u32 = 20;
pub const ADI_MASK4B45_D1L_M: u32 = 983040;
pub const ADI_MASK4B45_D1L_S: u32 = 16;
pub const ADI_MASK4B45_M0H_M: u32 = 61440;
pub const ADI_MASK4B45_M0H_S: u32 = 12;
pub const ADI_MASK4B45_D0H_M: u32 = 3840;
pub const ADI_MASK4B45_D0H_S: u32 = 8;
pub const ADI_MASK4B45_M0L_M: u32 = 240;
pub const ADI_MASK4B45_M0L_S: u32 = 4;
pub const ADI_MASK4B45_D0L_M: u32 = 15;
pub const ADI_MASK4B45_D0L_S: u32 = 0;
pub const ADI_MASK4B67_M1H_M: u32 = 4026531840;
pub const ADI_MASK4B67_M1H_S: u32 = 28;
pub const ADI_MASK4B67_D1H_M: u32 = 251658240;
pub const ADI_MASK4B67_D1H_S: u32 = 24;
pub const ADI_MASK4B67_M1L_M: u32 = 15728640;
pub const ADI_MASK4B67_M1L_S: u32 = 20;
pub const ADI_MASK4B67_D1L_M: u32 = 983040;
pub const ADI_MASK4B67_D1L_S: u32 = 16;
pub const ADI_MASK4B67_M0H_M: u32 = 61440;
pub const ADI_MASK4B67_M0H_S: u32 = 12;
pub const ADI_MASK4B67_D0H_M: u32 = 3840;
pub const ADI_MASK4B67_D0H_S: u32 = 8;
pub const ADI_MASK4B67_M0L_M: u32 = 240;
pub const ADI_MASK4B67_M0L_S: u32 = 4;
pub const ADI_MASK4B67_D0L_M: u32 = 15;
pub const ADI_MASK4B67_D0L_S: u32 = 0;
pub const ADI_MASK4B89_M1H_M: u32 = 4026531840;
pub const ADI_MASK4B89_M1H_S: u32 = 28;
pub const ADI_MASK4B89_D1H_M: u32 = 251658240;
pub const ADI_MASK4B89_D1H_S: u32 = 24;
pub const ADI_MASK4B89_M1L_M: u32 = 15728640;
pub const ADI_MASK4B89_M1L_S: u32 = 20;
pub const ADI_MASK4B89_D1L_M: u32 = 983040;
pub const ADI_MASK4B89_D1L_S: u32 = 16;
pub const ADI_MASK4B89_M0H_M: u32 = 61440;
pub const ADI_MASK4B89_M0H_S: u32 = 12;
pub const ADI_MASK4B89_D0H_M: u32 = 3840;
pub const ADI_MASK4B89_D0H_S: u32 = 8;
pub const ADI_MASK4B89_M0L_M: u32 = 240;
pub const ADI_MASK4B89_M0L_S: u32 = 4;
pub const ADI_MASK4B89_D0L_M: u32 = 15;
pub const ADI_MASK4B89_D0L_S: u32 = 0;
pub const ADI_MASK4B1011_M1H_M: u32 = 4026531840;
pub const ADI_MASK4B1011_M1H_S: u32 = 28;
pub const ADI_MASK4B1011_D1H_M: u32 = 251658240;
pub const ADI_MASK4B1011_D1H_S: u32 = 24;
pub const ADI_MASK4B1011_M1L_M: u32 = 15728640;
pub const ADI_MASK4B1011_M1L_S: u32 = 20;
pub const ADI_MASK4B1011_D1L_M: u32 = 983040;
pub const ADI_MASK4B1011_D1L_S: u32 = 16;
pub const ADI_MASK4B1011_M0H_M: u32 = 61440;
pub const ADI_MASK4B1011_M0H_S: u32 = 12;
pub const ADI_MASK4B1011_D0H_M: u32 = 3840;
pub const ADI_MASK4B1011_D0H_S: u32 = 8;
pub const ADI_MASK4B1011_M0L_M: u32 = 240;
pub const ADI_MASK4B1011_M0L_S: u32 = 4;
pub const ADI_MASK4B1011_D0L_M: u32 = 15;
pub const ADI_MASK4B1011_D0L_S: u32 = 0;
pub const ADI_MASK4B1213_M1H_M: u32 = 4026531840;
pub const ADI_MASK4B1213_M1H_S: u32 = 28;
pub const ADI_MASK4B1213_D1H_M: u32 = 251658240;
pub const ADI_MASK4B1213_D1H_S: u32 = 24;
pub const ADI_MASK4B1213_M1L_M: u32 = 15728640;
pub const ADI_MASK4B1213_M1L_S: u32 = 20;
pub const ADI_MASK4B1213_D1L_M: u32 = 983040;
pub const ADI_MASK4B1213_D1L_S: u32 = 16;
pub const ADI_MASK4B1213_M0H_M: u32 = 61440;
pub const ADI_MASK4B1213_M0H_S: u32 = 12;
pub const ADI_MASK4B1213_D0H_M: u32 = 3840;
pub const ADI_MASK4B1213_D0H_S: u32 = 8;
pub const ADI_MASK4B1213_M0L_M: u32 = 240;
pub const ADI_MASK4B1213_M0L_S: u32 = 4;
pub const ADI_MASK4B1213_D0L_M: u32 = 15;
pub const ADI_MASK4B1213_D0L_S: u32 = 0;
pub const ADI_MASK4B1415_M1H_M: u32 = 4026531840;
pub const ADI_MASK4B1415_M1H_S: u32 = 28;
pub const ADI_MASK4B1415_D1H_M: u32 = 251658240;
pub const ADI_MASK4B1415_D1H_S: u32 = 24;
pub const ADI_MASK4B1415_M1L_M: u32 = 15728640;
pub const ADI_MASK4B1415_M1L_S: u32 = 20;
pub const ADI_MASK4B1415_D1L_M: u32 = 983040;
pub const ADI_MASK4B1415_D1L_S: u32 = 16;
pub const ADI_MASK4B1415_M0H_M: u32 = 61440;
pub const ADI_MASK4B1415_M0H_S: u32 = 12;
pub const ADI_MASK4B1415_D0H_M: u32 = 3840;
pub const ADI_MASK4B1415_D0H_S: u32 = 8;
pub const ADI_MASK4B1415_M0L_M: u32 = 240;
pub const ADI_MASK4B1415_M0L_S: u32 = 4;
pub const ADI_MASK4B1415_D0L_M: u32 = 15;
pub const ADI_MASK4B1415_D0L_S: u32 = 0;
pub const ADI_MASK8B01_M1_M: u32 = 4278190080;
pub const ADI_MASK8B01_M1_S: u32 = 24;
pub const ADI_MASK8B01_D1_M: u32 = 16711680;
pub const ADI_MASK8B01_D1_S: u32 = 16;
pub const ADI_MASK8B01_M0_M: u32 = 65280;
pub const ADI_MASK8B01_M0_S: u32 = 8;
pub const ADI_MASK8B01_D0_M: u32 = 255;
pub const ADI_MASK8B01_D0_S: u32 = 0;
pub const ADI_MASK8B23_M1_M: u32 = 4278190080;
pub const ADI_MASK8B23_M1_S: u32 = 24;
pub const ADI_MASK8B23_D1_M: u32 = 16711680;
pub const ADI_MASK8B23_D1_S: u32 = 16;
pub const ADI_MASK8B23_M0_M: u32 = 65280;
pub const ADI_MASK8B23_M0_S: u32 = 8;
pub const ADI_MASK8B23_D0_M: u32 = 255;
pub const ADI_MASK8B23_D0_S: u32 = 0;
pub const ADI_MASK8B45_M1_M: u32 = 4278190080;
pub const ADI_MASK8B45_M1_S: u32 = 24;
pub const ADI_MASK8B45_D1_M: u32 = 16711680;
pub const ADI_MASK8B45_D1_S: u32 = 16;
pub const ADI_MASK8B45_M0_M: u32 = 65280;
pub const ADI_MASK8B45_M0_S: u32 = 8;
pub const ADI_MASK8B45_D0_M: u32 = 255;
pub const ADI_MASK8B45_D0_S: u32 = 0;
pub const ADI_MASK8B67_M1_M: u32 = 4278190080;
pub const ADI_MASK8B67_M1_S: u32 = 24;
pub const ADI_MASK8B67_D1_M: u32 = 16711680;
pub const ADI_MASK8B67_D1_S: u32 = 16;
pub const ADI_MASK8B67_M0_M: u32 = 65280;
pub const ADI_MASK8B67_M0_S: u32 = 8;
pub const ADI_MASK8B67_D0_M: u32 = 255;
pub const ADI_MASK8B67_D0_S: u32 = 0;
pub const ADI_MASK8B89_M1_M: u32 = 4278190080;
pub const ADI_MASK8B89_M1_S: u32 = 24;
pub const ADI_MASK8B89_D1_M: u32 = 16711680;
pub const ADI_MASK8B89_D1_S: u32 = 16;
pub const ADI_MASK8B89_M0_M: u32 = 65280;
pub const ADI_MASK8B89_M0_S: u32 = 8;
pub const ADI_MASK8B89_D0_M: u32 = 255;
pub const ADI_MASK8B89_D0_S: u32 = 0;
pub const ADI_MASK8B1011_M1_M: u32 = 4278190080;
pub const ADI_MASK8B1011_M1_S: u32 = 24;
pub const ADI_MASK8B1011_D1_M: u32 = 16711680;
pub const ADI_MASK8B1011_D1_S: u32 = 16;
pub const ADI_MASK8B1011_M0_M: u32 = 65280;
pub const ADI_MASK8B1011_M0_S: u32 = 8;
pub const ADI_MASK8B1011_D0_M: u32 = 255;
pub const ADI_MASK8B1011_D0_S: u32 = 0;
pub const ADI_MASK8B1213_M1_M: u32 = 4278190080;
pub const ADI_MASK8B1213_M1_S: u32 = 24;
pub const ADI_MASK8B1213_D1_M: u32 = 16711680;
pub const ADI_MASK8B1213_D1_S: u32 = 16;
pub const ADI_MASK8B1213_M0_M: u32 = 65280;
pub const ADI_MASK8B1213_M0_S: u32 = 8;
pub const ADI_MASK8B1213_D0_M: u32 = 255;
pub const ADI_MASK8B1213_D0_S: u32 = 0;
pub const ADI_MASK8B1415_M1_M: u32 = 4278190080;
pub const ADI_MASK8B1415_M1_S: u32 = 24;
pub const ADI_MASK8B1415_D1_M: u32 = 16711680;
pub const ADI_MASK8B1415_D1_S: u32 = 16;
pub const ADI_MASK8B1415_M0_M: u32 = 65280;
pub const ADI_MASK8B1415_M0_S: u32 = 8;
pub const ADI_MASK8B1415_D0_M: u32 = 255;
pub const ADI_MASK8B1415_D0_S: u32 = 0;
pub const ADI_MASK16B01_M_M: u32 = 4294901760;
pub const ADI_MASK16B01_M_S: u32 = 16;
pub const ADI_MASK16B01_D_M: u32 = 65535;
pub const ADI_MASK16B01_D_S: u32 = 0;
pub const ADI_MASK16B23_M_M: u32 = 4294901760;
pub const ADI_MASK16B23_M_S: u32 = 16;
pub const ADI_MASK16B23_D_M: u32 = 65535;
pub const ADI_MASK16B23_D_S: u32 = 0;
pub const ADI_MASK16B45_M_M: u32 = 4294901760;
pub const ADI_MASK16B45_M_S: u32 = 16;
pub const ADI_MASK16B45_D_M: u32 = 65535;
pub const ADI_MASK16B45_D_S: u32 = 0;
pub const ADI_MASK16B67_M_M: u32 = 4294901760;
pub const ADI_MASK16B67_M_S: u32 = 16;
pub const ADI_MASK16B67_D_M: u32 = 65535;
pub const ADI_MASK16B67_D_S: u32 = 0;
pub const ADI_MASK16B89_M_M: u32 = 4294901760;
pub const ADI_MASK16B89_M_S: u32 = 16;
pub const ADI_MASK16B89_D_M: u32 = 65535;
pub const ADI_MASK16B89_D_S: u32 = 0;
pub const ADI_MASK16B1011_M_M: u32 = 4294901760;
pub const ADI_MASK16B1011_M_S: u32 = 16;
pub const ADI_MASK16B1011_D_M: u32 = 65535;
pub const ADI_MASK16B1011_D_S: u32 = 0;
pub const ADI_MASK16B1213_M_M: u32 = 4294901760;
pub const ADI_MASK16B1213_M_S: u32 = 16;
pub const ADI_MASK16B1213_D_M: u32 = 65535;
pub const ADI_MASK16B1213_D_S: u32 = 0;
pub const ADI_MASK16B1415_M_M: u32 = 4294901760;
pub const ADI_MASK16B1415_M_S: u32 = 16;
pub const ADI_MASK16B1415_D_M: u32 = 65535;
pub const ADI_MASK16B1415_D_S: u32 = 0;
pub const DDI_O_DIR: u32 = 0;
pub const DDI_O_SET: u32 = 64;
pub const DDI_O_CLR: u32 = 128;
pub const DDI_O_MASK4B: u32 = 256;
pub const DDI_O_MASK8B: u32 = 384;
pub const DDI_O_MASK16B: u32 = 512;
pub const AUX_SMPH_O_SMPH0: u32 = 0;
pub const AUX_SMPH_O_SMPH1: u32 = 4;
pub const AUX_SMPH_O_SMPH2: u32 = 8;
pub const AUX_SMPH_O_SMPH3: u32 = 12;
pub const AUX_SMPH_O_SMPH4: u32 = 16;
pub const AUX_SMPH_O_SMPH5: u32 = 20;
pub const AUX_SMPH_O_SMPH6: u32 = 24;
pub const AUX_SMPH_O_SMPH7: u32 = 28;
pub const AUX_SMPH_O_AUTOTAKE: u32 = 32;
pub const AUX_SMPH_SMPH0_STAT: u32 = 1;
pub const AUX_SMPH_SMPH0_STAT_BITN: u32 = 0;
pub const AUX_SMPH_SMPH0_STAT_M: u32 = 1;
pub const AUX_SMPH_SMPH0_STAT_S: u32 = 0;
pub const AUX_SMPH_SMPH1_STAT: u32 = 1;
pub const AUX_SMPH_SMPH1_STAT_BITN: u32 = 0;
pub const AUX_SMPH_SMPH1_STAT_M: u32 = 1;
pub const AUX_SMPH_SMPH1_STAT_S: u32 = 0;
pub const AUX_SMPH_SMPH2_STAT: u32 = 1;
pub const AUX_SMPH_SMPH2_STAT_BITN: u32 = 0;
pub const AUX_SMPH_SMPH2_STAT_M: u32 = 1;
pub const AUX_SMPH_SMPH2_STAT_S: u32 = 0;
pub const AUX_SMPH_SMPH3_STAT: u32 = 1;
pub const AUX_SMPH_SMPH3_STAT_BITN: u32 = 0;
pub const AUX_SMPH_SMPH3_STAT_M: u32 = 1;
pub const AUX_SMPH_SMPH3_STAT_S: u32 = 0;
pub const AUX_SMPH_SMPH4_STAT: u32 = 1;
pub const AUX_SMPH_SMPH4_STAT_BITN: u32 = 0;
pub const AUX_SMPH_SMPH4_STAT_M: u32 = 1;
pub const AUX_SMPH_SMPH4_STAT_S: u32 = 0;
pub const AUX_SMPH_SMPH5_STAT: u32 = 1;
pub const AUX_SMPH_SMPH5_STAT_BITN: u32 = 0;
pub const AUX_SMPH_SMPH5_STAT_M: u32 = 1;
pub const AUX_SMPH_SMPH5_STAT_S: u32 = 0;
pub const AUX_SMPH_SMPH6_STAT: u32 = 1;
pub const AUX_SMPH_SMPH6_STAT_BITN: u32 = 0;
pub const AUX_SMPH_SMPH6_STAT_M: u32 = 1;
pub const AUX_SMPH_SMPH6_STAT_S: u32 = 0;
pub const AUX_SMPH_SMPH7_STAT: u32 = 1;
pub const AUX_SMPH_SMPH7_STAT_BITN: u32 = 0;
pub const AUX_SMPH_SMPH7_STAT_M: u32 = 1;
pub const AUX_SMPH_SMPH7_STAT_S: u32 = 0;
pub const AUX_SMPH_AUTOTAKE_SMPH_ID_W: u32 = 3;
pub const AUX_SMPH_AUTOTAKE_SMPH_ID_M: u32 = 7;
pub const AUX_SMPH_AUTOTAKE_SMPH_ID_S: u32 = 0;
pub const CPU_SCS_O_ICTR: u32 = 4;
pub const CPU_SCS_O_ACTLR: u32 = 8;
pub const CPU_SCS_O_STCSR: u32 = 16;
pub const CPU_SCS_O_STRVR: u32 = 20;
pub const CPU_SCS_O_STCVR: u32 = 24;
pub const CPU_SCS_O_STCR: u32 = 28;
pub const CPU_SCS_O_NVIC_ISER0: u32 = 256;
pub const CPU_SCS_O_NVIC_ISER1: u32 = 260;
pub const CPU_SCS_O_NVIC_ICER0: u32 = 384;
pub const CPU_SCS_O_NVIC_ICER1: u32 = 388;
pub const CPU_SCS_O_NVIC_ISPR0: u32 = 512;
pub const CPU_SCS_O_NVIC_ISPR1: u32 = 516;
pub const CPU_SCS_O_NVIC_ICPR0: u32 = 640;
pub const CPU_SCS_O_NVIC_ICPR1: u32 = 644;
pub const CPU_SCS_O_NVIC_IABR0: u32 = 768;
pub const CPU_SCS_O_NVIC_IABR1: u32 = 772;
pub const CPU_SCS_O_NVIC_IPR0: u32 = 1024;
pub const CPU_SCS_O_NVIC_IPR1: u32 = 1028;
pub const CPU_SCS_O_NVIC_IPR2: u32 = 1032;
pub const CPU_SCS_O_NVIC_IPR3: u32 = 1036;
pub const CPU_SCS_O_NVIC_IPR4: u32 = 1040;
pub const CPU_SCS_O_NVIC_IPR5: u32 = 1044;
pub const CPU_SCS_O_NVIC_IPR6: u32 = 1048;
pub const CPU_SCS_O_NVIC_IPR7: u32 = 1052;
pub const CPU_SCS_O_NVIC_IPR8: u32 = 1056;
pub const CPU_SCS_O_CPUID: u32 = 3328;
pub const CPU_SCS_O_ICSR: u32 = 3332;
pub const CPU_SCS_O_VTOR: u32 = 3336;
pub const CPU_SCS_O_AIRCR: u32 = 3340;
pub const CPU_SCS_O_SCR: u32 = 3344;
pub const CPU_SCS_O_CCR: u32 = 3348;
pub const CPU_SCS_O_SHPR1: u32 = 3352;
pub const CPU_SCS_O_SHPR2: u32 = 3356;
pub const CPU_SCS_O_SHPR3: u32 = 3360;
pub const CPU_SCS_O_SHCSR: u32 = 3364;
pub const CPU_SCS_O_CFSR: u32 = 3368;
pub const CPU_SCS_O_HFSR: u32 = 3372;
pub const CPU_SCS_O_DFSR: u32 = 3376;
pub const CPU_SCS_O_MMFAR: u32 = 3380;
pub const CPU_SCS_O_BFAR: u32 = 3384;
pub const CPU_SCS_O_AFSR: u32 = 3388;
pub const CPU_SCS_O_ID_PFR0: u32 = 3392;
pub const CPU_SCS_O_ID_PFR1: u32 = 3396;
pub const CPU_SCS_O_ID_DFR0: u32 = 3400;
pub const CPU_SCS_O_ID_AFR0: u32 = 3404;
pub const CPU_SCS_O_ID_MMFR0: u32 = 3408;
pub const CPU_SCS_O_ID_MMFR1: u32 = 3412;
pub const CPU_SCS_O_ID_MMFR2: u32 = 3416;
pub const CPU_SCS_O_ID_MMFR3: u32 = 3420;
pub const CPU_SCS_O_ID_ISAR0: u32 = 3424;
pub const CPU_SCS_O_ID_ISAR1: u32 = 3428;
pub const CPU_SCS_O_ID_ISAR2: u32 = 3432;
pub const CPU_SCS_O_ID_ISAR3: u32 = 3436;
pub const CPU_SCS_O_ID_ISAR4: u32 = 3440;
pub const CPU_SCS_O_CPACR: u32 = 3464;
pub const CPU_SCS_O_DHCSR: u32 = 3568;
pub const CPU_SCS_O_DCRSR: u32 = 3572;
pub const CPU_SCS_O_DCRDR: u32 = 3576;
pub const CPU_SCS_O_DEMCR: u32 = 3580;
pub const CPU_SCS_O_STIR: u32 = 3840;
pub const CPU_SCS_ICTR_INTLINESNUM_W: u32 = 3;
pub const CPU_SCS_ICTR_INTLINESNUM_M: u32 = 7;
pub const CPU_SCS_ICTR_INTLINESNUM_S: u32 = 0;
pub const CPU_SCS_ACTLR_DISFOLD: u32 = 4;
pub const CPU_SCS_ACTLR_DISFOLD_BITN: u32 = 2;
pub const CPU_SCS_ACTLR_DISFOLD_M: u32 = 4;
pub const CPU_SCS_ACTLR_DISFOLD_S: u32 = 2;
pub const CPU_SCS_ACTLR_DISDEFWBUF: u32 = 2;
pub const CPU_SCS_ACTLR_DISDEFWBUF_BITN: u32 = 1;
pub const CPU_SCS_ACTLR_DISDEFWBUF_M: u32 = 2;
pub const CPU_SCS_ACTLR_DISDEFWBUF_S: u32 = 1;
pub const CPU_SCS_ACTLR_DISMCYCINT: u32 = 1;
pub const CPU_SCS_ACTLR_DISMCYCINT_BITN: u32 = 0;
pub const CPU_SCS_ACTLR_DISMCYCINT_M: u32 = 1;
pub const CPU_SCS_ACTLR_DISMCYCINT_S: u32 = 0;
pub const CPU_SCS_STCSR_COUNTFLAG: u32 = 65536;
pub const CPU_SCS_STCSR_COUNTFLAG_BITN: u32 = 16;
pub const CPU_SCS_STCSR_COUNTFLAG_M: u32 = 65536;
pub const CPU_SCS_STCSR_COUNTFLAG_S: u32 = 16;
pub const CPU_SCS_STCSR_CLKSOURCE: u32 = 4;
pub const CPU_SCS_STCSR_CLKSOURCE_BITN: u32 = 2;
pub const CPU_SCS_STCSR_CLKSOURCE_M: u32 = 4;
pub const CPU_SCS_STCSR_CLKSOURCE_S: u32 = 2;
pub const CPU_SCS_STCSR_TICKINT: u32 = 2;
pub const CPU_SCS_STCSR_TICKINT_BITN: u32 = 1;
pub const CPU_SCS_STCSR_TICKINT_M: u32 = 2;
pub const CPU_SCS_STCSR_TICKINT_S: u32 = 1;
pub const CPU_SCS_STCSR_ENABLE: u32 = 1;
pub const CPU_SCS_STCSR_ENABLE_BITN: u32 = 0;
pub const CPU_SCS_STCSR_ENABLE_M: u32 = 1;
pub const CPU_SCS_STCSR_ENABLE_S: u32 = 0;
pub const CPU_SCS_STRVR_RELOAD_W: u32 = 24;
pub const CPU_SCS_STRVR_RELOAD_M: u32 = 16777215;
pub const CPU_SCS_STRVR_RELOAD_S: u32 = 0;
pub const CPU_SCS_STCVR_CURRENT_W: u32 = 24;
pub const CPU_SCS_STCVR_CURRENT_M: u32 = 16777215;
pub const CPU_SCS_STCVR_CURRENT_S: u32 = 0;
pub const CPU_SCS_STCR_NOREF: u32 = 2147483648;
pub const CPU_SCS_STCR_NOREF_BITN: u32 = 31;
pub const CPU_SCS_STCR_NOREF_M: u32 = 2147483648;
pub const CPU_SCS_STCR_NOREF_S: u32 = 31;
pub const CPU_SCS_STCR_SKEW: u32 = 1073741824;
pub const CPU_SCS_STCR_SKEW_BITN: u32 = 30;
pub const CPU_SCS_STCR_SKEW_M: u32 = 1073741824;
pub const CPU_SCS_STCR_SKEW_S: u32 = 30;
pub const CPU_SCS_STCR_TENMS_W: u32 = 24;
pub const CPU_SCS_STCR_TENMS_M: u32 = 16777215;
pub const CPU_SCS_STCR_TENMS_S: u32 = 0;
pub const CPU_SCS_NVIC_ISER0_SETENA31: u32 = 2147483648;
pub const CPU_SCS_NVIC_ISER0_SETENA31_BITN: u32 = 31;
pub const CPU_SCS_NVIC_ISER0_SETENA31_M: u32 = 2147483648;
pub const CPU_SCS_NVIC_ISER0_SETENA31_S: u32 = 31;
pub const CPU_SCS_NVIC_ISER0_SETENA30: u32 = 1073741824;
pub const CPU_SCS_NVIC_ISER0_SETENA30_BITN: u32 = 30;
pub const CPU_SCS_NVIC_ISER0_SETENA30_M: u32 = 1073741824;
pub const CPU_SCS_NVIC_ISER0_SETENA30_S: u32 = 30;
pub const CPU_SCS_NVIC_ISER0_SETENA29: u32 = 536870912;
pub const CPU_SCS_NVIC_ISER0_SETENA29_BITN: u32 = 29;
pub const CPU_SCS_NVIC_ISER0_SETENA29_M: u32 = 536870912;
pub const CPU_SCS_NVIC_ISER0_SETENA29_S: u32 = 29;
pub const CPU_SCS_NVIC_ISER0_SETENA28: u32 = 268435456;
pub const CPU_SCS_NVIC_ISER0_SETENA28_BITN: u32 = 28;
pub const CPU_SCS_NVIC_ISER0_SETENA28_M: u32 = 268435456;
pub const CPU_SCS_NVIC_ISER0_SETENA28_S: u32 = 28;
pub const CPU_SCS_NVIC_ISER0_SETENA27: u32 = 134217728;
pub const CPU_SCS_NVIC_ISER0_SETENA27_BITN: u32 = 27;
pub const CPU_SCS_NVIC_ISER0_SETENA27_M: u32 = 134217728;
pub const CPU_SCS_NVIC_ISER0_SETENA27_S: u32 = 27;
pub const CPU_SCS_NVIC_ISER0_SETENA26: u32 = 67108864;
pub const CPU_SCS_NVIC_ISER0_SETENA26_BITN: u32 = 26;
pub const CPU_SCS_NVIC_ISER0_SETENA26_M: u32 = 67108864;
pub const CPU_SCS_NVIC_ISER0_SETENA26_S: u32 = 26;
pub const CPU_SCS_NVIC_ISER0_SETENA25: u32 = 33554432;
pub const CPU_SCS_NVIC_ISER0_SETENA25_BITN: u32 = 25;
pub const CPU_SCS_NVIC_ISER0_SETENA25_M: u32 = 33554432;
pub const CPU_SCS_NVIC_ISER0_SETENA25_S: u32 = 25;
pub const CPU_SCS_NVIC_ISER0_SETENA24: u32 = 16777216;
pub const CPU_SCS_NVIC_ISER0_SETENA24_BITN: u32 = 24;
pub const CPU_SCS_NVIC_ISER0_SETENA24_M: u32 = 16777216;
pub const CPU_SCS_NVIC_ISER0_SETENA24_S: u32 = 24;
pub const CPU_SCS_NVIC_ISER0_SETENA23: u32 = 8388608;
pub const CPU_SCS_NVIC_ISER0_SETENA23_BITN: u32 = 23;
pub const CPU_SCS_NVIC_ISER0_SETENA23_M: u32 = 8388608;
pub const CPU_SCS_NVIC_ISER0_SETENA23_S: u32 = 23;
pub const CPU_SCS_NVIC_ISER0_SETENA22: u32 = 4194304;
pub const CPU_SCS_NVIC_ISER0_SETENA22_BITN: u32 = 22;
pub const CPU_SCS_NVIC_ISER0_SETENA22_M: u32 = 4194304;
pub const CPU_SCS_NVIC_ISER0_SETENA22_S: u32 = 22;
pub const CPU_SCS_NVIC_ISER0_SETENA21: u32 = 2097152;
pub const CPU_SCS_NVIC_ISER0_SETENA21_BITN: u32 = 21;
pub const CPU_SCS_NVIC_ISER0_SETENA21_M: u32 = 2097152;
pub const CPU_SCS_NVIC_ISER0_SETENA21_S: u32 = 21;
pub const CPU_SCS_NVIC_ISER0_SETENA20: u32 = 1048576;
pub const CPU_SCS_NVIC_ISER0_SETENA20_BITN: u32 = 20;
pub const CPU_SCS_NVIC_ISER0_SETENA20_M: u32 = 1048576;
pub const CPU_SCS_NVIC_ISER0_SETENA20_S: u32 = 20;
pub const CPU_SCS_NVIC_ISER0_SETENA19: u32 = 524288;
pub const CPU_SCS_NVIC_ISER0_SETENA19_BITN: u32 = 19;
pub const CPU_SCS_NVIC_ISER0_SETENA19_M: u32 = 524288;
pub const CPU_SCS_NVIC_ISER0_SETENA19_S: u32 = 19;
pub const CPU_SCS_NVIC_ISER0_SETENA18: u32 = 262144;
pub const CPU_SCS_NVIC_ISER0_SETENA18_BITN: u32 = 18;
pub const CPU_SCS_NVIC_ISER0_SETENA18_M: u32 = 262144;
pub const CPU_SCS_NVIC_ISER0_SETENA18_S: u32 = 18;
pub const CPU_SCS_NVIC_ISER0_SETENA17: u32 = 131072;
pub const CPU_SCS_NVIC_ISER0_SETENA17_BITN: u32 = 17;
pub const CPU_SCS_NVIC_ISER0_SETENA17_M: u32 = 131072;
pub const CPU_SCS_NVIC_ISER0_SETENA17_S: u32 = 17;
pub const CPU_SCS_NVIC_ISER0_SETENA16: u32 = 65536;
pub const CPU_SCS_NVIC_ISER0_SETENA16_BITN: u32 = 16;
pub const CPU_SCS_NVIC_ISER0_SETENA16_M: u32 = 65536;
pub const CPU_SCS_NVIC_ISER0_SETENA16_S: u32 = 16;
pub const CPU_SCS_NVIC_ISER0_SETENA15: u32 = 32768;
pub const CPU_SCS_NVIC_ISER0_SETENA15_BITN: u32 = 15;
pub const CPU_SCS_NVIC_ISER0_SETENA15_M: u32 = 32768;
pub const CPU_SCS_NVIC_ISER0_SETENA15_S: u32 = 15;
pub const CPU_SCS_NVIC_ISER0_SETENA14: u32 = 16384;
pub const CPU_SCS_NVIC_ISER0_SETENA14_BITN: u32 = 14;
pub const CPU_SCS_NVIC_ISER0_SETENA14_M: u32 = 16384;
pub const CPU_SCS_NVIC_ISER0_SETENA14_S: u32 = 14;
pub const CPU_SCS_NVIC_ISER0_SETENA13: u32 = 8192;
pub const CPU_SCS_NVIC_ISER0_SETENA13_BITN: u32 = 13;
pub const CPU_SCS_NVIC_ISER0_SETENA13_M: u32 = 8192;
pub const CPU_SCS_NVIC_ISER0_SETENA13_S: u32 = 13;
pub const CPU_SCS_NVIC_ISER0_SETENA12: u32 = 4096;
pub const CPU_SCS_NVIC_ISER0_SETENA12_BITN: u32 = 12;
pub const CPU_SCS_NVIC_ISER0_SETENA12_M: u32 = 4096;
pub const CPU_SCS_NVIC_ISER0_SETENA12_S: u32 = 12;
pub const CPU_SCS_NVIC_ISER0_SETENA11: u32 = 2048;
pub const CPU_SCS_NVIC_ISER0_SETENA11_BITN: u32 = 11;
pub const CPU_SCS_NVIC_ISER0_SETENA11_M: u32 = 2048;
pub const CPU_SCS_NVIC_ISER0_SETENA11_S: u32 = 11;
pub const CPU_SCS_NVIC_ISER0_SETENA10: u32 = 1024;
pub const CPU_SCS_NVIC_ISER0_SETENA10_BITN: u32 = 10;
pub const CPU_SCS_NVIC_ISER0_SETENA10_M: u32 = 1024;
pub const CPU_SCS_NVIC_ISER0_SETENA10_S: u32 = 10;
pub const CPU_SCS_NVIC_ISER0_SETENA9: u32 = 512;
pub const CPU_SCS_NVIC_ISER0_SETENA9_BITN: u32 = 9;
pub const CPU_SCS_NVIC_ISER0_SETENA9_M: u32 = 512;
pub const CPU_SCS_NVIC_ISER0_SETENA9_S: u32 = 9;
pub const CPU_SCS_NVIC_ISER0_SETENA8: u32 = 256;
pub const CPU_SCS_NVIC_ISER0_SETENA8_BITN: u32 = 8;
pub const CPU_SCS_NVIC_ISER0_SETENA8_M: u32 = 256;
pub const CPU_SCS_NVIC_ISER0_SETENA8_S: u32 = 8;
pub const CPU_SCS_NVIC_ISER0_SETENA7: u32 = 128;
pub const CPU_SCS_NVIC_ISER0_SETENA7_BITN: u32 = 7;
pub const CPU_SCS_NVIC_ISER0_SETENA7_M: u32 = 128;
pub const CPU_SCS_NVIC_ISER0_SETENA7_S: u32 = 7;
pub const CPU_SCS_NVIC_ISER0_SETENA6: u32 = 64;
pub const CPU_SCS_NVIC_ISER0_SETENA6_BITN: u32 = 6;
pub const CPU_SCS_NVIC_ISER0_SETENA6_M: u32 = 64;
pub const CPU_SCS_NVIC_ISER0_SETENA6_S: u32 = 6;
pub const CPU_SCS_NVIC_ISER0_SETENA5: u32 = 32;
pub const CPU_SCS_NVIC_ISER0_SETENA5_BITN: u32 = 5;
pub const CPU_SCS_NVIC_ISER0_SETENA5_M: u32 = 32;
pub const CPU_SCS_NVIC_ISER0_SETENA5_S: u32 = 5;
pub const CPU_SCS_NVIC_ISER0_SETENA4: u32 = 16;
pub const CPU_SCS_NVIC_ISER0_SETENA4_BITN: u32 = 4;
pub const CPU_SCS_NVIC_ISER0_SETENA4_M: u32 = 16;
pub const CPU_SCS_NVIC_ISER0_SETENA4_S: u32 = 4;
pub const CPU_SCS_NVIC_ISER0_SETENA3: u32 = 8;
pub const CPU_SCS_NVIC_ISER0_SETENA3_BITN: u32 = 3;
pub const CPU_SCS_NVIC_ISER0_SETENA3_M: u32 = 8;
pub const CPU_SCS_NVIC_ISER0_SETENA3_S: u32 = 3;
pub const CPU_SCS_NVIC_ISER0_SETENA2: u32 = 4;
pub const CPU_SCS_NVIC_ISER0_SETENA2_BITN: u32 = 2;
pub const CPU_SCS_NVIC_ISER0_SETENA2_M: u32 = 4;
pub const CPU_SCS_NVIC_ISER0_SETENA2_S: u32 = 2;
pub const CPU_SCS_NVIC_ISER0_SETENA1: u32 = 2;
pub const CPU_SCS_NVIC_ISER0_SETENA1_BITN: u32 = 1;
pub const CPU_SCS_NVIC_ISER0_SETENA1_M: u32 = 2;
pub const CPU_SCS_NVIC_ISER0_SETENA1_S: u32 = 1;
pub const CPU_SCS_NVIC_ISER0_SETENA0: u32 = 1;
pub const CPU_SCS_NVIC_ISER0_SETENA0_BITN: u32 = 0;
pub const CPU_SCS_NVIC_ISER0_SETENA0_M: u32 = 1;
pub const CPU_SCS_NVIC_ISER0_SETENA0_S: u32 = 0;
pub const CPU_SCS_NVIC_ISER1_SETENA33: u32 = 2;
pub const CPU_SCS_NVIC_ISER1_SETENA33_BITN: u32 = 1;
pub const CPU_SCS_NVIC_ISER1_SETENA33_M: u32 = 2;
pub const CPU_SCS_NVIC_ISER1_SETENA33_S: u32 = 1;
pub const CPU_SCS_NVIC_ISER1_SETENA32: u32 = 1;
pub const CPU_SCS_NVIC_ISER1_SETENA32_BITN: u32 = 0;
pub const CPU_SCS_NVIC_ISER1_SETENA32_M: u32 = 1;
pub const CPU_SCS_NVIC_ISER1_SETENA32_S: u32 = 0;
pub const CPU_SCS_NVIC_ICER0_CLRENA31: u32 = 2147483648;
pub const CPU_SCS_NVIC_ICER0_CLRENA31_BITN: u32 = 31;
pub const CPU_SCS_NVIC_ICER0_CLRENA31_M: u32 = 2147483648;
pub const CPU_SCS_NVIC_ICER0_CLRENA31_S: u32 = 31;
pub const CPU_SCS_NVIC_ICER0_CLRENA30: u32 = 1073741824;
pub const CPU_SCS_NVIC_ICER0_CLRENA30_BITN: u32 = 30;
pub const CPU_SCS_NVIC_ICER0_CLRENA30_M: u32 = 1073741824;
pub const CPU_SCS_NVIC_ICER0_CLRENA30_S: u32 = 30;
pub const CPU_SCS_NVIC_ICER0_CLRENA29: u32 = 536870912;
pub const CPU_SCS_NVIC_ICER0_CLRENA29_BITN: u32 = 29;
pub const CPU_SCS_NVIC_ICER0_CLRENA29_M: u32 = 536870912;
pub const CPU_SCS_NVIC_ICER0_CLRENA29_S: u32 = 29;
pub const CPU_SCS_NVIC_ICER0_CLRENA28: u32 = 268435456;
pub const CPU_SCS_NVIC_ICER0_CLRENA28_BITN: u32 = 28;
pub const CPU_SCS_NVIC_ICER0_CLRENA28_M: u32 = 268435456;
pub const CPU_SCS_NVIC_ICER0_CLRENA28_S: u32 = 28;
pub const CPU_SCS_NVIC_ICER0_CLRENA27: u32 = 134217728;
pub const CPU_SCS_NVIC_ICER0_CLRENA27_BITN: u32 = 27;
pub const CPU_SCS_NVIC_ICER0_CLRENA27_M: u32 = 134217728;
pub const CPU_SCS_NVIC_ICER0_CLRENA27_S: u32 = 27;
pub const CPU_SCS_NVIC_ICER0_CLRENA26: u32 = 67108864;
pub const CPU_SCS_NVIC_ICER0_CLRENA26_BITN: u32 = 26;
pub const CPU_SCS_NVIC_ICER0_CLRENA26_M: u32 = 67108864;
pub const CPU_SCS_NVIC_ICER0_CLRENA26_S: u32 = 26;
pub const CPU_SCS_NVIC_ICER0_CLRENA25: u32 = 33554432;
pub const CPU_SCS_NVIC_ICER0_CLRENA25_BITN: u32 = 25;
pub const CPU_SCS_NVIC_ICER0_CLRENA25_M: u32 = 33554432;
pub const CPU_SCS_NVIC_ICER0_CLRENA25_S: u32 = 25;
pub const CPU_SCS_NVIC_ICER0_CLRENA24: u32 = 16777216;
pub const CPU_SCS_NVIC_ICER0_CLRENA24_BITN: u32 = 24;
pub const CPU_SCS_NVIC_ICER0_CLRENA24_M: u32 = 16777216;
pub const CPU_SCS_NVIC_ICER0_CLRENA24_S: u32 = 24;
pub const CPU_SCS_NVIC_ICER0_CLRENA23: u32 = 8388608;
pub const CPU_SCS_NVIC_ICER0_CLRENA23_BITN: u32 = 23;
pub const CPU_SCS_NVIC_ICER0_CLRENA23_M: u32 = 8388608;
pub const CPU_SCS_NVIC_ICER0_CLRENA23_S: u32 = 23;
pub const CPU_SCS_NVIC_ICER0_CLRENA22: u32 = 4194304;
pub const CPU_SCS_NVIC_ICER0_CLRENA22_BITN: u32 = 22;
pub const CPU_SCS_NVIC_ICER0_CLRENA22_M: u32 = 4194304;
pub const CPU_SCS_NVIC_ICER0_CLRENA22_S: u32 = 22;
pub const CPU_SCS_NVIC_ICER0_CLRENA21: u32 = 2097152;
pub const CPU_SCS_NVIC_ICER0_CLRENA21_BITN: u32 = 21;
pub const CPU_SCS_NVIC_ICER0_CLRENA21_M: u32 = 2097152;
pub const CPU_SCS_NVIC_ICER0_CLRENA21_S: u32 = 21;
pub const CPU_SCS_NVIC_ICER0_CLRENA20: u32 = 1048576;
pub const CPU_SCS_NVIC_ICER0_CLRENA20_BITN: u32 = 20;
pub const CPU_SCS_NVIC_ICER0_CLRENA20_M: u32 = 1048576;
pub const CPU_SCS_NVIC_ICER0_CLRENA20_S: u32 = 20;
pub const CPU_SCS_NVIC_ICER0_CLRENA19: u32 = 524288;
pub const CPU_SCS_NVIC_ICER0_CLRENA19_BITN: u32 = 19;
pub const CPU_SCS_NVIC_ICER0_CLRENA19_M: u32 = 524288;
pub const CPU_SCS_NVIC_ICER0_CLRENA19_S: u32 = 19;
pub const CPU_SCS_NVIC_ICER0_CLRENA18: u32 = 262144;
pub const CPU_SCS_NVIC_ICER0_CLRENA18_BITN: u32 = 18;
pub const CPU_SCS_NVIC_ICER0_CLRENA18_M: u32 = 262144;
pub const CPU_SCS_NVIC_ICER0_CLRENA18_S: u32 = 18;
pub const CPU_SCS_NVIC_ICER0_CLRENA17: u32 = 131072;
pub const CPU_SCS_NVIC_ICER0_CLRENA17_BITN: u32 = 17;
pub const CPU_SCS_NVIC_ICER0_CLRENA17_M: u32 = 131072;
pub const CPU_SCS_NVIC_ICER0_CLRENA17_S: u32 = 17;
pub const CPU_SCS_NVIC_ICER0_CLRENA16: u32 = 65536;
pub const CPU_SCS_NVIC_ICER0_CLRENA16_BITN: u32 = 16;
pub const CPU_SCS_NVIC_ICER0_CLRENA16_M: u32 = 65536;
pub const CPU_SCS_NVIC_ICER0_CLRENA16_S: u32 = 16;
pub const CPU_SCS_NVIC_ICER0_CLRENA15: u32 = 32768;
pub const CPU_SCS_NVIC_ICER0_CLRENA15_BITN: u32 = 15;
pub const CPU_SCS_NVIC_ICER0_CLRENA15_M: u32 = 32768;
pub const CPU_SCS_NVIC_ICER0_CLRENA15_S: u32 = 15;
pub const CPU_SCS_NVIC_ICER0_CLRENA14: u32 = 16384;
pub const CPU_SCS_NVIC_ICER0_CLRENA14_BITN: u32 = 14;
pub const CPU_SCS_NVIC_ICER0_CLRENA14_M: u32 = 16384;
pub const CPU_SCS_NVIC_ICER0_CLRENA14_S: u32 = 14;
pub const CPU_SCS_NVIC_ICER0_CLRENA13: u32 = 8192;
pub const CPU_SCS_NVIC_ICER0_CLRENA13_BITN: u32 = 13;
pub const CPU_SCS_NVIC_ICER0_CLRENA13_M: u32 = 8192;
pub const CPU_SCS_NVIC_ICER0_CLRENA13_S: u32 = 13;
pub const CPU_SCS_NVIC_ICER0_CLRENA12: u32 = 4096;
pub const CPU_SCS_NVIC_ICER0_CLRENA12_BITN: u32 = 12;
pub const CPU_SCS_NVIC_ICER0_CLRENA12_M: u32 = 4096;
pub const CPU_SCS_NVIC_ICER0_CLRENA12_S: u32 = 12;
pub const CPU_SCS_NVIC_ICER0_CLRENA11: u32 = 2048;
pub const CPU_SCS_NVIC_ICER0_CLRENA11_BITN: u32 = 11;
pub const CPU_SCS_NVIC_ICER0_CLRENA11_M: u32 = 2048;
pub const CPU_SCS_NVIC_ICER0_CLRENA11_S: u32 = 11;
pub const CPU_SCS_NVIC_ICER0_CLRENA10: u32 = 1024;
pub const CPU_SCS_NVIC_ICER0_CLRENA10_BITN: u32 = 10;
pub const CPU_SCS_NVIC_ICER0_CLRENA10_M: u32 = 1024;
pub const CPU_SCS_NVIC_ICER0_CLRENA10_S: u32 = 10;
pub const CPU_SCS_NVIC_ICER0_CLRENA9: u32 = 512;
pub const CPU_SCS_NVIC_ICER0_CLRENA9_BITN: u32 = 9;
pub const CPU_SCS_NVIC_ICER0_CLRENA9_M: u32 = 512;
pub const CPU_SCS_NVIC_ICER0_CLRENA9_S: u32 = 9;
pub const CPU_SCS_NVIC_ICER0_CLRENA8: u32 = 256;
pub const CPU_SCS_NVIC_ICER0_CLRENA8_BITN: u32 = 8;
pub const CPU_SCS_NVIC_ICER0_CLRENA8_M: u32 = 256;
pub const CPU_SCS_NVIC_ICER0_CLRENA8_S: u32 = 8;
pub const CPU_SCS_NVIC_ICER0_CLRENA7: u32 = 128;
pub const CPU_SCS_NVIC_ICER0_CLRENA7_BITN: u32 = 7;
pub const CPU_SCS_NVIC_ICER0_CLRENA7_M: u32 = 128;
pub const CPU_SCS_NVIC_ICER0_CLRENA7_S: u32 = 7;
pub const CPU_SCS_NVIC_ICER0_CLRENA6: u32 = 64;
pub const CPU_SCS_NVIC_ICER0_CLRENA6_BITN: u32 = 6;
pub const CPU_SCS_NVIC_ICER0_CLRENA6_M: u32 = 64;
pub const CPU_SCS_NVIC_ICER0_CLRENA6_S: u32 = 6;
pub const CPU_SCS_NVIC_ICER0_CLRENA5: u32 = 32;
pub const CPU_SCS_NVIC_ICER0_CLRENA5_BITN: u32 = 5;
pub const CPU_SCS_NVIC_ICER0_CLRENA5_M: u32 = 32;
pub const CPU_SCS_NVIC_ICER0_CLRENA5_S: u32 = 5;
pub const CPU_SCS_NVIC_ICER0_CLRENA4: u32 = 16;
pub const CPU_SCS_NVIC_ICER0_CLRENA4_BITN: u32 = 4;
pub const CPU_SCS_NVIC_ICER0_CLRENA4_M: u32 = 16;
pub const CPU_SCS_NVIC_ICER0_CLRENA4_S: u32 = 4;
pub const CPU_SCS_NVIC_ICER0_CLRENA3: u32 = 8;
pub const CPU_SCS_NVIC_ICER0_CLRENA3_BITN: u32 = 3;
pub const CPU_SCS_NVIC_ICER0_CLRENA3_M: u32 = 8;
pub const CPU_SCS_NVIC_ICER0_CLRENA3_S: u32 = 3;
pub const CPU_SCS_NVIC_ICER0_CLRENA2: u32 = 4;
pub const CPU_SCS_NVIC_ICER0_CLRENA2_BITN: u32 = 2;
pub const CPU_SCS_NVIC_ICER0_CLRENA2_M: u32 = 4;
pub const CPU_SCS_NVIC_ICER0_CLRENA2_S: u32 = 2;
pub const CPU_SCS_NVIC_ICER0_CLRENA1: u32 = 2;
pub const CPU_SCS_NVIC_ICER0_CLRENA1_BITN: u32 = 1;
pub const CPU_SCS_NVIC_ICER0_CLRENA1_M: u32 = 2;
pub const CPU_SCS_NVIC_ICER0_CLRENA1_S: u32 = 1;
pub const CPU_SCS_NVIC_ICER0_CLRENA0: u32 = 1;
pub const CPU_SCS_NVIC_ICER0_CLRENA0_BITN: u32 = 0;
pub const CPU_SCS_NVIC_ICER0_CLRENA0_M: u32 = 1;
pub const CPU_SCS_NVIC_ICER0_CLRENA0_S: u32 = 0;
pub const CPU_SCS_NVIC_ICER1_CLRENA33: u32 = 2;
pub const CPU_SCS_NVIC_ICER1_CLRENA33_BITN: u32 = 1;
pub const CPU_SCS_NVIC_ICER1_CLRENA33_M: u32 = 2;
pub const CPU_SCS_NVIC_ICER1_CLRENA33_S: u32 = 1;
pub const CPU_SCS_NVIC_ICER1_CLRENA32: u32 = 1;
pub const CPU_SCS_NVIC_ICER1_CLRENA32_BITN: u32 = 0;
pub const CPU_SCS_NVIC_ICER1_CLRENA32_M: u32 = 1;
pub const CPU_SCS_NVIC_ICER1_CLRENA32_S: u32 = 0;
pub const CPU_SCS_NVIC_ISPR0_SETPEND31: u32 = 2147483648;
pub const CPU_SCS_NVIC_ISPR0_SETPEND31_BITN: u32 = 31;
pub const CPU_SCS_NVIC_ISPR0_SETPEND31_M: u32 = 2147483648;
pub const CPU_SCS_NVIC_ISPR0_SETPEND31_S: u32 = 31;
pub const CPU_SCS_NVIC_ISPR0_SETPEND30: u32 = 1073741824;
pub const CPU_SCS_NVIC_ISPR0_SETPEND30_BITN: u32 = 30;
pub const CPU_SCS_NVIC_ISPR0_SETPEND30_M: u32 = 1073741824;
pub const CPU_SCS_NVIC_ISPR0_SETPEND30_S: u32 = 30;
pub const CPU_SCS_NVIC_ISPR0_SETPEND29: u32 = 536870912;
pub const CPU_SCS_NVIC_ISPR0_SETPEND29_BITN: u32 = 29;
pub const CPU_SCS_NVIC_ISPR0_SETPEND29_M: u32 = 536870912;
pub const CPU_SCS_NVIC_ISPR0_SETPEND29_S: u32 = 29;
pub const CPU_SCS_NVIC_ISPR0_SETPEND28: u32 = 268435456;
pub const CPU_SCS_NVIC_ISPR0_SETPEND28_BITN: u32 = 28;
pub const CPU_SCS_NVIC_ISPR0_SETPEND28_M: u32 = 268435456;
pub const CPU_SCS_NVIC_ISPR0_SETPEND28_S: u32 = 28;
pub const CPU_SCS_NVIC_ISPR0_SETPEND27: u32 = 134217728;
pub const CPU_SCS_NVIC_ISPR0_SETPEND27_BITN: u32 = 27;
pub const CPU_SCS_NVIC_ISPR0_SETPEND27_M: u32 = 134217728;
pub const CPU_SCS_NVIC_ISPR0_SETPEND27_S: u32 = 27;
pub const CPU_SCS_NVIC_ISPR0_SETPEND26: u32 = 67108864;
pub const CPU_SCS_NVIC_ISPR0_SETPEND26_BITN: u32 = 26;
pub const CPU_SCS_NVIC_ISPR0_SETPEND26_M: u32 = 67108864;
pub const CPU_SCS_NVIC_ISPR0_SETPEND26_S: u32 = 26;
pub const CPU_SCS_NVIC_ISPR0_SETPEND25: u32 = 33554432;
pub const CPU_SCS_NVIC_ISPR0_SETPEND25_BITN: u32 = 25;
pub const CPU_SCS_NVIC_ISPR0_SETPEND25_M: u32 = 33554432;
pub const CPU_SCS_NVIC_ISPR0_SETPEND25_S: u32 = 25;
pub const CPU_SCS_NVIC_ISPR0_SETPEND24: u32 = 16777216;
pub const CPU_SCS_NVIC_ISPR0_SETPEND24_BITN: u32 = 24;
pub const CPU_SCS_NVIC_ISPR0_SETPEND24_M: u32 = 16777216;
pub const CPU_SCS_NVIC_ISPR0_SETPEND24_S: u32 = 24;
pub const CPU_SCS_NVIC_ISPR0_SETPEND23: u32 = 8388608;
pub const CPU_SCS_NVIC_ISPR0_SETPEND23_BITN: u32 = 23;
pub const CPU_SCS_NVIC_ISPR0_SETPEND23_M: u32 = 8388608;
pub const CPU_SCS_NVIC_ISPR0_SETPEND23_S: u32 = 23;
pub const CPU_SCS_NVIC_ISPR0_SETPEND22: u32 = 4194304;
pub const CPU_SCS_NVIC_ISPR0_SETPEND22_BITN: u32 = 22;
pub const CPU_SCS_NVIC_ISPR0_SETPEND22_M: u32 = 4194304;
pub const CPU_SCS_NVIC_ISPR0_SETPEND22_S: u32 = 22;
pub const CPU_SCS_NVIC_ISPR0_SETPEND21: u32 = 2097152;
pub const CPU_SCS_NVIC_ISPR0_SETPEND21_BITN: u32 = 21;
pub const CPU_SCS_NVIC_ISPR0_SETPEND21_M: u32 = 2097152;
pub const CPU_SCS_NVIC_ISPR0_SETPEND21_S: u32 = 21;
pub const CPU_SCS_NVIC_ISPR0_SETPEND20: u32 = 1048576;
pub const CPU_SCS_NVIC_ISPR0_SETPEND20_BITN: u32 = 20;
pub const CPU_SCS_NVIC_ISPR0_SETPEND20_M: u32 = 1048576;
pub const CPU_SCS_NVIC_ISPR0_SETPEND20_S: u32 = 20;
pub const CPU_SCS_NVIC_ISPR0_SETPEND19: u32 = 524288;
pub const CPU_SCS_NVIC_ISPR0_SETPEND19_BITN: u32 = 19;
pub const CPU_SCS_NVIC_ISPR0_SETPEND19_M: u32 = 524288;
pub const CPU_SCS_NVIC_ISPR0_SETPEND19_S: u32 = 19;
pub const CPU_SCS_NVIC_ISPR0_SETPEND18: u32 = 262144;
pub const CPU_SCS_NVIC_ISPR0_SETPEND18_BITN: u32 = 18;
pub const CPU_SCS_NVIC_ISPR0_SETPEND18_M: u32 = 262144;
pub const CPU_SCS_NVIC_ISPR0_SETPEND18_S: u32 = 18;
pub const CPU_SCS_NVIC_ISPR0_SETPEND17: u32 = 131072;
pub const CPU_SCS_NVIC_ISPR0_SETPEND17_BITN: u32 = 17;
pub const CPU_SCS_NVIC_ISPR0_SETPEND17_M: u32 = 131072;
pub const CPU_SCS_NVIC_ISPR0_SETPEND17_S: u32 = 17;
pub const CPU_SCS_NVIC_ISPR0_SETPEND16: u32 = 65536;
pub const CPU_SCS_NVIC_ISPR0_SETPEND16_BITN: u32 = 16;
pub const CPU_SCS_NVIC_ISPR0_SETPEND16_M: u32 = 65536;
pub const CPU_SCS_NVIC_ISPR0_SETPEND16_S: u32 = 16;
pub const CPU_SCS_NVIC_ISPR0_SETPEND15: u32 = 32768;
pub const CPU_SCS_NVIC_ISPR0_SETPEND15_BITN: u32 = 15;
pub const CPU_SCS_NVIC_ISPR0_SETPEND15_M: u32 = 32768;
pub const CPU_SCS_NVIC_ISPR0_SETPEND15_S: u32 = 15;
pub const CPU_SCS_NVIC_ISPR0_SETPEND14: u32 = 16384;
pub const CPU_SCS_NVIC_ISPR0_SETPEND14_BITN: u32 = 14;
pub const CPU_SCS_NVIC_ISPR0_SETPEND14_M: u32 = 16384;
pub const CPU_SCS_NVIC_ISPR0_SETPEND14_S: u32 = 14;
pub const CPU_SCS_NVIC_ISPR0_SETPEND13: u32 = 8192;
pub const CPU_SCS_NVIC_ISPR0_SETPEND13_BITN: u32 = 13;
pub const CPU_SCS_NVIC_ISPR0_SETPEND13_M: u32 = 8192;
pub const CPU_SCS_NVIC_ISPR0_SETPEND13_S: u32 = 13;
pub const CPU_SCS_NVIC_ISPR0_SETPEND12: u32 = 4096;
pub const CPU_SCS_NVIC_ISPR0_SETPEND12_BITN: u32 = 12;
pub const CPU_SCS_NVIC_ISPR0_SETPEND12_M: u32 = 4096;
pub const CPU_SCS_NVIC_ISPR0_SETPEND12_S: u32 = 12;
pub const CPU_SCS_NVIC_ISPR0_SETPEND11: u32 = 2048;
pub const CPU_SCS_NVIC_ISPR0_SETPEND11_BITN: u32 = 11;
pub const CPU_SCS_NVIC_ISPR0_SETPEND11_M: u32 = 2048;
pub const CPU_SCS_NVIC_ISPR0_SETPEND11_S: u32 = 11;
pub const CPU_SCS_NVIC_ISPR0_SETPEND10: u32 = 1024;
pub const CPU_SCS_NVIC_ISPR0_SETPEND10_BITN: u32 = 10;
pub const CPU_SCS_NVIC_ISPR0_SETPEND10_M: u32 = 1024;
pub const CPU_SCS_NVIC_ISPR0_SETPEND10_S: u32 = 10;
pub const CPU_SCS_NVIC_ISPR0_SETPEND9: u32 = 512;
pub const CPU_SCS_NVIC_ISPR0_SETPEND9_BITN: u32 = 9;
pub const CPU_SCS_NVIC_ISPR0_SETPEND9_M: u32 = 512;
pub const CPU_SCS_NVIC_ISPR0_SETPEND9_S: u32 = 9;
pub const CPU_SCS_NVIC_ISPR0_SETPEND8: u32 = 256;
pub const CPU_SCS_NVIC_ISPR0_SETPEND8_BITN: u32 = 8;
pub const CPU_SCS_NVIC_ISPR0_SETPEND8_M: u32 = 256;
pub const CPU_SCS_NVIC_ISPR0_SETPEND8_S: u32 = 8;
pub const CPU_SCS_NVIC_ISPR0_SETPEND7: u32 = 128;
pub const CPU_SCS_NVIC_ISPR0_SETPEND7_BITN: u32 = 7;
pub const CPU_SCS_NVIC_ISPR0_SETPEND7_M: u32 = 128;
pub const CPU_SCS_NVIC_ISPR0_SETPEND7_S: u32 = 7;
pub const CPU_SCS_NVIC_ISPR0_SETPEND6: u32 = 64;
pub const CPU_SCS_NVIC_ISPR0_SETPEND6_BITN: u32 = 6;
pub const CPU_SCS_NVIC_ISPR0_SETPEND6_M: u32 = 64;
pub const CPU_SCS_NVIC_ISPR0_SETPEND6_S: u32 = 6;
pub const CPU_SCS_NVIC_ISPR0_SETPEND5: u32 = 32;
pub const CPU_SCS_NVIC_ISPR0_SETPEND5_BITN: u32 = 5;
pub const CPU_SCS_NVIC_ISPR0_SETPEND5_M: u32 = 32;
pub const CPU_SCS_NVIC_ISPR0_SETPEND5_S: u32 = 5;
pub const CPU_SCS_NVIC_ISPR0_SETPEND4: u32 = 16;
pub const CPU_SCS_NVIC_ISPR0_SETPEND4_BITN: u32 = 4;
pub const CPU_SCS_NVIC_ISPR0_SETPEND4_M: u32 = 16;
pub const CPU_SCS_NVIC_ISPR0_SETPEND4_S: u32 = 4;
pub const CPU_SCS_NVIC_ISPR0_SETPEND3: u32 = 8;
pub const CPU_SCS_NVIC_ISPR0_SETPEND3_BITN: u32 = 3;
pub const CPU_SCS_NVIC_ISPR0_SETPEND3_M: u32 = 8;
pub const CPU_SCS_NVIC_ISPR0_SETPEND3_S: u32 = 3;
pub const CPU_SCS_NVIC_ISPR0_SETPEND2: u32 = 4;
pub const CPU_SCS_NVIC_ISPR0_SETPEND2_BITN: u32 = 2;
pub const CPU_SCS_NVIC_ISPR0_SETPEND2_M: u32 = 4;
pub const CPU_SCS_NVIC_ISPR0_SETPEND2_S: u32 = 2;
pub const CPU_SCS_NVIC_ISPR0_SETPEND1: u32 = 2;
pub const CPU_SCS_NVIC_ISPR0_SETPEND1_BITN: u32 = 1;
pub const CPU_SCS_NVIC_ISPR0_SETPEND1_M: u32 = 2;
pub const CPU_SCS_NVIC_ISPR0_SETPEND1_S: u32 = 1;
pub const CPU_SCS_NVIC_ISPR0_SETPEND0: u32 = 1;
pub const CPU_SCS_NVIC_ISPR0_SETPEND0_BITN: u32 = 0;
pub const CPU_SCS_NVIC_ISPR0_SETPEND0_M: u32 = 1;
pub const CPU_SCS_NVIC_ISPR0_SETPEND0_S: u32 = 0;
pub const CPU_SCS_NVIC_ISPR1_SETPEND33: u32 = 2;
pub const CPU_SCS_NVIC_ISPR1_SETPEND33_BITN: u32 = 1;
pub const CPU_SCS_NVIC_ISPR1_SETPEND33_M: u32 = 2;
pub const CPU_SCS_NVIC_ISPR1_SETPEND33_S: u32 = 1;
pub const CPU_SCS_NVIC_ISPR1_SETPEND32: u32 = 1;
pub const CPU_SCS_NVIC_ISPR1_SETPEND32_BITN: u32 = 0;
pub const CPU_SCS_NVIC_ISPR1_SETPEND32_M: u32 = 1;
pub const CPU_SCS_NVIC_ISPR1_SETPEND32_S: u32 = 0;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND31: u32 = 2147483648;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND31_BITN: u32 = 31;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND31_M: u32 = 2147483648;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND31_S: u32 = 31;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND30: u32 = 1073741824;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND30_BITN: u32 = 30;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND30_M: u32 = 1073741824;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND30_S: u32 = 30;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND29: u32 = 536870912;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND29_BITN: u32 = 29;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND29_M: u32 = 536870912;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND29_S: u32 = 29;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND28: u32 = 268435456;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND28_BITN: u32 = 28;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND28_M: u32 = 268435456;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND28_S: u32 = 28;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND27: u32 = 134217728;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND27_BITN: u32 = 27;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND27_M: u32 = 134217728;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND27_S: u32 = 27;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND26: u32 = 67108864;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND26_BITN: u32 = 26;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND26_M: u32 = 67108864;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND26_S: u32 = 26;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND25: u32 = 33554432;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND25_BITN: u32 = 25;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND25_M: u32 = 33554432;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND25_S: u32 = 25;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND24: u32 = 16777216;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND24_BITN: u32 = 24;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND24_M: u32 = 16777216;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND24_S: u32 = 24;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND23: u32 = 8388608;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND23_BITN: u32 = 23;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND23_M: u32 = 8388608;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND23_S: u32 = 23;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND22: u32 = 4194304;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND22_BITN: u32 = 22;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND22_M: u32 = 4194304;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND22_S: u32 = 22;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND21: u32 = 2097152;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND21_BITN: u32 = 21;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND21_M: u32 = 2097152;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND21_S: u32 = 21;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND20: u32 = 1048576;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND20_BITN: u32 = 20;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND20_M: u32 = 1048576;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND20_S: u32 = 20;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND19: u32 = 524288;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND19_BITN: u32 = 19;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND19_M: u32 = 524288;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND19_S: u32 = 19;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND18: u32 = 262144;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND18_BITN: u32 = 18;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND18_M: u32 = 262144;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND18_S: u32 = 18;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND17: u32 = 131072;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND17_BITN: u32 = 17;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND17_M: u32 = 131072;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND17_S: u32 = 17;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND16: u32 = 65536;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND16_BITN: u32 = 16;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND16_M: u32 = 65536;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND16_S: u32 = 16;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND15: u32 = 32768;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND15_BITN: u32 = 15;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND15_M: u32 = 32768;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND15_S: u32 = 15;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND14: u32 = 16384;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND14_BITN: u32 = 14;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND14_M: u32 = 16384;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND14_S: u32 = 14;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND13: u32 = 8192;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND13_BITN: u32 = 13;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND13_M: u32 = 8192;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND13_S: u32 = 13;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND12: u32 = 4096;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND12_BITN: u32 = 12;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND12_M: u32 = 4096;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND12_S: u32 = 12;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND11: u32 = 2048;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND11_BITN: u32 = 11;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND11_M: u32 = 2048;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND11_S: u32 = 11;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND10: u32 = 1024;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND10_BITN: u32 = 10;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND10_M: u32 = 1024;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND10_S: u32 = 10;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND9: u32 = 512;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND9_BITN: u32 = 9;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND9_M: u32 = 512;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND9_S: u32 = 9;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND8: u32 = 256;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND8_BITN: u32 = 8;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND8_M: u32 = 256;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND8_S: u32 = 8;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND7: u32 = 128;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND7_BITN: u32 = 7;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND7_M: u32 = 128;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND7_S: u32 = 7;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND6: u32 = 64;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND6_BITN: u32 = 6;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND6_M: u32 = 64;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND6_S: u32 = 6;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND5: u32 = 32;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND5_BITN: u32 = 5;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND5_M: u32 = 32;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND5_S: u32 = 5;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND4: u32 = 16;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND4_BITN: u32 = 4;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND4_M: u32 = 16;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND4_S: u32 = 4;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND3: u32 = 8;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND3_BITN: u32 = 3;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND3_M: u32 = 8;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND3_S: u32 = 3;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND2: u32 = 4;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND2_BITN: u32 = 2;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND2_M: u32 = 4;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND2_S: u32 = 2;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND1: u32 = 2;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND1_BITN: u32 = 1;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND1_M: u32 = 2;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND1_S: u32 = 1;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND0: u32 = 1;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND0_BITN: u32 = 0;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND0_M: u32 = 1;
pub const CPU_SCS_NVIC_ICPR0_CLRPEND0_S: u32 = 0;
pub const CPU_SCS_NVIC_ICPR1_CLRPEND33: u32 = 2;
pub const CPU_SCS_NVIC_ICPR1_CLRPEND33_BITN: u32 = 1;
pub const CPU_SCS_NVIC_ICPR1_CLRPEND33_M: u32 = 2;
pub const CPU_SCS_NVIC_ICPR1_CLRPEND33_S: u32 = 1;
pub const CPU_SCS_NVIC_ICPR1_CLRPEND32: u32 = 1;
pub const CPU_SCS_NVIC_ICPR1_CLRPEND32_BITN: u32 = 0;
pub const CPU_SCS_NVIC_ICPR1_CLRPEND32_M: u32 = 1;
pub const CPU_SCS_NVIC_ICPR1_CLRPEND32_S: u32 = 0;
pub const CPU_SCS_NVIC_IABR0_ACTIVE31: u32 = 2147483648;
pub const CPU_SCS_NVIC_IABR0_ACTIVE31_BITN: u32 = 31;
pub const CPU_SCS_NVIC_IABR0_ACTIVE31_M: u32 = 2147483648;
pub const CPU_SCS_NVIC_IABR0_ACTIVE31_S: u32 = 31;
pub const CPU_SCS_NVIC_IABR0_ACTIVE30: u32 = 1073741824;
pub const CPU_SCS_NVIC_IABR0_ACTIVE30_BITN: u32 = 30;
pub const CPU_SCS_NVIC_IABR0_ACTIVE30_M: u32 = 1073741824;
pub const CPU_SCS_NVIC_IABR0_ACTIVE30_S: u32 = 30;
pub const CPU_SCS_NVIC_IABR0_ACTIVE29: u32 = 536870912;
pub const CPU_SCS_NVIC_IABR0_ACTIVE29_BITN: u32 = 29;
pub const CPU_SCS_NVIC_IABR0_ACTIVE29_M: u32 = 536870912;
pub const CPU_SCS_NVIC_IABR0_ACTIVE29_S: u32 = 29;
pub const CPU_SCS_NVIC_IABR0_ACTIVE28: u32 = 268435456;
pub const CPU_SCS_NVIC_IABR0_ACTIVE28_BITN: u32 = 28;
pub const CPU_SCS_NVIC_IABR0_ACTIVE28_M: u32 = 268435456;
pub const CPU_SCS_NVIC_IABR0_ACTIVE28_S: u32 = 28;
pub const CPU_SCS_NVIC_IABR0_ACTIVE27: u32 = 134217728;
pub const CPU_SCS_NVIC_IABR0_ACTIVE27_BITN: u32 = 27;
pub const CPU_SCS_NVIC_IABR0_ACTIVE27_M: u32 = 134217728;
pub const CPU_SCS_NVIC_IABR0_ACTIVE27_S: u32 = 27;
pub const CPU_SCS_NVIC_IABR0_ACTIVE26: u32 = 67108864;
pub const CPU_SCS_NVIC_IABR0_ACTIVE26_BITN: u32 = 26;
pub const CPU_SCS_NVIC_IABR0_ACTIVE26_M: u32 = 67108864;
pub const CPU_SCS_NVIC_IABR0_ACTIVE26_S: u32 = 26;
pub const CPU_SCS_NVIC_IABR0_ACTIVE25: u32 = 33554432;
pub const CPU_SCS_NVIC_IABR0_ACTIVE25_BITN: u32 = 25;
pub const CPU_SCS_NVIC_IABR0_ACTIVE25_M: u32 = 33554432;
pub const CPU_SCS_NVIC_IABR0_ACTIVE25_S: u32 = 25;
pub const CPU_SCS_NVIC_IABR0_ACTIVE24: u32 = 16777216;
pub const CPU_SCS_NVIC_IABR0_ACTIVE24_BITN: u32 = 24;
pub const CPU_SCS_NVIC_IABR0_ACTIVE24_M: u32 = 16777216;
pub const CPU_SCS_NVIC_IABR0_ACTIVE24_S: u32 = 24;
pub const CPU_SCS_NVIC_IABR0_ACTIVE23: u32 = 8388608;
pub const CPU_SCS_NVIC_IABR0_ACTIVE23_BITN: u32 = 23;
pub const CPU_SCS_NVIC_IABR0_ACTIVE23_M: u32 = 8388608;
pub const CPU_SCS_NVIC_IABR0_ACTIVE23_S: u32 = 23;
pub const CPU_SCS_NVIC_IABR0_ACTIVE22: u32 = 4194304;
pub const CPU_SCS_NVIC_IABR0_ACTIVE22_BITN: u32 = 22;
pub const CPU_SCS_NVIC_IABR0_ACTIVE22_M: u32 = 4194304;
pub const CPU_SCS_NVIC_IABR0_ACTIVE22_S: u32 = 22;
pub const CPU_SCS_NVIC_IABR0_ACTIVE21: u32 = 2097152;
pub const CPU_SCS_NVIC_IABR0_ACTIVE21_BITN: u32 = 21;
pub const CPU_SCS_NVIC_IABR0_ACTIVE21_M: u32 = 2097152;
pub const CPU_SCS_NVIC_IABR0_ACTIVE21_S: u32 = 21;
pub const CPU_SCS_NVIC_IABR0_ACTIVE20: u32 = 1048576;
pub const CPU_SCS_NVIC_IABR0_ACTIVE20_BITN: u32 = 20;
pub const CPU_SCS_NVIC_IABR0_ACTIVE20_M: u32 = 1048576;
pub const CPU_SCS_NVIC_IABR0_ACTIVE20_S: u32 = 20;
pub const CPU_SCS_NVIC_IABR0_ACTIVE19: u32 = 524288;
pub const CPU_SCS_NVIC_IABR0_ACTIVE19_BITN: u32 = 19;
pub const CPU_SCS_NVIC_IABR0_ACTIVE19_M: u32 = 524288;
pub const CPU_SCS_NVIC_IABR0_ACTIVE19_S: u32 = 19;
pub const CPU_SCS_NVIC_IABR0_ACTIVE18: u32 = 262144;
pub const CPU_SCS_NVIC_IABR0_ACTIVE18_BITN: u32 = 18;
pub const CPU_SCS_NVIC_IABR0_ACTIVE18_M: u32 = 262144;
pub const CPU_SCS_NVIC_IABR0_ACTIVE18_S: u32 = 18;
pub const CPU_SCS_NVIC_IABR0_ACTIVE17: u32 = 131072;
pub const CPU_SCS_NVIC_IABR0_ACTIVE17_BITN: u32 = 17;
pub const CPU_SCS_NVIC_IABR0_ACTIVE17_M: u32 = 131072;
pub const CPU_SCS_NVIC_IABR0_ACTIVE17_S: u32 = 17;
pub const CPU_SCS_NVIC_IABR0_ACTIVE16: u32 = 65536;
pub const CPU_SCS_NVIC_IABR0_ACTIVE16_BITN: u32 = 16;
pub const CPU_SCS_NVIC_IABR0_ACTIVE16_M: u32 = 65536;
pub const CPU_SCS_NVIC_IABR0_ACTIVE16_S: u32 = 16;
pub const CPU_SCS_NVIC_IABR0_ACTIVE15: u32 = 32768;
pub const CPU_SCS_NVIC_IABR0_ACTIVE15_BITN: u32 = 15;
pub const CPU_SCS_NVIC_IABR0_ACTIVE15_M: u32 = 32768;
pub const CPU_SCS_NVIC_IABR0_ACTIVE15_S: u32 = 15;
pub const CPU_SCS_NVIC_IABR0_ACTIVE14: u32 = 16384;
pub const CPU_SCS_NVIC_IABR0_ACTIVE14_BITN: u32 = 14;
pub const CPU_SCS_NVIC_IABR0_ACTIVE14_M: u32 = 16384;
pub const CPU_SCS_NVIC_IABR0_ACTIVE14_S: u32 = 14;
pub const CPU_SCS_NVIC_IABR0_ACTIVE13: u32 = 8192;
pub const CPU_SCS_NVIC_IABR0_ACTIVE13_BITN: u32 = 13;
pub const CPU_SCS_NVIC_IABR0_ACTIVE13_M: u32 = 8192;
pub const CPU_SCS_NVIC_IABR0_ACTIVE13_S: u32 = 13;
pub const CPU_SCS_NVIC_IABR0_ACTIVE12: u32 = 4096;
pub const CPU_SCS_NVIC_IABR0_ACTIVE12_BITN: u32 = 12;
pub const CPU_SCS_NVIC_IABR0_ACTIVE12_M: u32 = 4096;
pub const CPU_SCS_NVIC_IABR0_ACTIVE12_S: u32 = 12;
pub const CPU_SCS_NVIC_IABR0_ACTIVE11: u32 = 2048;
pub const CPU_SCS_NVIC_IABR0_ACTIVE11_BITN: u32 = 11;
pub const CPU_SCS_NVIC_IABR0_ACTIVE11_M: u32 = 2048;
pub const CPU_SCS_NVIC_IABR0_ACTIVE11_S: u32 = 11;
pub const CPU_SCS_NVIC_IABR0_ACTIVE10: u32 = 1024;
pub const CPU_SCS_NVIC_IABR0_ACTIVE10_BITN: u32 = 10;
pub const CPU_SCS_NVIC_IABR0_ACTIVE10_M: u32 = 1024;
pub const CPU_SCS_NVIC_IABR0_ACTIVE10_S: u32 = 10;
pub const CPU_SCS_NVIC_IABR0_ACTIVE9: u32 = 512;
pub const CPU_SCS_NVIC_IABR0_ACTIVE9_BITN: u32 = 9;
pub const CPU_SCS_NVIC_IABR0_ACTIVE9_M: u32 = 512;
pub const CPU_SCS_NVIC_IABR0_ACTIVE9_S: u32 = 9;
pub const CPU_SCS_NVIC_IABR0_ACTIVE8: u32 = 256;
pub const CPU_SCS_NVIC_IABR0_ACTIVE8_BITN: u32 = 8;
pub const CPU_SCS_NVIC_IABR0_ACTIVE8_M: u32 = 256;
pub const CPU_SCS_NVIC_IABR0_ACTIVE8_S: u32 = 8;
pub const CPU_SCS_NVIC_IABR0_ACTIVE7: u32 = 128;
pub const CPU_SCS_NVIC_IABR0_ACTIVE7_BITN: u32 = 7;
pub const CPU_SCS_NVIC_IABR0_ACTIVE7_M: u32 = 128;
pub const CPU_SCS_NVIC_IABR0_ACTIVE7_S: u32 = 7;
pub const CPU_SCS_NVIC_IABR0_ACTIVE6: u32 = 64;
pub const CPU_SCS_NVIC_IABR0_ACTIVE6_BITN: u32 = 6;
pub const CPU_SCS_NVIC_IABR0_ACTIVE6_M: u32 = 64;
pub const CPU_SCS_NVIC_IABR0_ACTIVE6_S: u32 = 6;
pub const CPU_SCS_NVIC_IABR0_ACTIVE5: u32 = 32;
pub const CPU_SCS_NVIC_IABR0_ACTIVE5_BITN: u32 = 5;
pub const CPU_SCS_NVIC_IABR0_ACTIVE5_M: u32 = 32;
pub const CPU_SCS_NVIC_IABR0_ACTIVE5_S: u32 = 5;
pub const CPU_SCS_NVIC_IABR0_ACTIVE4: u32 = 16;
pub const CPU_SCS_NVIC_IABR0_ACTIVE4_BITN: u32 = 4;
pub const CPU_SCS_NVIC_IABR0_ACTIVE4_M: u32 = 16;
pub const CPU_SCS_NVIC_IABR0_ACTIVE4_S: u32 = 4;
pub const CPU_SCS_NVIC_IABR0_ACTIVE3: u32 = 8;
pub const CPU_SCS_NVIC_IABR0_ACTIVE3_BITN: u32 = 3;
pub const CPU_SCS_NVIC_IABR0_ACTIVE3_M: u32 = 8;
pub const CPU_SCS_NVIC_IABR0_ACTIVE3_S: u32 = 3;
pub const CPU_SCS_NVIC_IABR0_ACTIVE2: u32 = 4;
pub const CPU_SCS_NVIC_IABR0_ACTIVE2_BITN: u32 = 2;
pub const CPU_SCS_NVIC_IABR0_ACTIVE2_M: u32 = 4;
pub const CPU_SCS_NVIC_IABR0_ACTIVE2_S: u32 = 2;
pub const CPU_SCS_NVIC_IABR0_ACTIVE1: u32 = 2;
pub const CPU_SCS_NVIC_IABR0_ACTIVE1_BITN: u32 = 1;
pub const CPU_SCS_NVIC_IABR0_ACTIVE1_M: u32 = 2;
pub const CPU_SCS_NVIC_IABR0_ACTIVE1_S: u32 = 1;
pub const CPU_SCS_NVIC_IABR0_ACTIVE0: u32 = 1;
pub const CPU_SCS_NVIC_IABR0_ACTIVE0_BITN: u32 = 0;
pub const CPU_SCS_NVIC_IABR0_ACTIVE0_M: u32 = 1;
pub const CPU_SCS_NVIC_IABR0_ACTIVE0_S: u32 = 0;
pub const CPU_SCS_NVIC_IABR1_ACTIVE33: u32 = 2;
pub const CPU_SCS_NVIC_IABR1_ACTIVE33_BITN: u32 = 1;
pub const CPU_SCS_NVIC_IABR1_ACTIVE33_M: u32 = 2;
pub const CPU_SCS_NVIC_IABR1_ACTIVE33_S: u32 = 1;
pub const CPU_SCS_NVIC_IABR1_ACTIVE32: u32 = 1;
pub const CPU_SCS_NVIC_IABR1_ACTIVE32_BITN: u32 = 0;
pub const CPU_SCS_NVIC_IABR1_ACTIVE32_M: u32 = 1;
pub const CPU_SCS_NVIC_IABR1_ACTIVE32_S: u32 = 0;
pub const CPU_SCS_NVIC_IPR0_PRI_3_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR0_PRI_3_M: u32 = 4278190080;
pub const CPU_SCS_NVIC_IPR0_PRI_3_S: u32 = 24;
pub const CPU_SCS_NVIC_IPR0_PRI_2_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR0_PRI_2_M: u32 = 16711680;
pub const CPU_SCS_NVIC_IPR0_PRI_2_S: u32 = 16;
pub const CPU_SCS_NVIC_IPR0_PRI_1_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR0_PRI_1_M: u32 = 65280;
pub const CPU_SCS_NVIC_IPR0_PRI_1_S: u32 = 8;
pub const CPU_SCS_NVIC_IPR0_PRI_0_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR0_PRI_0_M: u32 = 255;
pub const CPU_SCS_NVIC_IPR0_PRI_0_S: u32 = 0;
pub const CPU_SCS_NVIC_IPR1_PRI_7_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR1_PRI_7_M: u32 = 4278190080;
pub const CPU_SCS_NVIC_IPR1_PRI_7_S: u32 = 24;
pub const CPU_SCS_NVIC_IPR1_PRI_6_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR1_PRI_6_M: u32 = 16711680;
pub const CPU_SCS_NVIC_IPR1_PRI_6_S: u32 = 16;
pub const CPU_SCS_NVIC_IPR1_PRI_5_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR1_PRI_5_M: u32 = 65280;
pub const CPU_SCS_NVIC_IPR1_PRI_5_S: u32 = 8;
pub const CPU_SCS_NVIC_IPR1_PRI_4_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR1_PRI_4_M: u32 = 255;
pub const CPU_SCS_NVIC_IPR1_PRI_4_S: u32 = 0;
pub const CPU_SCS_NVIC_IPR2_PRI_11_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR2_PRI_11_M: u32 = 4278190080;
pub const CPU_SCS_NVIC_IPR2_PRI_11_S: u32 = 24;
pub const CPU_SCS_NVIC_IPR2_PRI_10_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR2_PRI_10_M: u32 = 16711680;
pub const CPU_SCS_NVIC_IPR2_PRI_10_S: u32 = 16;
pub const CPU_SCS_NVIC_IPR2_PRI_9_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR2_PRI_9_M: u32 = 65280;
pub const CPU_SCS_NVIC_IPR2_PRI_9_S: u32 = 8;
pub const CPU_SCS_NVIC_IPR2_PRI_8_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR2_PRI_8_M: u32 = 255;
pub const CPU_SCS_NVIC_IPR2_PRI_8_S: u32 = 0;
pub const CPU_SCS_NVIC_IPR3_PRI_15_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR3_PRI_15_M: u32 = 4278190080;
pub const CPU_SCS_NVIC_IPR3_PRI_15_S: u32 = 24;
pub const CPU_SCS_NVIC_IPR3_PRI_14_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR3_PRI_14_M: u32 = 16711680;
pub const CPU_SCS_NVIC_IPR3_PRI_14_S: u32 = 16;
pub const CPU_SCS_NVIC_IPR3_PRI_13_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR3_PRI_13_M: u32 = 65280;
pub const CPU_SCS_NVIC_IPR3_PRI_13_S: u32 = 8;
pub const CPU_SCS_NVIC_IPR3_PRI_12_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR3_PRI_12_M: u32 = 255;
pub const CPU_SCS_NVIC_IPR3_PRI_12_S: u32 = 0;
pub const CPU_SCS_NVIC_IPR4_PRI_19_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR4_PRI_19_M: u32 = 4278190080;
pub const CPU_SCS_NVIC_IPR4_PRI_19_S: u32 = 24;
pub const CPU_SCS_NVIC_IPR4_PRI_18_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR4_PRI_18_M: u32 = 16711680;
pub const CPU_SCS_NVIC_IPR4_PRI_18_S: u32 = 16;
pub const CPU_SCS_NVIC_IPR4_PRI_17_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR4_PRI_17_M: u32 = 65280;
pub const CPU_SCS_NVIC_IPR4_PRI_17_S: u32 = 8;
pub const CPU_SCS_NVIC_IPR4_PRI_16_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR4_PRI_16_M: u32 = 255;
pub const CPU_SCS_NVIC_IPR4_PRI_16_S: u32 = 0;
pub const CPU_SCS_NVIC_IPR5_PRI_23_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR5_PRI_23_M: u32 = 4278190080;
pub const CPU_SCS_NVIC_IPR5_PRI_23_S: u32 = 24;
pub const CPU_SCS_NVIC_IPR5_PRI_22_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR5_PRI_22_M: u32 = 16711680;
pub const CPU_SCS_NVIC_IPR5_PRI_22_S: u32 = 16;
pub const CPU_SCS_NVIC_IPR5_PRI_21_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR5_PRI_21_M: u32 = 65280;
pub const CPU_SCS_NVIC_IPR5_PRI_21_S: u32 = 8;
pub const CPU_SCS_NVIC_IPR5_PRI_20_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR5_PRI_20_M: u32 = 255;
pub const CPU_SCS_NVIC_IPR5_PRI_20_S: u32 = 0;
pub const CPU_SCS_NVIC_IPR6_PRI_27_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR6_PRI_27_M: u32 = 4278190080;
pub const CPU_SCS_NVIC_IPR6_PRI_27_S: u32 = 24;
pub const CPU_SCS_NVIC_IPR6_PRI_26_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR6_PRI_26_M: u32 = 16711680;
pub const CPU_SCS_NVIC_IPR6_PRI_26_S: u32 = 16;
pub const CPU_SCS_NVIC_IPR6_PRI_25_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR6_PRI_25_M: u32 = 65280;
pub const CPU_SCS_NVIC_IPR6_PRI_25_S: u32 = 8;
pub const CPU_SCS_NVIC_IPR6_PRI_24_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR6_PRI_24_M: u32 = 255;
pub const CPU_SCS_NVIC_IPR6_PRI_24_S: u32 = 0;
pub const CPU_SCS_NVIC_IPR7_PRI_31_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR7_PRI_31_M: u32 = 4278190080;
pub const CPU_SCS_NVIC_IPR7_PRI_31_S: u32 = 24;
pub const CPU_SCS_NVIC_IPR7_PRI_30_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR7_PRI_30_M: u32 = 16711680;
pub const CPU_SCS_NVIC_IPR7_PRI_30_S: u32 = 16;
pub const CPU_SCS_NVIC_IPR7_PRI_29_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR7_PRI_29_M: u32 = 65280;
pub const CPU_SCS_NVIC_IPR7_PRI_29_S: u32 = 8;
pub const CPU_SCS_NVIC_IPR7_PRI_28_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR7_PRI_28_M: u32 = 255;
pub const CPU_SCS_NVIC_IPR7_PRI_28_S: u32 = 0;
pub const CPU_SCS_NVIC_IPR8_PRI_33_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR8_PRI_33_M: u32 = 65280;
pub const CPU_SCS_NVIC_IPR8_PRI_33_S: u32 = 8;
pub const CPU_SCS_NVIC_IPR8_PRI_32_W: u32 = 8;
pub const CPU_SCS_NVIC_IPR8_PRI_32_M: u32 = 255;
pub const CPU_SCS_NVIC_IPR8_PRI_32_S: u32 = 0;
pub const CPU_SCS_CPUID_IMPLEMENTER_W: u32 = 8;
pub const CPU_SCS_CPUID_IMPLEMENTER_M: u32 = 4278190080;
pub const CPU_SCS_CPUID_IMPLEMENTER_S: u32 = 24;
pub const CPU_SCS_CPUID_VARIANT_W: u32 = 4;
pub const CPU_SCS_CPUID_VARIANT_M: u32 = 15728640;
pub const CPU_SCS_CPUID_VARIANT_S: u32 = 20;
pub const CPU_SCS_CPUID_CONSTANT_W: u32 = 4;
pub const CPU_SCS_CPUID_CONSTANT_M: u32 = 983040;
pub const CPU_SCS_CPUID_CONSTANT_S: u32 = 16;
pub const CPU_SCS_CPUID_PARTNO_W: u32 = 12;
pub const CPU_SCS_CPUID_PARTNO_M: u32 = 65520;
pub const CPU_SCS_CPUID_PARTNO_S: u32 = 4;
pub const CPU_SCS_CPUID_REVISION_W: u32 = 4;
pub const CPU_SCS_CPUID_REVISION_M: u32 = 15;
pub const CPU_SCS_CPUID_REVISION_S: u32 = 0;
pub const CPU_SCS_ICSR_NMIPENDSET: u32 = 2147483648;
pub const CPU_SCS_ICSR_NMIPENDSET_BITN: u32 = 31;
pub const CPU_SCS_ICSR_NMIPENDSET_M: u32 = 2147483648;
pub const CPU_SCS_ICSR_NMIPENDSET_S: u32 = 31;
pub const CPU_SCS_ICSR_PENDSVSET: u32 = 268435456;
pub const CPU_SCS_ICSR_PENDSVSET_BITN: u32 = 28;
pub const CPU_SCS_ICSR_PENDSVSET_M: u32 = 268435456;
pub const CPU_SCS_ICSR_PENDSVSET_S: u32 = 28;
pub const CPU_SCS_ICSR_PENDSVCLR: u32 = 134217728;
pub const CPU_SCS_ICSR_PENDSVCLR_BITN: u32 = 27;
pub const CPU_SCS_ICSR_PENDSVCLR_M: u32 = 134217728;
pub const CPU_SCS_ICSR_PENDSVCLR_S: u32 = 27;
pub const CPU_SCS_ICSR_PENDSTSET: u32 = 67108864;
pub const CPU_SCS_ICSR_PENDSTSET_BITN: u32 = 26;
pub const CPU_SCS_ICSR_PENDSTSET_M: u32 = 67108864;
pub const CPU_SCS_ICSR_PENDSTSET_S: u32 = 26;
pub const CPU_SCS_ICSR_PENDSTCLR: u32 = 33554432;
pub const CPU_SCS_ICSR_PENDSTCLR_BITN: u32 = 25;
pub const CPU_SCS_ICSR_PENDSTCLR_M: u32 = 33554432;
pub const CPU_SCS_ICSR_PENDSTCLR_S: u32 = 25;
pub const CPU_SCS_ICSR_ISRPREEMPT: u32 = 8388608;
pub const CPU_SCS_ICSR_ISRPREEMPT_BITN: u32 = 23;
pub const CPU_SCS_ICSR_ISRPREEMPT_M: u32 = 8388608;
pub const CPU_SCS_ICSR_ISRPREEMPT_S: u32 = 23;
pub const CPU_SCS_ICSR_ISRPENDING: u32 = 4194304;
pub const CPU_SCS_ICSR_ISRPENDING_BITN: u32 = 22;
pub const CPU_SCS_ICSR_ISRPENDING_M: u32 = 4194304;
pub const CPU_SCS_ICSR_ISRPENDING_S: u32 = 22;
pub const CPU_SCS_ICSR_VECTPENDING_W: u32 = 6;
pub const CPU_SCS_ICSR_VECTPENDING_M: u32 = 258048;
pub const CPU_SCS_ICSR_VECTPENDING_S: u32 = 12;
pub const CPU_SCS_ICSR_RETTOBASE: u32 = 2048;
pub const CPU_SCS_ICSR_RETTOBASE_BITN: u32 = 11;
pub const CPU_SCS_ICSR_RETTOBASE_M: u32 = 2048;
pub const CPU_SCS_ICSR_RETTOBASE_S: u32 = 11;
pub const CPU_SCS_ICSR_VECTACTIVE_W: u32 = 9;
pub const CPU_SCS_ICSR_VECTACTIVE_M: u32 = 511;
pub const CPU_SCS_ICSR_VECTACTIVE_S: u32 = 0;
pub const CPU_SCS_VTOR_TBLOFF_W: u32 = 23;
pub const CPU_SCS_VTOR_TBLOFF_M: u32 = 1073741696;
pub const CPU_SCS_VTOR_TBLOFF_S: u32 = 7;
pub const CPU_SCS_AIRCR_VECTKEY_W: u32 = 16;
pub const CPU_SCS_AIRCR_VECTKEY_M: u32 = 4294901760;
pub const CPU_SCS_AIRCR_VECTKEY_S: u32 = 16;
pub const CPU_SCS_AIRCR_ENDIANESS: u32 = 32768;
pub const CPU_SCS_AIRCR_ENDIANESS_BITN: u32 = 15;
pub const CPU_SCS_AIRCR_ENDIANESS_M: u32 = 32768;
pub const CPU_SCS_AIRCR_ENDIANESS_S: u32 = 15;
pub const CPU_SCS_AIRCR_ENDIANESS_BIG: u32 = 32768;
pub const CPU_SCS_AIRCR_ENDIANESS_LITTLE: u32 = 0;
pub const CPU_SCS_AIRCR_PRIGROUP_W: u32 = 3;
pub const CPU_SCS_AIRCR_PRIGROUP_M: u32 = 1792;
pub const CPU_SCS_AIRCR_PRIGROUP_S: u32 = 8;
pub const CPU_SCS_AIRCR_SYSRESETREQ: u32 = 4;
pub const CPU_SCS_AIRCR_SYSRESETREQ_BITN: u32 = 2;
pub const CPU_SCS_AIRCR_SYSRESETREQ_M: u32 = 4;
pub const CPU_SCS_AIRCR_SYSRESETREQ_S: u32 = 2;
pub const CPU_SCS_AIRCR_VECTCLRACTIVE: u32 = 2;
pub const CPU_SCS_AIRCR_VECTCLRACTIVE_BITN: u32 = 1;
pub const CPU_SCS_AIRCR_VECTCLRACTIVE_M: u32 = 2;
pub const CPU_SCS_AIRCR_VECTCLRACTIVE_S: u32 = 1;
pub const CPU_SCS_AIRCR_VECTRESET: u32 = 1;
pub const CPU_SCS_AIRCR_VECTRESET_BITN: u32 = 0;
pub const CPU_SCS_AIRCR_VECTRESET_M: u32 = 1;
pub const CPU_SCS_AIRCR_VECTRESET_S: u32 = 0;
pub const CPU_SCS_SCR_SEVONPEND: u32 = 16;
pub const CPU_SCS_SCR_SEVONPEND_BITN: u32 = 4;
pub const CPU_SCS_SCR_SEVONPEND_M: u32 = 16;
pub const CPU_SCS_SCR_SEVONPEND_S: u32 = 4;
pub const CPU_SCS_SCR_SLEEPDEEP: u32 = 4;
pub const CPU_SCS_SCR_SLEEPDEEP_BITN: u32 = 2;
pub const CPU_SCS_SCR_SLEEPDEEP_M: u32 = 4;
pub const CPU_SCS_SCR_SLEEPDEEP_S: u32 = 2;
pub const CPU_SCS_SCR_SLEEPDEEP_DEEPSLEEP: u32 = 4;
pub const CPU_SCS_SCR_SLEEPDEEP_SLEEP: u32 = 0;
pub const CPU_SCS_SCR_SLEEPONEXIT: u32 = 2;
pub const CPU_SCS_SCR_SLEEPONEXIT_BITN: u32 = 1;
pub const CPU_SCS_SCR_SLEEPONEXIT_M: u32 = 2;
pub const CPU_SCS_SCR_SLEEPONEXIT_S: u32 = 1;
pub const CPU_SCS_CCR_STKALIGN: u32 = 512;
pub const CPU_SCS_CCR_STKALIGN_BITN: u32 = 9;
pub const CPU_SCS_CCR_STKALIGN_M: u32 = 512;
pub const CPU_SCS_CCR_STKALIGN_S: u32 = 9;
pub const CPU_SCS_CCR_BFHFNMIGN: u32 = 256;
pub const CPU_SCS_CCR_BFHFNMIGN_BITN: u32 = 8;
pub const CPU_SCS_CCR_BFHFNMIGN_M: u32 = 256;
pub const CPU_SCS_CCR_BFHFNMIGN_S: u32 = 8;
pub const CPU_SCS_CCR_DIV_0_TRP: u32 = 16;
pub const CPU_SCS_CCR_DIV_0_TRP_BITN: u32 = 4;
pub const CPU_SCS_CCR_DIV_0_TRP_M: u32 = 16;
pub const CPU_SCS_CCR_DIV_0_TRP_S: u32 = 4;
pub const CPU_SCS_CCR_UNALIGN_TRP: u32 = 8;
pub const CPU_SCS_CCR_UNALIGN_TRP_BITN: u32 = 3;
pub const CPU_SCS_CCR_UNALIGN_TRP_M: u32 = 8;
pub const CPU_SCS_CCR_UNALIGN_TRP_S: u32 = 3;
pub const CPU_SCS_CCR_USERSETMPEND: u32 = 2;
pub const CPU_SCS_CCR_USERSETMPEND_BITN: u32 = 1;
pub const CPU_SCS_CCR_USERSETMPEND_M: u32 = 2;
pub const CPU_SCS_CCR_USERSETMPEND_S: u32 = 1;
pub const CPU_SCS_CCR_NONBASETHREDENA: u32 = 1;
pub const CPU_SCS_CCR_NONBASETHREDENA_BITN: u32 = 0;
pub const CPU_SCS_CCR_NONBASETHREDENA_M: u32 = 1;
pub const CPU_SCS_CCR_NONBASETHREDENA_S: u32 = 0;
pub const CPU_SCS_SHPR1_PRI_6_W: u32 = 8;
pub const CPU_SCS_SHPR1_PRI_6_M: u32 = 16711680;
pub const CPU_SCS_SHPR1_PRI_6_S: u32 = 16;
pub const CPU_SCS_SHPR1_PRI_5_W: u32 = 8;
pub const CPU_SCS_SHPR1_PRI_5_M: u32 = 65280;
pub const CPU_SCS_SHPR1_PRI_5_S: u32 = 8;
pub const CPU_SCS_SHPR1_PRI_4_W: u32 = 8;
pub const CPU_SCS_SHPR1_PRI_4_M: u32 = 255;
pub const CPU_SCS_SHPR1_PRI_4_S: u32 = 0;
pub const CPU_SCS_SHPR2_PRI_11_W: u32 = 8;
pub const CPU_SCS_SHPR2_PRI_11_M: u32 = 4278190080;
pub const CPU_SCS_SHPR2_PRI_11_S: u32 = 24;
pub const CPU_SCS_SHPR3_PRI_15_W: u32 = 8;
pub const CPU_SCS_SHPR3_PRI_15_M: u32 = 4278190080;
pub const CPU_SCS_SHPR3_PRI_15_S: u32 = 24;
pub const CPU_SCS_SHPR3_PRI_14_W: u32 = 8;
pub const CPU_SCS_SHPR3_PRI_14_M: u32 = 16711680;
pub const CPU_SCS_SHPR3_PRI_14_S: u32 = 16;
pub const CPU_SCS_SHPR3_PRI_12_W: u32 = 8;
pub const CPU_SCS_SHPR3_PRI_12_M: u32 = 255;
pub const CPU_SCS_SHPR3_PRI_12_S: u32 = 0;
pub const CPU_SCS_SHCSR_USGFAULTENA: u32 = 262144;
pub const CPU_SCS_SHCSR_USGFAULTENA_BITN: u32 = 18;
pub const CPU_SCS_SHCSR_USGFAULTENA_M: u32 = 262144;
pub const CPU_SCS_SHCSR_USGFAULTENA_S: u32 = 18;
pub const CPU_SCS_SHCSR_USGFAULTENA_EN: u32 = 262144;
pub const CPU_SCS_SHCSR_USGFAULTENA_DIS: u32 = 0;
pub const CPU_SCS_SHCSR_BUSFAULTENA: u32 = 131072;
pub const CPU_SCS_SHCSR_BUSFAULTENA_BITN: u32 = 17;
pub const CPU_SCS_SHCSR_BUSFAULTENA_M: u32 = 131072;
pub const CPU_SCS_SHCSR_BUSFAULTENA_S: u32 = 17;
pub const CPU_SCS_SHCSR_BUSFAULTENA_EN: u32 = 131072;
pub const CPU_SCS_SHCSR_BUSFAULTENA_DIS: u32 = 0;
pub const CPU_SCS_SHCSR_MEMFAULTENA: u32 = 65536;
pub const CPU_SCS_SHCSR_MEMFAULTENA_BITN: u32 = 16;
pub const CPU_SCS_SHCSR_MEMFAULTENA_M: u32 = 65536;
pub const CPU_SCS_SHCSR_MEMFAULTENA_S: u32 = 16;
pub const CPU_SCS_SHCSR_MEMFAULTENA_EN: u32 = 65536;
pub const CPU_SCS_SHCSR_MEMFAULTENA_DIS: u32 = 0;
pub const CPU_SCS_SHCSR_SVCALLPENDED: u32 = 32768;
pub const CPU_SCS_SHCSR_SVCALLPENDED_BITN: u32 = 15;
pub const CPU_SCS_SHCSR_SVCALLPENDED_M: u32 = 32768;
pub const CPU_SCS_SHCSR_SVCALLPENDED_S: u32 = 15;
pub const CPU_SCS_SHCSR_SVCALLPENDED_PENDING: u32 = 32768;
pub const CPU_SCS_SHCSR_SVCALLPENDED_NOTPENDING: u32 = 0;
pub const CPU_SCS_SHCSR_BUSFAULTPENDED: u32 = 16384;
pub const CPU_SCS_SHCSR_BUSFAULTPENDED_BITN: u32 = 14;
pub const CPU_SCS_SHCSR_BUSFAULTPENDED_M: u32 = 16384;
pub const CPU_SCS_SHCSR_BUSFAULTPENDED_S: u32 = 14;
pub const CPU_SCS_SHCSR_BUSFAULTPENDED_PENDING: u32 = 16384;
pub const CPU_SCS_SHCSR_BUSFAULTPENDED_NOTPENDING: u32 = 0;
pub const CPU_SCS_SHCSR_MEMFAULTPENDED: u32 = 8192;
pub const CPU_SCS_SHCSR_MEMFAULTPENDED_BITN: u32 = 13;
pub const CPU_SCS_SHCSR_MEMFAULTPENDED_M: u32 = 8192;
pub const CPU_SCS_SHCSR_MEMFAULTPENDED_S: u32 = 13;
pub const CPU_SCS_SHCSR_MEMFAULTPENDED_PENDING: u32 = 8192;
pub const CPU_SCS_SHCSR_MEMFAULTPENDED_NOTPENDING: u32 = 0;
pub const CPU_SCS_SHCSR_USGFAULTPENDED: u32 = 4096;
pub const CPU_SCS_SHCSR_USGFAULTPENDED_BITN: u32 = 12;
pub const CPU_SCS_SHCSR_USGFAULTPENDED_M: u32 = 4096;
pub const CPU_SCS_SHCSR_USGFAULTPENDED_S: u32 = 12;
pub const CPU_SCS_SHCSR_USGFAULTPENDED_PENDING: u32 = 4096;
pub const CPU_SCS_SHCSR_USGFAULTPENDED_NOTPENDING: u32 = 0;
pub const CPU_SCS_SHCSR_SYSTICKACT: u32 = 2048;
pub const CPU_SCS_SHCSR_SYSTICKACT_BITN: u32 = 11;
pub const CPU_SCS_SHCSR_SYSTICKACT_M: u32 = 2048;
pub const CPU_SCS_SHCSR_SYSTICKACT_S: u32 = 11;
pub const CPU_SCS_SHCSR_SYSTICKACT_ACTIVE: u32 = 2048;
pub const CPU_SCS_SHCSR_SYSTICKACT_NOTACTIVE: u32 = 0;
pub const CPU_SCS_SHCSR_PENDSVACT: u32 = 1024;
pub const CPU_SCS_SHCSR_PENDSVACT_BITN: u32 = 10;
pub const CPU_SCS_SHCSR_PENDSVACT_M: u32 = 1024;
pub const CPU_SCS_SHCSR_PENDSVACT_S: u32 = 10;
pub const CPU_SCS_SHCSR_MONITORACT: u32 = 256;
pub const CPU_SCS_SHCSR_MONITORACT_BITN: u32 = 8;
pub const CPU_SCS_SHCSR_MONITORACT_M: u32 = 256;
pub const CPU_SCS_SHCSR_MONITORACT_S: u32 = 8;
pub const CPU_SCS_SHCSR_MONITORACT_ACTIVE: u32 = 256;
pub const CPU_SCS_SHCSR_MONITORACT_NOTACTIVE: u32 = 0;
pub const CPU_SCS_SHCSR_SVCALLACT: u32 = 128;
pub const CPU_SCS_SHCSR_SVCALLACT_BITN: u32 = 7;
pub const CPU_SCS_SHCSR_SVCALLACT_M: u32 = 128;
pub const CPU_SCS_SHCSR_SVCALLACT_S: u32 = 7;
pub const CPU_SCS_SHCSR_SVCALLACT_ACTIVE: u32 = 128;
pub const CPU_SCS_SHCSR_SVCALLACT_NOTACTIVE: u32 = 0;
pub const CPU_SCS_SHCSR_USGFAULTACT: u32 = 8;
pub const CPU_SCS_SHCSR_USGFAULTACT_BITN: u32 = 3;
pub const CPU_SCS_SHCSR_USGFAULTACT_M: u32 = 8;
pub const CPU_SCS_SHCSR_USGFAULTACT_S: u32 = 3;
pub const CPU_SCS_SHCSR_USGFAULTACT_ACTIVE: u32 = 8;
pub const CPU_SCS_SHCSR_USGFAULTACT_NOTACTIVE: u32 = 0;
pub const CPU_SCS_SHCSR_BUSFAULTACT: u32 = 2;
pub const CPU_SCS_SHCSR_BUSFAULTACT_BITN: u32 = 1;
pub const CPU_SCS_SHCSR_BUSFAULTACT_M: u32 = 2;
pub const CPU_SCS_SHCSR_BUSFAULTACT_S: u32 = 1;
pub const CPU_SCS_SHCSR_BUSFAULTACT_ACTIVE: u32 = 2;
pub const CPU_SCS_SHCSR_BUSFAULTACT_NOTACTIVE: u32 = 0;
pub const CPU_SCS_SHCSR_MEMFAULTACT: u32 = 1;
pub const CPU_SCS_SHCSR_MEMFAULTACT_BITN: u32 = 0;
pub const CPU_SCS_SHCSR_MEMFAULTACT_M: u32 = 1;
pub const CPU_SCS_SHCSR_MEMFAULTACT_S: u32 = 0;
pub const CPU_SCS_SHCSR_MEMFAULTACT_ACTIVE: u32 = 1;
pub const CPU_SCS_SHCSR_MEMFAULTACT_NOTACTIVE: u32 = 0;
pub const CPU_SCS_CFSR_DIVBYZERO: u32 = 33554432;
pub const CPU_SCS_CFSR_DIVBYZERO_BITN: u32 = 25;
pub const CPU_SCS_CFSR_DIVBYZERO_M: u32 = 33554432;
pub const CPU_SCS_CFSR_DIVBYZERO_S: u32 = 25;
pub const CPU_SCS_CFSR_UNALIGNED: u32 = 16777216;
pub const CPU_SCS_CFSR_UNALIGNED_BITN: u32 = 24;
pub const CPU_SCS_CFSR_UNALIGNED_M: u32 = 16777216;
pub const CPU_SCS_CFSR_UNALIGNED_S: u32 = 24;
pub const CPU_SCS_CFSR_NOCP: u32 = 524288;
pub const CPU_SCS_CFSR_NOCP_BITN: u32 = 19;
pub const CPU_SCS_CFSR_NOCP_M: u32 = 524288;
pub const CPU_SCS_CFSR_NOCP_S: u32 = 19;
pub const CPU_SCS_CFSR_INVPC: u32 = 262144;
pub const CPU_SCS_CFSR_INVPC_BITN: u32 = 18;
pub const CPU_SCS_CFSR_INVPC_M: u32 = 262144;
pub const CPU_SCS_CFSR_INVPC_S: u32 = 18;
pub const CPU_SCS_CFSR_INVSTATE: u32 = 131072;
pub const CPU_SCS_CFSR_INVSTATE_BITN: u32 = 17;
pub const CPU_SCS_CFSR_INVSTATE_M: u32 = 131072;
pub const CPU_SCS_CFSR_INVSTATE_S: u32 = 17;
pub const CPU_SCS_CFSR_UNDEFINSTR: u32 = 65536;
pub const CPU_SCS_CFSR_UNDEFINSTR_BITN: u32 = 16;
pub const CPU_SCS_CFSR_UNDEFINSTR_M: u32 = 65536;
pub const CPU_SCS_CFSR_UNDEFINSTR_S: u32 = 16;
pub const CPU_SCS_CFSR_BFARVALID: u32 = 32768;
pub const CPU_SCS_CFSR_BFARVALID_BITN: u32 = 15;
pub const CPU_SCS_CFSR_BFARVALID_M: u32 = 32768;
pub const CPU_SCS_CFSR_BFARVALID_S: u32 = 15;
pub const CPU_SCS_CFSR_STKERR: u32 = 4096;
pub const CPU_SCS_CFSR_STKERR_BITN: u32 = 12;
pub const CPU_SCS_CFSR_STKERR_M: u32 = 4096;
pub const CPU_SCS_CFSR_STKERR_S: u32 = 12;
pub const CPU_SCS_CFSR_UNSTKERR: u32 = 2048;
pub const CPU_SCS_CFSR_UNSTKERR_BITN: u32 = 11;
pub const CPU_SCS_CFSR_UNSTKERR_M: u32 = 2048;
pub const CPU_SCS_CFSR_UNSTKERR_S: u32 = 11;
pub const CPU_SCS_CFSR_IMPRECISERR: u32 = 1024;
pub const CPU_SCS_CFSR_IMPRECISERR_BITN: u32 = 10;
pub const CPU_SCS_CFSR_IMPRECISERR_M: u32 = 1024;
pub const CPU_SCS_CFSR_IMPRECISERR_S: u32 = 10;
pub const CPU_SCS_CFSR_PRECISERR: u32 = 512;
pub const CPU_SCS_CFSR_PRECISERR_BITN: u32 = 9;
pub const CPU_SCS_CFSR_PRECISERR_M: u32 = 512;
pub const CPU_SCS_CFSR_PRECISERR_S: u32 = 9;
pub const CPU_SCS_CFSR_IBUSERR: u32 = 256;
pub const CPU_SCS_CFSR_IBUSERR_BITN: u32 = 8;
pub const CPU_SCS_CFSR_IBUSERR_M: u32 = 256;
pub const CPU_SCS_CFSR_IBUSERR_S: u32 = 8;
pub const CPU_SCS_CFSR_MMARVALID: u32 = 128;
pub const CPU_SCS_CFSR_MMARVALID_BITN: u32 = 7;
pub const CPU_SCS_CFSR_MMARVALID_M: u32 = 128;
pub const CPU_SCS_CFSR_MMARVALID_S: u32 = 7;
pub const CPU_SCS_CFSR_MSTKERR: u32 = 16;
pub const CPU_SCS_CFSR_MSTKERR_BITN: u32 = 4;
pub const CPU_SCS_CFSR_MSTKERR_M: u32 = 16;
pub const CPU_SCS_CFSR_MSTKERR_S: u32 = 4;
pub const CPU_SCS_CFSR_MUNSTKERR: u32 = 8;
pub const CPU_SCS_CFSR_MUNSTKERR_BITN: u32 = 3;
pub const CPU_SCS_CFSR_MUNSTKERR_M: u32 = 8;
pub const CPU_SCS_CFSR_MUNSTKERR_S: u32 = 3;
pub const CPU_SCS_CFSR_DACCVIOL: u32 = 2;
pub const CPU_SCS_CFSR_DACCVIOL_BITN: u32 = 1;
pub const CPU_SCS_CFSR_DACCVIOL_M: u32 = 2;
pub const CPU_SCS_CFSR_DACCVIOL_S: u32 = 1;
pub const CPU_SCS_CFSR_IACCVIOL: u32 = 1;
pub const CPU_SCS_CFSR_IACCVIOL_BITN: u32 = 0;
pub const CPU_SCS_CFSR_IACCVIOL_M: u32 = 1;
pub const CPU_SCS_CFSR_IACCVIOL_S: u32 = 0;
pub const CPU_SCS_HFSR_DEBUGEVT: u32 = 2147483648;
pub const CPU_SCS_HFSR_DEBUGEVT_BITN: u32 = 31;
pub const CPU_SCS_HFSR_DEBUGEVT_M: u32 = 2147483648;
pub const CPU_SCS_HFSR_DEBUGEVT_S: u32 = 31;
pub const CPU_SCS_HFSR_FORCED: u32 = 1073741824;
pub const CPU_SCS_HFSR_FORCED_BITN: u32 = 30;
pub const CPU_SCS_HFSR_FORCED_M: u32 = 1073741824;
pub const CPU_SCS_HFSR_FORCED_S: u32 = 30;
pub const CPU_SCS_HFSR_VECTTBL: u32 = 2;
pub const CPU_SCS_HFSR_VECTTBL_BITN: u32 = 1;
pub const CPU_SCS_HFSR_VECTTBL_M: u32 = 2;
pub const CPU_SCS_HFSR_VECTTBL_S: u32 = 1;
pub const CPU_SCS_DFSR_EXTERNAL: u32 = 16;
pub const CPU_SCS_DFSR_EXTERNAL_BITN: u32 = 4;
pub const CPU_SCS_DFSR_EXTERNAL_M: u32 = 16;
pub const CPU_SCS_DFSR_EXTERNAL_S: u32 = 4;
pub const CPU_SCS_DFSR_VCATCH: u32 = 8;
pub const CPU_SCS_DFSR_VCATCH_BITN: u32 = 3;
pub const CPU_SCS_DFSR_VCATCH_M: u32 = 8;
pub const CPU_SCS_DFSR_VCATCH_S: u32 = 3;
pub const CPU_SCS_DFSR_DWTTRAP: u32 = 4;
pub const CPU_SCS_DFSR_DWTTRAP_BITN: u32 = 2;
pub const CPU_SCS_DFSR_DWTTRAP_M: u32 = 4;
pub const CPU_SCS_DFSR_DWTTRAP_S: u32 = 2;
pub const CPU_SCS_DFSR_BKPT: u32 = 2;
pub const CPU_SCS_DFSR_BKPT_BITN: u32 = 1;
pub const CPU_SCS_DFSR_BKPT_M: u32 = 2;
pub const CPU_SCS_DFSR_BKPT_S: u32 = 1;
pub const CPU_SCS_DFSR_HALTED: u32 = 1;
pub const CPU_SCS_DFSR_HALTED_BITN: u32 = 0;
pub const CPU_SCS_DFSR_HALTED_M: u32 = 1;
pub const CPU_SCS_DFSR_HALTED_S: u32 = 0;
pub const CPU_SCS_MMFAR_ADDRESS_W: u32 = 32;
pub const CPU_SCS_MMFAR_ADDRESS_M: u32 = 4294967295;
pub const CPU_SCS_MMFAR_ADDRESS_S: u32 = 0;
pub const CPU_SCS_BFAR_ADDRESS_W: u32 = 32;
pub const CPU_SCS_BFAR_ADDRESS_M: u32 = 4294967295;
pub const CPU_SCS_BFAR_ADDRESS_S: u32 = 0;
pub const CPU_SCS_AFSR_IMPDEF_W: u32 = 32;
pub const CPU_SCS_AFSR_IMPDEF_M: u32 = 4294967295;
pub const CPU_SCS_AFSR_IMPDEF_S: u32 = 0;
pub const CPU_SCS_ID_PFR0_STATE1_W: u32 = 4;
pub const CPU_SCS_ID_PFR0_STATE1_M: u32 = 240;
pub const CPU_SCS_ID_PFR0_STATE1_S: u32 = 4;
pub const CPU_SCS_ID_PFR0_STATE0_W: u32 = 4;
pub const CPU_SCS_ID_PFR0_STATE0_M: u32 = 15;
pub const CPU_SCS_ID_PFR0_STATE0_S: u32 = 0;
pub const CPU_SCS_ID_PFR1_MICROCONTROLLER_PROGRAMMERS_MODEL_W: u32 = 4;
pub const CPU_SCS_ID_PFR1_MICROCONTROLLER_PROGRAMMERS_MODEL_M: u32 = 3840;
pub const CPU_SCS_ID_PFR1_MICROCONTROLLER_PROGRAMMERS_MODEL_S: u32 = 8;
pub const CPU_SCS_ID_DFR0_MICROCONTROLLER_DEBUG_MODEL_W: u32 = 4;
pub const CPU_SCS_ID_DFR0_MICROCONTROLLER_DEBUG_MODEL_M: u32 = 15728640;
pub const CPU_SCS_ID_DFR0_MICROCONTROLLER_DEBUG_MODEL_S: u32 = 20;
pub const CPU_SCS_ID_MMFR2_WAIT_FOR_INTERRUPT_STALLING: u32 = 16777216;
pub const CPU_SCS_ID_MMFR2_WAIT_FOR_INTERRUPT_STALLING_BITN: u32 = 24;
pub const CPU_SCS_ID_MMFR2_WAIT_FOR_INTERRUPT_STALLING_M: u32 = 16777216;
pub const CPU_SCS_ID_MMFR2_WAIT_FOR_INTERRUPT_STALLING_S: u32 = 24;
pub const CPU_SCS_DHCSR_S_RESET_ST: u32 = 33554432;
pub const CPU_SCS_DHCSR_S_RESET_ST_BITN: u32 = 25;
pub const CPU_SCS_DHCSR_S_RESET_ST_M: u32 = 33554432;
pub const CPU_SCS_DHCSR_S_RESET_ST_S: u32 = 25;
pub const CPU_SCS_DHCSR_S_RETIRE_ST: u32 = 16777216;
pub const CPU_SCS_DHCSR_S_RETIRE_ST_BITN: u32 = 24;
pub const CPU_SCS_DHCSR_S_RETIRE_ST_M: u32 = 16777216;
pub const CPU_SCS_DHCSR_S_RETIRE_ST_S: u32 = 24;
pub const CPU_SCS_DHCSR_S_LOCKUP: u32 = 524288;
pub const CPU_SCS_DHCSR_S_LOCKUP_BITN: u32 = 19;
pub const CPU_SCS_DHCSR_S_LOCKUP_M: u32 = 524288;
pub const CPU_SCS_DHCSR_S_LOCKUP_S: u32 = 19;
pub const CPU_SCS_DHCSR_S_SLEEP: u32 = 262144;
pub const CPU_SCS_DHCSR_S_SLEEP_BITN: u32 = 18;
pub const CPU_SCS_DHCSR_S_SLEEP_M: u32 = 262144;
pub const CPU_SCS_DHCSR_S_SLEEP_S: u32 = 18;
pub const CPU_SCS_DHCSR_S_HALT: u32 = 131072;
pub const CPU_SCS_DHCSR_S_HALT_BITN: u32 = 17;
pub const CPU_SCS_DHCSR_S_HALT_M: u32 = 131072;
pub const CPU_SCS_DHCSR_S_HALT_S: u32 = 17;
pub const CPU_SCS_DHCSR_S_REGRDY: u32 = 65536;
pub const CPU_SCS_DHCSR_S_REGRDY_BITN: u32 = 16;
pub const CPU_SCS_DHCSR_S_REGRDY_M: u32 = 65536;
pub const CPU_SCS_DHCSR_S_REGRDY_S: u32 = 16;
pub const CPU_SCS_DHCSR_C_SNAPSTALL: u32 = 32;
pub const CPU_SCS_DHCSR_C_SNAPSTALL_BITN: u32 = 5;
pub const CPU_SCS_DHCSR_C_SNAPSTALL_M: u32 = 32;
pub const CPU_SCS_DHCSR_C_SNAPSTALL_S: u32 = 5;
pub const CPU_SCS_DHCSR_C_MASKINTS: u32 = 8;
pub const CPU_SCS_DHCSR_C_MASKINTS_BITN: u32 = 3;
pub const CPU_SCS_DHCSR_C_MASKINTS_M: u32 = 8;
pub const CPU_SCS_DHCSR_C_MASKINTS_S: u32 = 3;
pub const CPU_SCS_DHCSR_C_STEP: u32 = 4;
pub const CPU_SCS_DHCSR_C_STEP_BITN: u32 = 2;
pub const CPU_SCS_DHCSR_C_STEP_M: u32 = 4;
pub const CPU_SCS_DHCSR_C_STEP_S: u32 = 2;
pub const CPU_SCS_DHCSR_C_HALT: u32 = 2;
pub const CPU_SCS_DHCSR_C_HALT_BITN: u32 = 1;
pub const CPU_SCS_DHCSR_C_HALT_M: u32 = 2;
pub const CPU_SCS_DHCSR_C_HALT_S: u32 = 1;
pub const CPU_SCS_DHCSR_C_DEBUGEN: u32 = 1;
pub const CPU_SCS_DHCSR_C_DEBUGEN_BITN: u32 = 0;
pub const CPU_SCS_DHCSR_C_DEBUGEN_M: u32 = 1;
pub const CPU_SCS_DHCSR_C_DEBUGEN_S: u32 = 0;
pub const CPU_SCS_DCRSR_REGWNR: u32 = 65536;
pub const CPU_SCS_DCRSR_REGWNR_BITN: u32 = 16;
pub const CPU_SCS_DCRSR_REGWNR_M: u32 = 65536;
pub const CPU_SCS_DCRSR_REGWNR_S: u32 = 16;
pub const CPU_SCS_DCRSR_REGSEL_W: u32 = 5;
pub const CPU_SCS_DCRSR_REGSEL_M: u32 = 31;
pub const CPU_SCS_DCRSR_REGSEL_S: u32 = 0;
pub const CPU_SCS_DCRDR_DCRDR_W: u32 = 32;
pub const CPU_SCS_DCRDR_DCRDR_M: u32 = 4294967295;
pub const CPU_SCS_DCRDR_DCRDR_S: u32 = 0;
pub const CPU_SCS_DEMCR_TRCENA: u32 = 16777216;
pub const CPU_SCS_DEMCR_TRCENA_BITN: u32 = 24;
pub const CPU_SCS_DEMCR_TRCENA_M: u32 = 16777216;
pub const CPU_SCS_DEMCR_TRCENA_S: u32 = 24;
pub const CPU_SCS_DEMCR_MON_REQ: u32 = 524288;
pub const CPU_SCS_DEMCR_MON_REQ_BITN: u32 = 19;
pub const CPU_SCS_DEMCR_MON_REQ_M: u32 = 524288;
pub const CPU_SCS_DEMCR_MON_REQ_S: u32 = 19;
pub const CPU_SCS_DEMCR_MON_STEP: u32 = 262144;
pub const CPU_SCS_DEMCR_MON_STEP_BITN: u32 = 18;
pub const CPU_SCS_DEMCR_MON_STEP_M: u32 = 262144;
pub const CPU_SCS_DEMCR_MON_STEP_S: u32 = 18;
pub const CPU_SCS_DEMCR_MON_PEND: u32 = 131072;
pub const CPU_SCS_DEMCR_MON_PEND_BITN: u32 = 17;
pub const CPU_SCS_DEMCR_MON_PEND_M: u32 = 131072;
pub const CPU_SCS_DEMCR_MON_PEND_S: u32 = 17;
pub const CPU_SCS_DEMCR_MON_EN: u32 = 65536;
pub const CPU_SCS_DEMCR_MON_EN_BITN: u32 = 16;
pub const CPU_SCS_DEMCR_MON_EN_M: u32 = 65536;
pub const CPU_SCS_DEMCR_MON_EN_S: u32 = 16;
pub const CPU_SCS_DEMCR_VC_HARDERR: u32 = 1024;
pub const CPU_SCS_DEMCR_VC_HARDERR_BITN: u32 = 10;
pub const CPU_SCS_DEMCR_VC_HARDERR_M: u32 = 1024;
pub const CPU_SCS_DEMCR_VC_HARDERR_S: u32 = 10;
pub const CPU_SCS_DEMCR_VC_INTERR: u32 = 512;
pub const CPU_SCS_DEMCR_VC_INTERR_BITN: u32 = 9;
pub const CPU_SCS_DEMCR_VC_INTERR_M: u32 = 512;
pub const CPU_SCS_DEMCR_VC_INTERR_S: u32 = 9;
pub const CPU_SCS_DEMCR_VC_BUSERR: u32 = 256;
pub const CPU_SCS_DEMCR_VC_BUSERR_BITN: u32 = 8;
pub const CPU_SCS_DEMCR_VC_BUSERR_M: u32 = 256;
pub const CPU_SCS_DEMCR_VC_BUSERR_S: u32 = 8;
pub const CPU_SCS_DEMCR_VC_STATERR: u32 = 128;
pub const CPU_SCS_DEMCR_VC_STATERR_BITN: u32 = 7;
pub const CPU_SCS_DEMCR_VC_STATERR_M: u32 = 128;
pub const CPU_SCS_DEMCR_VC_STATERR_S: u32 = 7;
pub const CPU_SCS_DEMCR_VC_CHKERR: u32 = 64;
pub const CPU_SCS_DEMCR_VC_CHKERR_BITN: u32 = 6;
pub const CPU_SCS_DEMCR_VC_CHKERR_M: u32 = 64;
pub const CPU_SCS_DEMCR_VC_CHKERR_S: u32 = 6;
pub const CPU_SCS_DEMCR_VC_NOCPERR: u32 = 32;
pub const CPU_SCS_DEMCR_VC_NOCPERR_BITN: u32 = 5;
pub const CPU_SCS_DEMCR_VC_NOCPERR_M: u32 = 32;
pub const CPU_SCS_DEMCR_VC_NOCPERR_S: u32 = 5;
pub const CPU_SCS_DEMCR_VC_MMERR: u32 = 16;
pub const CPU_SCS_DEMCR_VC_MMERR_BITN: u32 = 4;
pub const CPU_SCS_DEMCR_VC_MMERR_M: u32 = 16;
pub const CPU_SCS_DEMCR_VC_MMERR_S: u32 = 4;
pub const CPU_SCS_DEMCR_VC_CORERESET: u32 = 1;
pub const CPU_SCS_DEMCR_VC_CORERESET_BITN: u32 = 0;
pub const CPU_SCS_DEMCR_VC_CORERESET_M: u32 = 1;
pub const CPU_SCS_DEMCR_VC_CORERESET_S: u32 = 0;
pub const CPU_SCS_STIR_INTID_W: u32 = 9;
pub const CPU_SCS_STIR_INTID_M: u32 = 511;
pub const CPU_SCS_STIR_INTID_S: u32 = 0;
pub const DDI_SLAVE_REGS: u32 = 64;
pub const DDI_PROTECT: u32 = 128;
pub const DDI_ACK: u32 = 1;
pub const DDI_SYNC: u32 = 0;
pub const ADI_SLAVE_REGS: u32 = 16;
pub const ADI_PROTECT: u32 = 128;
pub const ADI_ACK: u32 = 1;
pub const ADI_SYNC: u32 = 0;
pub const AON_BATMON_O_CTL: u32 = 0;
pub const AON_BATMON_O_MEASCFG: u32 = 4;
pub const AON_BATMON_O_TEMPP0: u32 = 12;
pub const AON_BATMON_O_TEMPP1: u32 = 16;
pub const AON_BATMON_O_TEMPP2: u32 = 20;
pub const AON_BATMON_O_BATMONP0: u32 = 24;
pub const AON_BATMON_O_BATMONP1: u32 = 28;
pub const AON_BATMON_O_IOSTRP0: u32 = 32;
pub const AON_BATMON_O_FLASHPUMPP0: u32 = 36;
pub const AON_BATMON_O_BAT: u32 = 40;
pub const AON_BATMON_O_BATUPD: u32 = 44;
pub const AON_BATMON_O_TEMP: u32 = 48;
pub const AON_BATMON_O_TEMPUPD: u32 = 52;
pub const AON_BATMON_CTL_CALC_EN: u32 = 2;
pub const AON_BATMON_CTL_CALC_EN_BITN: u32 = 1;
pub const AON_BATMON_CTL_CALC_EN_M: u32 = 2;
pub const AON_BATMON_CTL_CALC_EN_S: u32 = 1;
pub const AON_BATMON_CTL_MEAS_EN: u32 = 1;
pub const AON_BATMON_CTL_MEAS_EN_BITN: u32 = 0;
pub const AON_BATMON_CTL_MEAS_EN_M: u32 = 1;
pub const AON_BATMON_CTL_MEAS_EN_S: u32 = 0;
pub const AON_BATMON_MEASCFG_PER_W: u32 = 2;
pub const AON_BATMON_MEASCFG_PER_M: u32 = 3;
pub const AON_BATMON_MEASCFG_PER_S: u32 = 0;
pub const AON_BATMON_MEASCFG_PER_32CYC: u32 = 3;
pub const AON_BATMON_MEASCFG_PER_16CYC: u32 = 2;
pub const AON_BATMON_MEASCFG_PER_8CYC: u32 = 1;
pub const AON_BATMON_MEASCFG_PER_CONT: u32 = 0;
pub const AON_BATMON_TEMPP0_CFG_W: u32 = 8;
pub const AON_BATMON_TEMPP0_CFG_M: u32 = 255;
pub const AON_BATMON_TEMPP0_CFG_S: u32 = 0;
pub const AON_BATMON_TEMPP1_CFG_W: u32 = 6;
pub const AON_BATMON_TEMPP1_CFG_M: u32 = 63;
pub const AON_BATMON_TEMPP1_CFG_S: u32 = 0;
pub const AON_BATMON_TEMPP2_CFG_W: u32 = 5;
pub const AON_BATMON_TEMPP2_CFG_M: u32 = 31;
pub const AON_BATMON_TEMPP2_CFG_S: u32 = 0;
pub const AON_BATMON_BATMONP0_CFG_W: u32 = 6;
pub const AON_BATMON_BATMONP0_CFG_M: u32 = 63;
pub const AON_BATMON_BATMONP0_CFG_S: u32 = 0;
pub const AON_BATMON_BATMONP1_CFG_W: u32 = 6;
pub const AON_BATMON_BATMONP1_CFG_M: u32 = 63;
pub const AON_BATMON_BATMONP1_CFG_S: u32 = 0;
pub const AON_BATMON_IOSTRP0_CFG2_W: u32 = 2;
pub const AON_BATMON_IOSTRP0_CFG2_M: u32 = 48;
pub const AON_BATMON_IOSTRP0_CFG2_S: u32 = 4;
pub const AON_BATMON_IOSTRP0_CFG1_W: u32 = 4;
pub const AON_BATMON_IOSTRP0_CFG1_M: u32 = 15;
pub const AON_BATMON_IOSTRP0_CFG1_S: u32 = 0;
pub const AON_BATMON_FLASHPUMPP0_FALLB: u32 = 256;
pub const AON_BATMON_FLASHPUMPP0_FALLB_BITN: u32 = 8;
pub const AON_BATMON_FLASHPUMPP0_FALLB_M: u32 = 256;
pub const AON_BATMON_FLASHPUMPP0_FALLB_S: u32 = 8;
pub const AON_BATMON_FLASHPUMPP0_HIGHLIM_W: u32 = 2;
pub const AON_BATMON_FLASHPUMPP0_HIGHLIM_M: u32 = 192;
pub const AON_BATMON_FLASHPUMPP0_HIGHLIM_S: u32 = 6;
pub const AON_BATMON_FLASHPUMPP0_LOWLIM: u32 = 32;
pub const AON_BATMON_FLASHPUMPP0_LOWLIM_BITN: u32 = 5;
pub const AON_BATMON_FLASHPUMPP0_LOWLIM_M: u32 = 32;
pub const AON_BATMON_FLASHPUMPP0_LOWLIM_S: u32 = 5;
pub const AON_BATMON_FLASHPUMPP0_OVR: u32 = 16;
pub const AON_BATMON_FLASHPUMPP0_OVR_BITN: u32 = 4;
pub const AON_BATMON_FLASHPUMPP0_OVR_M: u32 = 16;
pub const AON_BATMON_FLASHPUMPP0_OVR_S: u32 = 4;
pub const AON_BATMON_FLASHPUMPP0_CFG_W: u32 = 4;
pub const AON_BATMON_FLASHPUMPP0_CFG_M: u32 = 15;
pub const AON_BATMON_FLASHPUMPP0_CFG_S: u32 = 0;
pub const AON_BATMON_BAT_INT_W: u32 = 3;
pub const AON_BATMON_BAT_INT_M: u32 = 1792;
pub const AON_BATMON_BAT_INT_S: u32 = 8;
pub const AON_BATMON_BAT_FRAC_W: u32 = 8;
pub const AON_BATMON_BAT_FRAC_M: u32 = 255;
pub const AON_BATMON_BAT_FRAC_S: u32 = 0;
pub const AON_BATMON_BATUPD_STAT: u32 = 1;
pub const AON_BATMON_BATUPD_STAT_BITN: u32 = 0;
pub const AON_BATMON_BATUPD_STAT_M: u32 = 1;
pub const AON_BATMON_BATUPD_STAT_S: u32 = 0;
pub const AON_BATMON_TEMP_INT_W: u32 = 9;
pub const AON_BATMON_TEMP_INT_M: u32 = 130816;
pub const AON_BATMON_TEMP_INT_S: u32 = 8;
pub const AON_BATMON_TEMPUPD_STAT: u32 = 1;
pub const AON_BATMON_TEMPUPD_STAT_BITN: u32 = 0;
pub const AON_BATMON_TEMPUPD_STAT_M: u32 = 1;
pub const AON_BATMON_TEMPUPD_STAT_S: u32 = 0;
pub const AON_EVENT_O_MCUWUSEL: u32 = 0;
pub const AON_EVENT_O_AUXWUSEL: u32 = 4;
pub const AON_EVENT_O_EVTOMCUSEL: u32 = 8;
pub const AON_EVENT_O_RTCSEL: u32 = 12;
pub const AON_EVENT_MCUWUSEL_WU3_EV_W: u32 = 6;
pub const AON_EVENT_MCUWUSEL_WU3_EV_M: u32 = 1056964608;
pub const AON_EVENT_MCUWUSEL_WU3_EV_S: u32 = 24;
pub const AON_EVENT_MCUWUSEL_WU3_EV_NONE: u32 = 1056964608;
pub const AON_EVENT_MCUWUSEL_WU3_EV_AUX_COMPB_ASYNC_N: u32 = 939524096;
pub const AON_EVENT_MCUWUSEL_WU3_EV_AUX_COMPB_ASYNC: u32 = 922746880;
pub const AON_EVENT_MCUWUSEL_WU3_EV_BATMON_VOLT: u32 = 905969664;
pub const AON_EVENT_MCUWUSEL_WU3_EV_BATMON_TEMP: u32 = 889192448;
pub const AON_EVENT_MCUWUSEL_WU3_EV_AUX_TIMER1_EV: u32 = 872415232;
pub const AON_EVENT_MCUWUSEL_WU3_EV_AUX_TIMER0_EV: u32 = 855638016;
pub const AON_EVENT_MCUWUSEL_WU3_EV_AUX_TDC_DONE: u32 = 838860800;
pub const AON_EVENT_MCUWUSEL_WU3_EV_AUX_ADC_DONE: u32 = 822083584;
pub const AON_EVENT_MCUWUSEL_WU3_EV_AUX_COMPB: u32 = 805306368;
pub const AON_EVENT_MCUWUSEL_WU3_EV_AUX_COMPA: u32 = 788529152;
pub const AON_EVENT_MCUWUSEL_WU3_EV_AUX_SWEV2: u32 = 771751936;
pub const AON_EVENT_MCUWUSEL_WU3_EV_AUX_SWEV1: u32 = 754974720;
pub const AON_EVENT_MCUWUSEL_WU3_EV_AUX_SWEV0: u32 = 738197504;
pub const AON_EVENT_MCUWUSEL_WU3_EV_JTAG: u32 = 721420288;
pub const AON_EVENT_MCUWUSEL_WU3_EV_RTC_UPD: u32 = 704643072;
pub const AON_EVENT_MCUWUSEL_WU3_EV_RTC_COMB_DLY: u32 = 687865856;
pub const AON_EVENT_MCUWUSEL_WU3_EV_RTC_CH2_DLY: u32 = 671088640;
pub const AON_EVENT_MCUWUSEL_WU3_EV_RTC_CH1_DLY: u32 = 654311424;
pub const AON_EVENT_MCUWUSEL_WU3_EV_RTC_CH0_DLY: u32 = 637534208;
pub const AON_EVENT_MCUWUSEL_WU3_EV_RTC_CH2: u32 = 620756992;
pub const AON_EVENT_MCUWUSEL_WU3_EV_RTC_CH1: u32 = 603979776;
pub const AON_EVENT_MCUWUSEL_WU3_EV_RTC_CH0: u32 = 587202560;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD: u32 = 536870912;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD31: u32 = 520093696;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD30: u32 = 503316480;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD29: u32 = 486539264;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD28: u32 = 469762048;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD27: u32 = 452984832;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD26: u32 = 436207616;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD25: u32 = 419430400;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD24: u32 = 402653184;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD23: u32 = 385875968;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD22: u32 = 369098752;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD21: u32 = 352321536;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD20: u32 = 335544320;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD19: u32 = 318767104;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD18: u32 = 301989888;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD17: u32 = 285212672;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD16: u32 = 268435456;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD15: u32 = 251658240;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD14: u32 = 234881024;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD13: u32 = 218103808;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD12: u32 = 201326592;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD11: u32 = 184549376;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD10: u32 = 167772160;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD9: u32 = 150994944;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD8: u32 = 134217728;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD7: u32 = 117440512;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD6: u32 = 100663296;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD5: u32 = 83886080;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD4: u32 = 67108864;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD3: u32 = 50331648;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD2: u32 = 33554432;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD1: u32 = 16777216;
pub const AON_EVENT_MCUWUSEL_WU3_EV_PAD0: u32 = 0;
pub const AON_EVENT_MCUWUSEL_WU2_EV_W: u32 = 6;
pub const AON_EVENT_MCUWUSEL_WU2_EV_M: u32 = 4128768;
pub const AON_EVENT_MCUWUSEL_WU2_EV_S: u32 = 16;
pub const AON_EVENT_MCUWUSEL_WU2_EV_NONE: u32 = 4128768;
pub const AON_EVENT_MCUWUSEL_WU2_EV_AUX_COMPB_ASYNC_N: u32 = 3670016;
pub const AON_EVENT_MCUWUSEL_WU2_EV_AUX_COMPB_ASYNC: u32 = 3604480;
pub const AON_EVENT_MCUWUSEL_WU2_EV_BATMON_VOLT: u32 = 3538944;
pub const AON_EVENT_MCUWUSEL_WU2_EV_BATMON_TEMP: u32 = 3473408;
pub const AON_EVENT_MCUWUSEL_WU2_EV_AUX_TIMER1_EV: u32 = 3407872;
pub const AON_EVENT_MCUWUSEL_WU2_EV_AUX_TIMER0_EV: u32 = 3342336;
pub const AON_EVENT_MCUWUSEL_WU2_EV_AUX_TDC_DONE: u32 = 3276800;
pub const AON_EVENT_MCUWUSEL_WU2_EV_AUX_ADC_DONE: u32 = 3211264;
pub const AON_EVENT_MCUWUSEL_WU2_EV_AUX_COMPB: u32 = 3145728;
pub const AON_EVENT_MCUWUSEL_WU2_EV_AUX_COMPA: u32 = 3080192;
pub const AON_EVENT_MCUWUSEL_WU2_EV_AUX_SWEV2: u32 = 3014656;
pub const AON_EVENT_MCUWUSEL_WU2_EV_AUX_SWEV1: u32 = 2949120;
pub const AON_EVENT_MCUWUSEL_WU2_EV_AUX_SWEV0: u32 = 2883584;
pub const AON_EVENT_MCUWUSEL_WU2_EV_JTAG: u32 = 2818048;
pub const AON_EVENT_MCUWUSEL_WU2_EV_RTC_UPD: u32 = 2752512;
pub const AON_EVENT_MCUWUSEL_WU2_EV_RTC_COMB_DLY: u32 = 2686976;
pub const AON_EVENT_MCUWUSEL_WU2_EV_RTC_CH2_DLY: u32 = 2621440;
pub const AON_EVENT_MCUWUSEL_WU2_EV_RTC_CH1_DLY: u32 = 2555904;
pub const AON_EVENT_MCUWUSEL_WU2_EV_RTC_CH0_DLY: u32 = 2490368;
pub const AON_EVENT_MCUWUSEL_WU2_EV_RTC_CH2: u32 = 2424832;
pub const AON_EVENT_MCUWUSEL_WU2_EV_RTC_CH1: u32 = 2359296;
pub const AON_EVENT_MCUWUSEL_WU2_EV_RTC_CH0: u32 = 2293760;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD: u32 = 2097152;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD31: u32 = 2031616;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD30: u32 = 1966080;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD29: u32 = 1900544;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD28: u32 = 1835008;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD27: u32 = 1769472;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD26: u32 = 1703936;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD25: u32 = 1638400;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD24: u32 = 1572864;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD23: u32 = 1507328;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD22: u32 = 1441792;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD21: u32 = 1376256;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD20: u32 = 1310720;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD19: u32 = 1245184;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD18: u32 = 1179648;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD17: u32 = 1114112;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD16: u32 = 1048576;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD15: u32 = 983040;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD14: u32 = 917504;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD13: u32 = 851968;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD12: u32 = 786432;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD11: u32 = 720896;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD10: u32 = 655360;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD9: u32 = 589824;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD8: u32 = 524288;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD7: u32 = 458752;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD6: u32 = 393216;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD5: u32 = 327680;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD4: u32 = 262144;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD3: u32 = 196608;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD2: u32 = 131072;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD1: u32 = 65536;
pub const AON_EVENT_MCUWUSEL_WU2_EV_PAD0: u32 = 0;
pub const AON_EVENT_MCUWUSEL_WU1_EV_W: u32 = 6;
pub const AON_EVENT_MCUWUSEL_WU1_EV_M: u32 = 16128;
pub const AON_EVENT_MCUWUSEL_WU1_EV_S: u32 = 8;
pub const AON_EVENT_MCUWUSEL_WU1_EV_NONE: u32 = 16128;
pub const AON_EVENT_MCUWUSEL_WU1_EV_AUX_COMPB_ASYNC_N: u32 = 14336;
pub const AON_EVENT_MCUWUSEL_WU1_EV_AUX_COMPB_ASYNC: u32 = 14080;
pub const AON_EVENT_MCUWUSEL_WU1_EV_BATMON_VOLT: u32 = 13824;
pub const AON_EVENT_MCUWUSEL_WU1_EV_BATMON_TEMP: u32 = 13568;
pub const AON_EVENT_MCUWUSEL_WU1_EV_AUX_TIMER1_EV: u32 = 13312;
pub const AON_EVENT_MCUWUSEL_WU1_EV_AUX_TIMER0_EV: u32 = 13056;
pub const AON_EVENT_MCUWUSEL_WU1_EV_AUX_TDC_DONE: u32 = 12800;
pub const AON_EVENT_MCUWUSEL_WU1_EV_AUX_ADC_DONE: u32 = 12544;
pub const AON_EVENT_MCUWUSEL_WU1_EV_AUX_COMPB: u32 = 12288;
pub const AON_EVENT_MCUWUSEL_WU1_EV_AUX_COMPA: u32 = 12032;
pub const AON_EVENT_MCUWUSEL_WU1_EV_AUX_SWEV2: u32 = 11776;
pub const AON_EVENT_MCUWUSEL_WU1_EV_AUX_SWEV1: u32 = 11520;
pub const AON_EVENT_MCUWUSEL_WU1_EV_AUX_SWEV0: u32 = 11264;
pub const AON_EVENT_MCUWUSEL_WU1_EV_JTAG: u32 = 11008;
pub const AON_EVENT_MCUWUSEL_WU1_EV_RTC_UPD: u32 = 10752;
pub const AON_EVENT_MCUWUSEL_WU1_EV_RTC_COMB_DLY: u32 = 10496;
pub const AON_EVENT_MCUWUSEL_WU1_EV_RTC_CH2_DLY: u32 = 10240;
pub const AON_EVENT_MCUWUSEL_WU1_EV_RTC_CH1_DLY: u32 = 9984;
pub const AON_EVENT_MCUWUSEL_WU1_EV_RTC_CH0_DLY: u32 = 9728;
pub const AON_EVENT_MCUWUSEL_WU1_EV_RTC_CH2: u32 = 9472;
pub const AON_EVENT_MCUWUSEL_WU1_EV_RTC_CH1: u32 = 9216;
pub const AON_EVENT_MCUWUSEL_WU1_EV_RTC_CH0: u32 = 8960;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD: u32 = 8192;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD31: u32 = 7936;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD30: u32 = 7680;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD29: u32 = 7424;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD28: u32 = 7168;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD27: u32 = 6912;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD26: u32 = 6656;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD25: u32 = 6400;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD24: u32 = 6144;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD23: u32 = 5888;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD22: u32 = 5632;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD21: u32 = 5376;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD20: u32 = 5120;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD19: u32 = 4864;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD18: u32 = 4608;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD17: u32 = 4352;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD16: u32 = 4096;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD15: u32 = 3840;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD14: u32 = 3584;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD13: u32 = 3328;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD12: u32 = 3072;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD11: u32 = 2816;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD10: u32 = 2560;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD9: u32 = 2304;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD8: u32 = 2048;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD7: u32 = 1792;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD6: u32 = 1536;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD5: u32 = 1280;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD4: u32 = 1024;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD3: u32 = 768;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD2: u32 = 512;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD1: u32 = 256;
pub const AON_EVENT_MCUWUSEL_WU1_EV_PAD0: u32 = 0;
pub const AON_EVENT_MCUWUSEL_WU0_EV_W: u32 = 6;
pub const AON_EVENT_MCUWUSEL_WU0_EV_M: u32 = 63;
pub const AON_EVENT_MCUWUSEL_WU0_EV_S: u32 = 0;
pub const AON_EVENT_MCUWUSEL_WU0_EV_NONE: u32 = 63;
pub const AON_EVENT_MCUWUSEL_WU0_EV_AUX_COMPB_ASYNC_N: u32 = 56;
pub const AON_EVENT_MCUWUSEL_WU0_EV_AUX_COMPB_ASYNC: u32 = 55;
pub const AON_EVENT_MCUWUSEL_WU0_EV_BATMON_VOLT: u32 = 54;
pub const AON_EVENT_MCUWUSEL_WU0_EV_BATMON_TEMP: u32 = 53;
pub const AON_EVENT_MCUWUSEL_WU0_EV_AUX_TIMER1_EV: u32 = 52;
pub const AON_EVENT_MCUWUSEL_WU0_EV_AUX_TIMER0_EV: u32 = 51;
pub const AON_EVENT_MCUWUSEL_WU0_EV_AUX_TDC_DONE: u32 = 50;
pub const AON_EVENT_MCUWUSEL_WU0_EV_AUX_ADC_DONE: u32 = 49;
pub const AON_EVENT_MCUWUSEL_WU0_EV_AUX_COMPB: u32 = 48;
pub const AON_EVENT_MCUWUSEL_WU0_EV_AUX_COMPA: u32 = 47;
pub const AON_EVENT_MCUWUSEL_WU0_EV_AUX_SWEV2: u32 = 46;
pub const AON_EVENT_MCUWUSEL_WU0_EV_AUX_SWEV1: u32 = 45;
pub const AON_EVENT_MCUWUSEL_WU0_EV_AUX_SWEV0: u32 = 44;
pub const AON_EVENT_MCUWUSEL_WU0_EV_JTAG: u32 = 43;
pub const AON_EVENT_MCUWUSEL_WU0_EV_RTC_UPD: u32 = 42;
pub const AON_EVENT_MCUWUSEL_WU0_EV_RTC_COMB_DLY: u32 = 41;
pub const AON_EVENT_MCUWUSEL_WU0_EV_RTC_CH2_DLY: u32 = 40;
pub const AON_EVENT_MCUWUSEL_WU0_EV_RTC_CH1_DLY: u32 = 39;
pub const AON_EVENT_MCUWUSEL_WU0_EV_RTC_CH0_DLY: u32 = 38;
pub const AON_EVENT_MCUWUSEL_WU0_EV_RTC_CH2: u32 = 37;
pub const AON_EVENT_MCUWUSEL_WU0_EV_RTC_CH1: u32 = 36;
pub const AON_EVENT_MCUWUSEL_WU0_EV_RTC_CH0: u32 = 35;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD: u32 = 32;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD31: u32 = 31;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD30: u32 = 30;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD29: u32 = 29;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD28: u32 = 28;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD27: u32 = 27;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD26: u32 = 26;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD25: u32 = 25;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD24: u32 = 24;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD23: u32 = 23;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD22: u32 = 22;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD21: u32 = 21;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD20: u32 = 20;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD19: u32 = 19;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD18: u32 = 18;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD17: u32 = 17;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD16: u32 = 16;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD15: u32 = 15;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD14: u32 = 14;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD13: u32 = 13;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD12: u32 = 12;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD11: u32 = 11;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD10: u32 = 10;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD9: u32 = 9;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD8: u32 = 8;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD7: u32 = 7;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD6: u32 = 6;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD5: u32 = 5;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD4: u32 = 4;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD3: u32 = 3;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD2: u32 = 2;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD1: u32 = 1;
pub const AON_EVENT_MCUWUSEL_WU0_EV_PAD0: u32 = 0;
pub const AON_EVENT_AUXWUSEL_WU2_EV_W: u32 = 6;
pub const AON_EVENT_AUXWUSEL_WU2_EV_M: u32 = 4128768;
pub const AON_EVENT_AUXWUSEL_WU2_EV_S: u32 = 16;
pub const AON_EVENT_AUXWUSEL_WU2_EV_NONE: u32 = 4128768;
pub const AON_EVENT_AUXWUSEL_WU2_EV_AUX_COMPB_ASYNC_N: u32 = 3670016;
pub const AON_EVENT_AUXWUSEL_WU2_EV_AUX_COMPB_ASYNC: u32 = 3604480;
pub const AON_EVENT_AUXWUSEL_WU2_EV_BATMON_VOLT: u32 = 3538944;
pub const AON_EVENT_AUXWUSEL_WU2_EV_BATMON_TEMP: u32 = 3473408;
pub const AON_EVENT_AUXWUSEL_WU2_EV_AUX_TIMER1_EV: u32 = 3407872;
pub const AON_EVENT_AUXWUSEL_WU2_EV_AUX_TIMER0_EV: u32 = 3342336;
pub const AON_EVENT_AUXWUSEL_WU2_EV_AUX_TDC_DONE: u32 = 3276800;
pub const AON_EVENT_AUXWUSEL_WU2_EV_AUX_ADC_DONE: u32 = 3211264;
pub const AON_EVENT_AUXWUSEL_WU2_EV_AUX_COMPB: u32 = 3145728;
pub const AON_EVENT_AUXWUSEL_WU2_EV_AUX_COMPA: u32 = 3080192;
pub const AON_EVENT_AUXWUSEL_WU2_EV_AUX_SWEV2: u32 = 3014656;
pub const AON_EVENT_AUXWUSEL_WU2_EV_AUX_SWEV1: u32 = 2949120;
pub const AON_EVENT_AUXWUSEL_WU2_EV_AUX_SWEV0: u32 = 2883584;
pub const AON_EVENT_AUXWUSEL_WU2_EV_JTAG: u32 = 2818048;
pub const AON_EVENT_AUXWUSEL_WU2_EV_RTC_UPD: u32 = 2752512;
pub const AON_EVENT_AUXWUSEL_WU2_EV_RTC_COMB_DLY: u32 = 2686976;
pub const AON_EVENT_AUXWUSEL_WU2_EV_RTC_CH2_DLY: u32 = 2621440;
pub const AON_EVENT_AUXWUSEL_WU2_EV_RTC_CH1_DLY: u32 = 2555904;
pub const AON_EVENT_AUXWUSEL_WU2_EV_RTC_CH0_DLY: u32 = 2490368;
pub const AON_EVENT_AUXWUSEL_WU2_EV_RTC_CH2: u32 = 2424832;
pub const AON_EVENT_AUXWUSEL_WU2_EV_RTC_CH1: u32 = 2359296;
pub const AON_EVENT_AUXWUSEL_WU2_EV_RTC_CH0: u32 = 2293760;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD: u32 = 2097152;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD31: u32 = 2031616;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD30: u32 = 1966080;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD29: u32 = 1900544;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD28: u32 = 1835008;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD27: u32 = 1769472;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD26: u32 = 1703936;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD25: u32 = 1638400;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD24: u32 = 1572864;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD23: u32 = 1507328;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD22: u32 = 1441792;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD21: u32 = 1376256;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD20: u32 = 1310720;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD19: u32 = 1245184;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD18: u32 = 1179648;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD17: u32 = 1114112;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD16: u32 = 1048576;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD15: u32 = 983040;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD14: u32 = 917504;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD13: u32 = 851968;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD12: u32 = 786432;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD11: u32 = 720896;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD10: u32 = 655360;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD9: u32 = 589824;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD8: u32 = 524288;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD7: u32 = 458752;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD6: u32 = 393216;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD5: u32 = 327680;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD4: u32 = 262144;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD3: u32 = 196608;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD2: u32 = 131072;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD1: u32 = 65536;
pub const AON_EVENT_AUXWUSEL_WU2_EV_PAD0: u32 = 0;
pub const AON_EVENT_AUXWUSEL_WU1_EV_W: u32 = 6;
pub const AON_EVENT_AUXWUSEL_WU1_EV_M: u32 = 16128;
pub const AON_EVENT_AUXWUSEL_WU1_EV_S: u32 = 8;
pub const AON_EVENT_AUXWUSEL_WU1_EV_NONE: u32 = 16128;
pub const AON_EVENT_AUXWUSEL_WU1_EV_AUX_COMPB_ASYNC_N: u32 = 14336;
pub const AON_EVENT_AUXWUSEL_WU1_EV_AUX_COMPB_ASYNC: u32 = 14080;
pub const AON_EVENT_AUXWUSEL_WU1_EV_BATMON_VOLT: u32 = 13824;
pub const AON_EVENT_AUXWUSEL_WU1_EV_BATMON_TEMP: u32 = 13568;
pub const AON_EVENT_AUXWUSEL_WU1_EV_AUX_TIMER1_EV: u32 = 13312;
pub const AON_EVENT_AUXWUSEL_WU1_EV_AUX_TIMER0_EV: u32 = 13056;
pub const AON_EVENT_AUXWUSEL_WU1_EV_AUX_TDC_DONE: u32 = 12800;
pub const AON_EVENT_AUXWUSEL_WU1_EV_AUX_ADC_DONE: u32 = 12544;
pub const AON_EVENT_AUXWUSEL_WU1_EV_AUX_COMPB: u32 = 12288;
pub const AON_EVENT_AUXWUSEL_WU1_EV_AUX_COMPA: u32 = 12032;
pub const AON_EVENT_AUXWUSEL_WU1_EV_AUX_SWEV2: u32 = 11776;
pub const AON_EVENT_AUXWUSEL_WU1_EV_AUX_SWEV1: u32 = 11520;
pub const AON_EVENT_AUXWUSEL_WU1_EV_AUX_SWEV0: u32 = 11264;
pub const AON_EVENT_AUXWUSEL_WU1_EV_JTAG: u32 = 11008;
pub const AON_EVENT_AUXWUSEL_WU1_EV_RTC_UPD: u32 = 10752;
pub const AON_EVENT_AUXWUSEL_WU1_EV_RTC_COMB_DLY: u32 = 10496;
pub const AON_EVENT_AUXWUSEL_WU1_EV_RTC_CH2_DLY: u32 = 10240;
pub const AON_EVENT_AUXWUSEL_WU1_EV_RTC_CH1_DLY: u32 = 9984;
pub const AON_EVENT_AUXWUSEL_WU1_EV_RTC_CH0_DLY: u32 = 9728;
pub const AON_EVENT_AUXWUSEL_WU1_EV_RTC_CH2: u32 = 9472;
pub const AON_EVENT_AUXWUSEL_WU1_EV_RTC_CH1: u32 = 9216;
pub const AON_EVENT_AUXWUSEL_WU1_EV_RTC_CH0: u32 = 8960;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD: u32 = 8192;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD31: u32 = 7936;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD30: u32 = 7680;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD29: u32 = 7424;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD28: u32 = 7168;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD27: u32 = 6912;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD26: u32 = 6656;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD25: u32 = 6400;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD24: u32 = 6144;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD23: u32 = 5888;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD22: u32 = 5632;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD21: u32 = 5376;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD20: u32 = 5120;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD19: u32 = 4864;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD18: u32 = 4608;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD17: u32 = 4352;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD16: u32 = 4096;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD15: u32 = 3840;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD14: u32 = 3584;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD13: u32 = 3328;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD12: u32 = 3072;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD11: u32 = 2816;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD10: u32 = 2560;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD9: u32 = 2304;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD8: u32 = 2048;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD7: u32 = 1792;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD6: u32 = 1536;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD5: u32 = 1280;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD4: u32 = 1024;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD3: u32 = 768;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD2: u32 = 512;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD1: u32 = 256;
pub const AON_EVENT_AUXWUSEL_WU1_EV_PAD0: u32 = 0;
pub const AON_EVENT_AUXWUSEL_WU0_EV_W: u32 = 6;
pub const AON_EVENT_AUXWUSEL_WU0_EV_M: u32 = 63;
pub const AON_EVENT_AUXWUSEL_WU0_EV_S: u32 = 0;
pub const AON_EVENT_AUXWUSEL_WU0_EV_NONE: u32 = 63;
pub const AON_EVENT_AUXWUSEL_WU0_EV_AUX_COMPB_ASYNC_N: u32 = 56;
pub const AON_EVENT_AUXWUSEL_WU0_EV_AUX_COMPB_ASYNC: u32 = 55;
pub const AON_EVENT_AUXWUSEL_WU0_EV_BATMON_VOLT: u32 = 54;
pub const AON_EVENT_AUXWUSEL_WU0_EV_BATMON_TEMP: u32 = 53;
pub const AON_EVENT_AUXWUSEL_WU0_EV_AUX_TIMER1_EV: u32 = 52;
pub const AON_EVENT_AUXWUSEL_WU0_EV_AUX_TIMER0_EV: u32 = 51;
pub const AON_EVENT_AUXWUSEL_WU0_EV_AUX_TDC_DONE: u32 = 50;
pub const AON_EVENT_AUXWUSEL_WU0_EV_AUX_ADC_DONE: u32 = 49;
pub const AON_EVENT_AUXWUSEL_WU0_EV_AUX_COMPB: u32 = 48;
pub const AON_EVENT_AUXWUSEL_WU0_EV_AUX_COMPA: u32 = 47;
pub const AON_EVENT_AUXWUSEL_WU0_EV_AUX_SWEV2: u32 = 46;
pub const AON_EVENT_AUXWUSEL_WU0_EV_AUX_SWEV1: u32 = 45;
pub const AON_EVENT_AUXWUSEL_WU0_EV_AUX_SWEV0: u32 = 44;
pub const AON_EVENT_AUXWUSEL_WU0_EV_JTAG: u32 = 43;
pub const AON_EVENT_AUXWUSEL_WU0_EV_RTC_UPD: u32 = 42;
pub const AON_EVENT_AUXWUSEL_WU0_EV_RTC_COMB_DLY: u32 = 41;
pub const AON_EVENT_AUXWUSEL_WU0_EV_RTC_CH2_DLY: u32 = 40;
pub const AON_EVENT_AUXWUSEL_WU0_EV_RTC_CH1_DLY: u32 = 39;
pub const AON_EVENT_AUXWUSEL_WU0_EV_RTC_CH0_DLY: u32 = 38;
pub const AON_EVENT_AUXWUSEL_WU0_EV_RTC_CH2: u32 = 37;
pub const AON_EVENT_AUXWUSEL_WU0_EV_RTC_CH1: u32 = 36;
pub const AON_EVENT_AUXWUSEL_WU0_EV_RTC_CH0: u32 = 35;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD: u32 = 32;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD31: u32 = 31;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD30: u32 = 30;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD29: u32 = 29;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD28: u32 = 28;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD27: u32 = 27;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD26: u32 = 26;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD25: u32 = 25;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD24: u32 = 24;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD23: u32 = 23;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD22: u32 = 22;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD21: u32 = 21;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD20: u32 = 20;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD19: u32 = 19;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD18: u32 = 18;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD17: u32 = 17;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD16: u32 = 16;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD15: u32 = 15;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD14: u32 = 14;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD13: u32 = 13;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD12: u32 = 12;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD11: u32 = 11;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD10: u32 = 10;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD9: u32 = 9;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD8: u32 = 8;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD7: u32 = 7;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD6: u32 = 6;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD5: u32 = 5;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD4: u32 = 4;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD3: u32 = 3;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD2: u32 = 2;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD1: u32 = 1;
pub const AON_EVENT_AUXWUSEL_WU0_EV_PAD0: u32 = 0;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_W: u32 = 6;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_M: u32 = 4128768;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_S: u32 = 16;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_NONE: u32 = 4128768;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_AUX_COMPB_ASYNC_N: u32 = 3670016;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_AUX_COMPB_ASYNC: u32 = 3604480;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_BATMON_VOLT: u32 = 3538944;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_BATMON_TEMP: u32 = 3473408;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_AUX_TIMER1_EV: u32 = 3407872;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_AUX_TIMER0_EV: u32 = 3342336;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_AUX_TDC_DONE: u32 = 3276800;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_AUX_ADC_DONE: u32 = 3211264;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_AUX_COMPB: u32 = 3145728;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_AUX_COMPA: u32 = 3080192;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_AUX_SWEV2: u32 = 3014656;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_AUX_SWEV1: u32 = 2949120;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_AUX_SWEV0: u32 = 2883584;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_JTAG: u32 = 2818048;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_RTC_UPD: u32 = 2752512;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_RTC_COMB_DLY: u32 = 2686976;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_RTC_CH2_DLY: u32 = 2621440;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_RTC_CH1_DLY: u32 = 2555904;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_RTC_CH0_DLY: u32 = 2490368;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_RTC_CH2: u32 = 2424832;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_RTC_CH1: u32 = 2359296;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_RTC_CH0: u32 = 2293760;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD: u32 = 2097152;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD31: u32 = 2031616;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD30: u32 = 1966080;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD29: u32 = 1900544;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD28: u32 = 1835008;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD27: u32 = 1769472;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD26: u32 = 1703936;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD25: u32 = 1638400;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD24: u32 = 1572864;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD23: u32 = 1507328;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD22: u32 = 1441792;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD21: u32 = 1376256;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD20: u32 = 1310720;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD19: u32 = 1245184;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD18: u32 = 1179648;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD17: u32 = 1114112;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD16: u32 = 1048576;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD15: u32 = 983040;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD14: u32 = 917504;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD13: u32 = 851968;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD12: u32 = 786432;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD11: u32 = 720896;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD10: u32 = 655360;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD9: u32 = 589824;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD8: u32 = 524288;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD7: u32 = 458752;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD6: u32 = 393216;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD5: u32 = 327680;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD4: u32 = 262144;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD3: u32 = 196608;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD2: u32 = 131072;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD1: u32 = 65536;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG2_EV_PAD0: u32 = 0;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_W: u32 = 6;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_M: u32 = 16128;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_S: u32 = 8;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_NONE: u32 = 16128;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_AUX_COMPB_ASYNC_N: u32 = 14336;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_AUX_COMPB_ASYNC: u32 = 14080;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_BATMON_VOLT: u32 = 13824;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_BATMON_TEMP: u32 = 13568;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_AUX_TIMER1_EV: u32 = 13312;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_AUX_TIMER0_EV: u32 = 13056;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_AUX_TDC_DONE: u32 = 12800;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_AUX_ADC_DONE: u32 = 12544;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_AUX_COMPB: u32 = 12288;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_AUX_COMPA: u32 = 12032;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_AUX_SWEV2: u32 = 11776;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_AUX_SWEV1: u32 = 11520;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_AUX_SWEV0: u32 = 11264;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_JTAG: u32 = 11008;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_RTC_UPD: u32 = 10752;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_RTC_COMB_DLY: u32 = 10496;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_RTC_CH2_DLY: u32 = 10240;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_RTC_CH1_DLY: u32 = 9984;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_RTC_CH0_DLY: u32 = 9728;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_RTC_CH2: u32 = 9472;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_RTC_CH1: u32 = 9216;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_RTC_CH0: u32 = 8960;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD: u32 = 8192;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD31: u32 = 7936;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD30: u32 = 7680;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD29: u32 = 7424;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD28: u32 = 7168;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD27: u32 = 6912;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD26: u32 = 6656;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD25: u32 = 6400;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD24: u32 = 6144;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD23: u32 = 5888;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD22: u32 = 5632;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD21: u32 = 5376;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD20: u32 = 5120;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD19: u32 = 4864;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD18: u32 = 4608;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD17: u32 = 4352;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD16: u32 = 4096;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD15: u32 = 3840;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD14: u32 = 3584;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD13: u32 = 3328;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD12: u32 = 3072;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD11: u32 = 2816;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD10: u32 = 2560;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD9: u32 = 2304;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD8: u32 = 2048;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD7: u32 = 1792;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD6: u32 = 1536;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD5: u32 = 1280;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD4: u32 = 1024;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD3: u32 = 768;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD2: u32 = 512;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD1: u32 = 256;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG1_EV_PAD0: u32 = 0;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_W: u32 = 6;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_M: u32 = 63;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_S: u32 = 0;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_NONE: u32 = 63;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_AUX_COMPB_ASYNC_N: u32 = 56;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_AUX_COMPB_ASYNC: u32 = 55;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_BATMON_VOLT: u32 = 54;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_BATMON_TEMP: u32 = 53;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_AUX_TIMER1_EV: u32 = 52;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_AUX_TIMER0_EV: u32 = 51;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_AUX_TDC_DONE: u32 = 50;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_AUX_ADC_DONE: u32 = 49;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_AUX_COMPB: u32 = 48;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_AUX_COMPA: u32 = 47;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_AUX_SWEV2: u32 = 46;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_AUX_SWEV1: u32 = 45;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_AUX_SWEV0: u32 = 44;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_JTAG: u32 = 43;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_RTC_UPD: u32 = 42;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_RTC_COMB_DLY: u32 = 41;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_RTC_CH2_DLY: u32 = 40;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_RTC_CH1_DLY: u32 = 39;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_RTC_CH0_DLY: u32 = 38;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_RTC_CH2: u32 = 37;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_RTC_CH1: u32 = 36;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_RTC_CH0: u32 = 35;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD: u32 = 32;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD31: u32 = 31;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD30: u32 = 30;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD29: u32 = 29;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD28: u32 = 28;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD27: u32 = 27;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD26: u32 = 26;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD25: u32 = 25;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD24: u32 = 24;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD23: u32 = 23;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD22: u32 = 22;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD21: u32 = 21;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD20: u32 = 20;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD19: u32 = 19;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD18: u32 = 18;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD17: u32 = 17;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD16: u32 = 16;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD15: u32 = 15;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD14: u32 = 14;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD13: u32 = 13;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD12: u32 = 12;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD11: u32 = 11;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD10: u32 = 10;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD9: u32 = 9;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD8: u32 = 8;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD7: u32 = 7;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD6: u32 = 6;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD5: u32 = 5;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD4: u32 = 4;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD3: u32 = 3;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD2: u32 = 2;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD1: u32 = 1;
pub const AON_EVENT_EVTOMCUSEL_AON_PROG0_EV_PAD0: u32 = 0;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_W: u32 = 6;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_M: u32 = 63;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_S: u32 = 0;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_NONE: u32 = 63;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_AUX_COMPB_ASYNC_N: u32 = 56;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_AUX_COMPB_ASYNC: u32 = 55;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_BATMON_VOLT: u32 = 54;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_BATMON_TEMP: u32 = 53;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_AUX_TIMER1_EV: u32 = 52;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_AUX_TIMER0_EV: u32 = 51;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_AUX_TDC_DONE: u32 = 50;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_AUX_ADC_DONE: u32 = 49;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_AUX_COMPB: u32 = 48;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_AUX_COMPA: u32 = 47;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_AUX_SWEV2: u32 = 46;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_AUX_SWEV1: u32 = 45;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_AUX_SWEV0: u32 = 44;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_JTAG: u32 = 43;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_RTC_UPD: u32 = 42;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_RTC_COMB_DLY: u32 = 41;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_RTC_CH2_DLY: u32 = 40;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_RTC_CH1_DLY: u32 = 39;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_RTC_CH0_DLY: u32 = 38;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_RTC_CH2: u32 = 37;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_RTC_CH1: u32 = 36;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_RTC_CH0: u32 = 35;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD: u32 = 32;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD31: u32 = 31;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD30: u32 = 30;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD29: u32 = 29;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD28: u32 = 28;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD27: u32 = 27;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD26: u32 = 26;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD25: u32 = 25;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD24: u32 = 24;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD23: u32 = 23;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD22: u32 = 22;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD21: u32 = 21;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD20: u32 = 20;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD19: u32 = 19;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD18: u32 = 18;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD17: u32 = 17;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD16: u32 = 16;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD15: u32 = 15;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD14: u32 = 14;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD13: u32 = 13;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD12: u32 = 12;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD11: u32 = 11;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD10: u32 = 10;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD9: u32 = 9;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD8: u32 = 8;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD7: u32 = 7;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD6: u32 = 6;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD5: u32 = 5;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD4: u32 = 4;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD3: u32 = 3;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD2: u32 = 2;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD1: u32 = 1;
pub const AON_EVENT_RTCSEL_RTC_CH1_CAPT_EV_PAD0: u32 = 0;
pub const AON_EVENT_IO: u32 = 32;
pub const AON_EVENT_RTC_CH0: u32 = 35;
pub const AON_EVENT_RTC_CH1: u32 = 36;
pub const AON_EVENT_RTC_CH2: u32 = 37;
pub const AON_EVENT_RTC_CH0_DLY: u32 = 38;
pub const AON_EVENT_RTC_CH1_DLY: u32 = 39;
pub const AON_EVENT_RTC_CH2_DLY: u32 = 40;
pub const AON_EVENT_RTC_COMB_DLY: u32 = 41;
pub const AON_EVENT_RTC_UPD: u32 = 42;
pub const AON_EVENT_JTAG: u32 = 43;
pub const AON_EVENT_AUX_SWEV0: u32 = 44;
pub const AON_EVENT_AUX_SWEV1: u32 = 45;
pub const AON_EVENT_AUX_SWEV2: u32 = 46;
pub const AON_EVENT_AUX_COMPA: u32 = 47;
pub const AON_EVENT_AUX_COMPB: u32 = 48;
pub const AON_EVENT_AUX_ADC_DONE: u32 = 49;
pub const AON_EVENT_AUX_TDC_DONE: u32 = 50;
pub const AON_EVENT_AUX_TIMER0_EV: u32 = 51;
pub const AON_EVENT_AUX_TIMER1_EV: u32 = 52;
pub const AON_EVENT_BATMON_TEMP: u32 = 53;
pub const AON_EVENT_BATMON_VOLT: u32 = 54;
pub const AON_EVENT_AUX_COMPB_ASYNC: u32 = 55;
pub const AON_EVENT_AUX_COMPB_ASYNC_N: u32 = 56;
pub const AON_EVENT_NONE: u32 = 63;
pub const AON_EVENT_RTC0: u32 = 35;
pub const AON_EVENT_MCU_WU0: u32 = 0;
pub const AON_EVENT_MCU_WU1: u32 = 1;
pub const AON_EVENT_MCU_WU2: u32 = 2;
pub const AON_EVENT_MCU_WU3: u32 = 3;
pub const AON_EVENT_AUX_WU0: u32 = 0;
pub const AON_EVENT_AUX_WU1: u32 = 1;
pub const AON_EVENT_AUX_WU2: u32 = 2;
pub const AON_EVENT_MCU_EVENT0: u32 = 0;
pub const AON_EVENT_MCU_EVENT1: u32 = 1;
pub const AON_EVENT_MCU_EVENT2: u32 = 2;
pub const AON_IOC_O_IOSTRMIN: u32 = 0;
pub const AON_IOC_O_IOSTRMED: u32 = 4;
pub const AON_IOC_O_IOSTRMAX: u32 = 8;
pub const AON_IOC_O_IOCLATCH: u32 = 12;
pub const AON_IOC_O_CLK32KCTL: u32 = 16;
pub const AON_IOC_IOSTRMIN_GRAY_CODE_W: u32 = 3;
pub const AON_IOC_IOSTRMIN_GRAY_CODE_M: u32 = 7;
pub const AON_IOC_IOSTRMIN_GRAY_CODE_S: u32 = 0;
pub const AON_IOC_IOSTRMED_GRAY_CODE_W: u32 = 3;
pub const AON_IOC_IOSTRMED_GRAY_CODE_M: u32 = 7;
pub const AON_IOC_IOSTRMED_GRAY_CODE_S: u32 = 0;
pub const AON_IOC_IOSTRMAX_GRAY_CODE_W: u32 = 3;
pub const AON_IOC_IOSTRMAX_GRAY_CODE_M: u32 = 7;
pub const AON_IOC_IOSTRMAX_GRAY_CODE_S: u32 = 0;
pub const AON_IOC_IOCLATCH_EN: u32 = 1;
pub const AON_IOC_IOCLATCH_EN_BITN: u32 = 0;
pub const AON_IOC_IOCLATCH_EN_M: u32 = 1;
pub const AON_IOC_IOCLATCH_EN_S: u32 = 0;
pub const AON_IOC_IOCLATCH_EN_TRANSP: u32 = 1;
pub const AON_IOC_IOCLATCH_EN_STATIC: u32 = 0;
pub const AON_IOC_CLK32KCTL_OE_N: u32 = 1;
pub const AON_IOC_CLK32KCTL_OE_N_BITN: u32 = 0;
pub const AON_IOC_CLK32KCTL_OE_N_M: u32 = 1;
pub const AON_IOC_CLK32KCTL_OE_N_S: u32 = 0;
pub const AONIOC_DRV_STR_1: u32 = 0;
pub const AONIOC_DRV_STR_2: u32 = 1;
pub const AONIOC_DRV_STR_3: u32 = 3;
pub const AONIOC_DRV_STR_4: u32 = 2;
pub const AONIOC_DRV_STR_5: u32 = 6;
pub const AONIOC_DRV_STR_6: u32 = 7;
pub const AONIOC_DRV_STR_7: u32 = 5;
pub const AONIOC_DRV_STR_8: u32 = 4;
pub const AONIOC_DRV_LVL_MIN: u32 = 0;
pub const AONIOC_DRV_LVL_MED: u32 = 4;
pub const AONIOC_DRV_LVL_MAX: u32 = 8;
pub const AON_RTC_O_CTL: u32 = 0;
pub const AON_RTC_O_EVFLAGS: u32 = 4;
pub const AON_RTC_O_SEC: u32 = 8;
pub const AON_RTC_O_SUBSEC: u32 = 12;
pub const AON_RTC_O_SUBSECINC: u32 = 16;
pub const AON_RTC_O_CHCTL: u32 = 20;
pub const AON_RTC_O_CH0CMP: u32 = 24;
pub const AON_RTC_O_CH1CMP: u32 = 28;
pub const AON_RTC_O_CH2CMP: u32 = 32;
pub const AON_RTC_O_CH2CMPINC: u32 = 36;
pub const AON_RTC_O_CH1CAPT: u32 = 40;
pub const AON_RTC_O_SYNC: u32 = 44;
pub const AON_RTC_CTL_COMB_EV_MASK_W: u32 = 3;
pub const AON_RTC_CTL_COMB_EV_MASK_M: u32 = 458752;
pub const AON_RTC_CTL_COMB_EV_MASK_S: u32 = 16;
pub const AON_RTC_CTL_COMB_EV_MASK_CH2: u32 = 262144;
pub const AON_RTC_CTL_COMB_EV_MASK_CH1: u32 = 131072;
pub const AON_RTC_CTL_COMB_EV_MASK_CH0: u32 = 65536;
pub const AON_RTC_CTL_COMB_EV_MASK_NONE: u32 = 0;
pub const AON_RTC_CTL_EV_DELAY_W: u32 = 4;
pub const AON_RTC_CTL_EV_DELAY_M: u32 = 3840;
pub const AON_RTC_CTL_EV_DELAY_S: u32 = 8;
pub const AON_RTC_CTL_EV_DELAY_D144: u32 = 3328;
pub const AON_RTC_CTL_EV_DELAY_D128: u32 = 3072;
pub const AON_RTC_CTL_EV_DELAY_D112: u32 = 2816;
pub const AON_RTC_CTL_EV_DELAY_D96: u32 = 2560;
pub const AON_RTC_CTL_EV_DELAY_D80: u32 = 2304;
pub const AON_RTC_CTL_EV_DELAY_D64: u32 = 2048;
pub const AON_RTC_CTL_EV_DELAY_D48: u32 = 1792;
pub const AON_RTC_CTL_EV_DELAY_D32: u32 = 1536;
pub const AON_RTC_CTL_EV_DELAY_D16: u32 = 1280;
pub const AON_RTC_CTL_EV_DELAY_D8: u32 = 1024;
pub const AON_RTC_CTL_EV_DELAY_D4: u32 = 768;
pub const AON_RTC_CTL_EV_DELAY_D2: u32 = 512;
pub const AON_RTC_CTL_EV_DELAY_D1: u32 = 256;
pub const AON_RTC_CTL_EV_DELAY_D0: u32 = 0;
pub const AON_RTC_CTL_RESET: u32 = 128;
pub const AON_RTC_CTL_RESET_BITN: u32 = 7;
pub const AON_RTC_CTL_RESET_M: u32 = 128;
pub const AON_RTC_CTL_RESET_S: u32 = 7;
pub const AON_RTC_CTL_RTC_4KHZ_EN: u32 = 4;
pub const AON_RTC_CTL_RTC_4KHZ_EN_BITN: u32 = 2;
pub const AON_RTC_CTL_RTC_4KHZ_EN_M: u32 = 4;
pub const AON_RTC_CTL_RTC_4KHZ_EN_S: u32 = 2;
pub const AON_RTC_CTL_RTC_UPD_EN: u32 = 2;
pub const AON_RTC_CTL_RTC_UPD_EN_BITN: u32 = 1;
pub const AON_RTC_CTL_RTC_UPD_EN_M: u32 = 2;
pub const AON_RTC_CTL_RTC_UPD_EN_S: u32 = 1;
pub const AON_RTC_CTL_EN: u32 = 1;
pub const AON_RTC_CTL_EN_BITN: u32 = 0;
pub const AON_RTC_CTL_EN_M: u32 = 1;
pub const AON_RTC_CTL_EN_S: u32 = 0;
pub const AON_RTC_EVFLAGS_CH2: u32 = 65536;
pub const AON_RTC_EVFLAGS_CH2_BITN: u32 = 16;
pub const AON_RTC_EVFLAGS_CH2_M: u32 = 65536;
pub const AON_RTC_EVFLAGS_CH2_S: u32 = 16;
pub const AON_RTC_EVFLAGS_CH1: u32 = 256;
pub const AON_RTC_EVFLAGS_CH1_BITN: u32 = 8;
pub const AON_RTC_EVFLAGS_CH1_M: u32 = 256;
pub const AON_RTC_EVFLAGS_CH1_S: u32 = 8;
pub const AON_RTC_EVFLAGS_CH0: u32 = 1;
pub const AON_RTC_EVFLAGS_CH0_BITN: u32 = 0;
pub const AON_RTC_EVFLAGS_CH0_M: u32 = 1;
pub const AON_RTC_EVFLAGS_CH0_S: u32 = 0;
pub const AON_RTC_SEC_VALUE_W: u32 = 32;
pub const AON_RTC_SEC_VALUE_M: u32 = 4294967295;
pub const AON_RTC_SEC_VALUE_S: u32 = 0;
pub const AON_RTC_SUBSEC_VALUE_W: u32 = 32;
pub const AON_RTC_SUBSEC_VALUE_M: u32 = 4294967295;
pub const AON_RTC_SUBSEC_VALUE_S: u32 = 0;
pub const AON_RTC_SUBSECINC_VALUEINC_W: u32 = 24;
pub const AON_RTC_SUBSECINC_VALUEINC_M: u32 = 16777215;
pub const AON_RTC_SUBSECINC_VALUEINC_S: u32 = 0;
pub const AON_RTC_CHCTL_CH2_CONT_EN: u32 = 262144;
pub const AON_RTC_CHCTL_CH2_CONT_EN_BITN: u32 = 18;
pub const AON_RTC_CHCTL_CH2_CONT_EN_M: u32 = 262144;
pub const AON_RTC_CHCTL_CH2_CONT_EN_S: u32 = 18;
pub const AON_RTC_CHCTL_CH2_EN: u32 = 65536;
pub const AON_RTC_CHCTL_CH2_EN_BITN: u32 = 16;
pub const AON_RTC_CHCTL_CH2_EN_M: u32 = 65536;
pub const AON_RTC_CHCTL_CH2_EN_S: u32 = 16;
pub const AON_RTC_CHCTL_CH1_CAPT_EN: u32 = 512;
pub const AON_RTC_CHCTL_CH1_CAPT_EN_BITN: u32 = 9;
pub const AON_RTC_CHCTL_CH1_CAPT_EN_M: u32 = 512;
pub const AON_RTC_CHCTL_CH1_CAPT_EN_S: u32 = 9;
pub const AON_RTC_CHCTL_CH1_EN: u32 = 256;
pub const AON_RTC_CHCTL_CH1_EN_BITN: u32 = 8;
pub const AON_RTC_CHCTL_CH1_EN_M: u32 = 256;
pub const AON_RTC_CHCTL_CH1_EN_S: u32 = 8;
pub const AON_RTC_CHCTL_CH0_EN: u32 = 1;
pub const AON_RTC_CHCTL_CH0_EN_BITN: u32 = 0;
pub const AON_RTC_CHCTL_CH0_EN_M: u32 = 1;
pub const AON_RTC_CHCTL_CH0_EN_S: u32 = 0;
pub const AON_RTC_CH0CMP_VALUE_W: u32 = 32;
pub const AON_RTC_CH0CMP_VALUE_M: u32 = 4294967295;
pub const AON_RTC_CH0CMP_VALUE_S: u32 = 0;
pub const AON_RTC_CH1CMP_VALUE_W: u32 = 32;
pub const AON_RTC_CH1CMP_VALUE_M: u32 = 4294967295;
pub const AON_RTC_CH1CMP_VALUE_S: u32 = 0;
pub const AON_RTC_CH2CMP_VALUE_W: u32 = 32;
pub const AON_RTC_CH2CMP_VALUE_M: u32 = 4294967295;
pub const AON_RTC_CH2CMP_VALUE_S: u32 = 0;
pub const AON_RTC_CH2CMPINC_VALUE_W: u32 = 32;
pub const AON_RTC_CH2CMPINC_VALUE_M: u32 = 4294967295;
pub const AON_RTC_CH2CMPINC_VALUE_S: u32 = 0;
pub const AON_RTC_CH1CAPT_SEC_W: u32 = 16;
pub const AON_RTC_CH1CAPT_SEC_M: u32 = 4294901760;
pub const AON_RTC_CH1CAPT_SEC_S: u32 = 16;
pub const AON_RTC_CH1CAPT_SUBSEC_W: u32 = 16;
pub const AON_RTC_CH1CAPT_SUBSEC_M: u32 = 65535;
pub const AON_RTC_CH1CAPT_SUBSEC_S: u32 = 0;
pub const AON_RTC_SYNC_WBUSY: u32 = 1;
pub const AON_RTC_SYNC_WBUSY_BITN: u32 = 0;
pub const AON_RTC_SYNC_WBUSY_M: u32 = 1;
pub const AON_RTC_SYNC_WBUSY_S: u32 = 0;
pub const AON_RTC_CH_NONE: u32 = 0;
pub const AON_RTC_CH0: u32 = 1;
pub const AON_RTC_CH1: u32 = 2;
pub const AON_RTC_CH2: u32 = 4;
pub const AON_RTC_ACTIVE: u32 = 8;
pub const AON_RTC_CONFIG_DELAY_NODELAY: u32 = 0;
pub const AON_RTC_CONFIG_DELAY_1: u32 = 1;
pub const AON_RTC_CONFIG_DELAY_2: u32 = 2;
pub const AON_RTC_CONFIG_DELAY_4: u32 = 3;
pub const AON_RTC_CONFIG_DELAY_8: u32 = 4;
pub const AON_RTC_CONFIG_DELAY_16: u32 = 5;
pub const AON_RTC_CONFIG_DELAY_32: u32 = 6;
pub const AON_RTC_CONFIG_DELAY_48: u32 = 7;
pub const AON_RTC_CONFIG_DELAY_64: u32 = 8;
pub const AON_RTC_CONFIG_DELAY_80: u32 = 9;
pub const AON_RTC_CONFIG_DELAY_96: u32 = 10;
pub const AON_RTC_CONFIG_DELAY_112: u32 = 11;
pub const AON_RTC_CONFIG_DELAY_128: u32 = 12;
pub const AON_RTC_CONFIG_DELAY_144: u32 = 13;
pub const AON_RTC_MODE_CH1_CAPTURE: u32 = 1;
pub const AON_RTC_MODE_CH1_COMPARE: u32 = 0;
pub const AON_RTC_MODE_CH2_CONTINUOUS: u32 = 1;
pub const AON_RTC_MODE_CH2_NORMALCOMPARE: u32 = 0;
pub const FACTOR_SEC_TO_COMP_VAL_FORMAT: u32 = 65536;
pub const AON_WUC_O_MCUCLK: u32 = 0;
pub const AON_WUC_O_AUXCLK: u32 = 4;
pub const AON_WUC_O_MCUCFG: u32 = 8;
pub const AON_WUC_O_AUXCFG: u32 = 12;
pub const AON_WUC_O_AUXCTL: u32 = 16;
pub const AON_WUC_O_PWRSTAT: u32 = 20;
pub const AON_WUC_O_SHUTDOWN: u32 = 24;
pub const AON_WUC_O_CTL0: u32 = 32;
pub const AON_WUC_O_CTL1: u32 = 36;
pub const AON_WUC_O_RECHARGECFG: u32 = 48;
pub const AON_WUC_O_RECHARGESTAT: u32 = 52;
pub const AON_WUC_O_OSCCFG: u32 = 56;
pub const AON_WUC_O_JTAGCFG: u32 = 64;
pub const AON_WUC_O_JTAGUSERCODE: u32 = 68;
pub const AON_WUC_MCUCLK_RCOSC_HF_CAL_DONE: u32 = 4;
pub const AON_WUC_MCUCLK_RCOSC_HF_CAL_DONE_BITN: u32 = 2;
pub const AON_WUC_MCUCLK_RCOSC_HF_CAL_DONE_M: u32 = 4;
pub const AON_WUC_MCUCLK_RCOSC_HF_CAL_DONE_S: u32 = 2;
pub const AON_WUC_MCUCLK_PWR_DWN_SRC_W: u32 = 2;
pub const AON_WUC_MCUCLK_PWR_DWN_SRC_M: u32 = 3;
pub const AON_WUC_MCUCLK_PWR_DWN_SRC_S: u32 = 0;
pub const AON_WUC_MCUCLK_PWR_DWN_SRC_SCLK_LF: u32 = 1;
pub const AON_WUC_MCUCLK_PWR_DWN_SRC_NONE: u32 = 0;
pub const AON_WUC_AUXCLK_PWR_DWN_SRC_W: u32 = 2;
pub const AON_WUC_AUXCLK_PWR_DWN_SRC_M: u32 = 6144;
pub const AON_WUC_AUXCLK_PWR_DWN_SRC_S: u32 = 11;
pub const AON_WUC_AUXCLK_PWR_DWN_SRC_SCLK_LF: u32 = 2048;
pub const AON_WUC_AUXCLK_PWR_DWN_SRC_NONE: u32 = 0;
pub const AON_WUC_AUXCLK_SCLK_HF_DIV_W: u32 = 3;
pub const AON_WUC_AUXCLK_SCLK_HF_DIV_M: u32 = 1792;
pub const AON_WUC_AUXCLK_SCLK_HF_DIV_S: u32 = 8;
pub const AON_WUC_AUXCLK_SCLK_HF_DIV_DIV256: u32 = 1792;
pub const AON_WUC_AUXCLK_SCLK_HF_DIV_DIV128: u32 = 1536;
pub const AON_WUC_AUXCLK_SCLK_HF_DIV_DIV64: u32 = 1280;
pub const AON_WUC_AUXCLK_SCLK_HF_DIV_DIV32: u32 = 1024;
pub const AON_WUC_AUXCLK_SCLK_HF_DIV_DIV16: u32 = 768;
pub const AON_WUC_AUXCLK_SCLK_HF_DIV_DIV8: u32 = 512;
pub const AON_WUC_AUXCLK_SCLK_HF_DIV_DIV4: u32 = 256;
pub const AON_WUC_AUXCLK_SCLK_HF_DIV_DIV2: u32 = 0;
pub const AON_WUC_AUXCLK_SRC_W: u32 = 3;
pub const AON_WUC_AUXCLK_SRC_M: u32 = 7;
pub const AON_WUC_AUXCLK_SRC_S: u32 = 0;
pub const AON_WUC_AUXCLK_SRC_SCLK_LF: u32 = 4;
pub const AON_WUC_AUXCLK_SRC_SCLK_HF: u32 = 1;
pub const AON_WUC_MCUCFG_VIRT_OFF: u32 = 131072;
pub const AON_WUC_MCUCFG_VIRT_OFF_BITN: u32 = 17;
pub const AON_WUC_MCUCFG_VIRT_OFF_M: u32 = 131072;
pub const AON_WUC_MCUCFG_VIRT_OFF_S: u32 = 17;
pub const AON_WUC_MCUCFG_FIXED_WU_EN: u32 = 65536;
pub const AON_WUC_MCUCFG_FIXED_WU_EN_BITN: u32 = 16;
pub const AON_WUC_MCUCFG_FIXED_WU_EN_M: u32 = 65536;
pub const AON_WUC_MCUCFG_FIXED_WU_EN_S: u32 = 16;
pub const AON_WUC_MCUCFG_SRAM_RET_EN_W: u32 = 4;
pub const AON_WUC_MCUCFG_SRAM_RET_EN_M: u32 = 15;
pub const AON_WUC_MCUCFG_SRAM_RET_EN_S: u32 = 0;
pub const AON_WUC_MCUCFG_SRAM_RET_EN_RET_FULL: u32 = 15;
pub const AON_WUC_MCUCFG_SRAM_RET_EN_RET_LEVEL3: u32 = 7;
pub const AON_WUC_MCUCFG_SRAM_RET_EN_RET_LEVEL2: u32 = 3;
pub const AON_WUC_MCUCFG_SRAM_RET_EN_RET_LEVEL1: u32 = 1;
pub const AON_WUC_MCUCFG_SRAM_RET_EN_RET_NONE: u32 = 0;
pub const AON_WUC_AUXCFG_RAM_RET_EN: u32 = 1;
pub const AON_WUC_AUXCFG_RAM_RET_EN_BITN: u32 = 0;
pub const AON_WUC_AUXCFG_RAM_RET_EN_M: u32 = 1;
pub const AON_WUC_AUXCFG_RAM_RET_EN_S: u32 = 0;
pub const AON_WUC_AUXCTL_RESET_REQ: u32 = 2147483648;
pub const AON_WUC_AUXCTL_RESET_REQ_BITN: u32 = 31;
pub const AON_WUC_AUXCTL_RESET_REQ_M: u32 = 2147483648;
pub const AON_WUC_AUXCTL_RESET_REQ_S: u32 = 31;
pub const AON_WUC_AUXCTL_SCE_RUN_EN: u32 = 4;
pub const AON_WUC_AUXCTL_SCE_RUN_EN_BITN: u32 = 2;
pub const AON_WUC_AUXCTL_SCE_RUN_EN_M: u32 = 4;
pub const AON_WUC_AUXCTL_SCE_RUN_EN_S: u32 = 2;
pub const AON_WUC_AUXCTL_SWEV: u32 = 2;
pub const AON_WUC_AUXCTL_SWEV_BITN: u32 = 1;
pub const AON_WUC_AUXCTL_SWEV_M: u32 = 2;
pub const AON_WUC_AUXCTL_SWEV_S: u32 = 1;
pub const AON_WUC_AUXCTL_AUX_FORCE_ON: u32 = 1;
pub const AON_WUC_AUXCTL_AUX_FORCE_ON_BITN: u32 = 0;
pub const AON_WUC_AUXCTL_AUX_FORCE_ON_M: u32 = 1;
pub const AON_WUC_AUXCTL_AUX_FORCE_ON_S: u32 = 0;
pub const AON_WUC_PWRSTAT_AUX_PWR_DWN: u32 = 512;
pub const AON_WUC_PWRSTAT_AUX_PWR_DWN_BITN: u32 = 9;
pub const AON_WUC_PWRSTAT_AUX_PWR_DWN_M: u32 = 512;
pub const AON_WUC_PWRSTAT_AUX_PWR_DWN_S: u32 = 9;
pub const AON_WUC_PWRSTAT_JTAG_PD_ON: u32 = 64;
pub const AON_WUC_PWRSTAT_JTAG_PD_ON_BITN: u32 = 6;
pub const AON_WUC_PWRSTAT_JTAG_PD_ON_M: u32 = 64;
pub const AON_WUC_PWRSTAT_JTAG_PD_ON_S: u32 = 6;
pub const AON_WUC_PWRSTAT_AUX_PD_ON: u32 = 32;
pub const AON_WUC_PWRSTAT_AUX_PD_ON_BITN: u32 = 5;
pub const AON_WUC_PWRSTAT_AUX_PD_ON_M: u32 = 32;
pub const AON_WUC_PWRSTAT_AUX_PD_ON_S: u32 = 5;
pub const AON_WUC_PWRSTAT_MCU_PD_ON: u32 = 16;
pub const AON_WUC_PWRSTAT_MCU_PD_ON_BITN: u32 = 4;
pub const AON_WUC_PWRSTAT_MCU_PD_ON_M: u32 = 16;
pub const AON_WUC_PWRSTAT_MCU_PD_ON_S: u32 = 4;
pub const AON_WUC_PWRSTAT_AUX_BUS_CONNECTED: u32 = 4;
pub const AON_WUC_PWRSTAT_AUX_BUS_CONNECTED_BITN: u32 = 2;
pub const AON_WUC_PWRSTAT_AUX_BUS_CONNECTED_M: u32 = 4;
pub const AON_WUC_PWRSTAT_AUX_BUS_CONNECTED_S: u32 = 2;
pub const AON_WUC_PWRSTAT_AUX_RESET_DONE: u32 = 2;
pub const AON_WUC_PWRSTAT_AUX_RESET_DONE_BITN: u32 = 1;
pub const AON_WUC_PWRSTAT_AUX_RESET_DONE_M: u32 = 2;
pub const AON_WUC_PWRSTAT_AUX_RESET_DONE_S: u32 = 1;
pub const AON_WUC_SHUTDOWN_EN: u32 = 1;
pub const AON_WUC_SHUTDOWN_EN_BITN: u32 = 0;
pub const AON_WUC_SHUTDOWN_EN_M: u32 = 1;
pub const AON_WUC_SHUTDOWN_EN_S: u32 = 0;
pub const AON_WUC_CTL0_PWR_DWN_DIS: u32 = 256;
pub const AON_WUC_CTL0_PWR_DWN_DIS_BITN: u32 = 8;
pub const AON_WUC_CTL0_PWR_DWN_DIS_M: u32 = 256;
pub const AON_WUC_CTL0_PWR_DWN_DIS_S: u32 = 8;
pub const AON_WUC_CTL0_AUX_SRAM_ERASE: u32 = 8;
pub const AON_WUC_CTL0_AUX_SRAM_ERASE_BITN: u32 = 3;
pub const AON_WUC_CTL0_AUX_SRAM_ERASE_M: u32 = 8;
pub const AON_WUC_CTL0_AUX_SRAM_ERASE_S: u32 = 3;
pub const AON_WUC_CTL0_MCU_SRAM_ERASE: u32 = 4;
pub const AON_WUC_CTL0_MCU_SRAM_ERASE_BITN: u32 = 2;
pub const AON_WUC_CTL0_MCU_SRAM_ERASE_M: u32 = 4;
pub const AON_WUC_CTL0_MCU_SRAM_ERASE_S: u32 = 2;
pub const AON_WUC_CTL1_MCU_RESET_SRC: u32 = 2;
pub const AON_WUC_CTL1_MCU_RESET_SRC_BITN: u32 = 1;
pub const AON_WUC_CTL1_MCU_RESET_SRC_M: u32 = 2;
pub const AON_WUC_CTL1_MCU_RESET_SRC_S: u32 = 1;
pub const AON_WUC_CTL1_MCU_WARM_RESET: u32 = 1;
pub const AON_WUC_CTL1_MCU_WARM_RESET_BITN: u32 = 0;
pub const AON_WUC_CTL1_MCU_WARM_RESET_M: u32 = 1;
pub const AON_WUC_CTL1_MCU_WARM_RESET_S: u32 = 0;
pub const AON_WUC_RECHARGECFG_ADAPTIVE_EN: u32 = 2147483648;
pub const AON_WUC_RECHARGECFG_ADAPTIVE_EN_BITN: u32 = 31;
pub const AON_WUC_RECHARGECFG_ADAPTIVE_EN_M: u32 = 2147483648;
pub const AON_WUC_RECHARGECFG_ADAPTIVE_EN_S: u32 = 31;
pub const AON_WUC_RECHARGECFG_C2_W: u32 = 4;
pub const AON_WUC_RECHARGECFG_C2_M: u32 = 15728640;
pub const AON_WUC_RECHARGECFG_C2_S: u32 = 20;
pub const AON_WUC_RECHARGECFG_C1_W: u32 = 4;
pub const AON_WUC_RECHARGECFG_C1_M: u32 = 983040;
pub const AON_WUC_RECHARGECFG_C1_S: u32 = 16;
pub const AON_WUC_RECHARGECFG_MAX_PER_M_W: u32 = 5;
pub const AON_WUC_RECHARGECFG_MAX_PER_M_M: u32 = 63488;
pub const AON_WUC_RECHARGECFG_MAX_PER_M_S: u32 = 11;
pub const AON_WUC_RECHARGECFG_MAX_PER_E_W: u32 = 3;
pub const AON_WUC_RECHARGECFG_MAX_PER_E_M: u32 = 1792;
pub const AON_WUC_RECHARGECFG_MAX_PER_E_S: u32 = 8;
pub const AON_WUC_RECHARGECFG_PER_M_W: u32 = 5;
pub const AON_WUC_RECHARGECFG_PER_M_M: u32 = 248;
pub const AON_WUC_RECHARGECFG_PER_M_S: u32 = 3;
pub const AON_WUC_RECHARGECFG_PER_E_W: u32 = 3;
pub const AON_WUC_RECHARGECFG_PER_E_M: u32 = 7;
pub const AON_WUC_RECHARGECFG_PER_E_S: u32 = 0;
pub const AON_WUC_RECHARGESTAT_VDDR_SMPLS_W: u32 = 4;
pub const AON_WUC_RECHARGESTAT_VDDR_SMPLS_M: u32 = 983040;
pub const AON_WUC_RECHARGESTAT_VDDR_SMPLS_S: u32 = 16;
pub const AON_WUC_RECHARGESTAT_MAX_USED_PER_W: u32 = 16;
pub const AON_WUC_RECHARGESTAT_MAX_USED_PER_M: u32 = 65535;
pub const AON_WUC_RECHARGESTAT_MAX_USED_PER_S: u32 = 0;
pub const AON_WUC_OSCCFG_PER_M_W: u32 = 5;
pub const AON_WUC_OSCCFG_PER_M_M: u32 = 248;
pub const AON_WUC_OSCCFG_PER_M_S: u32 = 3;
pub const AON_WUC_OSCCFG_PER_E_W: u32 = 3;
pub const AON_WUC_OSCCFG_PER_E_M: u32 = 7;
pub const AON_WUC_OSCCFG_PER_E_S: u32 = 0;
pub const AON_WUC_JTAGCFG_JTAG_PD_FORCE_ON: u32 = 256;
pub const AON_WUC_JTAGCFG_JTAG_PD_FORCE_ON_BITN: u32 = 8;
pub const AON_WUC_JTAGCFG_JTAG_PD_FORCE_ON_M: u32 = 256;
pub const AON_WUC_JTAGCFG_JTAG_PD_FORCE_ON_S: u32 = 8;
pub const AON_WUC_JTAGUSERCODE_USER_CODE_W: u32 = 32;
pub const AON_WUC_JTAGUSERCODE_USER_CODE_M: u32 = 4294967295;
pub const AON_WUC_JTAGUSERCODE_USER_CODE_S: u32 = 0;
pub const NVIC_INT_TYPE: u32 = 3758153732;
pub const NVIC_ACTLR: u32 = 3758153736;
pub const NVIC_ST_CTRL: u32 = 3758153744;
pub const NVIC_ST_RELOAD: u32 = 3758153748;
pub const NVIC_ST_CURRENT: u32 = 3758153752;
pub const NVIC_ST_CAL: u32 = 3758153756;
pub const NVIC_EN0: u32 = 3758153984;
pub const NVIC_EN1: u32 = 3758153988;
pub const NVIC_DIS0: u32 = 3758154112;
pub const NVIC_DIS1: u32 = 3758154116;
pub const NVIC_PEND0: u32 = 3758154240;
pub const NVIC_PEND1: u32 = 3758154244;
pub const NVIC_UNPEND0: u32 = 3758154368;
pub const NVIC_UNPEND1: u32 = 3758154372;
pub const NVIC_ACTIVE0: u32 = 3758154496;
pub const NVIC_ACTIVE1: u32 = 3758154500;
pub const NVIC_PRI0: u32 = 3758154752;
pub const NVIC_PRI1: u32 = 3758154756;
pub const NVIC_PRI2: u32 = 3758154760;
pub const NVIC_PRI3: u32 = 3758154764;
pub const NVIC_PRI4: u32 = 3758154768;
pub const NVIC_PRI5: u32 = 3758154772;
pub const NVIC_PRI6: u32 = 3758154776;
pub const NVIC_PRI7: u32 = 3758154780;
pub const NVIC_PRI8: u32 = 3758154784;
pub const NVIC_PRI9: u32 = 3758154788;
pub const NVIC_PRI10: u32 = 3758154792;
pub const NVIC_PRI11: u32 = 3758154796;
pub const NVIC_PRI12: u32 = 3758154800;
pub const NVIC_PRI13: u32 = 3758154804;
pub const NVIC_CPUID: u32 = 3758157056;
pub const NVIC_INT_CTRL: u32 = 3758157060;
pub const NVIC_VTABLE: u32 = 3758157064;
pub const NVIC_APINT: u32 = 3758157068;
pub const NVIC_SYS_CTRL: u32 = 3758157072;
pub const NVIC_CFG_CTRL: u32 = 3758157076;
pub const NVIC_SYS_PRI1: u32 = 3758157080;
pub const NVIC_SYS_PRI2: u32 = 3758157084;
pub const NVIC_SYS_PRI3: u32 = 3758157088;
pub const NVIC_SYS_HND_CTRL: u32 = 3758157092;
pub const NVIC_FAULT_STAT: u32 = 3758157096;
pub const NVIC_HFAULT_STAT: u32 = 3758157100;
pub const NVIC_DEBUG_STAT: u32 = 3758157104;
pub const NVIC_MM_ADDR: u32 = 3758157108;
pub const NVIC_FAULT_ADDR: u32 = 3758157112;
pub const NVIC_MPU_TYPE: u32 = 3758157200;
pub const NVIC_MPU_CTRL: u32 = 3758157204;
pub const NVIC_MPU_NUMBER: u32 = 3758157208;
pub const NVIC_MPU_BASE: u32 = 3758157212;
pub const NVIC_MPU_ATTR: u32 = 3758157216;
pub const NVIC_MPU_BASE1: u32 = 3758157220;
pub const NVIC_MPU_ATTR1: u32 = 3758157224;
pub const NVIC_MPU_BASE2: u32 = 3758157228;
pub const NVIC_MPU_ATTR2: u32 = 3758157232;
pub const NVIC_MPU_BASE3: u32 = 3758157236;
pub const NVIC_MPU_ATTR3: u32 = 3758157240;
pub const NVIC_DBG_CTRL: u32 = 3758157296;
pub const NVIC_DBG_XFER: u32 = 3758157300;
pub const NVIC_DBG_DATA: u32 = 3758157304;
pub const NVIC_DBG_INT: u32 = 3758157308;
pub const NVIC_SW_TRIG: u32 = 3758157568;
pub const NVIC_INT_TYPE_LINES_M: u32 = 31;
pub const NVIC_INT_TYPE_LINES_S: u32 = 0;
pub const NVIC_ACTLR_DISFOLD: u32 = 4;
pub const NVIC_ACTLR_DISWBUF: u32 = 2;
pub const NVIC_ACTLR_DISMCYC: u32 = 1;
pub const NVIC_ST_CTRL_COUNT: u32 = 65536;
pub const NVIC_ST_CTRL_CLK_SRC: u32 = 4;
pub const NVIC_ST_CTRL_INTEN: u32 = 2;
pub const NVIC_ST_CTRL_ENABLE: u32 = 1;
pub const NVIC_ST_RELOAD_M: u32 = 16777215;
pub const NVIC_ST_RELOAD_S: u32 = 0;
pub const NVIC_ST_CURRENT_M: u32 = 16777215;
pub const NVIC_ST_CURRENT_S: u32 = 0;
pub const NVIC_ST_CAL_NOREF: u32 = 2147483648;
pub const NVIC_ST_CAL_SKEW: u32 = 1073741824;
pub const NVIC_ST_CAL_ONEMS_M: u32 = 16777215;
pub const NVIC_ST_CAL_ONEMS_S: u32 = 0;
pub const NVIC_EN0_INT_M: u32 = 4294967295;
pub const NVIC_EN0_INT0: u32 = 1;
pub const NVIC_EN0_INT1: u32 = 2;
pub const NVIC_EN0_INT2: u32 = 4;
pub const NVIC_EN0_INT3: u32 = 8;
pub const NVIC_EN0_INT4: u32 = 16;
pub const NVIC_EN0_INT5: u32 = 32;
pub const NVIC_EN0_INT6: u32 = 64;
pub const NVIC_EN0_INT7: u32 = 128;
pub const NVIC_EN0_INT8: u32 = 256;
pub const NVIC_EN0_INT9: u32 = 512;
pub const NVIC_EN0_INT10: u32 = 1024;
pub const NVIC_EN0_INT11: u32 = 2048;
pub const NVIC_EN0_INT12: u32 = 4096;
pub const NVIC_EN0_INT13: u32 = 8192;
pub const NVIC_EN0_INT14: u32 = 16384;
pub const NVIC_EN0_INT15: u32 = 32768;
pub const NVIC_EN0_INT16: u32 = 65536;
pub const NVIC_EN0_INT17: u32 = 131072;
pub const NVIC_EN0_INT18: u32 = 262144;
pub const NVIC_EN0_INT19: u32 = 524288;
pub const NVIC_EN0_INT20: u32 = 1048576;
pub const NVIC_EN0_INT21: u32 = 2097152;
pub const NVIC_EN0_INT22: u32 = 4194304;
pub const NVIC_EN0_INT23: u32 = 8388608;
pub const NVIC_EN0_INT24: u32 = 16777216;
pub const NVIC_EN0_INT25: u32 = 33554432;
pub const NVIC_EN0_INT26: u32 = 67108864;
pub const NVIC_EN0_INT27: u32 = 134217728;
pub const NVIC_EN0_INT28: u32 = 268435456;
pub const NVIC_EN0_INT29: u32 = 536870912;
pub const NVIC_EN0_INT30: u32 = 1073741824;
pub const NVIC_EN0_INT31: u32 = 2147483648;
pub const NVIC_EN1_INT_M: u32 = 8388607;
pub const NVIC_EN1_INT32: u32 = 1;
pub const NVIC_EN1_INT33: u32 = 2;
pub const NVIC_EN1_INT34: u32 = 4;
pub const NVIC_EN1_INT35: u32 = 8;
pub const NVIC_EN1_INT36: u32 = 16;
pub const NVIC_EN1_INT37: u32 = 32;
pub const NVIC_EN1_INT38: u32 = 64;
pub const NVIC_EN1_INT39: u32 = 128;
pub const NVIC_EN1_INT40: u32 = 256;
pub const NVIC_EN1_INT41: u32 = 512;
pub const NVIC_EN1_INT42: u32 = 1024;
pub const NVIC_EN1_INT43: u32 = 2048;
pub const NVIC_EN1_INT44: u32 = 4096;
pub const NVIC_EN1_INT45: u32 = 8192;
pub const NVIC_EN1_INT46: u32 = 16384;
pub const NVIC_EN1_INT47: u32 = 32768;
pub const NVIC_EN1_INT48: u32 = 65536;
pub const NVIC_EN1_INT49: u32 = 131072;
pub const NVIC_EN1_INT50: u32 = 262144;
pub const NVIC_EN1_INT51: u32 = 524288;
pub const NVIC_EN1_INT52: u32 = 1048576;
pub const NVIC_EN1_INT53: u32 = 2097152;
pub const NVIC_EN1_INT54: u32 = 4194304;
pub const NVIC_DIS0_INT_M: u32 = 4294967295;
pub const NVIC_DIS0_INT0: u32 = 1;
pub const NVIC_DIS0_INT1: u32 = 2;
pub const NVIC_DIS0_INT2: u32 = 4;
pub const NVIC_DIS0_INT3: u32 = 8;
pub const NVIC_DIS0_INT4: u32 = 16;
pub const NVIC_DIS0_INT5: u32 = 32;
pub const NVIC_DIS0_INT6: u32 = 64;
pub const NVIC_DIS0_INT7: u32 = 128;
pub const NVIC_DIS0_INT8: u32 = 256;
pub const NVIC_DIS0_INT9: u32 = 512;
pub const NVIC_DIS0_INT10: u32 = 1024;
pub const NVIC_DIS0_INT11: u32 = 2048;
pub const NVIC_DIS0_INT12: u32 = 4096;
pub const NVIC_DIS0_INT13: u32 = 8192;
pub const NVIC_DIS0_INT14: u32 = 16384;
pub const NVIC_DIS0_INT15: u32 = 32768;
pub const NVIC_DIS0_INT16: u32 = 65536;
pub const NVIC_DIS0_INT17: u32 = 131072;
pub const NVIC_DIS0_INT18: u32 = 262144;
pub const NVIC_DIS0_INT19: u32 = 524288;
pub const NVIC_DIS0_INT20: u32 = 1048576;
pub const NVIC_DIS0_INT21: u32 = 2097152;
pub const NVIC_DIS0_INT22: u32 = 4194304;
pub const NVIC_DIS0_INT23: u32 = 8388608;
pub const NVIC_DIS0_INT24: u32 = 16777216;
pub const NVIC_DIS0_INT25: u32 = 33554432;
pub const NVIC_DIS0_INT26: u32 = 67108864;
pub const NVIC_DIS0_INT27: u32 = 134217728;
pub const NVIC_DIS0_INT28: u32 = 268435456;
pub const NVIC_DIS0_INT29: u32 = 536870912;
pub const NVIC_DIS0_INT30: u32 = 1073741824;
pub const NVIC_DIS0_INT31: u32 = 2147483648;
pub const NVIC_DIS1_INT_M: u32 = 8388607;
pub const NVIC_DIS1_INT32: u32 = 1;
pub const NVIC_DIS1_INT33: u32 = 2;
pub const NVIC_DIS1_INT34: u32 = 4;
pub const NVIC_DIS1_INT35: u32 = 8;
pub const NVIC_DIS1_INT36: u32 = 16;
pub const NVIC_DIS1_INT37: u32 = 32;
pub const NVIC_DIS1_INT38: u32 = 64;
pub const NVIC_DIS1_INT39: u32 = 128;
pub const NVIC_DIS1_INT40: u32 = 256;
pub const NVIC_DIS1_INT41: u32 = 512;
pub const NVIC_DIS1_INT42: u32 = 1024;
pub const NVIC_DIS1_INT43: u32 = 2048;
pub const NVIC_DIS1_INT44: u32 = 4096;
pub const NVIC_DIS1_INT45: u32 = 8192;
pub const NVIC_DIS1_INT46: u32 = 16384;
pub const NVIC_DIS1_INT47: u32 = 32768;
pub const NVIC_DIS1_INT48: u32 = 65536;
pub const NVIC_DIS1_INT49: u32 = 131072;
pub const NVIC_DIS1_INT50: u32 = 262144;
pub const NVIC_DIS1_INT51: u32 = 524288;
pub const NVIC_DIS1_INT52: u32 = 1048576;
pub const NVIC_DIS1_INT53: u32 = 2097152;
pub const NVIC_DIS1_INT54: u32 = 4194304;
pub const NVIC_PEND0_INT_M: u32 = 4294967295;
pub const NVIC_PEND0_INT0: u32 = 1;
pub const NVIC_PEND0_INT1: u32 = 2;
pub const NVIC_PEND0_INT2: u32 = 4;
pub const NVIC_PEND0_INT3: u32 = 8;
pub const NVIC_PEND0_INT4: u32 = 16;
pub const NVIC_PEND0_INT5: u32 = 32;
pub const NVIC_PEND0_INT6: u32 = 64;
pub const NVIC_PEND0_INT7: u32 = 128;
pub const NVIC_PEND0_INT8: u32 = 256;
pub const NVIC_PEND0_INT9: u32 = 512;
pub const NVIC_PEND0_INT10: u32 = 1024;
pub const NVIC_PEND0_INT11: u32 = 2048;
pub const NVIC_PEND0_INT12: u32 = 4096;
pub const NVIC_PEND0_INT13: u32 = 8192;
pub const NVIC_PEND0_INT14: u32 = 16384;
pub const NVIC_PEND0_INT15: u32 = 32768;
pub const NVIC_PEND0_INT16: u32 = 65536;
pub const NVIC_PEND0_INT17: u32 = 131072;
pub const NVIC_PEND0_INT18: u32 = 262144;
pub const NVIC_PEND0_INT19: u32 = 524288;
pub const NVIC_PEND0_INT20: u32 = 1048576;
pub const NVIC_PEND0_INT21: u32 = 2097152;
pub const NVIC_PEND0_INT22: u32 = 4194304;
pub const NVIC_PEND0_INT23: u32 = 8388608;
pub const NVIC_PEND0_INT24: u32 = 16777216;
pub const NVIC_PEND0_INT25: u32 = 33554432;
pub const NVIC_PEND0_INT26: u32 = 67108864;
pub const NVIC_PEND0_INT27: u32 = 134217728;
pub const NVIC_PEND0_INT28: u32 = 268435456;
pub const NVIC_PEND0_INT29: u32 = 536870912;
pub const NVIC_PEND0_INT30: u32 = 1073741824;
pub const NVIC_PEND0_INT31: u32 = 2147483648;
pub const NVIC_PEND1_INT_M: u32 = 8388607;
pub const NVIC_PEND1_INT32: u32 = 1;
pub const NVIC_PEND1_INT33: u32 = 2;
pub const NVIC_PEND1_INT34: u32 = 4;
pub const NVIC_PEND1_INT35: u32 = 8;
pub const NVIC_PEND1_INT36: u32 = 16;
pub const NVIC_PEND1_INT37: u32 = 32;
pub const NVIC_PEND1_INT38: u32 = 64;
pub const NVIC_PEND1_INT39: u32 = 128;
pub const NVIC_PEND1_INT40: u32 = 256;
pub const NVIC_PEND1_INT41: u32 = 512;
pub const NVIC_PEND1_INT42: u32 = 1024;
pub const NVIC_PEND1_INT43: u32 = 2048;
pub const NVIC_PEND1_INT44: u32 = 4096;
pub const NVIC_PEND1_INT45: u32 = 8192;
pub const NVIC_PEND1_INT46: u32 = 16384;
pub const NVIC_PEND1_INT47: u32 = 32768;
pub const NVIC_PEND1_INT48: u32 = 65536;
pub const NVIC_PEND1_INT49: u32 = 131072;
pub const NVIC_PEND1_INT50: u32 = 262144;
pub const NVIC_PEND1_INT51: u32 = 524288;
pub const NVIC_PEND1_INT52: u32 = 1048576;
pub const NVIC_PEND1_INT53: u32 = 2097152;
pub const NVIC_PEND1_INT54: u32 = 4194304;
pub const NVIC_UNPEND0_INT_M: u32 = 4294967295;
pub const NVIC_UNPEND0_INT0: u32 = 1;
pub const NVIC_UNPEND0_INT1: u32 = 2;
pub const NVIC_UNPEND0_INT2: u32 = 4;
pub const NVIC_UNPEND0_INT3: u32 = 8;
pub const NVIC_UNPEND0_INT4: u32 = 16;
pub const NVIC_UNPEND0_INT5: u32 = 32;
pub const NVIC_UNPEND0_INT6: u32 = 64;
pub const NVIC_UNPEND0_INT7: u32 = 128;
pub const NVIC_UNPEND0_INT8: u32 = 256;
pub const NVIC_UNPEND0_INT9: u32 = 512;
pub const NVIC_UNPEND0_INT10: u32 = 1024;
pub const NVIC_UNPEND0_INT11: u32 = 2048;
pub const NVIC_UNPEND0_INT12: u32 = 4096;
pub const NVIC_UNPEND0_INT13: u32 = 8192;
pub const NVIC_UNPEND0_INT14: u32 = 16384;
pub const NVIC_UNPEND0_INT15: u32 = 32768;
pub const NVIC_UNPEND0_INT16: u32 = 65536;
pub const NVIC_UNPEND0_INT17: u32 = 131072;
pub const NVIC_UNPEND0_INT18: u32 = 262144;
pub const NVIC_UNPEND0_INT19: u32 = 524288;
pub const NVIC_UNPEND0_INT20: u32 = 1048576;
pub const NVIC_UNPEND0_INT21: u32 = 2097152;
pub const NVIC_UNPEND0_INT22: u32 = 4194304;
pub const NVIC_UNPEND0_INT23: u32 = 8388608;
pub const NVIC_UNPEND0_INT24: u32 = 16777216;
pub const NVIC_UNPEND0_INT25: u32 = 33554432;
pub const NVIC_UNPEND0_INT26: u32 = 67108864;
pub const NVIC_UNPEND0_INT27: u32 = 134217728;
pub const NVIC_UNPEND0_INT28: u32 = 268435456;
pub const NVIC_UNPEND0_INT29: u32 = 536870912;
pub const NVIC_UNPEND0_INT30: u32 = 1073741824;
pub const NVIC_UNPEND0_INT31: u32 = 2147483648;
pub const NVIC_UNPEND1_INT_M: u32 = 8388607;
pub const NVIC_UNPEND1_INT32: u32 = 1;
pub const NVIC_UNPEND1_INT33: u32 = 2;
pub const NVIC_UNPEND1_INT34: u32 = 4;
pub const NVIC_UNPEND1_INT35: u32 = 8;
pub const NVIC_UNPEND1_INT36: u32 = 16;
pub const NVIC_UNPEND1_INT37: u32 = 32;
pub const NVIC_UNPEND1_INT38: u32 = 64;
pub const NVIC_UNPEND1_INT39: u32 = 128;
pub const NVIC_UNPEND1_INT40: u32 = 256;
pub const NVIC_UNPEND1_INT41: u32 = 512;
pub const NVIC_UNPEND1_INT42: u32 = 1024;
pub const NVIC_UNPEND1_INT43: u32 = 2048;
pub const NVIC_UNPEND1_INT44: u32 = 4096;
pub const NVIC_UNPEND1_INT45: u32 = 8192;
pub const NVIC_UNPEND1_INT46: u32 = 16384;
pub const NVIC_UNPEND1_INT47: u32 = 32768;
pub const NVIC_UNPEND1_INT48: u32 = 65536;
pub const NVIC_UNPEND1_INT49: u32 = 131072;
pub const NVIC_UNPEND1_INT50: u32 = 262144;
pub const NVIC_UNPEND1_INT51: u32 = 524288;
pub const NVIC_UNPEND1_INT52: u32 = 1048576;
pub const NVIC_UNPEND1_INT53: u32 = 2097152;
pub const NVIC_UNPEND1_INT54: u32 = 4194304;
pub const NVIC_ACTIVE0_INT_M: u32 = 4294967295;
pub const NVIC_ACTIVE0_INT0: u32 = 1;
pub const NVIC_ACTIVE0_INT1: u32 = 2;
pub const NVIC_ACTIVE0_INT2: u32 = 4;
pub const NVIC_ACTIVE0_INT3: u32 = 8;
pub const NVIC_ACTIVE0_INT4: u32 = 16;
pub const NVIC_ACTIVE0_INT5: u32 = 32;
pub const NVIC_ACTIVE0_INT6: u32 = 64;
pub const NVIC_ACTIVE0_INT7: u32 = 128;
pub const NVIC_ACTIVE0_INT8: u32 = 256;
pub const NVIC_ACTIVE0_INT9: u32 = 512;
pub const NVIC_ACTIVE0_INT10: u32 = 1024;
pub const NVIC_ACTIVE0_INT11: u32 = 2048;
pub const NVIC_ACTIVE0_INT12: u32 = 4096;
pub const NVIC_ACTIVE0_INT13: u32 = 8192;
pub const NVIC_ACTIVE0_INT14: u32 = 16384;
pub const NVIC_ACTIVE0_INT15: u32 = 32768;
pub const NVIC_ACTIVE0_INT16: u32 = 65536;
pub const NVIC_ACTIVE0_INT17: u32 = 131072;
pub const NVIC_ACTIVE0_INT18: u32 = 262144;
pub const NVIC_ACTIVE0_INT19: u32 = 524288;
pub const NVIC_ACTIVE0_INT20: u32 = 1048576;
pub const NVIC_ACTIVE0_INT21: u32 = 2097152;
pub const NVIC_ACTIVE0_INT22: u32 = 4194304;
pub const NVIC_ACTIVE0_INT23: u32 = 8388608;
pub const NVIC_ACTIVE0_INT24: u32 = 16777216;
pub const NVIC_ACTIVE0_INT25: u32 = 33554432;
pub const NVIC_ACTIVE0_INT26: u32 = 67108864;
pub const NVIC_ACTIVE0_INT27: u32 = 134217728;
pub const NVIC_ACTIVE0_INT28: u32 = 268435456;
pub const NVIC_ACTIVE0_INT29: u32 = 536870912;
pub const NVIC_ACTIVE0_INT30: u32 = 1073741824;
pub const NVIC_ACTIVE0_INT31: u32 = 2147483648;
pub const NVIC_ACTIVE1_INT_M: u32 = 8388607;
pub const NVIC_ACTIVE1_INT32: u32 = 1;
pub const NVIC_ACTIVE1_INT33: u32 = 2;
pub const NVIC_ACTIVE1_INT34: u32 = 4;
pub const NVIC_ACTIVE1_INT35: u32 = 8;
pub const NVIC_ACTIVE1_INT36: u32 = 16;
pub const NVIC_ACTIVE1_INT37: u32 = 32;
pub const NVIC_ACTIVE1_INT38: u32 = 64;
pub const NVIC_ACTIVE1_INT39: u32 = 128;
pub const NVIC_ACTIVE1_INT40: u32 = 256;
pub const NVIC_ACTIVE1_INT41: u32 = 512;
pub const NVIC_ACTIVE1_INT42: u32 = 1024;
pub const NVIC_ACTIVE1_INT43: u32 = 2048;
pub const NVIC_ACTIVE1_INT44: u32 = 4096;
pub const NVIC_ACTIVE1_INT45: u32 = 8192;
pub const NVIC_ACTIVE1_INT46: u32 = 16384;
pub const NVIC_ACTIVE1_INT47: u32 = 32768;
pub const NVIC_ACTIVE1_INT48: u32 = 65536;
pub const NVIC_ACTIVE1_INT49: u32 = 131072;
pub const NVIC_ACTIVE1_INT50: u32 = 262144;
pub const NVIC_ACTIVE1_INT51: u32 = 524288;
pub const NVIC_ACTIVE1_INT52: u32 = 1048576;
pub const NVIC_ACTIVE1_INT53: u32 = 2097152;
pub const NVIC_ACTIVE1_INT54: u32 = 4194304;
pub const NVIC_PRI0_INT3_M: u32 = 3758096384;
pub const NVIC_PRI0_INT2_M: u32 = 14680064;
pub const NVIC_PRI0_INT1_M: u32 = 57344;
pub const NVIC_PRI0_INT0_M: u32 = 224;
pub const NVIC_PRI0_INT3_S: u32 = 29;
pub const NVIC_PRI0_INT2_S: u32 = 21;
pub const NVIC_PRI0_INT1_S: u32 = 13;
pub const NVIC_PRI0_INT0_S: u32 = 5;
pub const NVIC_PRI1_INT7_M: u32 = 3758096384;
pub const NVIC_PRI1_INT6_M: u32 = 14680064;
pub const NVIC_PRI1_INT5_M: u32 = 57344;
pub const NVIC_PRI1_INT4_M: u32 = 224;
pub const NVIC_PRI1_INT7_S: u32 = 29;
pub const NVIC_PRI1_INT6_S: u32 = 21;
pub const NVIC_PRI1_INT5_S: u32 = 13;
pub const NVIC_PRI1_INT4_S: u32 = 5;
pub const NVIC_PRI2_INT11_M: u32 = 3758096384;
pub const NVIC_PRI2_INT10_M: u32 = 14680064;
pub const NVIC_PRI2_INT9_M: u32 = 57344;
pub const NVIC_PRI2_INT8_M: u32 = 224;
pub const NVIC_PRI2_INT11_S: u32 = 29;
pub const NVIC_PRI2_INT10_S: u32 = 21;
pub const NVIC_PRI2_INT9_S: u32 = 13;
pub const NVIC_PRI2_INT8_S: u32 = 5;
pub const NVIC_PRI3_INT15_M: u32 = 3758096384;
pub const NVIC_PRI3_INT14_M: u32 = 14680064;
pub const NVIC_PRI3_INT13_M: u32 = 57344;
pub const NVIC_PRI3_INT12_M: u32 = 224;
pub const NVIC_PRI3_INT15_S: u32 = 29;
pub const NVIC_PRI3_INT14_S: u32 = 21;
pub const NVIC_PRI3_INT13_S: u32 = 13;
pub const NVIC_PRI3_INT12_S: u32 = 5;
pub const NVIC_PRI4_INT19_M: u32 = 3758096384;
pub const NVIC_PRI4_INT18_M: u32 = 14680064;
pub const NVIC_PRI4_INT17_M: u32 = 57344;
pub const NVIC_PRI4_INT16_M: u32 = 224;
pub const NVIC_PRI4_INT19_S: u32 = 29;
pub const NVIC_PRI4_INT18_S: u32 = 21;
pub const NVIC_PRI4_INT17_S: u32 = 13;
pub const NVIC_PRI4_INT16_S: u32 = 5;
pub const NVIC_PRI5_INT23_M: u32 = 3758096384;
pub const NVIC_PRI5_INT22_M: u32 = 14680064;
pub const NVIC_PRI5_INT21_M: u32 = 57344;
pub const NVIC_PRI5_INT20_M: u32 = 224;
pub const NVIC_PRI5_INT23_S: u32 = 29;
pub const NVIC_PRI5_INT22_S: u32 = 21;
pub const NVIC_PRI5_INT21_S: u32 = 13;
pub const NVIC_PRI5_INT20_S: u32 = 5;
pub const NVIC_PRI6_INT27_M: u32 = 3758096384;
pub const NVIC_PRI6_INT26_M: u32 = 14680064;
pub const NVIC_PRI6_INT25_M: u32 = 57344;
pub const NVIC_PRI6_INT24_M: u32 = 224;
pub const NVIC_PRI6_INT27_S: u32 = 29;
pub const NVIC_PRI6_INT26_S: u32 = 21;
pub const NVIC_PRI6_INT25_S: u32 = 13;
pub const NVIC_PRI6_INT24_S: u32 = 5;
pub const NVIC_PRI7_INT31_M: u32 = 3758096384;
pub const NVIC_PRI7_INT30_M: u32 = 14680064;
pub const NVIC_PRI7_INT29_M: u32 = 57344;
pub const NVIC_PRI7_INT28_M: u32 = 224;
pub const NVIC_PRI7_INT31_S: u32 = 29;
pub const NVIC_PRI7_INT30_S: u32 = 21;
pub const NVIC_PRI7_INT29_S: u32 = 13;
pub const NVIC_PRI7_INT28_S: u32 = 5;
pub const NVIC_PRI8_INT35_M: u32 = 3758096384;
pub const NVIC_PRI8_INT34_M: u32 = 14680064;
pub const NVIC_PRI8_INT33_M: u32 = 57344;
pub const NVIC_PRI8_INT32_M: u32 = 224;
pub const NVIC_PRI8_INT35_S: u32 = 29;
pub const NVIC_PRI8_INT34_S: u32 = 21;
pub const NVIC_PRI8_INT33_S: u32 = 13;
pub const NVIC_PRI8_INT32_S: u32 = 5;
pub const NVIC_PRI9_INT39_M: u32 = 3758096384;
pub const NVIC_PRI9_INT38_M: u32 = 14680064;
pub const NVIC_PRI9_INT37_M: u32 = 57344;
pub const NVIC_PRI9_INT36_M: u32 = 224;
pub const NVIC_PRI9_INT39_S: u32 = 29;
pub const NVIC_PRI9_INT38_S: u32 = 21;
pub const NVIC_PRI9_INT37_S: u32 = 13;
pub const NVIC_PRI9_INT36_S: u32 = 5;
pub const NVIC_PRI10_INT43_M: u32 = 3758096384;
pub const NVIC_PRI10_INT42_M: u32 = 14680064;
pub const NVIC_PRI10_INT41_M: u32 = 57344;
pub const NVIC_PRI10_INT40_M: u32 = 224;
pub const NVIC_PRI10_INT43_S: u32 = 29;
pub const NVIC_PRI10_INT42_S: u32 = 21;
pub const NVIC_PRI10_INT41_S: u32 = 13;
pub const NVIC_PRI10_INT40_S: u32 = 5;
pub const NVIC_PRI11_INT47_M: u32 = 3758096384;
pub const NVIC_PRI11_INT46_M: u32 = 14680064;
pub const NVIC_PRI11_INT45_M: u32 = 57344;
pub const NVIC_PRI11_INT44_M: u32 = 224;
pub const NVIC_PRI11_INT47_S: u32 = 29;
pub const NVIC_PRI11_INT46_S: u32 = 21;
pub const NVIC_PRI11_INT45_S: u32 = 13;
pub const NVIC_PRI11_INT44_S: u32 = 5;
pub const NVIC_PRI12_INT51_M: u32 = 3758096384;
pub const NVIC_PRI12_INT50_M: u32 = 14680064;
pub const NVIC_PRI12_INT49_M: u32 = 57344;
pub const NVIC_PRI12_INT48_M: u32 = 224;
pub const NVIC_PRI12_INT51_S: u32 = 29;
pub const NVIC_PRI12_INT50_S: u32 = 21;
pub const NVIC_PRI12_INT49_S: u32 = 13;
pub const NVIC_PRI12_INT48_S: u32 = 5;
pub const NVIC_PRI13_INT55_M: u32 = 3758096384;
pub const NVIC_PRI13_INT54_M: u32 = 14680064;
pub const NVIC_PRI13_INT53_M: u32 = 57344;
pub const NVIC_PRI13_INT52_M: u32 = 224;
pub const NVIC_PRI13_INT55_S: u32 = 29;
pub const NVIC_PRI13_INT54_S: u32 = 21;
pub const NVIC_PRI13_INT53_S: u32 = 13;
pub const NVIC_PRI13_INT52_S: u32 = 5;
pub const NVIC_CPUID_IMP_M: u32 = 4278190080;
pub const NVIC_CPUID_IMP_ARM: u32 = 1090519040;
pub const NVIC_CPUID_VAR_M: u32 = 15728640;
pub const NVIC_CPUID_CON_M: u32 = 983040;
pub const NVIC_CPUID_PARTNO_M: u32 = 65520;
pub const NVIC_CPUID_PARTNO_CM3: u32 = 49712;
pub const NVIC_CPUID_PARTNO_CM4: u32 = 49728;
pub const NVIC_CPUID_REV_M: u32 = 15;
pub const NVIC_INT_CTRL_NMI_SET: u32 = 2147483648;
pub const NVIC_INT_CTRL_PEND_SV: u32 = 268435456;
pub const NVIC_INT_CTRL_UNPEND_SV: u32 = 134217728;
pub const NVIC_INT_CTRL_PENDSTSET: u32 = 67108864;
pub const NVIC_INT_CTRL_PENDSTCLR: u32 = 33554432;
pub const NVIC_INT_CTRL_ISR_PRE: u32 = 8388608;
pub const NVIC_INT_CTRL_ISR_PEND: u32 = 4194304;
pub const NVIC_INT_CTRL_VEC_PEN_M: u32 = 520192;
pub const NVIC_INT_CTRL_VEC_PEN_NMI: u32 = 8192;
pub const NVIC_INT_CTRL_VEC_PEN_HARD: u32 = 12288;
pub const NVIC_INT_CTRL_VEC_PEN_MEM: u32 = 16384;
pub const NVIC_INT_CTRL_VEC_PEN_BUS: u32 = 20480;
pub const NVIC_INT_CTRL_VEC_PEN_USG: u32 = 24576;
pub const NVIC_INT_CTRL_VEC_PEN_SVC: u32 = 45056;
pub const NVIC_INT_CTRL_VEC_PEN_PNDSV: u32 = 57344;
pub const NVIC_INT_CTRL_VEC_PEN_TICK: u32 = 61440;
pub const NVIC_INT_CTRL_RET_BASE: u32 = 2048;
pub const NVIC_INT_CTRL_VEC_ACT_M: u32 = 127;
pub const NVIC_INT_CTRL_VEC_PEN_S: u32 = 12;
pub const NVIC_INT_CTRL_VEC_ACT_S: u32 = 0;
pub const NVIC_VTABLE_BASE: u32 = 536870912;
pub const NVIC_VTABLE_OFFSET_M: u32 = 536870400;
pub const NVIC_VTABLE_OFFSET_S: u32 = 9;
pub const NVIC_APINT_VECTKEY_M: u32 = 4294901760;
pub const NVIC_APINT_VECTKEY: u32 = 100270080;
pub const NVIC_APINT_ENDIANESS: u32 = 32768;
pub const NVIC_APINT_PRIGROUP_M: u32 = 1792;
pub const NVIC_APINT_PRIGROUP_7_1: u32 = 0;
pub const NVIC_APINT_PRIGROUP_6_2: u32 = 256;
pub const NVIC_APINT_PRIGROUP_5_3: u32 = 512;
pub const NVIC_APINT_PRIGROUP_4_4: u32 = 768;
pub const NVIC_APINT_PRIGROUP_3_5: u32 = 1024;
pub const NVIC_APINT_PRIGROUP_2_6: u32 = 1280;
pub const NVIC_APINT_PRIGROUP_1_7: u32 = 1536;
pub const NVIC_APINT_PRIGROUP_0_8: u32 = 1792;
pub const NVIC_APINT_SYSRESETREQ: u32 = 4;
pub const NVIC_APINT_VECT_CLR_ACT: u32 = 2;
pub const NVIC_APINT_VECT_RESET: u32 = 1;
pub const NVIC_SYS_CTRL_SEVONPEND: u32 = 16;
pub const NVIC_SYS_CTRL_SLEEPDEEP: u32 = 4;
pub const NVIC_SYS_CTRL_SLEEPEXIT: u32 = 2;
pub const NVIC_CFG_CTRL_STKALIGN: u32 = 512;
pub const NVIC_CFG_CTRL_BFHFNMIGN: u32 = 256;
pub const NVIC_CFG_CTRL_DIV0: u32 = 16;
pub const NVIC_CFG_CTRL_UNALIGNED: u32 = 8;
pub const NVIC_CFG_CTRL_MAIN_PEND: u32 = 2;
pub const NVIC_CFG_CTRL_BASE_THR: u32 = 1;
pub const NVIC_SYS_PRI1_USAGE_M: u32 = 14680064;
pub const NVIC_SYS_PRI1_BUS_M: u32 = 57344;
pub const NVIC_SYS_PRI1_MEM_M: u32 = 224;
pub const NVIC_SYS_PRI1_USAGE_S: u32 = 21;
pub const NVIC_SYS_PRI1_BUS_S: u32 = 13;
pub const NVIC_SYS_PRI1_MEM_S: u32 = 5;
pub const NVIC_SYS_PRI2_SVC_M: u32 = 3758096384;
pub const NVIC_SYS_PRI2_SVC_S: u32 = 29;
pub const NVIC_SYS_PRI3_TICK_M: u32 = 3758096384;
pub const NVIC_SYS_PRI3_PENDSV_M: u32 = 14680064;
pub const NVIC_SYS_PRI3_DEBUG_M: u32 = 224;
pub const NVIC_SYS_PRI3_TICK_S: u32 = 29;
pub const NVIC_SYS_PRI3_PENDSV_S: u32 = 21;
pub const NVIC_SYS_PRI3_DEBUG_S: u32 = 5;
pub const NVIC_SYS_HND_CTRL_USAGE: u32 = 262144;
pub const NVIC_SYS_HND_CTRL_BUS: u32 = 131072;
pub const NVIC_SYS_HND_CTRL_MEM: u32 = 65536;
pub const NVIC_SYS_HND_CTRL_SVC: u32 = 32768;
pub const NVIC_SYS_HND_CTRL_BUSP: u32 = 16384;
pub const NVIC_SYS_HND_CTRL_MEMP: u32 = 8192;
pub const NVIC_SYS_HND_CTRL_USAGEP: u32 = 4096;
pub const NVIC_SYS_HND_CTRL_TICK: u32 = 2048;
pub const NVIC_SYS_HND_CTRL_PNDSV: u32 = 1024;
pub const NVIC_SYS_HND_CTRL_MON: u32 = 256;
pub const NVIC_SYS_HND_CTRL_SVCA: u32 = 128;
pub const NVIC_SYS_HND_CTRL_USGA: u32 = 8;
pub const NVIC_SYS_HND_CTRL_BUSA: u32 = 2;
pub const NVIC_SYS_HND_CTRL_MEMA: u32 = 1;
pub const NVIC_FAULT_STAT_DIV0: u32 = 33554432;
pub const NVIC_FAULT_STAT_UNALIGN: u32 = 16777216;
pub const NVIC_FAULT_STAT_NOCP: u32 = 524288;
pub const NVIC_FAULT_STAT_INVPC: u32 = 262144;
pub const NVIC_FAULT_STAT_INVSTAT: u32 = 131072;
pub const NVIC_FAULT_STAT_UNDEF: u32 = 65536;
pub const NVIC_FAULT_STAT_BFARV: u32 = 32768;
pub const NVIC_FAULT_STAT_BLSPERR: u32 = 8192;
pub const NVIC_FAULT_STAT_BSTKE: u32 = 4096;
pub const NVIC_FAULT_STAT_BUSTKE: u32 = 2048;
pub const NVIC_FAULT_STAT_IMPRE: u32 = 1024;
pub const NVIC_FAULT_STAT_PRECISE: u32 = 512;
pub const NVIC_FAULT_STAT_IBUS: u32 = 256;
pub const NVIC_FAULT_STAT_MMARV: u32 = 128;
pub const NVIC_FAULT_STAT_MLSPERR: u32 = 32;
pub const NVIC_FAULT_STAT_MSTKE: u32 = 16;
pub const NVIC_FAULT_STAT_MUSTKE: u32 = 8;
pub const NVIC_FAULT_STAT_DERR: u32 = 2;
pub const NVIC_FAULT_STAT_IERR: u32 = 1;
pub const NVIC_HFAULT_STAT_DBG: u32 = 2147483648;
pub const NVIC_HFAULT_STAT_FORCED: u32 = 1073741824;
pub const NVIC_HFAULT_STAT_VECT: u32 = 2;
pub const NVIC_DEBUG_STAT_EXTRNL: u32 = 16;
pub const NVIC_DEBUG_STAT_VCATCH: u32 = 8;
pub const NVIC_DEBUG_STAT_DWTTRAP: u32 = 4;
pub const NVIC_DEBUG_STAT_BKPT: u32 = 2;
pub const NVIC_DEBUG_STAT_HALTED: u32 = 1;
pub const NVIC_MM_ADDR_M: u32 = 4294967295;
pub const NVIC_MM_ADDR_S: u32 = 0;
pub const NVIC_FAULT_ADDR_M: u32 = 4294967295;
pub const NVIC_FAULT_ADDR_S: u32 = 0;
pub const NVIC_DBG_CTRL_DBGKEY_M: u32 = 4294901760;
pub const NVIC_DBG_CTRL_DBGKEY: u32 = 2690580480;
pub const NVIC_DBG_CTRL_S_RESET_ST: u32 = 33554432;
pub const NVIC_DBG_CTRL_S_RETIRE_ST: u32 = 16777216;
pub const NVIC_DBG_CTRL_S_LOCKUP: u32 = 524288;
pub const NVIC_DBG_CTRL_S_SLEEP: u32 = 262144;
pub const NVIC_DBG_CTRL_S_HALT: u32 = 131072;
pub const NVIC_DBG_CTRL_S_REGRDY: u32 = 65536;
pub const NVIC_DBG_CTRL_C_SNAPSTALL: u32 = 32;
pub const NVIC_DBG_CTRL_C_MASKINT: u32 = 8;
pub const NVIC_DBG_CTRL_C_STEP: u32 = 4;
pub const NVIC_DBG_CTRL_C_HALT: u32 = 2;
pub const NVIC_DBG_CTRL_C_DEBUGEN: u32 = 1;
pub const NVIC_DBG_XFER_REG_WNR: u32 = 65536;
pub const NVIC_DBG_XFER_REG_SEL_M: u32 = 31;
pub const NVIC_DBG_XFER_REG_R0: u32 = 0;
pub const NVIC_DBG_XFER_REG_R1: u32 = 1;
pub const NVIC_DBG_XFER_REG_R2: u32 = 2;
pub const NVIC_DBG_XFER_REG_R3: u32 = 3;
pub const NVIC_DBG_XFER_REG_R4: u32 = 4;
pub const NVIC_DBG_XFER_REG_R5: u32 = 5;
pub const NVIC_DBG_XFER_REG_R6: u32 = 6;
pub const NVIC_DBG_XFER_REG_R7: u32 = 7;
pub const NVIC_DBG_XFER_REG_R8: u32 = 8;
pub const NVIC_DBG_XFER_REG_R9: u32 = 9;
pub const NVIC_DBG_XFER_REG_R10: u32 = 10;
pub const NVIC_DBG_XFER_REG_R11: u32 = 11;
pub const NVIC_DBG_XFER_REG_R12: u32 = 12;
pub const NVIC_DBG_XFER_REG_R13: u32 = 13;
pub const NVIC_DBG_XFER_REG_R14: u32 = 14;
pub const NVIC_DBG_XFER_REG_R15: u32 = 15;
pub const NVIC_DBG_XFER_REG_FLAGS: u32 = 16;
pub const NVIC_DBG_XFER_REG_MSP: u32 = 17;
pub const NVIC_DBG_XFER_REG_PSP: u32 = 18;
pub const NVIC_DBG_XFER_REG_DSP: u32 = 19;
pub const NVIC_DBG_XFER_REG_CFBP: u32 = 20;
pub const NVIC_DBG_DATA_M: u32 = 4294967295;
pub const NVIC_DBG_DATA_S: u32 = 0;
pub const NVIC_DBG_INT_HARDERR: u32 = 1024;
pub const NVIC_DBG_INT_INTERR: u32 = 512;
pub const NVIC_DBG_INT_BUSERR: u32 = 256;
pub const NVIC_DBG_INT_STATERR: u32 = 128;
pub const NVIC_DBG_INT_CHKERR: u32 = 64;
pub const NVIC_DBG_INT_NOCPERR: u32 = 32;
pub const NVIC_DBG_INT_MMERR: u32 = 16;
pub const NVIC_DBG_INT_RESET: u32 = 8;
pub const NVIC_DBG_INT_RSTPENDCLR: u32 = 4;
pub const NVIC_DBG_INT_RSTPENDING: u32 = 2;
pub const NVIC_DBG_INT_RSTVCATCH: u32 = 1;
pub const NVIC_SW_TRIG_INTID_M: u32 = 63;
pub const NVIC_SW_TRIG_INTID_S: u32 = 0;
pub const INT_PRIORITY_MASK: u32 = 224;
pub const INT_PRI_LEVEL0: u32 = 0;
pub const INT_PRI_LEVEL1: u32 = 32;
pub const INT_PRI_LEVEL2: u32 = 64;
pub const INT_PRI_LEVEL3: u32 = 96;
pub const INT_PRI_LEVEL4: u32 = 128;
pub const INT_PRI_LEVEL5: u32 = 160;
pub const INT_PRI_LEVEL6: u32 = 192;
pub const INT_PRI_LEVEL7: u32 = 224;
pub const AONWUC_CLOCK_SRC_HF: u32 = 3;
pub const AONWUC_CLOCK_SRC_LF: u32 = 1;
pub const AONWUC_NO_CLOCK: u32 = 0;
pub const AUX_CLOCK_DIV_2: u32 = 0;
pub const AUX_CLOCK_DIV_4: u32 = 256;
pub const AUX_CLOCK_DIV_8: u32 = 512;
pub const AUX_CLOCK_DIV_16: u32 = 768;
pub const AUX_CLOCK_DIV_32: u32 = 1024;
pub const AUX_CLOCK_DIV_64: u32 = 1280;
pub const AUX_CLOCK_DIV_128: u32 = 1536;
pub const AUX_CLOCK_DIV_256: u32 = 1792;
pub const AUX_CLOCK_DIV_UNUSED: u32 = 2048;
pub const AUX_CLOCK_DIV_M: u32 = 1792;
pub const MCU_VIRT_PWOFF_DISABLE: u32 = 0;
pub const MCU_VIRT_PWOFF_ENABLE: u32 = 131072;
pub const MCU_IMM_WAKE_UP: u32 = 0;
pub const MCU_FIXED_WAKE_UP: u32 = 65536;
pub const AUX_VIRT_PWOFF_DISABLE: u32 = 0;
pub const AUX_VIRT_PWOFF_ENABLE: u32 = 131072;
pub const AUX_IMM_WAKE_UP: u32 = 0;
pub const AUX_FIXED_WAKE_UP: u32 = 65536;
pub const MCU_RAM0_RETENTION: u32 = 1;
pub const MCU_RAM1_RETENTION: u32 = 2;
pub const MCU_RAM2_RETENTION: u32 = 4;
pub const MCU_RAM3_RETENTION: u32 = 8;
pub const MCU_RAM_BLOCK_RETENTION: u32 = 15;
pub const MCU_AUX_RET_ENABLE: u32 = 1;
pub const AONWUC_AUX_WAKEUP: u32 = 1;
pub const AONWUC_AUX_ALLOW_SLEEP: u32 = 0;
pub const AONWUC_OSC_GBIAS_REQ: u32 = 4194304;
pub const AONWUC_AUX_GBIAS_REQ: u32 = 2097152;
pub const AONWUC_MCU_GBIAS_REQ: u32 = 1048576;
pub const AONWUC_OSC_BGAP_REQ: u32 = 262144;
pub const AONWUC_AUX_BGAP_REQ: u32 = 131072;
pub const AONWUC_MCU_BGAP_REQ: u32 = 65536;
pub const AONWUC_GBIAS_ON: u32 = 8192;
pub const AONWUC_BGAP_ON: u32 = 4096;
pub const AONWUC_AUX_POWER_DOWN: u32 = 512;
pub const AONWUC_MCU_POWER_DOWN: u32 = 256;
pub const AONWUC_JTAG_POWER_ON: u32 = 64;
pub const AONWUC_AUX_POWER_ON: u32 = 32;
pub const AONWUC_MCU_POWER_ON: u32 = 16;
pub const AONWUC_SPLY_POWER_DOWN: u32 = 1;
pub const MCU_RAMREPAIR_DONE: u32 = 1;
pub const AUX_RAMREPAIR_DONE: u32 = 2;
pub const RC_RATE_MAX: u32 = 768;
pub const RC_RATE_MIN: u32 = 2;
pub const AONWUC_MCU_RESET_SRC: u32 = 2;
pub const AONWUC_MCU_WARM_RESET: u32 = 1;
pub const EVENT_O_CPUIRQSEL0: u32 = 0;
pub const EVENT_O_CPUIRQSEL1: u32 = 4;
pub const EVENT_O_CPUIRQSEL2: u32 = 8;
pub const EVENT_O_CPUIRQSEL3: u32 = 12;
pub const EVENT_O_CPUIRQSEL4: u32 = 16;
pub const EVENT_O_CPUIRQSEL5: u32 = 20;
pub const EVENT_O_CPUIRQSEL6: u32 = 24;
pub const EVENT_O_CPUIRQSEL7: u32 = 28;
pub const EVENT_O_CPUIRQSEL8: u32 = 32;
pub const EVENT_O_CPUIRQSEL9: u32 = 36;
pub const EVENT_O_CPUIRQSEL10: u32 = 40;
pub const EVENT_O_CPUIRQSEL11: u32 = 44;
pub const EVENT_O_CPUIRQSEL12: u32 = 48;
pub const EVENT_O_CPUIRQSEL13: u32 = 52;
pub const EVENT_O_CPUIRQSEL14: u32 = 56;
pub const EVENT_O_CPUIRQSEL15: u32 = 60;
pub const EVENT_O_CPUIRQSEL16: u32 = 64;
pub const EVENT_O_CPUIRQSEL17: u32 = 68;
pub const EVENT_O_CPUIRQSEL18: u32 = 72;
pub const EVENT_O_CPUIRQSEL19: u32 = 76;
pub const EVENT_O_CPUIRQSEL20: u32 = 80;
pub const EVENT_O_CPUIRQSEL21: u32 = 84;
pub const EVENT_O_CPUIRQSEL22: u32 = 88;
pub const EVENT_O_CPUIRQSEL23: u32 = 92;
pub const EVENT_O_CPUIRQSEL24: u32 = 96;
pub const EVENT_O_CPUIRQSEL25: u32 = 100;
pub const EVENT_O_CPUIRQSEL26: u32 = 104;
pub const EVENT_O_CPUIRQSEL27: u32 = 108;
pub const EVENT_O_CPUIRQSEL28: u32 = 112;
pub const EVENT_O_CPUIRQSEL29: u32 = 116;
pub const EVENT_O_CPUIRQSEL30: u32 = 120;
pub const EVENT_O_CPUIRQSEL31: u32 = 124;
pub const EVENT_O_CPUIRQSEL32: u32 = 128;
pub const EVENT_O_CPUIRQSEL33: u32 = 132;
pub const EVENT_O_RFCSEL0: u32 = 256;
pub const EVENT_O_RFCSEL1: u32 = 260;
pub const EVENT_O_RFCSEL2: u32 = 264;
pub const EVENT_O_RFCSEL3: u32 = 268;
pub const EVENT_O_RFCSEL4: u32 = 272;
pub const EVENT_O_RFCSEL5: u32 = 276;
pub const EVENT_O_RFCSEL6: u32 = 280;
pub const EVENT_O_RFCSEL7: u32 = 284;
pub const EVENT_O_RFCSEL8: u32 = 288;
pub const EVENT_O_RFCSEL9: u32 = 292;
pub const EVENT_O_GPT0ACAPTSEL: u32 = 512;
pub const EVENT_O_GPT0BCAPTSEL: u32 = 516;
pub const EVENT_O_GPT1ACAPTSEL: u32 = 768;
pub const EVENT_O_GPT1BCAPTSEL: u32 = 772;
pub const EVENT_O_GPT2ACAPTSEL: u32 = 1024;
pub const EVENT_O_GPT2BCAPTSEL: u32 = 1028;
pub const EVENT_O_UDMACH1SSEL: u32 = 1288;
pub const EVENT_O_UDMACH1BSEL: u32 = 1292;
pub const EVENT_O_UDMACH2SSEL: u32 = 1296;
pub const EVENT_O_UDMACH2BSEL: u32 = 1300;
pub const EVENT_O_UDMACH3SSEL: u32 = 1304;
pub const EVENT_O_UDMACH3BSEL: u32 = 1308;
pub const EVENT_O_UDMACH4SSEL: u32 = 1312;
pub const EVENT_O_UDMACH4BSEL: u32 = 1316;
pub const EVENT_O_UDMACH5SSEL: u32 = 1320;
pub const EVENT_O_UDMACH5BSEL: u32 = 1324;
pub const EVENT_O_UDMACH6SSEL: u32 = 1328;
pub const EVENT_O_UDMACH6BSEL: u32 = 1332;
pub const EVENT_O_UDMACH7SSEL: u32 = 1336;
pub const EVENT_O_UDMACH7BSEL: u32 = 1340;
pub const EVENT_O_UDMACH8SSEL: u32 = 1344;
pub const EVENT_O_UDMACH8BSEL: u32 = 1348;
pub const EVENT_O_UDMACH9SSEL: u32 = 1352;
pub const EVENT_O_UDMACH9BSEL: u32 = 1356;
pub const EVENT_O_UDMACH10SSEL: u32 = 1360;
pub const EVENT_O_UDMACH10BSEL: u32 = 1364;
pub const EVENT_O_UDMACH11SSEL: u32 = 1368;
pub const EVENT_O_UDMACH11BSEL: u32 = 1372;
pub const EVENT_O_UDMACH12SSEL: u32 = 1376;
pub const EVENT_O_UDMACH12BSEL: u32 = 1380;
pub const EVENT_O_UDMACH13BSEL: u32 = 1388;
pub const EVENT_O_UDMACH14BSEL: u32 = 1396;
pub const EVENT_O_UDMACH15BSEL: u32 = 1404;
pub const EVENT_O_UDMACH16SSEL: u32 = 1408;
pub const EVENT_O_UDMACH16BSEL: u32 = 1412;
pub const EVENT_O_UDMACH17SSEL: u32 = 1416;
pub const EVENT_O_UDMACH17BSEL: u32 = 1420;
pub const EVENT_O_UDMACH21SSEL: u32 = 1448;
pub const EVENT_O_UDMACH21BSEL: u32 = 1452;
pub const EVENT_O_UDMACH22SSEL: u32 = 1456;
pub const EVENT_O_UDMACH22BSEL: u32 = 1460;
pub const EVENT_O_UDMACH23SSEL: u32 = 1464;
pub const EVENT_O_UDMACH23BSEL: u32 = 1468;
pub const EVENT_O_UDMACH24SSEL: u32 = 1472;
pub const EVENT_O_UDMACH24BSEL: u32 = 1476;
pub const EVENT_O_GPT3ACAPTSEL: u32 = 1536;
pub const EVENT_O_GPT3BCAPTSEL: u32 = 1540;
pub const EVENT_O_AUXSEL0: u32 = 1792;
pub const EVENT_O_CM3NMISEL0: u32 = 2048;
pub const EVENT_O_I2SSTMPSEL0: u32 = 2304;
pub const EVENT_O_FRZSEL0: u32 = 2560;
pub const EVENT_O_SWEV: u32 = 3840;
pub const EVENT_CPUIRQSEL0_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL0_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL0_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL0_EV_AON_GPIO_EDGE: u32 = 4;
pub const EVENT_CPUIRQSEL1_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL1_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL1_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL1_EV_I2C_IRQ: u32 = 9;
pub const EVENT_CPUIRQSEL2_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL2_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL2_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL2_EV_RFC_CPE_1: u32 = 30;
pub const EVENT_CPUIRQSEL4_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL4_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL4_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL4_EV_AON_RTC_COMB: u32 = 7;
pub const EVENT_CPUIRQSEL5_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL5_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL5_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL5_EV_UART0_COMB: u32 = 36;
pub const EVENT_CPUIRQSEL6_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL6_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL6_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL6_EV_AUX_SWEV0: u32 = 28;
pub const EVENT_CPUIRQSEL7_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL7_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL7_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL7_EV_SSI0_COMB: u32 = 34;
pub const EVENT_CPUIRQSEL8_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL8_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL8_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL8_EV_SSI1_COMB: u32 = 35;
pub const EVENT_CPUIRQSEL9_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL9_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL9_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL9_EV_RFC_CPE_0: u32 = 27;
pub const EVENT_CPUIRQSEL10_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL10_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL10_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL10_EV_RFC_HW_COMB: u32 = 26;
pub const EVENT_CPUIRQSEL11_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL11_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL11_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL11_EV_RFC_CMD_ACK: u32 = 25;
pub const EVENT_CPUIRQSEL12_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL12_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL12_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL12_EV_I2S_IRQ: u32 = 8;
pub const EVENT_CPUIRQSEL13_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL13_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL13_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL13_EV_AUX_SWEV1: u32 = 29;
pub const EVENT_CPUIRQSEL14_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL14_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL14_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL14_EV_WDT_IRQ: u32 = 24;
pub const EVENT_CPUIRQSEL15_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL15_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL15_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL15_EV_GPT0A: u32 = 16;
pub const EVENT_CPUIRQSEL16_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL16_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL16_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL16_EV_GPT0B: u32 = 17;
pub const EVENT_CPUIRQSEL17_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL17_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL17_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL17_EV_GPT1A: u32 = 18;
pub const EVENT_CPUIRQSEL18_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL18_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL18_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL18_EV_GPT1B: u32 = 19;
pub const EVENT_CPUIRQSEL19_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL19_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL19_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL19_EV_GPT2A: u32 = 12;
pub const EVENT_CPUIRQSEL20_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL20_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL20_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL20_EV_GPT2B: u32 = 13;
pub const EVENT_CPUIRQSEL21_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL21_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL21_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL21_EV_GPT3A: u32 = 14;
pub const EVENT_CPUIRQSEL22_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL22_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL22_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL22_EV_GPT3B: u32 = 15;
pub const EVENT_CPUIRQSEL23_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL23_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL23_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL23_EV_CRYPTO_RESULT_AVAIL_IRQ: u32 = 93;
pub const EVENT_CPUIRQSEL24_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL24_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL24_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL24_EV_DMA_DONE_COMB: u32 = 39;
pub const EVENT_CPUIRQSEL25_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL25_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL25_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL25_EV_DMA_ERR: u32 = 38;
pub const EVENT_CPUIRQSEL26_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL26_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL26_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL26_EV_FLASH: u32 = 21;
pub const EVENT_CPUIRQSEL27_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL27_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL27_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL27_EV_SWEV0: u32 = 100;
pub const EVENT_CPUIRQSEL28_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL28_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL28_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL28_EV_AUX_COMB: u32 = 11;
pub const EVENT_CPUIRQSEL29_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL29_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL29_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL29_EV_AON_PROG0: u32 = 1;
pub const EVENT_CPUIRQSEL30_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL30_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL30_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL30_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_CPUIRQSEL30_EV_AON_RTC_UPD: u32 = 119;
pub const EVENT_CPUIRQSEL30_EV_AUX_OBSMUX0: u32 = 114;
pub const EVENT_CPUIRQSEL30_EV_AUX_ADC_FIFO_ALMOST_FULL: u32 = 113;
pub const EVENT_CPUIRQSEL30_EV_AUX_ADC_DONE: u32 = 112;
pub const EVENT_CPUIRQSEL30_EV_AUX_SMPH_AUTOTAKE_DONE: u32 = 111;
pub const EVENT_CPUIRQSEL30_EV_AUX_TIMER1_EV: u32 = 110;
pub const EVENT_CPUIRQSEL30_EV_AUX_TIMER0_EV: u32 = 109;
pub const EVENT_CPUIRQSEL30_EV_AUX_TDC_DONE: u32 = 108;
pub const EVENT_CPUIRQSEL30_EV_AUX_COMPB: u32 = 107;
pub const EVENT_CPUIRQSEL30_EV_AUX_AON_WU_EV: u32 = 105;
pub const EVENT_CPUIRQSEL30_EV_CRYPTO_DMA_DONE_IRQ: u32 = 94;
pub const EVENT_CPUIRQSEL30_EV_DMA_CH18_DONE: u32 = 22;
pub const EVENT_CPUIRQSEL30_EV_DMA_CH0_DONE: u32 = 20;
pub const EVENT_CPUIRQSEL30_EV_AON_AUX_SWEV0: u32 = 10;
pub const EVENT_CPUIRQSEL30_EV_I2S_IRQ: u32 = 8;
pub const EVENT_CPUIRQSEL30_EV_AON_PROG2: u32 = 3;
pub const EVENT_CPUIRQSEL30_EV_AON_PROG1: u32 = 2;
pub const EVENT_CPUIRQSEL30_EV_NONE: u32 = 0;
pub const EVENT_CPUIRQSEL31_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL31_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL31_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL31_EV_AUX_COMPA: u32 = 106;
pub const EVENT_CPUIRQSEL32_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL32_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL32_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL32_EV_AUX_ADC_IRQ: u32 = 115;
pub const EVENT_CPUIRQSEL33_EV_W: u32 = 7;
pub const EVENT_CPUIRQSEL33_EV_M: u32 = 127;
pub const EVENT_CPUIRQSEL33_EV_S: u32 = 0;
pub const EVENT_CPUIRQSEL33_EV_TRNG_IRQ: u32 = 104;
pub const EVENT_RFCSEL0_EV_W: u32 = 7;
pub const EVENT_RFCSEL0_EV_M: u32 = 127;
pub const EVENT_RFCSEL0_EV_S: u32 = 0;
pub const EVENT_RFCSEL0_EV_GPT0A_CMP: u32 = 61;
pub const EVENT_RFCSEL1_EV_W: u32 = 7;
pub const EVENT_RFCSEL1_EV_M: u32 = 127;
pub const EVENT_RFCSEL1_EV_S: u32 = 0;
pub const EVENT_RFCSEL1_EV_GPT0B_CMP: u32 = 62;
pub const EVENT_RFCSEL2_EV_W: u32 = 7;
pub const EVENT_RFCSEL2_EV_M: u32 = 127;
pub const EVENT_RFCSEL2_EV_S: u32 = 0;
pub const EVENT_RFCSEL2_EV_GPT1A_CMP: u32 = 63;
pub const EVENT_RFCSEL3_EV_W: u32 = 7;
pub const EVENT_RFCSEL3_EV_M: u32 = 127;
pub const EVENT_RFCSEL3_EV_S: u32 = 0;
pub const EVENT_RFCSEL3_EV_GPT1B_CMP: u32 = 64;
pub const EVENT_RFCSEL4_EV_W: u32 = 7;
pub const EVENT_RFCSEL4_EV_M: u32 = 127;
pub const EVENT_RFCSEL4_EV_S: u32 = 0;
pub const EVENT_RFCSEL4_EV_GPT2A_CMP: u32 = 65;
pub const EVENT_RFCSEL5_EV_W: u32 = 7;
pub const EVENT_RFCSEL5_EV_M: u32 = 127;
pub const EVENT_RFCSEL5_EV_S: u32 = 0;
pub const EVENT_RFCSEL5_EV_GPT2B_CMP: u32 = 66;
pub const EVENT_RFCSEL6_EV_W: u32 = 7;
pub const EVENT_RFCSEL6_EV_M: u32 = 127;
pub const EVENT_RFCSEL6_EV_S: u32 = 0;
pub const EVENT_RFCSEL6_EV_GPT3A_CMP: u32 = 67;
pub const EVENT_RFCSEL7_EV_W: u32 = 7;
pub const EVENT_RFCSEL7_EV_M: u32 = 127;
pub const EVENT_RFCSEL7_EV_S: u32 = 0;
pub const EVENT_RFCSEL7_EV_GPT3B_CMP: u32 = 68;
pub const EVENT_RFCSEL8_EV_W: u32 = 7;
pub const EVENT_RFCSEL8_EV_M: u32 = 127;
pub const EVENT_RFCSEL8_EV_S: u32 = 0;
pub const EVENT_RFCSEL8_EV_AON_RTC_UPD: u32 = 119;
pub const EVENT_RFCSEL9_EV_W: u32 = 7;
pub const EVENT_RFCSEL9_EV_M: u32 = 127;
pub const EVENT_RFCSEL9_EV_S: u32 = 0;
pub const EVENT_RFCSEL9_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_RFCSEL9_EV_AUX_ADC_IRQ: u32 = 115;
pub const EVENT_RFCSEL9_EV_AUX_OBSMUX0: u32 = 114;
pub const EVENT_RFCSEL9_EV_AUX_ADC_FIFO_ALMOST_FULL: u32 = 113;
pub const EVENT_RFCSEL9_EV_AUX_ADC_DONE: u32 = 112;
pub const EVENT_RFCSEL9_EV_AUX_SMPH_AUTOTAKE_DONE: u32 = 111;
pub const EVENT_RFCSEL9_EV_AUX_TIMER1_EV: u32 = 110;
pub const EVENT_RFCSEL9_EV_AUX_TIMER0_EV: u32 = 109;
pub const EVENT_RFCSEL9_EV_AUX_TDC_DONE: u32 = 108;
pub const EVENT_RFCSEL9_EV_AUX_COMPB: u32 = 107;
pub const EVENT_RFCSEL9_EV_AUX_COMPA: u32 = 106;
pub const EVENT_RFCSEL9_EV_AUX_AON_WU_EV: u32 = 105;
pub const EVENT_RFCSEL9_EV_SWEV1: u32 = 101;
pub const EVENT_RFCSEL9_EV_SWEV0: u32 = 100;
pub const EVENT_RFCSEL9_EV_CRYPTO_RESULT_AVAIL_IRQ: u32 = 93;
pub const EVENT_RFCSEL9_EV_DMA_DONE_COMB: u32 = 39;
pub const EVENT_RFCSEL9_EV_UART0_COMB: u32 = 36;
pub const EVENT_RFCSEL9_EV_SSI1_COMB: u32 = 35;
pub const EVENT_RFCSEL9_EV_SSI0_COMB: u32 = 34;
pub const EVENT_RFCSEL9_EV_WDT_IRQ: u32 = 24;
pub const EVENT_RFCSEL9_EV_AON_AUX_SWEV0: u32 = 10;
pub const EVENT_RFCSEL9_EV_I2S_IRQ: u32 = 8;
pub const EVENT_RFCSEL9_EV_AON_PROG1: u32 = 2;
pub const EVENT_RFCSEL9_EV_AON_PROG0: u32 = 1;
pub const EVENT_RFCSEL9_EV_NONE: u32 = 0;
pub const EVENT_GPT0ACAPTSEL_EV_W: u32 = 7;
pub const EVENT_GPT0ACAPTSEL_EV_M: u32 = 127;
pub const EVENT_GPT0ACAPTSEL_EV_S: u32 = 0;
pub const EVENT_GPT0ACAPTSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_GPT0ACAPTSEL_EV_AON_RTC_UPD: u32 = 119;
pub const EVENT_GPT0ACAPTSEL_EV_AUX_ADC_IRQ: u32 = 115;
pub const EVENT_GPT0ACAPTSEL_EV_AUX_OBSMUX0: u32 = 114;
pub const EVENT_GPT0ACAPTSEL_EV_AUX_ADC_FIFO_ALMOST_FULL: u32 = 113;
pub const EVENT_GPT0ACAPTSEL_EV_AUX_ADC_DONE: u32 = 112;
pub const EVENT_GPT0ACAPTSEL_EV_AUX_SMPH_AUTOTAKE_DONE: u32 = 111;
pub const EVENT_GPT0ACAPTSEL_EV_AUX_TIMER1_EV: u32 = 110;
pub const EVENT_GPT0ACAPTSEL_EV_AUX_TIMER0_EV: u32 = 109;
pub const EVENT_GPT0ACAPTSEL_EV_AUX_TDC_DONE: u32 = 108;
pub const EVENT_GPT0ACAPTSEL_EV_AUX_COMPB: u32 = 107;
pub const EVENT_GPT0ACAPTSEL_EV_AUX_COMPA: u32 = 106;
pub const EVENT_GPT0ACAPTSEL_EV_AUX_AON_WU_EV: u32 = 105;
pub const EVENT_GPT0ACAPTSEL_EV_PORT_EVENT1: u32 = 86;
pub const EVENT_GPT0ACAPTSEL_EV_PORT_EVENT0: u32 = 85;
pub const EVENT_GPT0ACAPTSEL_EV_GPT3B_CMP: u32 = 68;
pub const EVENT_GPT0ACAPTSEL_EV_GPT3A_CMP: u32 = 67;
pub const EVENT_GPT0ACAPTSEL_EV_GPT2B_CMP: u32 = 66;
pub const EVENT_GPT0ACAPTSEL_EV_GPT2A_CMP: u32 = 65;
pub const EVENT_GPT0ACAPTSEL_EV_GPT1B_CMP: u32 = 64;
pub const EVENT_GPT0ACAPTSEL_EV_GPT1A_CMP: u32 = 63;
pub const EVENT_GPT0ACAPTSEL_EV_GPT0B_CMP: u32 = 62;
pub const EVENT_GPT0ACAPTSEL_EV_GPT0A_CMP: u32 = 61;
pub const EVENT_GPT0ACAPTSEL_EV_UART0_COMB: u32 = 36;
pub const EVENT_GPT0ACAPTSEL_EV_SSI1_COMB: u32 = 35;
pub const EVENT_GPT0ACAPTSEL_EV_SSI0_COMB: u32 = 34;
pub const EVENT_GPT0ACAPTSEL_EV_RFC_CPE_1: u32 = 30;
pub const EVENT_GPT0ACAPTSEL_EV_RFC_CPE_0: u32 = 27;
pub const EVENT_GPT0ACAPTSEL_EV_RFC_HW_COMB: u32 = 26;
pub const EVENT_GPT0ACAPTSEL_EV_RFC_CMD_ACK: u32 = 25;
pub const EVENT_GPT0ACAPTSEL_EV_FLASH: u32 = 21;
pub const EVENT_GPT0ACAPTSEL_EV_AUX_COMB: u32 = 11;
pub const EVENT_GPT0ACAPTSEL_EV_I2C_IRQ: u32 = 9;
pub const EVENT_GPT0ACAPTSEL_EV_AON_RTC_COMB: u32 = 7;
pub const EVENT_GPT0ACAPTSEL_EV_AON_GPIO_EDGE: u32 = 4;
pub const EVENT_GPT0ACAPTSEL_EV_NONE: u32 = 0;
pub const EVENT_GPT0BCAPTSEL_EV_W: u32 = 7;
pub const EVENT_GPT0BCAPTSEL_EV_M: u32 = 127;
pub const EVENT_GPT0BCAPTSEL_EV_S: u32 = 0;
pub const EVENT_GPT0BCAPTSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_GPT0BCAPTSEL_EV_AON_RTC_UPD: u32 = 119;
pub const EVENT_GPT0BCAPTSEL_EV_AUX_ADC_IRQ: u32 = 115;
pub const EVENT_GPT0BCAPTSEL_EV_AUX_OBSMUX0: u32 = 114;
pub const EVENT_GPT0BCAPTSEL_EV_AUX_ADC_FIFO_ALMOST_FULL: u32 = 113;
pub const EVENT_GPT0BCAPTSEL_EV_AUX_ADC_DONE: u32 = 112;
pub const EVENT_GPT0BCAPTSEL_EV_AUX_SMPH_AUTOTAKE_DONE: u32 = 111;
pub const EVENT_GPT0BCAPTSEL_EV_AUX_TIMER1_EV: u32 = 110;
pub const EVENT_GPT0BCAPTSEL_EV_AUX_TIMER0_EV: u32 = 109;
pub const EVENT_GPT0BCAPTSEL_EV_AUX_TDC_DONE: u32 = 108;
pub const EVENT_GPT0BCAPTSEL_EV_AUX_COMPB: u32 = 107;
pub const EVENT_GPT0BCAPTSEL_EV_AUX_COMPA: u32 = 106;
pub const EVENT_GPT0BCAPTSEL_EV_AUX_AON_WU_EV: u32 = 105;
pub const EVENT_GPT0BCAPTSEL_EV_PORT_EVENT1: u32 = 86;
pub const EVENT_GPT0BCAPTSEL_EV_PORT_EVENT0: u32 = 85;
pub const EVENT_GPT0BCAPTSEL_EV_GPT3B_CMP: u32 = 68;
pub const EVENT_GPT0BCAPTSEL_EV_GPT3A_CMP: u32 = 67;
pub const EVENT_GPT0BCAPTSEL_EV_GPT2B_CMP: u32 = 66;
pub const EVENT_GPT0BCAPTSEL_EV_GPT2A_CMP: u32 = 65;
pub const EVENT_GPT0BCAPTSEL_EV_GPT1B_CMP: u32 = 64;
pub const EVENT_GPT0BCAPTSEL_EV_GPT1A_CMP: u32 = 63;
pub const EVENT_GPT0BCAPTSEL_EV_GPT0B_CMP: u32 = 62;
pub const EVENT_GPT0BCAPTSEL_EV_GPT0A_CMP: u32 = 61;
pub const EVENT_GPT0BCAPTSEL_EV_UART0_COMB: u32 = 36;
pub const EVENT_GPT0BCAPTSEL_EV_SSI1_COMB: u32 = 35;
pub const EVENT_GPT0BCAPTSEL_EV_SSI0_COMB: u32 = 34;
pub const EVENT_GPT0BCAPTSEL_EV_RFC_CPE_1: u32 = 30;
pub const EVENT_GPT0BCAPTSEL_EV_RFC_CPE_0: u32 = 27;
pub const EVENT_GPT0BCAPTSEL_EV_RFC_HW_COMB: u32 = 26;
pub const EVENT_GPT0BCAPTSEL_EV_RFC_CMD_ACK: u32 = 25;
pub const EVENT_GPT0BCAPTSEL_EV_FLASH: u32 = 21;
pub const EVENT_GPT0BCAPTSEL_EV_AUX_COMB: u32 = 11;
pub const EVENT_GPT0BCAPTSEL_EV_I2C_IRQ: u32 = 9;
pub const EVENT_GPT0BCAPTSEL_EV_AON_RTC_COMB: u32 = 7;
pub const EVENT_GPT0BCAPTSEL_EV_AON_GPIO_EDGE: u32 = 4;
pub const EVENT_GPT0BCAPTSEL_EV_NONE: u32 = 0;
pub const EVENT_GPT1ACAPTSEL_EV_W: u32 = 7;
pub const EVENT_GPT1ACAPTSEL_EV_M: u32 = 127;
pub const EVENT_GPT1ACAPTSEL_EV_S: u32 = 0;
pub const EVENT_GPT1ACAPTSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_GPT1ACAPTSEL_EV_AON_RTC_UPD: u32 = 119;
pub const EVENT_GPT1ACAPTSEL_EV_AUX_ADC_IRQ: u32 = 115;
pub const EVENT_GPT1ACAPTSEL_EV_AUX_OBSMUX0: u32 = 114;
pub const EVENT_GPT1ACAPTSEL_EV_AUX_ADC_FIFO_ALMOST_FULL: u32 = 113;
pub const EVENT_GPT1ACAPTSEL_EV_AUX_ADC_DONE: u32 = 112;
pub const EVENT_GPT1ACAPTSEL_EV_AUX_SMPH_AUTOTAKE_DONE: u32 = 111;
pub const EVENT_GPT1ACAPTSEL_EV_AUX_TIMER1_EV: u32 = 110;
pub const EVENT_GPT1ACAPTSEL_EV_AUX_TIMER0_EV: u32 = 109;
pub const EVENT_GPT1ACAPTSEL_EV_AUX_TDC_DONE: u32 = 108;
pub const EVENT_GPT1ACAPTSEL_EV_AUX_COMPB: u32 = 107;
pub const EVENT_GPT1ACAPTSEL_EV_AUX_COMPA: u32 = 106;
pub const EVENT_GPT1ACAPTSEL_EV_AUX_AON_WU_EV: u32 = 105;
pub const EVENT_GPT1ACAPTSEL_EV_PORT_EVENT3: u32 = 88;
pub const EVENT_GPT1ACAPTSEL_EV_PORT_EVENT2: u32 = 87;
pub const EVENT_GPT1ACAPTSEL_EV_GPT3B_CMP: u32 = 68;
pub const EVENT_GPT1ACAPTSEL_EV_GPT3A_CMP: u32 = 67;
pub const EVENT_GPT1ACAPTSEL_EV_GPT2B_CMP: u32 = 66;
pub const EVENT_GPT1ACAPTSEL_EV_GPT2A_CMP: u32 = 65;
pub const EVENT_GPT1ACAPTSEL_EV_GPT1B_CMP: u32 = 64;
pub const EVENT_GPT1ACAPTSEL_EV_GPT1A_CMP: u32 = 63;
pub const EVENT_GPT1ACAPTSEL_EV_GPT0B_CMP: u32 = 62;
pub const EVENT_GPT1ACAPTSEL_EV_GPT0A_CMP: u32 = 61;
pub const EVENT_GPT1ACAPTSEL_EV_UART0_COMB: u32 = 36;
pub const EVENT_GPT1ACAPTSEL_EV_SSI1_COMB: u32 = 35;
pub const EVENT_GPT1ACAPTSEL_EV_SSI0_COMB: u32 = 34;
pub const EVENT_GPT1ACAPTSEL_EV_RFC_CPE_1: u32 = 30;
pub const EVENT_GPT1ACAPTSEL_EV_RFC_CPE_0: u32 = 27;
pub const EVENT_GPT1ACAPTSEL_EV_RFC_HW_COMB: u32 = 26;
pub const EVENT_GPT1ACAPTSEL_EV_RFC_CMD_ACK: u32 = 25;
pub const EVENT_GPT1ACAPTSEL_EV_FLASH: u32 = 21;
pub const EVENT_GPT1ACAPTSEL_EV_AUX_COMB: u32 = 11;
pub const EVENT_GPT1ACAPTSEL_EV_I2C_IRQ: u32 = 9;
pub const EVENT_GPT1ACAPTSEL_EV_AON_RTC_COMB: u32 = 7;
pub const EVENT_GPT1ACAPTSEL_EV_AON_GPIO_EDGE: u32 = 4;
pub const EVENT_GPT1ACAPTSEL_EV_NONE: u32 = 0;
pub const EVENT_GPT1BCAPTSEL_EV_W: u32 = 7;
pub const EVENT_GPT1BCAPTSEL_EV_M: u32 = 127;
pub const EVENT_GPT1BCAPTSEL_EV_S: u32 = 0;
pub const EVENT_GPT1BCAPTSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_GPT1BCAPTSEL_EV_AON_RTC_UPD: u32 = 119;
pub const EVENT_GPT1BCAPTSEL_EV_AUX_ADC_IRQ: u32 = 115;
pub const EVENT_GPT1BCAPTSEL_EV_AUX_OBSMUX0: u32 = 114;
pub const EVENT_GPT1BCAPTSEL_EV_AUX_ADC_FIFO_ALMOST_FULL: u32 = 113;
pub const EVENT_GPT1BCAPTSEL_EV_AUX_ADC_DONE: u32 = 112;
pub const EVENT_GPT1BCAPTSEL_EV_AUX_SMPH_AUTOTAKE_DONE: u32 = 111;
pub const EVENT_GPT1BCAPTSEL_EV_AUX_TIMER1_EV: u32 = 110;
pub const EVENT_GPT1BCAPTSEL_EV_AUX_TIMER0_EV: u32 = 109;
pub const EVENT_GPT1BCAPTSEL_EV_AUX_TDC_DONE: u32 = 108;
pub const EVENT_GPT1BCAPTSEL_EV_AUX_COMPB: u32 = 107;
pub const EVENT_GPT1BCAPTSEL_EV_AUX_COMPA: u32 = 106;
pub const EVENT_GPT1BCAPTSEL_EV_AUX_AON_WU_EV: u32 = 105;
pub const EVENT_GPT1BCAPTSEL_EV_PORT_EVENT3: u32 = 88;
pub const EVENT_GPT1BCAPTSEL_EV_PORT_EVENT2: u32 = 87;
pub const EVENT_GPT1BCAPTSEL_EV_GPT3B_CMP: u32 = 68;
pub const EVENT_GPT1BCAPTSEL_EV_GPT3A_CMP: u32 = 67;
pub const EVENT_GPT1BCAPTSEL_EV_GPT2B_CMP: u32 = 66;
pub const EVENT_GPT1BCAPTSEL_EV_GPT2A_CMP: u32 = 65;
pub const EVENT_GPT1BCAPTSEL_EV_GPT1B_CMP: u32 = 64;
pub const EVENT_GPT1BCAPTSEL_EV_GPT1A_CMP: u32 = 63;
pub const EVENT_GPT1BCAPTSEL_EV_GPT0B_CMP: u32 = 62;
pub const EVENT_GPT1BCAPTSEL_EV_GPT0A_CMP: u32 = 61;
pub const EVENT_GPT1BCAPTSEL_EV_UART0_COMB: u32 = 36;
pub const EVENT_GPT1BCAPTSEL_EV_SSI1_COMB: u32 = 35;
pub const EVENT_GPT1BCAPTSEL_EV_SSI0_COMB: u32 = 34;
pub const EVENT_GPT1BCAPTSEL_EV_RFC_CPE_1: u32 = 30;
pub const EVENT_GPT1BCAPTSEL_EV_RFC_CPE_0: u32 = 27;
pub const EVENT_GPT1BCAPTSEL_EV_RFC_HW_COMB: u32 = 26;
pub const EVENT_GPT1BCAPTSEL_EV_RFC_CMD_ACK: u32 = 25;
pub const EVENT_GPT1BCAPTSEL_EV_FLASH: u32 = 21;
pub const EVENT_GPT1BCAPTSEL_EV_AUX_COMB: u32 = 11;
pub const EVENT_GPT1BCAPTSEL_EV_I2C_IRQ: u32 = 9;
pub const EVENT_GPT1BCAPTSEL_EV_AON_RTC_COMB: u32 = 7;
pub const EVENT_GPT1BCAPTSEL_EV_AON_GPIO_EDGE: u32 = 4;
pub const EVENT_GPT1BCAPTSEL_EV_NONE: u32 = 0;
pub const EVENT_GPT2ACAPTSEL_EV_W: u32 = 7;
pub const EVENT_GPT2ACAPTSEL_EV_M: u32 = 127;
pub const EVENT_GPT2ACAPTSEL_EV_S: u32 = 0;
pub const EVENT_GPT2ACAPTSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_GPT2ACAPTSEL_EV_AON_RTC_UPD: u32 = 119;
pub const EVENT_GPT2ACAPTSEL_EV_AUX_ADC_IRQ: u32 = 115;
pub const EVENT_GPT2ACAPTSEL_EV_AUX_OBSMUX0: u32 = 114;
pub const EVENT_GPT2ACAPTSEL_EV_AUX_ADC_FIFO_ALMOST_FULL: u32 = 113;
pub const EVENT_GPT2ACAPTSEL_EV_AUX_ADC_DONE: u32 = 112;
pub const EVENT_GPT2ACAPTSEL_EV_AUX_SMPH_AUTOTAKE_DONE: u32 = 111;
pub const EVENT_GPT2ACAPTSEL_EV_AUX_TIMER1_EV: u32 = 110;
pub const EVENT_GPT2ACAPTSEL_EV_AUX_TIMER0_EV: u32 = 109;
pub const EVENT_GPT2ACAPTSEL_EV_AUX_TDC_DONE: u32 = 108;
pub const EVENT_GPT2ACAPTSEL_EV_AUX_COMPB: u32 = 107;
pub const EVENT_GPT2ACAPTSEL_EV_AUX_COMPA: u32 = 106;
pub const EVENT_GPT2ACAPTSEL_EV_AUX_AON_WU_EV: u32 = 105;
pub const EVENT_GPT2ACAPTSEL_EV_PORT_EVENT5: u32 = 90;
pub const EVENT_GPT2ACAPTSEL_EV_PORT_EVENT4: u32 = 89;
pub const EVENT_GPT2ACAPTSEL_EV_GPT3B_CMP: u32 = 68;
pub const EVENT_GPT2ACAPTSEL_EV_GPT3A_CMP: u32 = 67;
pub const EVENT_GPT2ACAPTSEL_EV_GPT2B_CMP: u32 = 66;
pub const EVENT_GPT2ACAPTSEL_EV_GPT2A_CMP: u32 = 65;
pub const EVENT_GPT2ACAPTSEL_EV_GPT1B_CMP: u32 = 64;
pub const EVENT_GPT2ACAPTSEL_EV_GPT1A_CMP: u32 = 63;
pub const EVENT_GPT2ACAPTSEL_EV_GPT0B_CMP: u32 = 62;
pub const EVENT_GPT2ACAPTSEL_EV_GPT0A_CMP: u32 = 61;
pub const EVENT_GPT2ACAPTSEL_EV_UART0_COMB: u32 = 36;
pub const EVENT_GPT2ACAPTSEL_EV_SSI1_COMB: u32 = 35;
pub const EVENT_GPT2ACAPTSEL_EV_SSI0_COMB: u32 = 34;
pub const EVENT_GPT2ACAPTSEL_EV_RFC_CPE_1: u32 = 30;
pub const EVENT_GPT2ACAPTSEL_EV_RFC_CPE_0: u32 = 27;
pub const EVENT_GPT2ACAPTSEL_EV_RFC_HW_COMB: u32 = 26;
pub const EVENT_GPT2ACAPTSEL_EV_RFC_CMD_ACK: u32 = 25;
pub const EVENT_GPT2ACAPTSEL_EV_FLASH: u32 = 21;
pub const EVENT_GPT2ACAPTSEL_EV_AUX_COMB: u32 = 11;
pub const EVENT_GPT2ACAPTSEL_EV_I2C_IRQ: u32 = 9;
pub const EVENT_GPT2ACAPTSEL_EV_AON_RTC_COMB: u32 = 7;
pub const EVENT_GPT2ACAPTSEL_EV_AON_GPIO_EDGE: u32 = 4;
pub const EVENT_GPT2ACAPTSEL_EV_NONE: u32 = 0;
pub const EVENT_GPT2BCAPTSEL_EV_W: u32 = 7;
pub const EVENT_GPT2BCAPTSEL_EV_M: u32 = 127;
pub const EVENT_GPT2BCAPTSEL_EV_S: u32 = 0;
pub const EVENT_GPT2BCAPTSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_GPT2BCAPTSEL_EV_AON_RTC_UPD: u32 = 119;
pub const EVENT_GPT2BCAPTSEL_EV_AUX_ADC_IRQ: u32 = 115;
pub const EVENT_GPT2BCAPTSEL_EV_AUX_OBSMUX0: u32 = 114;
pub const EVENT_GPT2BCAPTSEL_EV_AUX_ADC_FIFO_ALMOST_FULL: u32 = 113;
pub const EVENT_GPT2BCAPTSEL_EV_AUX_ADC_DONE: u32 = 112;
pub const EVENT_GPT2BCAPTSEL_EV_AUX_SMPH_AUTOTAKE_DONE: u32 = 111;
pub const EVENT_GPT2BCAPTSEL_EV_AUX_TIMER1_EV: u32 = 110;
pub const EVENT_GPT2BCAPTSEL_EV_AUX_TIMER0_EV: u32 = 109;
pub const EVENT_GPT2BCAPTSEL_EV_AUX_TDC_DONE: u32 = 108;
pub const EVENT_GPT2BCAPTSEL_EV_AUX_COMPB: u32 = 107;
pub const EVENT_GPT2BCAPTSEL_EV_AUX_COMPA: u32 = 106;
pub const EVENT_GPT2BCAPTSEL_EV_AUX_AON_WU_EV: u32 = 105;
pub const EVENT_GPT2BCAPTSEL_EV_PORT_EVENT5: u32 = 90;
pub const EVENT_GPT2BCAPTSEL_EV_PORT_EVENT4: u32 = 89;
pub const EVENT_GPT2BCAPTSEL_EV_GPT3B_CMP: u32 = 68;
pub const EVENT_GPT2BCAPTSEL_EV_GPT3A_CMP: u32 = 67;
pub const EVENT_GPT2BCAPTSEL_EV_GPT2B_CMP: u32 = 66;
pub const EVENT_GPT2BCAPTSEL_EV_GPT2A_CMP: u32 = 65;
pub const EVENT_GPT2BCAPTSEL_EV_GPT1B_CMP: u32 = 64;
pub const EVENT_GPT2BCAPTSEL_EV_GPT1A_CMP: u32 = 63;
pub const EVENT_GPT2BCAPTSEL_EV_GPT0B_CMP: u32 = 62;
pub const EVENT_GPT2BCAPTSEL_EV_GPT0A_CMP: u32 = 61;
pub const EVENT_GPT2BCAPTSEL_EV_UART0_COMB: u32 = 36;
pub const EVENT_GPT2BCAPTSEL_EV_SSI1_COMB: u32 = 35;
pub const EVENT_GPT2BCAPTSEL_EV_SSI0_COMB: u32 = 34;
pub const EVENT_GPT2BCAPTSEL_EV_RFC_CPE_1: u32 = 30;
pub const EVENT_GPT2BCAPTSEL_EV_RFC_CPE_0: u32 = 27;
pub const EVENT_GPT2BCAPTSEL_EV_RFC_HW_COMB: u32 = 26;
pub const EVENT_GPT2BCAPTSEL_EV_RFC_CMD_ACK: u32 = 25;
pub const EVENT_GPT2BCAPTSEL_EV_FLASH: u32 = 21;
pub const EVENT_GPT2BCAPTSEL_EV_AUX_COMB: u32 = 11;
pub const EVENT_GPT2BCAPTSEL_EV_I2C_IRQ: u32 = 9;
pub const EVENT_GPT2BCAPTSEL_EV_AON_RTC_COMB: u32 = 7;
pub const EVENT_GPT2BCAPTSEL_EV_AON_GPIO_EDGE: u32 = 4;
pub const EVENT_GPT2BCAPTSEL_EV_NONE: u32 = 0;
pub const EVENT_UDMACH1SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH1SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH1SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH1SSEL_EV_UART0_RX_DMASREQ: u32 = 49;
pub const EVENT_UDMACH1BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH1BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH1BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH1BSEL_EV_UART0_RX_DMABREQ: u32 = 48;
pub const EVENT_UDMACH2SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH2SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH2SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH2SSEL_EV_UART0_TX_DMASREQ: u32 = 51;
pub const EVENT_UDMACH2BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH2BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH2BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH2BSEL_EV_UART0_TX_DMABREQ: u32 = 50;
pub const EVENT_UDMACH3SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH3SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH3SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH3SSEL_EV_SSI0_RX_DMASREQ: u32 = 41;
pub const EVENT_UDMACH3BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH3BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH3BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH3BSEL_EV_SSI0_RX_DMABREQ: u32 = 40;
pub const EVENT_UDMACH4SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH4SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH4SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH4SSEL_EV_SSI0_TX_DMASREQ: u32 = 43;
pub const EVENT_UDMACH4BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH4BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH4BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH4BSEL_EV_SSI0_TX_DMABREQ: u32 = 42;
pub const EVENT_UDMACH7SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH7SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH7SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH7SSEL_EV_AUX_DMASREQ: u32 = 117;
pub const EVENT_UDMACH7BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH7BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH7BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH7BSEL_EV_AUX_DMABREQ: u32 = 118;
pub const EVENT_UDMACH8SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH8SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH8SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH8SSEL_EV_AUX_SW_DMABREQ: u32 = 116;
pub const EVENT_UDMACH8BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH8BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH8BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH8BSEL_EV_AUX_SW_DMABREQ: u32 = 116;
pub const EVENT_UDMACH9SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH9SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH9SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH9SSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_UDMACH9SSEL_EV_GPT3B_DMABREQ: u32 = 84;
pub const EVENT_UDMACH9SSEL_EV_GPT3A_DMABREQ: u32 = 83;
pub const EVENT_UDMACH9SSEL_EV_GPT2B_DMABREQ: u32 = 82;
pub const EVENT_UDMACH9SSEL_EV_GPT2A_DMABREQ: u32 = 81;
pub const EVENT_UDMACH9SSEL_EV_GPT1B_DMABREQ: u32 = 80;
pub const EVENT_UDMACH9SSEL_EV_GPT1A_DMABREQ: u32 = 79;
pub const EVENT_UDMACH9SSEL_EV_GPT0B_DMABREQ: u32 = 78;
pub const EVENT_UDMACH9SSEL_EV_GPT0A_DMABREQ: u32 = 77;
pub const EVENT_UDMACH9SSEL_EV_TIE_LOW: u32 = 69;
pub const EVENT_UDMACH9SSEL_EV_NONE: u32 = 0;
pub const EVENT_UDMACH9BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH9BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH9BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH9BSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_UDMACH9BSEL_EV_GPT3B_DMABREQ: u32 = 84;
pub const EVENT_UDMACH9BSEL_EV_GPT3A_DMABREQ: u32 = 83;
pub const EVENT_UDMACH9BSEL_EV_GPT2B_DMABREQ: u32 = 82;
pub const EVENT_UDMACH9BSEL_EV_GPT2A_DMABREQ: u32 = 81;
pub const EVENT_UDMACH9BSEL_EV_GPT1B_DMABREQ: u32 = 80;
pub const EVENT_UDMACH9BSEL_EV_GPT1A_DMABREQ: u32 = 79;
pub const EVENT_UDMACH9BSEL_EV_GPT0B_DMABREQ: u32 = 78;
pub const EVENT_UDMACH9BSEL_EV_GPT0A_DMABREQ: u32 = 77;
pub const EVENT_UDMACH9BSEL_EV_NONE: u32 = 0;
pub const EVENT_UDMACH10SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH10SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH10SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH10SSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_UDMACH10SSEL_EV_GPT3B_DMABREQ: u32 = 84;
pub const EVENT_UDMACH10SSEL_EV_GPT3A_DMABREQ: u32 = 83;
pub const EVENT_UDMACH10SSEL_EV_GPT2B_DMABREQ: u32 = 82;
pub const EVENT_UDMACH10SSEL_EV_GPT2A_DMABREQ: u32 = 81;
pub const EVENT_UDMACH10SSEL_EV_GPT1B_DMABREQ: u32 = 80;
pub const EVENT_UDMACH10SSEL_EV_GPT1A_DMABREQ: u32 = 79;
pub const EVENT_UDMACH10SSEL_EV_GPT0B_DMABREQ: u32 = 78;
pub const EVENT_UDMACH10SSEL_EV_GPT0A_DMABREQ: u32 = 77;
pub const EVENT_UDMACH10SSEL_EV_TIE_LOW: u32 = 70;
pub const EVENT_UDMACH10SSEL_EV_NONE: u32 = 0;
pub const EVENT_UDMACH10BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH10BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH10BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH10BSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_UDMACH10BSEL_EV_GPT3B_DMABREQ: u32 = 84;
pub const EVENT_UDMACH10BSEL_EV_GPT3A_DMABREQ: u32 = 83;
pub const EVENT_UDMACH10BSEL_EV_GPT2B_DMABREQ: u32 = 82;
pub const EVENT_UDMACH10BSEL_EV_GPT2A_DMABREQ: u32 = 81;
pub const EVENT_UDMACH10BSEL_EV_GPT1B_DMABREQ: u32 = 80;
pub const EVENT_UDMACH10BSEL_EV_GPT1A_DMABREQ: u32 = 79;
pub const EVENT_UDMACH10BSEL_EV_GPT0B_DMABREQ: u32 = 78;
pub const EVENT_UDMACH10BSEL_EV_GPT0A_DMABREQ: u32 = 77;
pub const EVENT_UDMACH10BSEL_EV_NONE: u32 = 0;
pub const EVENT_UDMACH11SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH11SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH11SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH11SSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_UDMACH11SSEL_EV_GPT3B_DMABREQ: u32 = 84;
pub const EVENT_UDMACH11SSEL_EV_GPT3A_DMABREQ: u32 = 83;
pub const EVENT_UDMACH11SSEL_EV_GPT2B_DMABREQ: u32 = 82;
pub const EVENT_UDMACH11SSEL_EV_GPT2A_DMABREQ: u32 = 81;
pub const EVENT_UDMACH11SSEL_EV_GPT1B_DMABREQ: u32 = 80;
pub const EVENT_UDMACH11SSEL_EV_GPT1A_DMABREQ: u32 = 79;
pub const EVENT_UDMACH11SSEL_EV_GPT0B_DMABREQ: u32 = 78;
pub const EVENT_UDMACH11SSEL_EV_GPT0A_DMABREQ: u32 = 77;
pub const EVENT_UDMACH11SSEL_EV_TIE_LOW: u32 = 71;
pub const EVENT_UDMACH11SSEL_EV_NONE: u32 = 0;
pub const EVENT_UDMACH11BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH11BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH11BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH11BSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_UDMACH11BSEL_EV_GPT3B_DMABREQ: u32 = 84;
pub const EVENT_UDMACH11BSEL_EV_GPT3A_DMABREQ: u32 = 83;
pub const EVENT_UDMACH11BSEL_EV_GPT2B_DMABREQ: u32 = 82;
pub const EVENT_UDMACH11BSEL_EV_GPT2A_DMABREQ: u32 = 81;
pub const EVENT_UDMACH11BSEL_EV_GPT1B_DMABREQ: u32 = 80;
pub const EVENT_UDMACH11BSEL_EV_GPT1A_DMABREQ: u32 = 79;
pub const EVENT_UDMACH11BSEL_EV_GPT0B_DMABREQ: u32 = 78;
pub const EVENT_UDMACH11BSEL_EV_GPT0A_DMABREQ: u32 = 77;
pub const EVENT_UDMACH11BSEL_EV_NONE: u32 = 0;
pub const EVENT_UDMACH12SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH12SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH12SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH12SSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_UDMACH12SSEL_EV_GPT3B_DMABREQ: u32 = 84;
pub const EVENT_UDMACH12SSEL_EV_GPT3A_DMABREQ: u32 = 83;
pub const EVENT_UDMACH12SSEL_EV_GPT2B_DMABREQ: u32 = 82;
pub const EVENT_UDMACH12SSEL_EV_GPT2A_DMABREQ: u32 = 81;
pub const EVENT_UDMACH12SSEL_EV_GPT1B_DMABREQ: u32 = 80;
pub const EVENT_UDMACH12SSEL_EV_GPT1A_DMABREQ: u32 = 79;
pub const EVENT_UDMACH12SSEL_EV_GPT0B_DMABREQ: u32 = 78;
pub const EVENT_UDMACH12SSEL_EV_GPT0A_DMABREQ: u32 = 77;
pub const EVENT_UDMACH12SSEL_EV_TIE_LOW: u32 = 72;
pub const EVENT_UDMACH12SSEL_EV_NONE: u32 = 0;
pub const EVENT_UDMACH12BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH12BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH12BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH12BSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_UDMACH12BSEL_EV_GPT3B_DMABREQ: u32 = 84;
pub const EVENT_UDMACH12BSEL_EV_GPT3A_DMABREQ: u32 = 83;
pub const EVENT_UDMACH12BSEL_EV_GPT2B_DMABREQ: u32 = 82;
pub const EVENT_UDMACH12BSEL_EV_GPT2A_DMABREQ: u32 = 81;
pub const EVENT_UDMACH12BSEL_EV_GPT1B_DMABREQ: u32 = 80;
pub const EVENT_UDMACH12BSEL_EV_GPT1A_DMABREQ: u32 = 79;
pub const EVENT_UDMACH12BSEL_EV_GPT0B_DMABREQ: u32 = 78;
pub const EVENT_UDMACH12BSEL_EV_GPT0A_DMABREQ: u32 = 77;
pub const EVENT_UDMACH12BSEL_EV_NONE: u32 = 0;
pub const EVENT_UDMACH13BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH13BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH13BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH13BSEL_EV_AON_PROG2: u32 = 3;
pub const EVENT_UDMACH14BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH14BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH14BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH14BSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_UDMACH14BSEL_EV_CPU_HALTED: u32 = 120;
pub const EVENT_UDMACH14BSEL_EV_AON_RTC_UPD: u32 = 119;
pub const EVENT_UDMACH14BSEL_EV_AUX_DMABREQ: u32 = 118;
pub const EVENT_UDMACH14BSEL_EV_AUX_DMASREQ: u32 = 117;
pub const EVENT_UDMACH14BSEL_EV_AUX_SW_DMABREQ: u32 = 116;
pub const EVENT_UDMACH14BSEL_EV_AUX_ADC_IRQ: u32 = 115;
pub const EVENT_UDMACH14BSEL_EV_AUX_OBSMUX0: u32 = 114;
pub const EVENT_UDMACH14BSEL_EV_AUX_ADC_FIFO_ALMOST_FULL: u32 = 113;
pub const EVENT_UDMACH14BSEL_EV_AUX_ADC_DONE: u32 = 112;
pub const EVENT_UDMACH14BSEL_EV_AUX_SMPH_AUTOTAKE_DONE: u32 = 111;
pub const EVENT_UDMACH14BSEL_EV_AUX_TIMER1_EV: u32 = 110;
pub const EVENT_UDMACH14BSEL_EV_AUX_TIMER0_EV: u32 = 109;
pub const EVENT_UDMACH14BSEL_EV_AUX_TDC_DONE: u32 = 108;
pub const EVENT_UDMACH14BSEL_EV_AUX_COMPB: u32 = 107;
pub const EVENT_UDMACH14BSEL_EV_AUX_COMPA: u32 = 106;
pub const EVENT_UDMACH14BSEL_EV_AUX_AON_WU_EV: u32 = 105;
pub const EVENT_UDMACH14BSEL_EV_TRNG_IRQ: u32 = 104;
pub const EVENT_UDMACH14BSEL_EV_SWEV3: u32 = 103;
pub const EVENT_UDMACH14BSEL_EV_SWEV2: u32 = 102;
pub const EVENT_UDMACH14BSEL_EV_SWEV1: u32 = 101;
pub const EVENT_UDMACH14BSEL_EV_SWEV0: u32 = 100;
pub const EVENT_UDMACH14BSEL_EV_WDT_NMI: u32 = 99;
pub const EVENT_UDMACH14BSEL_EV_CRYPTO_DMA_DONE_IRQ: u32 = 94;
pub const EVENT_UDMACH14BSEL_EV_CRYPTO_RESULT_AVAIL_IRQ: u32 = 93;
pub const EVENT_UDMACH14BSEL_EV_PORT_EVENT7: u32 = 92;
pub const EVENT_UDMACH14BSEL_EV_PORT_EVENT6: u32 = 91;
pub const EVENT_UDMACH14BSEL_EV_PORT_EVENT5: u32 = 90;
pub const EVENT_UDMACH14BSEL_EV_PORT_EVENT4: u32 = 89;
pub const EVENT_UDMACH14BSEL_EV_PORT_EVENT3: u32 = 88;
pub const EVENT_UDMACH14BSEL_EV_PORT_EVENT2: u32 = 87;
pub const EVENT_UDMACH14BSEL_EV_PORT_EVENT1: u32 = 86;
pub const EVENT_UDMACH14BSEL_EV_PORT_EVENT0: u32 = 85;
pub const EVENT_UDMACH14BSEL_EV_GPT3B_DMABREQ: u32 = 84;
pub const EVENT_UDMACH14BSEL_EV_GPT3A_DMABREQ: u32 = 83;
pub const EVENT_UDMACH14BSEL_EV_GPT2B_DMABREQ: u32 = 82;
pub const EVENT_UDMACH14BSEL_EV_GPT2A_DMABREQ: u32 = 81;
pub const EVENT_UDMACH14BSEL_EV_GPT1B_DMABREQ: u32 = 80;
pub const EVENT_UDMACH14BSEL_EV_GPT1A_DMABREQ: u32 = 79;
pub const EVENT_UDMACH14BSEL_EV_GPT0B_DMABREQ: u32 = 78;
pub const EVENT_UDMACH14BSEL_EV_GPT0A_DMABREQ: u32 = 77;
pub const EVENT_UDMACH14BSEL_EV_GPT3B_CMP: u32 = 68;
pub const EVENT_UDMACH14BSEL_EV_GPT3A_CMP: u32 = 67;
pub const EVENT_UDMACH14BSEL_EV_GPT2B_CMP: u32 = 66;
pub const EVENT_UDMACH14BSEL_EV_GPT2A_CMP: u32 = 65;
pub const EVENT_UDMACH14BSEL_EV_GPT1B_CMP: u32 = 64;
pub const EVENT_UDMACH14BSEL_EV_GPT1A_CMP: u32 = 63;
pub const EVENT_UDMACH14BSEL_EV_GPT0B_CMP: u32 = 62;
pub const EVENT_UDMACH14BSEL_EV_GPT0A_CMP: u32 = 61;
pub const EVENT_UDMACH14BSEL_EV_UART0_TX_DMASREQ: u32 = 51;
pub const EVENT_UDMACH14BSEL_EV_UART0_TX_DMABREQ: u32 = 50;
pub const EVENT_UDMACH14BSEL_EV_UART0_RX_DMASREQ: u32 = 49;
pub const EVENT_UDMACH14BSEL_EV_UART0_RX_DMABREQ: u32 = 48;
pub const EVENT_UDMACH14BSEL_EV_SSI1_TX_DMASREQ: u32 = 47;
pub const EVENT_UDMACH14BSEL_EV_SSI1_TX_DMABREQ: u32 = 46;
pub const EVENT_UDMACH14BSEL_EV_SSI1_RX_DMASREQ: u32 = 45;
pub const EVENT_UDMACH14BSEL_EV_SSI1_RX_DMABREQ: u32 = 44;
pub const EVENT_UDMACH14BSEL_EV_SSI0_TX_DMASREQ: u32 = 43;
pub const EVENT_UDMACH14BSEL_EV_SSI0_TX_DMABREQ: u32 = 42;
pub const EVENT_UDMACH14BSEL_EV_SSI0_RX_DMASREQ: u32 = 41;
pub const EVENT_UDMACH14BSEL_EV_SSI0_RX_DMABREQ: u32 = 40;
pub const EVENT_UDMACH14BSEL_EV_DMA_DONE_COMB: u32 = 39;
pub const EVENT_UDMACH14BSEL_EV_DMA_ERR: u32 = 38;
pub const EVENT_UDMACH14BSEL_EV_UART0_COMB: u32 = 36;
pub const EVENT_UDMACH14BSEL_EV_SSI1_COMB: u32 = 35;
pub const EVENT_UDMACH14BSEL_EV_SSI0_COMB: u32 = 34;
pub const EVENT_UDMACH14BSEL_EV_RFC_CPE_1: u32 = 30;
pub const EVENT_UDMACH14BSEL_EV_AUX_SWEV1: u32 = 29;
pub const EVENT_UDMACH14BSEL_EV_RFC_CPE_0: u32 = 27;
pub const EVENT_UDMACH14BSEL_EV_RFC_HW_COMB: u32 = 26;
pub const EVENT_UDMACH14BSEL_EV_RFC_CMD_ACK: u32 = 25;
pub const EVENT_UDMACH14BSEL_EV_WDT_IRQ: u32 = 24;
pub const EVENT_UDMACH14BSEL_EV_DMA_CH18_DONE: u32 = 22;
pub const EVENT_UDMACH14BSEL_EV_FLASH: u32 = 21;
pub const EVENT_UDMACH14BSEL_EV_DMA_CH0_DONE: u32 = 20;
pub const EVENT_UDMACH14BSEL_EV_GPT1B: u32 = 19;
pub const EVENT_UDMACH14BSEL_EV_GPT1A: u32 = 18;
pub const EVENT_UDMACH14BSEL_EV_GPT0B: u32 = 17;
pub const EVENT_UDMACH14BSEL_EV_GPT0A: u32 = 16;
pub const EVENT_UDMACH14BSEL_EV_GPT3B: u32 = 15;
pub const EVENT_UDMACH14BSEL_EV_GPT3A: u32 = 14;
pub const EVENT_UDMACH14BSEL_EV_GPT2B: u32 = 13;
pub const EVENT_UDMACH14BSEL_EV_GPT2A: u32 = 12;
pub const EVENT_UDMACH14BSEL_EV_AUX_COMB: u32 = 11;
pub const EVENT_UDMACH14BSEL_EV_AON_AUX_SWEV0: u32 = 10;
pub const EVENT_UDMACH14BSEL_EV_I2C_IRQ: u32 = 9;
pub const EVENT_UDMACH14BSEL_EV_I2S_IRQ: u32 = 8;
pub const EVENT_UDMACH14BSEL_EV_AON_RTC_COMB: u32 = 7;
pub const EVENT_UDMACH14BSEL_EV_AON_GPIO_EDGE: u32 = 4;
pub const EVENT_UDMACH14BSEL_EV_AON_PROG2: u32 = 3;
pub const EVENT_UDMACH14BSEL_EV_AON_PROG1: u32 = 2;
pub const EVENT_UDMACH14BSEL_EV_AON_PROG0: u32 = 1;
pub const EVENT_UDMACH14BSEL_EV_NONE: u32 = 0;
pub const EVENT_UDMACH15BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH15BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH15BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH15BSEL_EV_AON_RTC_COMB: u32 = 7;
pub const EVENT_UDMACH16SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH16SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH16SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH16SSEL_EV_SSI1_RX_DMASREQ: u32 = 45;
pub const EVENT_UDMACH16BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH16BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH16BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH16BSEL_EV_SSI1_RX_DMABREQ: u32 = 44;
pub const EVENT_UDMACH17SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH17SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH17SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH17SSEL_EV_SSI1_TX_DMASREQ: u32 = 47;
pub const EVENT_UDMACH17BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH17BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH17BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH17BSEL_EV_SSI1_TX_DMABREQ: u32 = 46;
pub const EVENT_UDMACH21SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH21SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH21SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH21SSEL_EV_SWEV0: u32 = 100;
pub const EVENT_UDMACH21BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH21BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH21BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH21BSEL_EV_SWEV0: u32 = 100;
pub const EVENT_UDMACH22SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH22SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH22SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH22SSEL_EV_SWEV1: u32 = 101;
pub const EVENT_UDMACH22BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH22BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH22BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH22BSEL_EV_SWEV1: u32 = 101;
pub const EVENT_UDMACH23SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH23SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH23SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH23SSEL_EV_SWEV2: u32 = 102;
pub const EVENT_UDMACH23BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH23BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH23BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH23BSEL_EV_SWEV2: u32 = 102;
pub const EVENT_UDMACH24SSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH24SSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH24SSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH24SSEL_EV_SWEV3: u32 = 103;
pub const EVENT_UDMACH24BSEL_EV_W: u32 = 7;
pub const EVENT_UDMACH24BSEL_EV_M: u32 = 127;
pub const EVENT_UDMACH24BSEL_EV_S: u32 = 0;
pub const EVENT_UDMACH24BSEL_EV_SWEV3: u32 = 103;
pub const EVENT_GPT3ACAPTSEL_EV_W: u32 = 7;
pub const EVENT_GPT3ACAPTSEL_EV_M: u32 = 127;
pub const EVENT_GPT3ACAPTSEL_EV_S: u32 = 0;
pub const EVENT_GPT3ACAPTSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_GPT3ACAPTSEL_EV_AON_RTC_UPD: u32 = 119;
pub const EVENT_GPT3ACAPTSEL_EV_AUX_ADC_IRQ: u32 = 115;
pub const EVENT_GPT3ACAPTSEL_EV_AUX_OBSMUX0: u32 = 114;
pub const EVENT_GPT3ACAPTSEL_EV_AUX_ADC_FIFO_ALMOST_FULL: u32 = 113;
pub const EVENT_GPT3ACAPTSEL_EV_AUX_ADC_DONE: u32 = 112;
pub const EVENT_GPT3ACAPTSEL_EV_AUX_SMPH_AUTOTAKE_DONE: u32 = 111;
pub const EVENT_GPT3ACAPTSEL_EV_AUX_TIMER1_EV: u32 = 110;
pub const EVENT_GPT3ACAPTSEL_EV_AUX_TIMER0_EV: u32 = 109;
pub const EVENT_GPT3ACAPTSEL_EV_AUX_TDC_DONE: u32 = 108;
pub const EVENT_GPT3ACAPTSEL_EV_AUX_COMPB: u32 = 107;
pub const EVENT_GPT3ACAPTSEL_EV_AUX_COMPA: u32 = 106;
pub const EVENT_GPT3ACAPTSEL_EV_AUX_AON_WU_EV: u32 = 105;
pub const EVENT_GPT3ACAPTSEL_EV_PORT_EVENT7: u32 = 92;
pub const EVENT_GPT3ACAPTSEL_EV_PORT_EVENT6: u32 = 91;
pub const EVENT_GPT3ACAPTSEL_EV_GPT3B_CMP: u32 = 68;
pub const EVENT_GPT3ACAPTSEL_EV_GPT3A_CMP: u32 = 67;
pub const EVENT_GPT3ACAPTSEL_EV_GPT2B_CMP: u32 = 66;
pub const EVENT_GPT3ACAPTSEL_EV_GPT2A_CMP: u32 = 65;
pub const EVENT_GPT3ACAPTSEL_EV_GPT1B_CMP: u32 = 64;
pub const EVENT_GPT3ACAPTSEL_EV_GPT1A_CMP: u32 = 63;
pub const EVENT_GPT3ACAPTSEL_EV_GPT0B_CMP: u32 = 62;
pub const EVENT_GPT3ACAPTSEL_EV_GPT0A_CMP: u32 = 61;
pub const EVENT_GPT3ACAPTSEL_EV_UART0_COMB: u32 = 36;
pub const EVENT_GPT3ACAPTSEL_EV_SSI1_COMB: u32 = 35;
pub const EVENT_GPT3ACAPTSEL_EV_SSI0_COMB: u32 = 34;
pub const EVENT_GPT3ACAPTSEL_EV_RFC_CPE_1: u32 = 30;
pub const EVENT_GPT3ACAPTSEL_EV_RFC_CPE_0: u32 = 27;
pub const EVENT_GPT3ACAPTSEL_EV_RFC_HW_COMB: u32 = 26;
pub const EVENT_GPT3ACAPTSEL_EV_RFC_CMD_ACK: u32 = 25;
pub const EVENT_GPT3ACAPTSEL_EV_FLASH: u32 = 21;
pub const EVENT_GPT3ACAPTSEL_EV_AUX_COMB: u32 = 11;
pub const EVENT_GPT3ACAPTSEL_EV_AON_RTC_COMB: u32 = 7;
pub const EVENT_GPT3ACAPTSEL_EV_AON_GPIO_EDGE: u32 = 4;
pub const EVENT_GPT3ACAPTSEL_EV_NONE: u32 = 0;
pub const EVENT_GPT3BCAPTSEL_EV_W: u32 = 7;
pub const EVENT_GPT3BCAPTSEL_EV_M: u32 = 127;
pub const EVENT_GPT3BCAPTSEL_EV_S: u32 = 0;
pub const EVENT_GPT3BCAPTSEL_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_GPT3BCAPTSEL_EV_AON_RTC_UPD: u32 = 119;
pub const EVENT_GPT3BCAPTSEL_EV_AUX_ADC_IRQ: u32 = 115;
pub const EVENT_GPT3BCAPTSEL_EV_AUX_OBSMUX0: u32 = 114;
pub const EVENT_GPT3BCAPTSEL_EV_AUX_ADC_FIFO_ALMOST_FULL: u32 = 113;
pub const EVENT_GPT3BCAPTSEL_EV_AUX_ADC_DONE: u32 = 112;
pub const EVENT_GPT3BCAPTSEL_EV_AUX_SMPH_AUTOTAKE_DONE: u32 = 111;
pub const EVENT_GPT3BCAPTSEL_EV_AUX_TIMER1_EV: u32 = 110;
pub const EVENT_GPT3BCAPTSEL_EV_AUX_TIMER0_EV: u32 = 109;
pub const EVENT_GPT3BCAPTSEL_EV_AUX_TDC_DONE: u32 = 108;
pub const EVENT_GPT3BCAPTSEL_EV_AUX_COMPB: u32 = 107;
pub const EVENT_GPT3BCAPTSEL_EV_AUX_COMPA: u32 = 106;
pub const EVENT_GPT3BCAPTSEL_EV_AUX_AON_WU_EV: u32 = 105;
pub const EVENT_GPT3BCAPTSEL_EV_PORT_EVENT7: u32 = 92;
pub const EVENT_GPT3BCAPTSEL_EV_PORT_EVENT6: u32 = 91;
pub const EVENT_GPT3BCAPTSEL_EV_GPT3B_CMP: u32 = 68;
pub const EVENT_GPT3BCAPTSEL_EV_GPT3A_CMP: u32 = 67;
pub const EVENT_GPT3BCAPTSEL_EV_GPT2B_CMP: u32 = 66;
pub const EVENT_GPT3BCAPTSEL_EV_GPT2A_CMP: u32 = 65;
pub const EVENT_GPT3BCAPTSEL_EV_GPT1B_CMP: u32 = 64;
pub const EVENT_GPT3BCAPTSEL_EV_GPT1A_CMP: u32 = 63;
pub const EVENT_GPT3BCAPTSEL_EV_GPT0B_CMP: u32 = 62;
pub const EVENT_GPT3BCAPTSEL_EV_GPT0A_CMP: u32 = 61;
pub const EVENT_GPT3BCAPTSEL_EV_UART0_COMB: u32 = 36;
pub const EVENT_GPT3BCAPTSEL_EV_SSI1_COMB: u32 = 35;
pub const EVENT_GPT3BCAPTSEL_EV_SSI0_COMB: u32 = 34;
pub const EVENT_GPT3BCAPTSEL_EV_RFC_CPE_1: u32 = 30;
pub const EVENT_GPT3BCAPTSEL_EV_RFC_CPE_0: u32 = 27;
pub const EVENT_GPT3BCAPTSEL_EV_RFC_HW_COMB: u32 = 26;
pub const EVENT_GPT3BCAPTSEL_EV_RFC_CMD_ACK: u32 = 25;
pub const EVENT_GPT3BCAPTSEL_EV_FLASH: u32 = 21;
pub const EVENT_GPT3BCAPTSEL_EV_AUX_COMB: u32 = 11;
pub const EVENT_GPT3BCAPTSEL_EV_AON_RTC_COMB: u32 = 7;
pub const EVENT_GPT3BCAPTSEL_EV_AON_GPIO_EDGE: u32 = 4;
pub const EVENT_GPT3BCAPTSEL_EV_NONE: u32 = 0;
pub const EVENT_AUXSEL0_EV_W: u32 = 7;
pub const EVENT_AUXSEL0_EV_M: u32 = 127;
pub const EVENT_AUXSEL0_EV_S: u32 = 0;
pub const EVENT_AUXSEL0_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_AUXSEL0_EV_GPT1B: u32 = 19;
pub const EVENT_AUXSEL0_EV_GPT1A: u32 = 18;
pub const EVENT_AUXSEL0_EV_GPT0B: u32 = 17;
pub const EVENT_AUXSEL0_EV_GPT0A: u32 = 16;
pub const EVENT_AUXSEL0_EV_GPT3B: u32 = 15;
pub const EVENT_AUXSEL0_EV_GPT3A: u32 = 14;
pub const EVENT_AUXSEL0_EV_GPT2B: u32 = 13;
pub const EVENT_AUXSEL0_EV_GPT2A: u32 = 12;
pub const EVENT_AUXSEL0_EV_NONE: u32 = 0;
pub const EVENT_CM3NMISEL0_EV_W: u32 = 7;
pub const EVENT_CM3NMISEL0_EV_M: u32 = 127;
pub const EVENT_CM3NMISEL0_EV_S: u32 = 0;
pub const EVENT_CM3NMISEL0_EV_WDT_NMI: u32 = 99;
pub const EVENT_I2SSTMPSEL0_EV_W: u32 = 7;
pub const EVENT_I2SSTMPSEL0_EV_M: u32 = 127;
pub const EVENT_I2SSTMPSEL0_EV_S: u32 = 0;
pub const EVENT_I2SSTMPSEL0_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_I2SSTMPSEL0_EV_NONE: u32 = 0;
pub const EVENT_FRZSEL0_EV_W: u32 = 7;
pub const EVENT_FRZSEL0_EV_M: u32 = 127;
pub const EVENT_FRZSEL0_EV_S: u32 = 0;
pub const EVENT_FRZSEL0_EV_ALWAYS_ACTIVE: u32 = 121;
pub const EVENT_FRZSEL0_EV_CPU_HALTED: u32 = 120;
pub const EVENT_FRZSEL0_EV_NONE: u32 = 0;
pub const EVENT_SWEV_SWEV3: u32 = 16777216;
pub const EVENT_SWEV_SWEV3_BITN: u32 = 24;
pub const EVENT_SWEV_SWEV3_M: u32 = 16777216;
pub const EVENT_SWEV_SWEV3_S: u32 = 24;
pub const EVENT_SWEV_SWEV2: u32 = 65536;
pub const EVENT_SWEV_SWEV2_BITN: u32 = 16;
pub const EVENT_SWEV_SWEV2_M: u32 = 65536;
pub const EVENT_SWEV_SWEV2_S: u32 = 16;
pub const EVENT_SWEV_SWEV1: u32 = 256;
pub const EVENT_SWEV_SWEV1_BITN: u32 = 8;
pub const EVENT_SWEV_SWEV1_M: u32 = 256;
pub const EVENT_SWEV_SWEV1_S: u32 = 8;
pub const EVENT_SWEV_SWEV0: u32 = 1;
pub const EVENT_SWEV_SWEV0_BITN: u32 = 0;
pub const EVENT_SWEV_SWEV0_M: u32 = 1;
pub const EVENT_SWEV_SWEV0_S: u32 = 0;
pub const ADI_4_AUX_O_MUX0: u32 = 0;
pub const ADI_4_AUX_O_MUX1: u32 = 1;
pub const ADI_4_AUX_O_MUX2: u32 = 2;
pub const ADI_4_AUX_O_MUX3: u32 = 3;
pub const ADI_4_AUX_O_ISRC: u32 = 4;
pub const ADI_4_AUX_O_COMP: u32 = 5;
pub const ADI_4_AUX_O_MUX4: u32 = 7;
pub const ADI_4_AUX_O_ADC0: u32 = 8;
pub const ADI_4_AUX_O_ADC1: u32 = 9;
pub const ADI_4_AUX_O_ADCREF0: u32 = 10;
pub const ADI_4_AUX_O_ADCREF1: u32 = 11;
pub const ADI_4_AUX_MUX0_COMPA_REF_W: u32 = 4;
pub const ADI_4_AUX_MUX0_COMPA_REF_M: u32 = 15;
pub const ADI_4_AUX_MUX0_COMPA_REF_S: u32 = 0;
pub const ADI_4_AUX_MUX0_COMPA_REF_ADCVREFP: u32 = 8;
pub const ADI_4_AUX_MUX0_COMPA_REF_VDDS: u32 = 4;
pub const ADI_4_AUX_MUX0_COMPA_REF_VSS: u32 = 2;
pub const ADI_4_AUX_MUX0_COMPA_REF_DCOUPL: u32 = 1;
pub const ADI_4_AUX_MUX0_COMPA_REF_NC: u32 = 0;
pub const ADI_4_AUX_MUX1_COMPA_IN_W: u32 = 8;
pub const ADI_4_AUX_MUX1_COMPA_IN_M: u32 = 255;
pub const ADI_4_AUX_MUX1_COMPA_IN_S: u32 = 0;
pub const ADI_4_AUX_MUX1_COMPA_IN_AUXIO0: u32 = 128;
pub const ADI_4_AUX_MUX1_COMPA_IN_AUXIO1: u32 = 64;
pub const ADI_4_AUX_MUX1_COMPA_IN_AUXIO2: u32 = 32;
pub const ADI_4_AUX_MUX1_COMPA_IN_AUXIO3: u32 = 16;
pub const ADI_4_AUX_MUX1_COMPA_IN_AUXIO4: u32 = 8;
pub const ADI_4_AUX_MUX1_COMPA_IN_AUXIO5: u32 = 4;
pub const ADI_4_AUX_MUX1_COMPA_IN_AUXIO6: u32 = 2;
pub const ADI_4_AUX_MUX1_COMPA_IN_AUXIO7: u32 = 1;
pub const ADI_4_AUX_MUX1_COMPA_IN_NC: u32 = 0;
pub const ADI_4_AUX_MUX2_ADCCOMPB_IN_W: u32 = 5;
pub const ADI_4_AUX_MUX2_ADCCOMPB_IN_M: u32 = 248;
pub const ADI_4_AUX_MUX2_ADCCOMPB_IN_S: u32 = 3;
pub const ADI_4_AUX_MUX2_ADCCOMPB_IN_VDDS: u32 = 128;
pub const ADI_4_AUX_MUX2_ADCCOMPB_IN_VSS: u32 = 64;
pub const ADI_4_AUX_MUX2_ADCCOMPB_IN_DCOUPL: u32 = 32;
pub const ADI_4_AUX_MUX2_ADCCOMPB_IN_ATEST1: u32 = 16;
pub const ADI_4_AUX_MUX2_ADCCOMPB_IN_ATEST0: u32 = 8;
pub const ADI_4_AUX_MUX2_ADCCOMPB_IN_NC: u32 = 0;
pub const ADI_4_AUX_MUX2_COMPB_REF_W: u32 = 3;
pub const ADI_4_AUX_MUX2_COMPB_REF_M: u32 = 7;
pub const ADI_4_AUX_MUX2_COMPB_REF_S: u32 = 0;
pub const ADI_4_AUX_MUX2_COMPB_REF_VDDS: u32 = 4;
pub const ADI_4_AUX_MUX2_COMPB_REF_VSS: u32 = 2;
pub const ADI_4_AUX_MUX2_COMPB_REF_DCOUPL: u32 = 1;
pub const ADI_4_AUX_MUX2_COMPB_REF_NC: u32 = 0;
pub const ADI_4_AUX_MUX3_ADCCOMPB_IN_W: u32 = 8;
pub const ADI_4_AUX_MUX3_ADCCOMPB_IN_M: u32 = 255;
pub const ADI_4_AUX_MUX3_ADCCOMPB_IN_S: u32 = 0;
pub const ADI_4_AUX_MUX3_ADCCOMPB_IN_AUXIO0: u32 = 128;
pub const ADI_4_AUX_MUX3_ADCCOMPB_IN_AUXIO1: u32 = 64;
pub const ADI_4_AUX_MUX3_ADCCOMPB_IN_AUXIO2: u32 = 32;
pub const ADI_4_AUX_MUX3_ADCCOMPB_IN_AUXIO3: u32 = 16;
pub const ADI_4_AUX_MUX3_ADCCOMPB_IN_AUXIO4: u32 = 8;
pub const ADI_4_AUX_MUX3_ADCCOMPB_IN_AUXIO5: u32 = 4;
pub const ADI_4_AUX_MUX3_ADCCOMPB_IN_AUXIO6: u32 = 2;
pub const ADI_4_AUX_MUX3_ADCCOMPB_IN_AUXIO7: u32 = 1;
pub const ADI_4_AUX_MUX3_ADCCOMPB_IN_NC: u32 = 0;
pub const ADI_4_AUX_ISRC_TRIM_W: u32 = 6;
pub const ADI_4_AUX_ISRC_TRIM_M: u32 = 252;
pub const ADI_4_AUX_ISRC_TRIM_S: u32 = 2;
pub const ADI_4_AUX_ISRC_TRIM_11P75U: u32 = 128;
pub const ADI_4_AUX_ISRC_TRIM_4P5U: u32 = 64;
pub const ADI_4_AUX_ISRC_TRIM_2P0U: u32 = 32;
pub const ADI_4_AUX_ISRC_TRIM_1P0U: u32 = 16;
pub const ADI_4_AUX_ISRC_TRIM_0P5U: u32 = 8;
pub const ADI_4_AUX_ISRC_TRIM_0P25U: u32 = 4;
pub const ADI_4_AUX_ISRC_TRIM_NC: u32 = 0;
pub const ADI_4_AUX_ISRC_EN: u32 = 1;
pub const ADI_4_AUX_ISRC_EN_M: u32 = 1;
pub const ADI_4_AUX_ISRC_EN_S: u32 = 0;
pub const ADI_4_AUX_COMP_COMPA_REF_RES_EN: u32 = 128;
pub const ADI_4_AUX_COMP_COMPA_REF_RES_EN_M: u32 = 128;
pub const ADI_4_AUX_COMP_COMPA_REF_RES_EN_S: u32 = 7;
pub const ADI_4_AUX_COMP_COMPA_REF_CURR_EN: u32 = 64;
pub const ADI_4_AUX_COMP_COMPA_REF_CURR_EN_M: u32 = 64;
pub const ADI_4_AUX_COMP_COMPA_REF_CURR_EN_S: u32 = 6;
pub const ADI_4_AUX_COMP_COMPB_TRIM_W: u32 = 3;
pub const ADI_4_AUX_COMP_COMPB_TRIM_M: u32 = 56;
pub const ADI_4_AUX_COMP_COMPB_TRIM_S: u32 = 3;
pub const ADI_4_AUX_COMP_COMPB_TRIM_DIV4: u32 = 56;
pub const ADI_4_AUX_COMP_COMPB_TRIM_DIV3: u32 = 24;
pub const ADI_4_AUX_COMP_COMPB_TRIM_DIV2: u32 = 8;
pub const ADI_4_AUX_COMP_COMPB_TRIM_DIV1: u32 = 0;
pub const ADI_4_AUX_COMP_COMPB_EN: u32 = 4;
pub const ADI_4_AUX_COMP_COMPB_EN_M: u32 = 4;
pub const ADI_4_AUX_COMP_COMPB_EN_S: u32 = 2;
pub const ADI_4_AUX_COMP_COMPA_EN: u32 = 1;
pub const ADI_4_AUX_COMP_COMPA_EN_M: u32 = 1;
pub const ADI_4_AUX_COMP_COMPA_EN_S: u32 = 0;
pub const ADI_4_AUX_MUX4_COMPA_REF_W: u32 = 8;
pub const ADI_4_AUX_MUX4_COMPA_REF_M: u32 = 255;
pub const ADI_4_AUX_MUX4_COMPA_REF_S: u32 = 0;
pub const ADI_4_AUX_MUX4_COMPA_REF_AUXIO0: u32 = 128;
pub const ADI_4_AUX_MUX4_COMPA_REF_AUXIO1: u32 = 64;
pub const ADI_4_AUX_MUX4_COMPA_REF_AUXIO2: u32 = 32;
pub const ADI_4_AUX_MUX4_COMPA_REF_AUXIO3: u32 = 16;
pub const ADI_4_AUX_MUX4_COMPA_REF_AUXIO4: u32 = 8;
pub const ADI_4_AUX_MUX4_COMPA_REF_AUXIO5: u32 = 4;
pub const ADI_4_AUX_MUX4_COMPA_REF_AUXIO6: u32 = 2;
pub const ADI_4_AUX_MUX4_COMPA_REF_AUXIO7: u32 = 1;
pub const ADI_4_AUX_MUX4_COMPA_REF_NC: u32 = 0;
pub const ADI_4_AUX_ADC0_SMPL_MODE: u32 = 128;
pub const ADI_4_AUX_ADC0_SMPL_MODE_M: u32 = 128;
pub const ADI_4_AUX_ADC0_SMPL_MODE_S: u32 = 7;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_W: u32 = 4;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_M: u32 = 120;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_S: u32 = 3;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_10P9_MS: u32 = 120;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_5P46_MS: u32 = 112;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_2P73_MS: u32 = 104;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_1P37_MS: u32 = 96;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_682_US: u32 = 88;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_341_US: u32 = 80;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_170_US: u32 = 72;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_85P3_US: u32 = 64;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_42P6_US: u32 = 56;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_21P3_US: u32 = 48;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_10P6_US: u32 = 40;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_5P3_US: u32 = 32;
pub const ADI_4_AUX_ADC0_SMPL_CYCLE_EXP_2P7_US: u32 = 24;
pub const ADI_4_AUX_ADC0_RESET_N: u32 = 2;
pub const ADI_4_AUX_ADC0_RESET_N_M: u32 = 2;
pub const ADI_4_AUX_ADC0_RESET_N_S: u32 = 1;
pub const ADI_4_AUX_ADC0_EN: u32 = 1;
pub const ADI_4_AUX_ADC0_EN_M: u32 = 1;
pub const ADI_4_AUX_ADC0_EN_S: u32 = 0;
pub const ADI_4_AUX_ADC1_SCALE_DIS: u32 = 1;
pub const ADI_4_AUX_ADC1_SCALE_DIS_M: u32 = 1;
pub const ADI_4_AUX_ADC1_SCALE_DIS_S: u32 = 0;
pub const ADI_4_AUX_ADCREF0_REF_ON_IDLE: u32 = 64;
pub const ADI_4_AUX_ADCREF0_REF_ON_IDLE_M: u32 = 64;
pub const ADI_4_AUX_ADCREF0_REF_ON_IDLE_S: u32 = 6;
pub const ADI_4_AUX_ADCREF0_IOMUX: u32 = 32;
pub const ADI_4_AUX_ADCREF0_IOMUX_M: u32 = 32;
pub const ADI_4_AUX_ADCREF0_IOMUX_S: u32 = 5;
pub const ADI_4_AUX_ADCREF0_EXT: u32 = 16;
pub const ADI_4_AUX_ADCREF0_EXT_M: u32 = 16;
pub const ADI_4_AUX_ADCREF0_EXT_S: u32 = 4;
pub const ADI_4_AUX_ADCREF0_SRC: u32 = 8;
pub const ADI_4_AUX_ADCREF0_SRC_M: u32 = 8;
pub const ADI_4_AUX_ADCREF0_SRC_S: u32 = 3;
pub const ADI_4_AUX_ADCREF0_EN: u32 = 1;
pub const ADI_4_AUX_ADCREF0_EN_M: u32 = 1;
pub const ADI_4_AUX_ADCREF0_EN_S: u32 = 0;
pub const ADI_4_AUX_ADCREF1_VTRIM_W: u32 = 6;
pub const ADI_4_AUX_ADCREF1_VTRIM_M: u32 = 63;
pub const ADI_4_AUX_ADCREF1_VTRIM_S: u32 = 0;
pub const AUX_ANAIF_O_ADCCTL: u32 = 16;
pub const AUX_ANAIF_O_ADCFIFOSTAT: u32 = 20;
pub const AUX_ANAIF_O_ADCFIFO: u32 = 24;
pub const AUX_ANAIF_O_ADCTRIG: u32 = 28;
pub const AUX_ANAIF_O_ISRCCTL: u32 = 32;
pub const AUX_ANAIF_ADCCTL_START_POL: u32 = 8192;
pub const AUX_ANAIF_ADCCTL_START_POL_BITN: u32 = 13;
pub const AUX_ANAIF_ADCCTL_START_POL_M: u32 = 8192;
pub const AUX_ANAIF_ADCCTL_START_POL_S: u32 = 13;
pub const AUX_ANAIF_ADCCTL_START_POL_FALL: u32 = 8192;
pub const AUX_ANAIF_ADCCTL_START_POL_RISE: u32 = 0;
pub const AUX_ANAIF_ADCCTL_START_SRC_W: u32 = 5;
pub const AUX_ANAIF_ADCCTL_START_SRC_M: u32 = 7936;
pub const AUX_ANAIF_ADCCTL_START_SRC_S: u32 = 8;
pub const AUX_ANAIF_ADCCTL_START_SRC_ADC_IRQ: u32 = 7936;
pub const AUX_ANAIF_ADCCTL_START_SRC_MCU_EV: u32 = 7680;
pub const AUX_ANAIF_ADCCTL_START_SRC_ACLK_REF: u32 = 7424;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO15: u32 = 7168;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO14: u32 = 6912;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO13: u32 = 6656;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO12: u32 = 6400;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO11: u32 = 6144;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO10: u32 = 5888;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO9: u32 = 5632;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO8: u32 = 5376;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO7: u32 = 5120;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO6: u32 = 4864;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO5: u32 = 4608;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO4: u32 = 4352;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO3: u32 = 4096;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO2: u32 = 3840;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO1: u32 = 3584;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUXIO0: u32 = 3328;
pub const AUX_ANAIF_ADCCTL_START_SRC_AON_PROG_WU: u32 = 3072;
pub const AUX_ANAIF_ADCCTL_START_SRC_AON_SW: u32 = 2816;
pub const AUX_ANAIF_ADCCTL_START_SRC_NO_EVENT1: u32 = 2560;
pub const AUX_ANAIF_ADCCTL_START_SRC_NO_EVENT0: u32 = 2304;
pub const AUX_ANAIF_ADCCTL_START_SRC_RESERVED1: u32 = 2048;
pub const AUX_ANAIF_ADCCTL_START_SRC_RESERVED0: u32 = 1792;
pub const AUX_ANAIF_ADCCTL_START_SRC_SMPH_AUTOTAKE_DONE: u32 = 1536;
pub const AUX_ANAIF_ADCCTL_START_SRC_TIMER1_EV: u32 = 1280;
pub const AUX_ANAIF_ADCCTL_START_SRC_TIMER0_EV: u32 = 1024;
pub const AUX_ANAIF_ADCCTL_START_SRC_TDC_DONE: u32 = 768;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUX_COMPB: u32 = 512;
pub const AUX_ANAIF_ADCCTL_START_SRC_AUX_COMPA: u32 = 256;
pub const AUX_ANAIF_ADCCTL_START_SRC_RTC_CH2_EV: u32 = 0;
pub const AUX_ANAIF_ADCCTL_CMD_W: u32 = 2;
pub const AUX_ANAIF_ADCCTL_CMD_M: u32 = 3;
pub const AUX_ANAIF_ADCCTL_CMD_S: u32 = 0;
pub const AUX_ANAIF_ADCCTL_CMD_FLUSH: u32 = 3;
pub const AUX_ANAIF_ADCCTL_CMD_EN: u32 = 1;
pub const AUX_ANAIF_ADCCTL_CMD_DIS: u32 = 0;
pub const AUX_ANAIF_ADCFIFOSTAT_OVERFLOW: u32 = 16;
pub const AUX_ANAIF_ADCFIFOSTAT_OVERFLOW_BITN: u32 = 4;
pub const AUX_ANAIF_ADCFIFOSTAT_OVERFLOW_M: u32 = 16;
pub const AUX_ANAIF_ADCFIFOSTAT_OVERFLOW_S: u32 = 4;
pub const AUX_ANAIF_ADCFIFOSTAT_UNDERFLOW: u32 = 8;
pub const AUX_ANAIF_ADCFIFOSTAT_UNDERFLOW_BITN: u32 = 3;
pub const AUX_ANAIF_ADCFIFOSTAT_UNDERFLOW_M: u32 = 8;
pub const AUX_ANAIF_ADCFIFOSTAT_UNDERFLOW_S: u32 = 3;
pub const AUX_ANAIF_ADCFIFOSTAT_FULL: u32 = 4;
pub const AUX_ANAIF_ADCFIFOSTAT_FULL_BITN: u32 = 2;
pub const AUX_ANAIF_ADCFIFOSTAT_FULL_M: u32 = 4;
pub const AUX_ANAIF_ADCFIFOSTAT_FULL_S: u32 = 2;
pub const AUX_ANAIF_ADCFIFOSTAT_ALMOST_FULL: u32 = 2;
pub const AUX_ANAIF_ADCFIFOSTAT_ALMOST_FULL_BITN: u32 = 1;
pub const AUX_ANAIF_ADCFIFOSTAT_ALMOST_FULL_M: u32 = 2;
pub const AUX_ANAIF_ADCFIFOSTAT_ALMOST_FULL_S: u32 = 1;
pub const AUX_ANAIF_ADCFIFOSTAT_EMPTY: u32 = 1;
pub const AUX_ANAIF_ADCFIFOSTAT_EMPTY_BITN: u32 = 0;
pub const AUX_ANAIF_ADCFIFOSTAT_EMPTY_M: u32 = 1;
pub const AUX_ANAIF_ADCFIFOSTAT_EMPTY_S: u32 = 0;
pub const AUX_ANAIF_ADCFIFO_DATA_W: u32 = 12;
pub const AUX_ANAIF_ADCFIFO_DATA_M: u32 = 4095;
pub const AUX_ANAIF_ADCFIFO_DATA_S: u32 = 0;
pub const AUX_ANAIF_ADCTRIG_START: u32 = 1;
pub const AUX_ANAIF_ADCTRIG_START_BITN: u32 = 0;
pub const AUX_ANAIF_ADCTRIG_START_M: u32 = 1;
pub const AUX_ANAIF_ADCTRIG_START_S: u32 = 0;
pub const AUX_ANAIF_ISRCCTL_RESET_N: u32 = 1;
pub const AUX_ANAIF_ISRCCTL_RESET_N_BITN: u32 = 0;
pub const AUX_ANAIF_ISRCCTL_RESET_N_M: u32 = 1;
pub const AUX_ANAIF_ISRCCTL_RESET_N_S: u32 = 0;
pub const ROM_HAPI_TABLE_ADDR: u32 = 268435528;
pub const COMPA_IN_NC: u32 = 0;
pub const COMPA_IN_AUXIO7: u32 = 9;
pub const COMPA_IN_AUXIO6: u32 = 10;
pub const COMPA_IN_AUXIO5: u32 = 11;
pub const COMPA_IN_AUXIO4: u32 = 12;
pub const COMPA_IN_AUXIO3: u32 = 13;
pub const COMPA_IN_AUXIO2: u32 = 14;
pub const COMPA_IN_AUXIO1: u32 = 15;
pub const COMPA_IN_AUXIO0: u32 = 16;
pub const COMPA_REF_NC: u32 = 0;
pub const COMPA_REF_DCOUPL: u32 = 1;
pub const COMPA_REF_VSS: u32 = 2;
pub const COMPA_REF_VDDS: u32 = 3;
pub const COMPA_REF_ADCVREFP: u32 = 4;
pub const COMPA_REF_AUXIO7: u32 = 9;
pub const COMPA_REF_AUXIO6: u32 = 10;
pub const COMPA_REF_AUXIO5: u32 = 11;
pub const COMPA_REF_AUXIO4: u32 = 12;
pub const COMPA_REF_AUXIO3: u32 = 13;
pub const COMPA_REF_AUXIO2: u32 = 14;
pub const COMPA_REF_AUXIO1: u32 = 15;
pub const COMPA_REF_AUXIO0: u32 = 16;
pub const ADC_COMPB_IN_NC: u32 = 0;
pub const ADC_COMPB_IN_DCOUPL: u32 = 3;
pub const ADC_COMPB_IN_VSS: u32 = 4;
pub const ADC_COMPB_IN_VDDS: u32 = 5;
pub const ADC_COMPB_IN_AUXIO7: u32 = 9;
pub const ADC_COMPB_IN_AUXIO6: u32 = 10;
pub const ADC_COMPB_IN_AUXIO5: u32 = 11;
pub const ADC_COMPB_IN_AUXIO4: u32 = 12;
pub const ADC_COMPB_IN_AUXIO3: u32 = 13;
pub const ADC_COMPB_IN_AUXIO2: u32 = 14;
pub const ADC_COMPB_IN_AUXIO1: u32 = 15;
pub const ADC_COMPB_IN_AUXIO0: u32 = 16;
pub const COMPB_REF_NC: u32 = 0;
pub const COMPB_REF_DCOUPL: u32 = 1;
pub const COMPB_REF_VSS: u32 = 2;
pub const COMPB_REF_VDDS: u32 = 3;
pub const AUXADC_REF_FIXED: u32 = 0;
pub const AUXADC_REF_VDDS_REL: u32 = 8;
pub const AUXADC_FIFO_EMPTY_M: u32 = 1;
pub const AUXADC_FIFO_ALMOST_FULL_M: u32 = 2;
pub const AUXADC_FIFO_FULL_M: u32 = 4;
pub const AUXADC_FIFO_UNDERFLOW_M: u32 = 8;
pub const AUXADC_FIFO_OVERFLOW_M: u32 = 16;
pub const AUXADC_TRIGGER_MANUAL: u32 = 0;
pub const AUXADC_TRIGGER_GPT0A: u32 = 16;
pub const AUXADC_TRIGGER_GPT0B: u32 = 17;
pub const AUXADC_TRIGGER_GPT1A: u32 = 18;
pub const AUXADC_TRIGGER_GPT1B: u32 = 19;
pub const AUXADC_TRIGGER_GPT2A: u32 = 12;
pub const AUXADC_TRIGGER_GPT2B: u32 = 13;
pub const AUXADC_TRIGGER_GPT3A: u32 = 14;
pub const AUXADC_TRIGGER_GPT3B: u32 = 15;
pub const AUXADC_SAMPLE_TIME_2P7_US: u32 = 3;
pub const AUXADC_SAMPLE_TIME_5P3_US: u32 = 4;
pub const AUXADC_SAMPLE_TIME_10P6_US: u32 = 5;
pub const AUXADC_SAMPLE_TIME_21P3_US: u32 = 6;
pub const AUXADC_SAMPLE_TIME_42P6_US: u32 = 7;
pub const AUXADC_SAMPLE_TIME_85P3_US: u32 = 8;
pub const AUXADC_SAMPLE_TIME_170_US: u32 = 9;
pub const AUXADC_SAMPLE_TIME_341_US: u32 = 10;
pub const AUXADC_SAMPLE_TIME_682_US: u32 = 11;
pub const AUXADC_SAMPLE_TIME_1P37_MS: u32 = 12;
pub const AUXADC_SAMPLE_TIME_2P73_MS: u32 = 13;
pub const AUXADC_SAMPLE_TIME_5P46_MS: u32 = 14;
pub const AUXADC_SAMPLE_TIME_10P9_MS: u32 = 15;
pub const AUXADC_FIXED_REF_VOLTAGE_NORMAL: u32 = 4300000;
pub const AUXADC_FIXED_REF_VOLTAGE_UNSCALED: u32 = 1478500;
pub const AUX_SMPH_FREE: u32 = 1;
pub const AUX_SMPH_CLAIMED: u32 = 0;
pub const AUX_SMPH_0: u32 = 0;
pub const AUX_SMPH_1: u32 = 1;
pub const AUX_SMPH_2: u32 = 2;
pub const AUX_SMPH_3: u32 = 3;
pub const AUX_SMPH_4: u32 = 4;
pub const AUX_SMPH_5: u32 = 5;
pub const AUX_SMPH_6: u32 = 6;
pub const AUX_SMPH_7: u32 = 7;
pub const AUX_TDC_O_CTL: u32 = 0;
pub const AUX_TDC_O_STAT: u32 = 4;
pub const AUX_TDC_O_RESULT: u32 = 8;
pub const AUX_TDC_O_SATCFG: u32 = 12;
pub const AUX_TDC_O_TRIGSRC: u32 = 16;
pub const AUX_TDC_O_TRIGCNT: u32 = 20;
pub const AUX_TDC_O_TRIGCNTLOAD: u32 = 24;
pub const AUX_TDC_O_TRIGCNTCFG: u32 = 28;
pub const AUX_TDC_O_PRECTL: u32 = 32;
pub const AUX_TDC_O_PRECNT: u32 = 36;
pub const AUX_TDC_CTL_CMD_W: u32 = 2;
pub const AUX_TDC_CTL_CMD_M: u32 = 3;
pub const AUX_TDC_CTL_CMD_S: u32 = 0;
pub const AUX_TDC_CTL_CMD_ABORT: u32 = 3;
pub const AUX_TDC_CTL_CMD_RUN: u32 = 2;
pub const AUX_TDC_CTL_CMD_RUN_SYNC_START: u32 = 1;
pub const AUX_TDC_CTL_CMD_CLR_RESULT: u32 = 0;
pub const AUX_TDC_STAT_SAT: u32 = 128;
pub const AUX_TDC_STAT_SAT_BITN: u32 = 7;
pub const AUX_TDC_STAT_SAT_M: u32 = 128;
pub const AUX_TDC_STAT_SAT_S: u32 = 7;
pub const AUX_TDC_STAT_DONE: u32 = 64;
pub const AUX_TDC_STAT_DONE_BITN: u32 = 6;
pub const AUX_TDC_STAT_DONE_M: u32 = 64;
pub const AUX_TDC_STAT_DONE_S: u32 = 6;
pub const AUX_TDC_STAT_STATE_W: u32 = 6;
pub const AUX_TDC_STAT_STATE_M: u32 = 63;
pub const AUX_TDC_STAT_STATE_S: u32 = 0;
pub const AUX_TDC_STAT_STATE_FORCE_STOP: u32 = 46;
pub const AUX_TDC_STAT_STATE_START_FALL: u32 = 30;
pub const AUX_TDC_STAT_STATE_WAIT_CLR_CNT_DONE: u32 = 22;
pub const AUX_TDC_STAT_STATE_POR: u32 = 15;
pub const AUX_TDC_STAT_STATE_GET_RESULT: u32 = 14;
pub const AUX_TDC_STAT_STATE_WAIT_STOP_CNTDWN: u32 = 12;
pub const AUX_TDC_STAT_STATE_WAIT_STOP: u32 = 8;
pub const AUX_TDC_STAT_STATE_CLR_CNT: u32 = 7;
pub const AUX_TDC_STAT_STATE_IDLE: u32 = 6;
pub const AUX_TDC_STAT_STATE_WAIT_START_STOP_CNT_EN: u32 = 4;
pub const AUX_TDC_STAT_STATE_WAIT_START: u32 = 0;
pub const AUX_TDC_RESULT_VALUE_W: u32 = 25;
pub const AUX_TDC_RESULT_VALUE_M: u32 = 33554431;
pub const AUX_TDC_RESULT_VALUE_S: u32 = 0;
pub const AUX_TDC_SATCFG_LIMIT_W: u32 = 4;
pub const AUX_TDC_SATCFG_LIMIT_M: u32 = 15;
pub const AUX_TDC_SATCFG_LIMIT_S: u32 = 0;
pub const AUX_TDC_SATCFG_LIMIT_R24: u32 = 15;
pub const AUX_TDC_SATCFG_LIMIT_R23: u32 = 14;
pub const AUX_TDC_SATCFG_LIMIT_R22: u32 = 13;
pub const AUX_TDC_SATCFG_LIMIT_R21: u32 = 12;
pub const AUX_TDC_SATCFG_LIMIT_R20: u32 = 11;
pub const AUX_TDC_SATCFG_LIMIT_R19: u32 = 10;
pub const AUX_TDC_SATCFG_LIMIT_R18: u32 = 9;
pub const AUX_TDC_SATCFG_LIMIT_R17: u32 = 8;
pub const AUX_TDC_SATCFG_LIMIT_R16: u32 = 7;
pub const AUX_TDC_SATCFG_LIMIT_R15: u32 = 6;
pub const AUX_TDC_SATCFG_LIMIT_R14: u32 = 5;
pub const AUX_TDC_SATCFG_LIMIT_R13: u32 = 4;
pub const AUX_TDC_SATCFG_LIMIT_R12: u32 = 3;
pub const AUX_TDC_TRIGSRC_STOP_POL: u32 = 8192;
pub const AUX_TDC_TRIGSRC_STOP_POL_BITN: u32 = 13;
pub const AUX_TDC_TRIGSRC_STOP_POL_M: u32 = 8192;
pub const AUX_TDC_TRIGSRC_STOP_POL_S: u32 = 13;
pub const AUX_TDC_TRIGSRC_STOP_POL_LOW: u32 = 8192;
pub const AUX_TDC_TRIGSRC_STOP_POL_HIGH: u32 = 0;
pub const AUX_TDC_TRIGSRC_STOP_SRC_W: u32 = 5;
pub const AUX_TDC_TRIGSRC_STOP_SRC_M: u32 = 7936;
pub const AUX_TDC_TRIGSRC_STOP_SRC_S: u32 = 8;
pub const AUX_TDC_TRIGSRC_STOP_SRC_TDC_PRE: u32 = 7936;
pub const AUX_TDC_TRIGSRC_STOP_SRC_MCU_EV: u32 = 7680;
pub const AUX_TDC_TRIGSRC_STOP_SRC_ACLK_REF: u32 = 7424;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO15: u32 = 7168;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO14: u32 = 6912;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO13: u32 = 6656;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO12: u32 = 6400;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO11: u32 = 6144;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO10: u32 = 5888;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO9: u32 = 5632;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO8: u32 = 5376;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO7: u32 = 5120;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO6: u32 = 4864;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO5: u32 = 4608;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO4: u32 = 4352;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO3: u32 = 4096;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO2: u32 = 3840;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO1: u32 = 3584;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUXIO0: u32 = 3328;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AON_PROG_WU: u32 = 3072;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AON_SW: u32 = 2816;
pub const AUX_TDC_TRIGSRC_STOP_SRC_OBSMUX1: u32 = 2560;
pub const AUX_TDC_TRIGSRC_STOP_SRC_OBSMUX0: u32 = 2304;
pub const AUX_TDC_TRIGSRC_STOP_SRC_ADC_FIFO_ALMOST_FULL: u32 = 2048;
pub const AUX_TDC_TRIGSRC_STOP_SRC_ADC_DONE: u32 = 1792;
pub const AUX_TDC_TRIGSRC_STOP_SRC_SMPH_AUTOTAKE_DONE: u32 = 1536;
pub const AUX_TDC_TRIGSRC_STOP_SRC_TIMER1_EV: u32 = 1280;
pub const AUX_TDC_TRIGSRC_STOP_SRC_TIMER0_EV: u32 = 1024;
pub const AUX_TDC_TRIGSRC_STOP_SRC_ISRC_RESET: u32 = 768;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUX_COMPB: u32 = 512;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AUX_COMPA: u32 = 256;
pub const AUX_TDC_TRIGSRC_STOP_SRC_AON_RTC_CH2: u32 = 0;
pub const AUX_TDC_TRIGSRC_START_POL: u32 = 32;
pub const AUX_TDC_TRIGSRC_START_POL_BITN: u32 = 5;
pub const AUX_TDC_TRIGSRC_START_POL_M: u32 = 32;
pub const AUX_TDC_TRIGSRC_START_POL_S: u32 = 5;
pub const AUX_TDC_TRIGSRC_START_POL_LOW: u32 = 32;
pub const AUX_TDC_TRIGSRC_START_POL_HIGH: u32 = 0;
pub const AUX_TDC_TRIGSRC_START_SRC_W: u32 = 5;
pub const AUX_TDC_TRIGSRC_START_SRC_M: u32 = 31;
pub const AUX_TDC_TRIGSRC_START_SRC_S: u32 = 0;
pub const AUX_TDC_TRIGSRC_START_SRC_TDC_PRE: u32 = 31;
pub const AUX_TDC_TRIGSRC_START_SRC_MCU_EV: u32 = 30;
pub const AUX_TDC_TRIGSRC_START_SRC_ACLK_REF: u32 = 29;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO15: u32 = 28;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO14: u32 = 27;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO13: u32 = 26;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO12: u32 = 25;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO11: u32 = 24;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO10: u32 = 23;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO9: u32 = 22;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO8: u32 = 21;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO7: u32 = 20;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO6: u32 = 19;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO5: u32 = 18;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO4: u32 = 17;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO3: u32 = 16;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO2: u32 = 15;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO1: u32 = 14;
pub const AUX_TDC_TRIGSRC_START_SRC_AUXIO0: u32 = 13;
pub const AUX_TDC_TRIGSRC_START_SRC_AON_PROG_WU: u32 = 12;
pub const AUX_TDC_TRIGSRC_START_SRC_AON_SW: u32 = 11;
pub const AUX_TDC_TRIGSRC_START_SRC_OBSMUX1: u32 = 10;
pub const AUX_TDC_TRIGSRC_START_SRC_OBSMUX0: u32 = 9;
pub const AUX_TDC_TRIGSRC_START_SRC_ADC_FIFO_ALMOST_FULL: u32 = 8;
pub const AUX_TDC_TRIGSRC_START_SRC_ADC_DONE: u32 = 7;
pub const AUX_TDC_TRIGSRC_START_SRC_SMPH_AUTOTAKE_DONE: u32 = 6;
pub const AUX_TDC_TRIGSRC_START_SRC_TIMER1_EV: u32 = 5;
pub const AUX_TDC_TRIGSRC_START_SRC_TIMER0_EV: u32 = 4;
pub const AUX_TDC_TRIGSRC_START_SRC_ISRC_RESET: u32 = 3;
pub const AUX_TDC_TRIGSRC_START_SRC_AUX_COMPB: u32 = 2;
pub const AUX_TDC_TRIGSRC_START_SRC_AUX_COMPA: u32 = 1;
pub const AUX_TDC_TRIGSRC_START_SRC_AON_RTC_CH2: u32 = 0;
pub const AUX_TDC_TRIGCNT_CNT_W: u32 = 16;
pub const AUX_TDC_TRIGCNT_CNT_M: u32 = 65535;
pub const AUX_TDC_TRIGCNT_CNT_S: u32 = 0;
pub const AUX_TDC_TRIGCNTLOAD_CNT_W: u32 = 16;
pub const AUX_TDC_TRIGCNTLOAD_CNT_M: u32 = 65535;
pub const AUX_TDC_TRIGCNTLOAD_CNT_S: u32 = 0;
pub const AUX_TDC_TRIGCNTCFG_EN: u32 = 1;
pub const AUX_TDC_TRIGCNTCFG_EN_BITN: u32 = 0;
pub const AUX_TDC_TRIGCNTCFG_EN_M: u32 = 1;
pub const AUX_TDC_TRIGCNTCFG_EN_S: u32 = 0;
pub const AUX_TDC_PRECTL_RESET_N: u32 = 128;
pub const AUX_TDC_PRECTL_RESET_N_BITN: u32 = 7;
pub const AUX_TDC_PRECTL_RESET_N_M: u32 = 128;
pub const AUX_TDC_PRECTL_RESET_N_S: u32 = 7;
pub const AUX_TDC_PRECTL_RATIO: u32 = 64;
pub const AUX_TDC_PRECTL_RATIO_BITN: u32 = 6;
pub const AUX_TDC_PRECTL_RATIO_M: u32 = 64;
pub const AUX_TDC_PRECTL_RATIO_S: u32 = 6;
pub const AUX_TDC_PRECTL_RATIO_DIV64: u32 = 64;
pub const AUX_TDC_PRECTL_RATIO_DIV16: u32 = 0;
pub const AUX_TDC_PRECTL_SRC_W: u32 = 5;
pub const AUX_TDC_PRECTL_SRC_M: u32 = 31;
pub const AUX_TDC_PRECTL_SRC_S: u32 = 0;
pub const AUX_TDC_PRECTL_SRC_ADC_IRQ: u32 = 31;
pub const AUX_TDC_PRECTL_SRC_MCU_EV: u32 = 30;
pub const AUX_TDC_PRECTL_SRC_ACLK_REF: u32 = 29;
pub const AUX_TDC_PRECTL_SRC_AUXIO15: u32 = 28;
pub const AUX_TDC_PRECTL_SRC_AUXIO14: u32 = 27;
pub const AUX_TDC_PRECTL_SRC_AUXIO13: u32 = 26;
pub const AUX_TDC_PRECTL_SRC_AUXIO12: u32 = 25;
pub const AUX_TDC_PRECTL_SRC_AUXIO11: u32 = 24;
pub const AUX_TDC_PRECTL_SRC_AUXIO10: u32 = 23;
pub const AUX_TDC_PRECTL_SRC_AUXIO9: u32 = 22;
pub const AUX_TDC_PRECTL_SRC_AUXIO8: u32 = 21;
pub const AUX_TDC_PRECTL_SRC_AUXIO7: u32 = 20;
pub const AUX_TDC_PRECTL_SRC_AUXIO6: u32 = 19;
pub const AUX_TDC_PRECTL_SRC_AUXIO5: u32 = 18;
pub const AUX_TDC_PRECTL_SRC_AUXIO4: u32 = 17;
pub const AUX_TDC_PRECTL_SRC_AUXIO3: u32 = 16;
pub const AUX_TDC_PRECTL_SRC_AUXIO2: u32 = 15;
pub const AUX_TDC_PRECTL_SRC_AUXIO1: u32 = 14;
pub const AUX_TDC_PRECTL_SRC_AUXIO0: u32 = 13;
pub const AUX_TDC_PRECTL_SRC_AON_PROG_WU: u32 = 12;
pub const AUX_TDC_PRECTL_SRC_AON_SW: u32 = 11;
pub const AUX_TDC_PRECTL_SRC_OBSMUX1: u32 = 10;
pub const AUX_TDC_PRECTL_SRC_OBSMUX0: u32 = 9;
pub const AUX_TDC_PRECTL_SRC_ADC_FIFO_ALMOST_FULL: u32 = 8;
pub const AUX_TDC_PRECTL_SRC_ADC_DONE: u32 = 7;
pub const AUX_TDC_PRECTL_SRC_SMPH_AUTOTAKE_DONE: u32 = 6;
pub const AUX_TDC_PRECTL_SRC_TIMER1_EV: u32 = 5;
pub const AUX_TDC_PRECTL_SRC_TIMER0_EV: u32 = 4;
pub const AUX_TDC_PRECTL_SRC_ISRC_RESET: u32 = 3;
pub const AUX_TDC_PRECTL_SRC_AUX_COMPB: u32 = 2;
pub const AUX_TDC_PRECTL_SRC_AUX_COMPA: u32 = 1;
pub const AUX_TDC_PRECTL_SRC_AON_RTC_CH2: u32 = 0;
pub const AUX_TDC_PRECNT_CNT_W: u32 = 16;
pub const AUX_TDC_PRECNT_CNT_M: u32 = 65535;
pub const AUX_TDC_PRECNT_CNT_S: u32 = 0;
pub const AUX_TDC_BUSY: u32 = 1;
pub const AUX_TDC_TIMEOUT: u32 = 2;
pub const AUX_TDC_DONE: u32 = 4;
pub const AUX_TDC_RUNSYNC: u32 = 1;
pub const AUX_TDC_RUN: u32 = 2;
pub const AUX_TDC_ABORT: u32 = 3;
pub const AUXTDC_WAIT_START: u32 = 0;
pub const AUXTDC_WAIT_START_CNTEN: u32 = 4;
pub const AUXTDC_IDLE: u32 = 6;
pub const AUXTDC_CLRCNT: u32 = 7;
pub const AUXTDC_WAIT_STOP: u32 = 8;
pub const AUXTDC_WAIT_STOP_CNTDOWN: u32 = 12;
pub const AUXTDC_GETRESULTS: u32 = 14;
pub const AUXTDC_POR: u32 = 15;
pub const AUXTDC_WAIT_CLRCNT_DONE: u32 = 22;
pub const AUXTDC_START_FALL: u32 = 30;
pub const AUXTDC_FORCE_STOP: u32 = 46;
pub const AUXTDC_STOPPOL_RIS: u32 = 0;
pub const AUXTDC_STOPPOL_FALL: u32 = 8192;
pub const AUXTDC_STOP_AUXIO0: u32 = 3328;
pub const AUXTDC_STOP_AUXIO1: u32 = 3584;
pub const AUXTDC_STOP_AUXIO2: u32 = 3840;
pub const AUXTDC_STOP_AUXIO3: u32 = 4096;
pub const AUXTDC_STOP_AUXIO4: u32 = 4352;
pub const AUXTDC_STOP_AUXIO5: u32 = 4608;
pub const AUXTDC_STOP_AUXIO6: u32 = 4864;
pub const AUXTDC_STOP_AUXIO7: u32 = 5120;
pub const AUXTDC_STOP_AUXIO8: u32 = 5376;
pub const AUXTDC_STOP_AUXIO9: u32 = 5632;
pub const AUXTDC_STOP_AUXIO10: u32 = 5888;
pub const AUXTDC_STOP_AUXIO11: u32 = 6144;
pub const AUXTDC_STOP_AUXIO12: u32 = 6400;
pub const AUXTDC_STOP_AUXIO13: u32 = 6656;
pub const AUXTDC_STOP_AUXIO14: u32 = 6912;
pub const AUXTDC_STOP_AUXIO15: u32 = 7168;
pub const AUXTDC_STOP_ADC_DONE: u32 = 1792;
pub const AUXTDC_STOP_ADC_FIFO_ALMOST_FULL: u32 = 2048;
pub const AUXTDC_STOP_AON_PROG_WU: u32 = 3072;
pub const AUXTDC_STOP_AON_SW: u32 = 2816;
pub const AUXTDC_STOP_ISRC_RESET: u32 = 768;
pub const AUXTDC_STOP_OBSMUX0: u32 = 2304;
pub const AUXTDC_STOP_OBSMUX1: u32 = 2560;
pub const AUXTDC_STOP_SMPH_AUTOTAKE_DONE: u32 = 1536;
pub const AUXTDC_STOP_TDC_PRE: u32 = 7936;
pub const AUXTDC_STOP_TIMER0_EV: u32 = 1024;
pub const AUXTDC_STOP_TIMER1_EV: u32 = 1280;
pub const AUXTDC_STOP_AON_RTC_CH2: u32 = 0;
pub const AUXTDC_STOP_AUX_COMPA: u32 = 256;
pub const AUXTDC_STOP_AUX_COMPB: u32 = 512;
pub const AUXTDC_STOP_ACLK_REF: u32 = 7424;
pub const AUXTDC_STOP_MCU_EV: u32 = 7680;
pub const AUXTDC_STARTPOL_RIS: u32 = 0;
pub const AUXTDC_STARTPOL_FALL: u32 = 32;
pub const AUXTDC_START_AUXIO0: u32 = 13;
pub const AUXTDC_START_AUXIO1: u32 = 14;
pub const AUXTDC_START_AUXIO2: u32 = 15;
pub const AUXTDC_START_AUXIO3: u32 = 16;
pub const AUXTDC_START_AUXIO4: u32 = 17;
pub const AUXTDC_START_AUXIO5: u32 = 18;
pub const AUXTDC_START_AUXIO6: u32 = 19;
pub const AUXTDC_START_AUXIO7: u32 = 20;
pub const AUXTDC_START_AUXIO8: u32 = 21;
pub const AUXTDC_START_AUXIO9: u32 = 22;
pub const AUXTDC_START_AUXIO10: u32 = 23;
pub const AUXTDC_START_AUXIO11: u32 = 24;
pub const AUXTDC_START_AUXIO12: u32 = 25;
pub const AUXTDC_START_AUXIO13: u32 = 26;
pub const AUXTDC_START_AUXIO14: u32 = 27;
pub const AUXTDC_START_AUXIO15: u32 = 28;
pub const AUXTDC_START_ADC_DONE: u32 = 7;
pub const AUXTDC_START_ADC_FIFO_ALMOST_FULL: u32 = 8;
pub const AUXTDC_START_AON_PROG_WU: u32 = 12;
pub const AUXTDC_START_AON_SW: u32 = 11;
pub const AUXTDC_START_ISRC_RESET: u32 = 3;
pub const AUXTDC_START_OBSMUX0: u32 = 9;
pub const AUXTDC_START_OBSMUX1: u32 = 10;
pub const AUXTDC_START_SMPH_AUTOTAKE_DONE: u32 = 6;
pub const AUXTDC_START_TDC_PRE: u32 = 31;
pub const AUXTDC_START_TIMER0_EV: u32 = 4;
pub const AUXTDC_START_TIMER1_EV: u32 = 5;
pub const AUXTDC_START_AON_RTC_CH2: u32 = 0;
pub const AUXTDC_START_AUX_COMPA: u32 = 1;
pub const AUXTDC_START_AUX_COMPB: u32 = 2;
pub const AUXTDC_START_ACLK_REF: u32 = 29;
pub const AUXTDC_START_MCU_EV: u32 = 30;
pub const AUXTDC_SAT_4096: u32 = 3;
pub const AUXTDC_SAT_8192: u32 = 4;
pub const AUXTDC_SAT_16384: u32 = 5;
pub const AUXTDC_SAT_32768: u32 = 6;
pub const AUXTDC_SAT_65536: u32 = 7;
pub const AUXTDC_SAT_131072: u32 = 8;
pub const AUXTDC_SAT_262144: u32 = 9;
pub const AUXTDC_SAT_524288: u32 = 10;
pub const AUXTDC_SAT_1048576: u32 = 11;
pub const AUXTDC_SAT_2097152: u32 = 12;
pub const AUXTDC_SAT_4194304: u32 = 13;
pub const AUXTDC_SAT_8388608: u32 = 14;
pub const AUXTDC_SAT_16777216: u32 = 15;
pub const AUXTDC_NUM_SAT_VALS: u32 = 16;
pub const AUX_TIMER_O_T0CFG: u32 = 0;
pub const AUX_TIMER_O_T1CFG: u32 = 4;
pub const AUX_TIMER_O_T0CTL: u32 = 8;
pub const AUX_TIMER_O_T0TARGET: u32 = 12;
pub const AUX_TIMER_O_T1TARGET: u32 = 16;
pub const AUX_TIMER_O_T1CTL: u32 = 20;
pub const AUX_TIMER_T0CFG_TICK_SRC_POL: u32 = 8192;
pub const AUX_TIMER_T0CFG_TICK_SRC_POL_BITN: u32 = 13;
pub const AUX_TIMER_T0CFG_TICK_SRC_POL_M: u32 = 8192;
pub const AUX_TIMER_T0CFG_TICK_SRC_POL_S: u32 = 13;
pub const AUX_TIMER_T0CFG_TICK_SRC_POL_FALL: u32 = 8192;
pub const AUX_TIMER_T0CFG_TICK_SRC_POL_RISE: u32 = 0;
pub const AUX_TIMER_T0CFG_TICK_SRC_W: u32 = 5;
pub const AUX_TIMER_T0CFG_TICK_SRC_M: u32 = 7936;
pub const AUX_TIMER_T0CFG_TICK_SRC_S: u32 = 8;
pub const AUX_TIMER_T0CFG_TICK_SRC_ADC_IRQ: u32 = 7936;
pub const AUX_TIMER_T0CFG_TICK_SRC_MCU_EVENT: u32 = 7680;
pub const AUX_TIMER_T0CFG_TICK_SRC_ACLK_REF: u32 = 7424;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO15: u32 = 7168;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO14: u32 = 6912;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO13: u32 = 6656;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO12: u32 = 6400;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO11: u32 = 6144;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO10: u32 = 5888;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO9: u32 = 5632;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO8: u32 = 5376;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO7: u32 = 5120;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO6: u32 = 4864;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO5: u32 = 4608;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO4: u32 = 4352;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO3: u32 = 4096;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO2: u32 = 3840;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO1: u32 = 3584;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUXIO0: u32 = 3328;
pub const AUX_TIMER_T0CFG_TICK_SRC_AON_PROG_WU: u32 = 3072;
pub const AUX_TIMER_T0CFG_TICK_SRC_AON_SW: u32 = 2816;
pub const AUX_TIMER_T0CFG_TICK_SRC_OBSMUX1: u32 = 2560;
pub const AUX_TIMER_T0CFG_TICK_SRC_OBSMUX0: u32 = 2304;
pub const AUX_TIMER_T0CFG_TICK_SRC_RTC_4KHZ: u32 = 2048;
pub const AUX_TIMER_T0CFG_TICK_SRC_ADC_DONE: u32 = 1792;
pub const AUX_TIMER_T0CFG_TICK_SRC_SMPH_AUTOTAKE_DONE: u32 = 1536;
pub const AUX_TIMER_T0CFG_TICK_SRC_TIMER1_EV: u32 = 1280;
pub const AUX_TIMER_T0CFG_TICK_SRC_TDC_DONE: u32 = 768;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUX_COMPB: u32 = 512;
pub const AUX_TIMER_T0CFG_TICK_SRC_AUX_COMPA: u32 = 256;
pub const AUX_TIMER_T0CFG_TICK_SRC_RTC_CH2_EV: u32 = 0;
pub const AUX_TIMER_T0CFG_PRE_W: u32 = 4;
pub const AUX_TIMER_T0CFG_PRE_M: u32 = 240;
pub const AUX_TIMER_T0CFG_PRE_S: u32 = 4;
pub const AUX_TIMER_T0CFG_MODE: u32 = 2;
pub const AUX_TIMER_T0CFG_MODE_BITN: u32 = 1;
pub const AUX_TIMER_T0CFG_MODE_M: u32 = 2;
pub const AUX_TIMER_T0CFG_MODE_S: u32 = 1;
pub const AUX_TIMER_T0CFG_MODE_TICK: u32 = 2;
pub const AUX_TIMER_T0CFG_MODE_CLK: u32 = 0;
pub const AUX_TIMER_T0CFG_RELOAD: u32 = 1;
pub const AUX_TIMER_T0CFG_RELOAD_BITN: u32 = 0;
pub const AUX_TIMER_T0CFG_RELOAD_M: u32 = 1;
pub const AUX_TIMER_T0CFG_RELOAD_S: u32 = 0;
pub const AUX_TIMER_T0CFG_RELOAD_CONT: u32 = 1;
pub const AUX_TIMER_T0CFG_RELOAD_MAN: u32 = 0;
pub const AUX_TIMER_T1CFG_TICK_SRC_POL: u32 = 8192;
pub const AUX_TIMER_T1CFG_TICK_SRC_POL_BITN: u32 = 13;
pub const AUX_TIMER_T1CFG_TICK_SRC_POL_M: u32 = 8192;
pub const AUX_TIMER_T1CFG_TICK_SRC_POL_S: u32 = 13;
pub const AUX_TIMER_T1CFG_TICK_SRC_POL_FALL: u32 = 8192;
pub const AUX_TIMER_T1CFG_TICK_SRC_POL_RISE: u32 = 0;
pub const AUX_TIMER_T1CFG_TICK_SRC_W: u32 = 5;
pub const AUX_TIMER_T1CFG_TICK_SRC_M: u32 = 7936;
pub const AUX_TIMER_T1CFG_TICK_SRC_S: u32 = 8;
pub const AUX_TIMER_T1CFG_TICK_SRC_ADC_IRQ: u32 = 7936;
pub const AUX_TIMER_T1CFG_TICK_SRC_MCU_EVENT: u32 = 7680;
pub const AUX_TIMER_T1CFG_TICK_SRC_ACLK_REF: u32 = 7424;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO15: u32 = 7168;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO14: u32 = 6912;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO13: u32 = 6656;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO12: u32 = 6400;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO11: u32 = 6144;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO10: u32 = 5888;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO9: u32 = 5632;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO8: u32 = 5376;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO7: u32 = 5120;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO6: u32 = 4864;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO5: u32 = 4608;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO4: u32 = 4352;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO3: u32 = 4096;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO2: u32 = 3840;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO1: u32 = 3584;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUXIO0: u32 = 3328;
pub const AUX_TIMER_T1CFG_TICK_SRC_AON_PROG_WU: u32 = 3072;
pub const AUX_TIMER_T1CFG_TICK_SRC_AON_SW: u32 = 2816;
pub const AUX_TIMER_T1CFG_TICK_SRC_OBSMUX1: u32 = 2560;
pub const AUX_TIMER_T1CFG_TICK_SRC_OBSMUX0: u32 = 2304;
pub const AUX_TIMER_T1CFG_TICK_SRC_RTC_4KHZ: u32 = 2048;
pub const AUX_TIMER_T1CFG_TICK_SRC_ADC_DONE: u32 = 1792;
pub const AUX_TIMER_T1CFG_TICK_SRC_SMPH_AUTOTAKE_DONE: u32 = 1536;
pub const AUX_TIMER_T1CFG_TICK_SRC_TIMER0_EV: u32 = 1024;
pub const AUX_TIMER_T1CFG_TICK_SRC_TDC_DONE: u32 = 768;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUX_COMPB: u32 = 512;
pub const AUX_TIMER_T1CFG_TICK_SRC_AUX_COMPA: u32 = 256;
pub const AUX_TIMER_T1CFG_TICK_SRC_RTC_CH2_EV: u32 = 0;
pub const AUX_TIMER_T1CFG_PRE_W: u32 = 4;
pub const AUX_TIMER_T1CFG_PRE_M: u32 = 240;
pub const AUX_TIMER_T1CFG_PRE_S: u32 = 4;
pub const AUX_TIMER_T1CFG_MODE: u32 = 2;
pub const AUX_TIMER_T1CFG_MODE_BITN: u32 = 1;
pub const AUX_TIMER_T1CFG_MODE_M: u32 = 2;
pub const AUX_TIMER_T1CFG_MODE_S: u32 = 1;
pub const AUX_TIMER_T1CFG_MODE_TICK: u32 = 2;
pub const AUX_TIMER_T1CFG_MODE_CLK: u32 = 0;
pub const AUX_TIMER_T1CFG_RELOAD: u32 = 1;
pub const AUX_TIMER_T1CFG_RELOAD_BITN: u32 = 0;
pub const AUX_TIMER_T1CFG_RELOAD_M: u32 = 1;
pub const AUX_TIMER_T1CFG_RELOAD_S: u32 = 0;
pub const AUX_TIMER_T1CFG_RELOAD_CONT: u32 = 1;
pub const AUX_TIMER_T1CFG_RELOAD_MAN: u32 = 0;
pub const AUX_TIMER_T0CTL_EN: u32 = 1;
pub const AUX_TIMER_T0CTL_EN_BITN: u32 = 0;
pub const AUX_TIMER_T0CTL_EN_M: u32 = 1;
pub const AUX_TIMER_T0CTL_EN_S: u32 = 0;
pub const AUX_TIMER_T0TARGET_VALUE_W: u32 = 16;
pub const AUX_TIMER_T0TARGET_VALUE_M: u32 = 65535;
pub const AUX_TIMER_T0TARGET_VALUE_S: u32 = 0;
pub const AUX_TIMER_T1TARGET_VALUE_W: u32 = 8;
pub const AUX_TIMER_T1TARGET_VALUE_M: u32 = 255;
pub const AUX_TIMER_T1TARGET_VALUE_S: u32 = 0;
pub const AUX_TIMER_T1CTL_EN: u32 = 1;
pub const AUX_TIMER_T1CTL_EN_BITN: u32 = 0;
pub const AUX_TIMER_T1CTL_EN_M: u32 = 1;
pub const AUX_TIMER_T1CTL_EN_S: u32 = 0;
pub const AUX_TIMER_CFG_ONE_SHOT: u32 = 0;
pub const AUX_TIMER_CFG_PERIODIC: u32 = 1;
pub const AUX_TIMER_CFG_ONE_SHOT_EDGE_COUNT: u32 = 2;
pub const AUX_TIMER_CFG_PERIODIC_EDGE_COUNT: u32 = 3;
pub const AUX_TIMER_CFG_RISING_EDGE: u32 = 0;
pub const AUX_TIMER_CFG_FALLING_EDGE: u32 = 8192;
pub const AUX_TIMER_CFG_TICK_SRC_RTC_EVENT: u32 = 0;
pub const AUX_TIMER_CFG_TICK_SRC_CMP_A: u32 = 256;
pub const AUX_TIMER_CFG_TICK_SRC_CMP_B: u32 = 512;
pub const AUX_TIMER_CFG_TICK_SRC_TDCDONE: u32 = 768;
pub const AUX_TIMER_CFG_TICK_SRC_TIMER0_EVENT: u32 = 1024;
pub const AUX_TIMER_CFG_TICK_SRC_TIMER1_EVENT: u32 = 1280;
pub const AUX_TIMER_CFG_TICK_SRC_SMPH_RELEASE: u32 = 1536;
pub const AUX_TIMER_CFG_TICK_SRC_ADC_DONE: u32 = 1792;
pub const AUX_TIMER_CFG_TICK_SRC_RTC_4KHZ: u32 = 2048;
pub const AUX_TIMER_CFG_TICK_SRC_OBSMUX0: u32 = 2304;
pub const AUX_TIMER_CFG_TICK_SRC_OBSMUX1: u32 = 2560;
pub const AUX_TIMER_CFG_TICK_SRC_AON_SW: u32 = 2816;
pub const AUX_TIMER_CFG_TICK_SRC_AON_PROG_WU: u32 = 3072;
pub const AUX_TIMER_CFG_TICK_SRC_AIO0: u32 = 3328;
pub const AUX_TIMER_CFG_TICK_SRC_AIO1: u32 = 3584;
pub const AUX_TIMER_CFG_TICK_SRC_AIO2: u32 = 3840;
pub const AUX_TIMER_CFG_TICK_SRC_AIO3: u32 = 4096;
pub const AUX_TIMER_CFG_TICK_SRC_AIO4: u32 = 4352;
pub const AUX_TIMER_CFG_TICK_SRC_AIO5: u32 = 4608;
pub const AUX_TIMER_CFG_TICK_SRC_AIO6: u32 = 4864;
pub const AUX_TIMER_CFG_TICK_SRC_AIO7: u32 = 5120;
pub const AUX_TIMER_CFG_TICK_SRC_AIO8: u32 = 5376;
pub const AUX_TIMER_CFG_TICK_SRC_AIO9: u32 = 5632;
pub const AUX_TIMER_CFG_TICK_SRC_AIO10: u32 = 5888;
pub const AUX_TIMER_CFG_TICK_SRC_AIO11: u32 = 6144;
pub const AUX_TIMER_CFG_TICK_SRC_AIO12: u32 = 6400;
pub const AUX_TIMER_CFG_TICK_SRC_AIO13: u32 = 6656;
pub const AUX_TIMER_CFG_TICK_SRC_AIO14: u32 = 6912;
pub const AUX_TIMER_CFG_TICK_SRC_AIO15: u32 = 7168;
pub const AUX_TIMER_CFG_TICK_SRC_ACLK_REF: u32 = 7424;
pub const AUX_TIMER_CFG_TICK_SRC_MCU_EVENT: u32 = 7680;
pub const AUX_TIMER_CFG_TICK_SRC_ADC_IRQ: u32 = 7936;
pub const AUX_TIMER_0: u32 = 65535;
pub const AUX_TIMER_1: u32 = 16711680;
pub const AUX_TIMER_BOTH: u32 = 16777215;
pub const AUX_TIMER_PRESCALE_DIV_1: u32 = 0;
pub const AUX_TIMER_PRESCALE_DIV_2: u32 = 1;
pub const AUX_TIMER_PRESCALE_DIV_4: u32 = 2;
pub const AUX_TIMER_PRESCALE_DIV_8: u32 = 3;
pub const AUX_TIMER_PRESCALE_DIV_16: u32 = 4;
pub const AUX_TIMER_PRESCALE_DIV_32: u32 = 5;
pub const AUX_TIMER_PRESCALE_DIV_64: u32 = 6;
pub const AUX_TIMER_PRESCALE_DIV_128: u32 = 7;
pub const AUX_TIMER_PRESCALE_DIV_256: u32 = 8;
pub const AUX_TIMER_PRESCALE_DIV_512: u32 = 9;
pub const AUX_TIMER_PRESCALE_DIV_1028: u32 = 10;
pub const AUX_TIMER_PRESCALE_DIV_2048: u32 = 11;
pub const AUX_TIMER_PRESCALE_DIV_4096: u32 = 12;
pub const AUX_TIMER_PRESCALE_DIV_8192: u32 = 13;
pub const AUX_TIMER_PRESCALE_DIV_16384: u32 = 14;
pub const AUX_TIMER_PRESCALE_DIV_32768: u32 = 15;
pub const AUX_WUC_O_MODCLKEN0: u32 = 0;
pub const AUX_WUC_O_PWROFFREQ: u32 = 4;
pub const AUX_WUC_O_PWRDWNREQ: u32 = 8;
pub const AUX_WUC_O_PWRDWNACK: u32 = 12;
pub const AUX_WUC_O_CLKLFREQ: u32 = 16;
pub const AUX_WUC_O_CLKLFACK: u32 = 20;
pub const AUX_WUC_O_WUEVFLAGS: u32 = 40;
pub const AUX_WUC_O_WUEVCLR: u32 = 44;
pub const AUX_WUC_O_ADCCLKCTL: u32 = 48;
pub const AUX_WUC_O_TDCCLKCTL: u32 = 52;
pub const AUX_WUC_O_REFCLKCTL: u32 = 56;
pub const AUX_WUC_O_RTCSUBSECINC0: u32 = 60;
pub const AUX_WUC_O_RTCSUBSECINC1: u32 = 64;
pub const AUX_WUC_O_RTCSUBSECINCCTL: u32 = 68;
pub const AUX_WUC_O_MCUBUSCTL: u32 = 72;
pub const AUX_WUC_O_MCUBUSSTAT: u32 = 76;
pub const AUX_WUC_O_AONCTLSTAT: u32 = 80;
pub const AUX_WUC_O_AUXIOLATCH: u32 = 84;
pub const AUX_WUC_O_MODCLKEN1: u32 = 92;
pub const AUX_WUC_MODCLKEN0_AUX_ADI4: u32 = 128;
pub const AUX_WUC_MODCLKEN0_AUX_ADI4_BITN: u32 = 7;
pub const AUX_WUC_MODCLKEN0_AUX_ADI4_M: u32 = 128;
pub const AUX_WUC_MODCLKEN0_AUX_ADI4_S: u32 = 7;
pub const AUX_WUC_MODCLKEN0_AUX_ADI4_EN: u32 = 128;
pub const AUX_WUC_MODCLKEN0_AUX_ADI4_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN0_AUX_DDI0_OSC: u32 = 64;
pub const AUX_WUC_MODCLKEN0_AUX_DDI0_OSC_BITN: u32 = 6;
pub const AUX_WUC_MODCLKEN0_AUX_DDI0_OSC_M: u32 = 64;
pub const AUX_WUC_MODCLKEN0_AUX_DDI0_OSC_S: u32 = 6;
pub const AUX_WUC_MODCLKEN0_AUX_DDI0_OSC_EN: u32 = 64;
pub const AUX_WUC_MODCLKEN0_AUX_DDI0_OSC_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN0_TDC: u32 = 32;
pub const AUX_WUC_MODCLKEN0_TDC_BITN: u32 = 5;
pub const AUX_WUC_MODCLKEN0_TDC_M: u32 = 32;
pub const AUX_WUC_MODCLKEN0_TDC_S: u32 = 5;
pub const AUX_WUC_MODCLKEN0_TDC_EN: u32 = 32;
pub const AUX_WUC_MODCLKEN0_TDC_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN0_ANAIF: u32 = 16;
pub const AUX_WUC_MODCLKEN0_ANAIF_BITN: u32 = 4;
pub const AUX_WUC_MODCLKEN0_ANAIF_M: u32 = 16;
pub const AUX_WUC_MODCLKEN0_ANAIF_S: u32 = 4;
pub const AUX_WUC_MODCLKEN0_ANAIF_EN: u32 = 16;
pub const AUX_WUC_MODCLKEN0_ANAIF_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN0_TIMER: u32 = 8;
pub const AUX_WUC_MODCLKEN0_TIMER_BITN: u32 = 3;
pub const AUX_WUC_MODCLKEN0_TIMER_M: u32 = 8;
pub const AUX_WUC_MODCLKEN0_TIMER_S: u32 = 3;
pub const AUX_WUC_MODCLKEN0_TIMER_EN: u32 = 8;
pub const AUX_WUC_MODCLKEN0_TIMER_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN0_AIODIO1: u32 = 4;
pub const AUX_WUC_MODCLKEN0_AIODIO1_BITN: u32 = 2;
pub const AUX_WUC_MODCLKEN0_AIODIO1_M: u32 = 4;
pub const AUX_WUC_MODCLKEN0_AIODIO1_S: u32 = 2;
pub const AUX_WUC_MODCLKEN0_AIODIO1_EN: u32 = 4;
pub const AUX_WUC_MODCLKEN0_AIODIO1_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN0_AIODIO0: u32 = 2;
pub const AUX_WUC_MODCLKEN0_AIODIO0_BITN: u32 = 1;
pub const AUX_WUC_MODCLKEN0_AIODIO0_M: u32 = 2;
pub const AUX_WUC_MODCLKEN0_AIODIO0_S: u32 = 1;
pub const AUX_WUC_MODCLKEN0_AIODIO0_EN: u32 = 2;
pub const AUX_WUC_MODCLKEN0_AIODIO0_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN0_SMPH: u32 = 1;
pub const AUX_WUC_MODCLKEN0_SMPH_BITN: u32 = 0;
pub const AUX_WUC_MODCLKEN0_SMPH_M: u32 = 1;
pub const AUX_WUC_MODCLKEN0_SMPH_S: u32 = 0;
pub const AUX_WUC_MODCLKEN0_SMPH_EN: u32 = 1;
pub const AUX_WUC_MODCLKEN0_SMPH_DIS: u32 = 0;
pub const AUX_WUC_PWROFFREQ_REQ: u32 = 1;
pub const AUX_WUC_PWROFFREQ_REQ_BITN: u32 = 0;
pub const AUX_WUC_PWROFFREQ_REQ_M: u32 = 1;
pub const AUX_WUC_PWROFFREQ_REQ_S: u32 = 0;
pub const AUX_WUC_PWRDWNREQ_REQ: u32 = 1;
pub const AUX_WUC_PWRDWNREQ_REQ_BITN: u32 = 0;
pub const AUX_WUC_PWRDWNREQ_REQ_M: u32 = 1;
pub const AUX_WUC_PWRDWNREQ_REQ_S: u32 = 0;
pub const AUX_WUC_PWRDWNACK_ACK: u32 = 1;
pub const AUX_WUC_PWRDWNACK_ACK_BITN: u32 = 0;
pub const AUX_WUC_PWRDWNACK_ACK_M: u32 = 1;
pub const AUX_WUC_PWRDWNACK_ACK_S: u32 = 0;
pub const AUX_WUC_CLKLFREQ_REQ: u32 = 1;
pub const AUX_WUC_CLKLFREQ_REQ_BITN: u32 = 0;
pub const AUX_WUC_CLKLFREQ_REQ_M: u32 = 1;
pub const AUX_WUC_CLKLFREQ_REQ_S: u32 = 0;
pub const AUX_WUC_CLKLFACK_ACK: u32 = 1;
pub const AUX_WUC_CLKLFACK_ACK_BITN: u32 = 0;
pub const AUX_WUC_CLKLFACK_ACK_M: u32 = 1;
pub const AUX_WUC_CLKLFACK_ACK_S: u32 = 0;
pub const AUX_WUC_WUEVFLAGS_AON_RTC_CH2: u32 = 4;
pub const AUX_WUC_WUEVFLAGS_AON_RTC_CH2_BITN: u32 = 2;
pub const AUX_WUC_WUEVFLAGS_AON_RTC_CH2_M: u32 = 4;
pub const AUX_WUC_WUEVFLAGS_AON_RTC_CH2_S: u32 = 2;
pub const AUX_WUC_WUEVFLAGS_AON_SW: u32 = 2;
pub const AUX_WUC_WUEVFLAGS_AON_SW_BITN: u32 = 1;
pub const AUX_WUC_WUEVFLAGS_AON_SW_M: u32 = 2;
pub const AUX_WUC_WUEVFLAGS_AON_SW_S: u32 = 1;
pub const AUX_WUC_WUEVFLAGS_AON_PROG_WU: u32 = 1;
pub const AUX_WUC_WUEVFLAGS_AON_PROG_WU_BITN: u32 = 0;
pub const AUX_WUC_WUEVFLAGS_AON_PROG_WU_M: u32 = 1;
pub const AUX_WUC_WUEVFLAGS_AON_PROG_WU_S: u32 = 0;
pub const AUX_WUC_WUEVCLR_AON_RTC_CH2: u32 = 4;
pub const AUX_WUC_WUEVCLR_AON_RTC_CH2_BITN: u32 = 2;
pub const AUX_WUC_WUEVCLR_AON_RTC_CH2_M: u32 = 4;
pub const AUX_WUC_WUEVCLR_AON_RTC_CH2_S: u32 = 2;
pub const AUX_WUC_WUEVCLR_AON_SW: u32 = 2;
pub const AUX_WUC_WUEVCLR_AON_SW_BITN: u32 = 1;
pub const AUX_WUC_WUEVCLR_AON_SW_M: u32 = 2;
pub const AUX_WUC_WUEVCLR_AON_SW_S: u32 = 1;
pub const AUX_WUC_WUEVCLR_AON_PROG_WU: u32 = 1;
pub const AUX_WUC_WUEVCLR_AON_PROG_WU_BITN: u32 = 0;
pub const AUX_WUC_WUEVCLR_AON_PROG_WU_M: u32 = 1;
pub const AUX_WUC_WUEVCLR_AON_PROG_WU_S: u32 = 0;
pub const AUX_WUC_ADCCLKCTL_ACK: u32 = 2;
pub const AUX_WUC_ADCCLKCTL_ACK_BITN: u32 = 1;
pub const AUX_WUC_ADCCLKCTL_ACK_M: u32 = 2;
pub const AUX_WUC_ADCCLKCTL_ACK_S: u32 = 1;
pub const AUX_WUC_ADCCLKCTL_REQ: u32 = 1;
pub const AUX_WUC_ADCCLKCTL_REQ_BITN: u32 = 0;
pub const AUX_WUC_ADCCLKCTL_REQ_M: u32 = 1;
pub const AUX_WUC_ADCCLKCTL_REQ_S: u32 = 0;
pub const AUX_WUC_TDCCLKCTL_ACK: u32 = 2;
pub const AUX_WUC_TDCCLKCTL_ACK_BITN: u32 = 1;
pub const AUX_WUC_TDCCLKCTL_ACK_M: u32 = 2;
pub const AUX_WUC_TDCCLKCTL_ACK_S: u32 = 1;
pub const AUX_WUC_TDCCLKCTL_REQ: u32 = 1;
pub const AUX_WUC_TDCCLKCTL_REQ_BITN: u32 = 0;
pub const AUX_WUC_TDCCLKCTL_REQ_M: u32 = 1;
pub const AUX_WUC_TDCCLKCTL_REQ_S: u32 = 0;
pub const AUX_WUC_REFCLKCTL_ACK: u32 = 2;
pub const AUX_WUC_REFCLKCTL_ACK_BITN: u32 = 1;
pub const AUX_WUC_REFCLKCTL_ACK_M: u32 = 2;
pub const AUX_WUC_REFCLKCTL_ACK_S: u32 = 1;
pub const AUX_WUC_REFCLKCTL_REQ: u32 = 1;
pub const AUX_WUC_REFCLKCTL_REQ_BITN: u32 = 0;
pub const AUX_WUC_REFCLKCTL_REQ_M: u32 = 1;
pub const AUX_WUC_REFCLKCTL_REQ_S: u32 = 0;
pub const AUX_WUC_RTCSUBSECINC0_INC15_0_W: u32 = 16;
pub const AUX_WUC_RTCSUBSECINC0_INC15_0_M: u32 = 65535;
pub const AUX_WUC_RTCSUBSECINC0_INC15_0_S: u32 = 0;
pub const AUX_WUC_RTCSUBSECINC1_INC23_16_W: u32 = 8;
pub const AUX_WUC_RTCSUBSECINC1_INC23_16_M: u32 = 255;
pub const AUX_WUC_RTCSUBSECINC1_INC23_16_S: u32 = 0;
pub const AUX_WUC_RTCSUBSECINCCTL_UPD_ACK: u32 = 2;
pub const AUX_WUC_RTCSUBSECINCCTL_UPD_ACK_BITN: u32 = 1;
pub const AUX_WUC_RTCSUBSECINCCTL_UPD_ACK_M: u32 = 2;
pub const AUX_WUC_RTCSUBSECINCCTL_UPD_ACK_S: u32 = 1;
pub const AUX_WUC_RTCSUBSECINCCTL_UPD_REQ: u32 = 1;
pub const AUX_WUC_RTCSUBSECINCCTL_UPD_REQ_BITN: u32 = 0;
pub const AUX_WUC_RTCSUBSECINCCTL_UPD_REQ_M: u32 = 1;
pub const AUX_WUC_RTCSUBSECINCCTL_UPD_REQ_S: u32 = 0;
pub const AUX_WUC_MCUBUSCTL_DISCONNECT_REQ: u32 = 1;
pub const AUX_WUC_MCUBUSCTL_DISCONNECT_REQ_BITN: u32 = 0;
pub const AUX_WUC_MCUBUSCTL_DISCONNECT_REQ_M: u32 = 1;
pub const AUX_WUC_MCUBUSCTL_DISCONNECT_REQ_S: u32 = 0;
pub const AUX_WUC_MCUBUSSTAT_DISCONNECTED: u32 = 2;
pub const AUX_WUC_MCUBUSSTAT_DISCONNECTED_BITN: u32 = 1;
pub const AUX_WUC_MCUBUSSTAT_DISCONNECTED_M: u32 = 2;
pub const AUX_WUC_MCUBUSSTAT_DISCONNECTED_S: u32 = 1;
pub const AUX_WUC_MCUBUSSTAT_DISCONNECT_ACK: u32 = 1;
pub const AUX_WUC_MCUBUSSTAT_DISCONNECT_ACK_BITN: u32 = 0;
pub const AUX_WUC_MCUBUSSTAT_DISCONNECT_ACK_M: u32 = 1;
pub const AUX_WUC_MCUBUSSTAT_DISCONNECT_ACK_S: u32 = 0;
pub const AUX_WUC_AONCTLSTAT_AUX_FORCE_ON: u32 = 2;
pub const AUX_WUC_AONCTLSTAT_AUX_FORCE_ON_BITN: u32 = 1;
pub const AUX_WUC_AONCTLSTAT_AUX_FORCE_ON_M: u32 = 2;
pub const AUX_WUC_AONCTLSTAT_AUX_FORCE_ON_S: u32 = 1;
pub const AUX_WUC_AONCTLSTAT_SCE_RUN_EN: u32 = 1;
pub const AUX_WUC_AONCTLSTAT_SCE_RUN_EN_BITN: u32 = 0;
pub const AUX_WUC_AONCTLSTAT_SCE_RUN_EN_M: u32 = 1;
pub const AUX_WUC_AONCTLSTAT_SCE_RUN_EN_S: u32 = 0;
pub const AUX_WUC_AUXIOLATCH_EN: u32 = 1;
pub const AUX_WUC_AUXIOLATCH_EN_BITN: u32 = 0;
pub const AUX_WUC_AUXIOLATCH_EN_M: u32 = 1;
pub const AUX_WUC_AUXIOLATCH_EN_S: u32 = 0;
pub const AUX_WUC_AUXIOLATCH_EN_TRANSP: u32 = 1;
pub const AUX_WUC_AUXIOLATCH_EN_STATIC: u32 = 0;
pub const AUX_WUC_MODCLKEN1_AUX_ADI4: u32 = 128;
pub const AUX_WUC_MODCLKEN1_AUX_ADI4_BITN: u32 = 7;
pub const AUX_WUC_MODCLKEN1_AUX_ADI4_M: u32 = 128;
pub const AUX_WUC_MODCLKEN1_AUX_ADI4_S: u32 = 7;
pub const AUX_WUC_MODCLKEN1_AUX_ADI4_EN: u32 = 128;
pub const AUX_WUC_MODCLKEN1_AUX_ADI4_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN1_AUX_DDI0_OSC: u32 = 64;
pub const AUX_WUC_MODCLKEN1_AUX_DDI0_OSC_BITN: u32 = 6;
pub const AUX_WUC_MODCLKEN1_AUX_DDI0_OSC_M: u32 = 64;
pub const AUX_WUC_MODCLKEN1_AUX_DDI0_OSC_S: u32 = 6;
pub const AUX_WUC_MODCLKEN1_AUX_DDI0_OSC_EN: u32 = 64;
pub const AUX_WUC_MODCLKEN1_AUX_DDI0_OSC_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN1_ANAIF: u32 = 16;
pub const AUX_WUC_MODCLKEN1_ANAIF_BITN: u32 = 4;
pub const AUX_WUC_MODCLKEN1_ANAIF_M: u32 = 16;
pub const AUX_WUC_MODCLKEN1_ANAIF_S: u32 = 4;
pub const AUX_WUC_MODCLKEN1_ANAIF_EN: u32 = 16;
pub const AUX_WUC_MODCLKEN1_ANAIF_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN1_TIMER: u32 = 8;
pub const AUX_WUC_MODCLKEN1_TIMER_BITN: u32 = 3;
pub const AUX_WUC_MODCLKEN1_TIMER_M: u32 = 8;
pub const AUX_WUC_MODCLKEN1_TIMER_S: u32 = 3;
pub const AUX_WUC_MODCLKEN1_TIMER_EN: u32 = 8;
pub const AUX_WUC_MODCLKEN1_TIMER_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN1_AIODIO1: u32 = 4;
pub const AUX_WUC_MODCLKEN1_AIODIO1_BITN: u32 = 2;
pub const AUX_WUC_MODCLKEN1_AIODIO1_M: u32 = 4;
pub const AUX_WUC_MODCLKEN1_AIODIO1_S: u32 = 2;
pub const AUX_WUC_MODCLKEN1_AIODIO1_EN: u32 = 4;
pub const AUX_WUC_MODCLKEN1_AIODIO1_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN1_AIODIO0: u32 = 2;
pub const AUX_WUC_MODCLKEN1_AIODIO0_BITN: u32 = 1;
pub const AUX_WUC_MODCLKEN1_AIODIO0_M: u32 = 2;
pub const AUX_WUC_MODCLKEN1_AIODIO0_S: u32 = 1;
pub const AUX_WUC_MODCLKEN1_AIODIO0_EN: u32 = 2;
pub const AUX_WUC_MODCLKEN1_AIODIO0_DIS: u32 = 0;
pub const AUX_WUC_MODCLKEN1_SMPH: u32 = 1;
pub const AUX_WUC_MODCLKEN1_SMPH_BITN: u32 = 0;
pub const AUX_WUC_MODCLKEN1_SMPH_M: u32 = 1;
pub const AUX_WUC_MODCLKEN1_SMPH_S: u32 = 0;
pub const AUX_WUC_MODCLKEN1_SMPH_EN: u32 = 1;
pub const AUX_WUC_MODCLKEN1_SMPH_DIS: u32 = 0;
pub const AUX_WUC_POWER_OFF: u32 = 1;
pub const AUX_WUC_POWER_DOWN: u32 = 2;
pub const AUX_WUC_POWER_ACTIVE: u32 = 4;
pub const AUX_WUC_SMPH_CLOCK: u32 = 1;
pub const AUX_WUC_AIODIO0_CLOCK: u32 = 2;
pub const AUX_WUC_AIODIO1_CLOCK: u32 = 4;
pub const AUX_WUC_TIMER_CLOCK: u32 = 8;
pub const AUX_WUC_ANAIF_CLOCK: u32 = 16;
pub const AUX_WUC_TDCIF_CLOCK: u32 = 32;
pub const AUX_WUC_OSCCTRL_CLOCK: u32 = 64;
pub const AUX_WUC_ADI_CLOCK: u32 = 128;
pub const AUX_WUC_MODCLK_MASK: u32 = 255;
pub const AUX_WUC_TDC_CLOCK: u32 = 256;
pub const AUX_WUC_ADC_CLOCK: u32 = 512;
pub const AUX_WUC_REF_CLOCK: u32 = 1024;
pub const AUX_WUC_CLOCK_OFF: u32 = 0;
pub const AUX_WUC_CLOCK_UNSTABLE: u32 = 1;
pub const AUX_WUC_CLOCK_READY: u32 = 17;
pub const AUX_WUC_CLOCK_HIFREQ: u32 = 0;
pub const AUX_WUC_CLOCK_LOFREQ: u32 = 1;
pub const CCFG_O_EXT_LF_CLK: u32 = 4008;
pub const CCFG_O_MODE_CONF_1: u32 = 4012;
pub const CCFG_O_SIZE_AND_DIS_FLAGS: u32 = 4016;
pub const CCFG_O_MODE_CONF: u32 = 4020;
pub const CCFG_O_VOLT_LOAD_0: u32 = 4024;
pub const CCFG_O_VOLT_LOAD_1: u32 = 4028;
pub const CCFG_O_RTC_OFFSET: u32 = 4032;
pub const CCFG_O_FREQ_OFFSET: u32 = 4036;
pub const CCFG_O_IEEE_MAC_0: u32 = 4040;
pub const CCFG_O_IEEE_MAC_1: u32 = 4044;
pub const CCFG_O_IEEE_BLE_0: u32 = 4048;
pub const CCFG_O_IEEE_BLE_1: u32 = 4052;
pub const CCFG_O_BL_CONFIG: u32 = 4056;
pub const CCFG_O_ERASE_CONF: u32 = 4060;
pub const CCFG_O_CCFG_TI_OPTIONS: u32 = 4064;
pub const CCFG_O_CCFG_TAP_DAP_0: u32 = 4068;
pub const CCFG_O_CCFG_TAP_DAP_1: u32 = 4072;
pub const CCFG_O_IMAGE_VALID_CONF: u32 = 4076;
pub const CCFG_O_CCFG_PROT_31_0: u32 = 4080;
pub const CCFG_O_CCFG_PROT_63_32: u32 = 4084;
pub const CCFG_O_CCFG_PROT_95_64: u32 = 4088;
pub const CCFG_O_CCFG_PROT_127_96: u32 = 4092;
pub const CCFG_EXT_LF_CLK_DIO_W: u32 = 8;
pub const CCFG_EXT_LF_CLK_DIO_M: u32 = 4278190080;
pub const CCFG_EXT_LF_CLK_DIO_S: u32 = 24;
pub const CCFG_EXT_LF_CLK_RTC_INCREMENT_W: u32 = 24;
pub const CCFG_EXT_LF_CLK_RTC_INCREMENT_M: u32 = 16777215;
pub const CCFG_EXT_LF_CLK_RTC_INCREMENT_S: u32 = 0;
pub const CCFG_MODE_CONF_1_ALT_DCDC_VMIN_W: u32 = 4;
pub const CCFG_MODE_CONF_1_ALT_DCDC_VMIN_M: u32 = 15728640;
pub const CCFG_MODE_CONF_1_ALT_DCDC_VMIN_S: u32 = 20;
pub const CCFG_MODE_CONF_1_ALT_DCDC_DITHER_EN: u32 = 524288;
pub const CCFG_MODE_CONF_1_ALT_DCDC_DITHER_EN_BITN: u32 = 19;
pub const CCFG_MODE_CONF_1_ALT_DCDC_DITHER_EN_M: u32 = 524288;
pub const CCFG_MODE_CONF_1_ALT_DCDC_DITHER_EN_S: u32 = 19;
pub const CCFG_MODE_CONF_1_ALT_DCDC_IPEAK_W: u32 = 3;
pub const CCFG_MODE_CONF_1_ALT_DCDC_IPEAK_M: u32 = 458752;
pub const CCFG_MODE_CONF_1_ALT_DCDC_IPEAK_S: u32 = 16;
pub const CCFG_MODE_CONF_1_DELTA_IBIAS_INIT_W: u32 = 4;
pub const CCFG_MODE_CONF_1_DELTA_IBIAS_INIT_M: u32 = 61440;
pub const CCFG_MODE_CONF_1_DELTA_IBIAS_INIT_S: u32 = 12;
pub const CCFG_MODE_CONF_1_DELTA_IBIAS_OFFSET_W: u32 = 4;
pub const CCFG_MODE_CONF_1_DELTA_IBIAS_OFFSET_M: u32 = 3840;
pub const CCFG_MODE_CONF_1_DELTA_IBIAS_OFFSET_S: u32 = 8;
pub const CCFG_MODE_CONF_1_XOSC_MAX_START_W: u32 = 8;
pub const CCFG_MODE_CONF_1_XOSC_MAX_START_M: u32 = 255;
pub const CCFG_MODE_CONF_1_XOSC_MAX_START_S: u32 = 0;
pub const CCFG_SIZE_AND_DIS_FLAGS_SIZE_OF_CCFG_W: u32 = 16;
pub const CCFG_SIZE_AND_DIS_FLAGS_SIZE_OF_CCFG_M: u32 = 4294901760;
pub const CCFG_SIZE_AND_DIS_FLAGS_SIZE_OF_CCFG_S: u32 = 16;
pub const CCFG_SIZE_AND_DIS_FLAGS_DISABLE_FLAGS_W: u32 = 12;
pub const CCFG_SIZE_AND_DIS_FLAGS_DISABLE_FLAGS_M: u32 = 65520;
pub const CCFG_SIZE_AND_DIS_FLAGS_DISABLE_FLAGS_S: u32 = 4;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_TCXO: u32 = 8;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_TCXO_BITN: u32 = 3;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_TCXO_M: u32 = 8;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_TCXO_S: u32 = 3;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_GPRAM: u32 = 4;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_GPRAM_BITN: u32 = 2;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_GPRAM_M: u32 = 4;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_GPRAM_S: u32 = 2;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_ALT_DCDC_SETTING: u32 = 2;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_ALT_DCDC_SETTING_BITN: u32 = 1;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_ALT_DCDC_SETTING_M: u32 = 2;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_ALT_DCDC_SETTING_S: u32 = 1;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_XOSC_OVR: u32 = 1;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_XOSC_OVR_BITN: u32 = 0;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_XOSC_OVR_M: u32 = 1;
pub const CCFG_SIZE_AND_DIS_FLAGS_DIS_XOSC_OVR_S: u32 = 0;
pub const CCFG_MODE_CONF_VDDR_TRIM_SLEEP_DELTA_W: u32 = 4;
pub const CCFG_MODE_CONF_VDDR_TRIM_SLEEP_DELTA_M: u32 = 4026531840;
pub const CCFG_MODE_CONF_VDDR_TRIM_SLEEP_DELTA_S: u32 = 28;
pub const CCFG_MODE_CONF_DCDC_RECHARGE: u32 = 134217728;
pub const CCFG_MODE_CONF_DCDC_RECHARGE_BITN: u32 = 27;
pub const CCFG_MODE_CONF_DCDC_RECHARGE_M: u32 = 134217728;
pub const CCFG_MODE_CONF_DCDC_RECHARGE_S: u32 = 27;
pub const CCFG_MODE_CONF_DCDC_ACTIVE: u32 = 67108864;
pub const CCFG_MODE_CONF_DCDC_ACTIVE_BITN: u32 = 26;
pub const CCFG_MODE_CONF_DCDC_ACTIVE_M: u32 = 67108864;
pub const CCFG_MODE_CONF_DCDC_ACTIVE_S: u32 = 26;
pub const CCFG_MODE_CONF_VDDR_EXT_LOAD: u32 = 33554432;
pub const CCFG_MODE_CONF_VDDR_EXT_LOAD_BITN: u32 = 25;
pub const CCFG_MODE_CONF_VDDR_EXT_LOAD_M: u32 = 33554432;
pub const CCFG_MODE_CONF_VDDR_EXT_LOAD_S: u32 = 25;
pub const CCFG_MODE_CONF_VDDS_BOD_LEVEL: u32 = 16777216;
pub const CCFG_MODE_CONF_VDDS_BOD_LEVEL_BITN: u32 = 24;
pub const CCFG_MODE_CONF_VDDS_BOD_LEVEL_M: u32 = 16777216;
pub const CCFG_MODE_CONF_VDDS_BOD_LEVEL_S: u32 = 24;
pub const CCFG_MODE_CONF_SCLK_LF_OPTION_W: u32 = 2;
pub const CCFG_MODE_CONF_SCLK_LF_OPTION_M: u32 = 12582912;
pub const CCFG_MODE_CONF_SCLK_LF_OPTION_S: u32 = 22;
pub const CCFG_MODE_CONF_SCLK_LF_OPTION_RCOSC_LF: u32 = 12582912;
pub const CCFG_MODE_CONF_SCLK_LF_OPTION_XOSC_LF: u32 = 8388608;
pub const CCFG_MODE_CONF_SCLK_LF_OPTION_EXTERNAL_LF: u32 = 4194304;
pub const CCFG_MODE_CONF_SCLK_LF_OPTION_XOSC_HF_DLF: u32 = 0;
pub const CCFG_MODE_CONF_VDDR_TRIM_SLEEP_TC: u32 = 2097152;
pub const CCFG_MODE_CONF_VDDR_TRIM_SLEEP_TC_BITN: u32 = 21;
pub const CCFG_MODE_CONF_VDDR_TRIM_SLEEP_TC_M: u32 = 2097152;
pub const CCFG_MODE_CONF_VDDR_TRIM_SLEEP_TC_S: u32 = 21;
pub const CCFG_MODE_CONF_RTC_COMP: u32 = 1048576;
pub const CCFG_MODE_CONF_RTC_COMP_BITN: u32 = 20;
pub const CCFG_MODE_CONF_RTC_COMP_M: u32 = 1048576;
pub const CCFG_MODE_CONF_RTC_COMP_S: u32 = 20;
pub const CCFG_MODE_CONF_XOSC_FREQ_W: u32 = 2;
pub const CCFG_MODE_CONF_XOSC_FREQ_M: u32 = 786432;
pub const CCFG_MODE_CONF_XOSC_FREQ_S: u32 = 18;
pub const CCFG_MODE_CONF_XOSC_FREQ_24M: u32 = 786432;
pub const CCFG_MODE_CONF_XOSC_FREQ_48M: u32 = 524288;
pub const CCFG_MODE_CONF_XOSC_FREQ_HPOSC: u32 = 262144;
pub const CCFG_MODE_CONF_XOSC_CAP_MOD: u32 = 131072;
pub const CCFG_MODE_CONF_XOSC_CAP_MOD_BITN: u32 = 17;
pub const CCFG_MODE_CONF_XOSC_CAP_MOD_M: u32 = 131072;
pub const CCFG_MODE_CONF_XOSC_CAP_MOD_S: u32 = 17;
pub const CCFG_MODE_CONF_HF_COMP: u32 = 65536;
pub const CCFG_MODE_CONF_HF_COMP_BITN: u32 = 16;
pub const CCFG_MODE_CONF_HF_COMP_M: u32 = 65536;
pub const CCFG_MODE_CONF_HF_COMP_S: u32 = 16;
pub const CCFG_MODE_CONF_XOSC_CAPARRAY_DELTA_W: u32 = 8;
pub const CCFG_MODE_CONF_XOSC_CAPARRAY_DELTA_M: u32 = 65280;
pub const CCFG_MODE_CONF_XOSC_CAPARRAY_DELTA_S: u32 = 8;
pub const CCFG_MODE_CONF_VDDR_CAP_W: u32 = 8;
pub const CCFG_MODE_CONF_VDDR_CAP_M: u32 = 255;
pub const CCFG_MODE_CONF_VDDR_CAP_S: u32 = 0;
pub const CCFG_VOLT_LOAD_0_VDDR_EXT_TP45_W: u32 = 8;
pub const CCFG_VOLT_LOAD_0_VDDR_EXT_TP45_M: u32 = 4278190080;
pub const CCFG_VOLT_LOAD_0_VDDR_EXT_TP45_S: u32 = 24;
pub const CCFG_VOLT_LOAD_0_VDDR_EXT_TP25_W: u32 = 8;
pub const CCFG_VOLT_LOAD_0_VDDR_EXT_TP25_M: u32 = 16711680;
pub const CCFG_VOLT_LOAD_0_VDDR_EXT_TP25_S: u32 = 16;
pub const CCFG_VOLT_LOAD_0_VDDR_EXT_TP5_W: u32 = 8;
pub const CCFG_VOLT_LOAD_0_VDDR_EXT_TP5_M: u32 = 65280;
pub const CCFG_VOLT_LOAD_0_VDDR_EXT_TP5_S: u32 = 8;
pub const CCFG_VOLT_LOAD_0_VDDR_EXT_TM15_W: u32 = 8;
pub const CCFG_VOLT_LOAD_0_VDDR_EXT_TM15_M: u32 = 255;
pub const CCFG_VOLT_LOAD_0_VDDR_EXT_TM15_S: u32 = 0;
pub const CCFG_VOLT_LOAD_1_VDDR_EXT_TP125_W: u32 = 8;
pub const CCFG_VOLT_LOAD_1_VDDR_EXT_TP125_M: u32 = 4278190080;
pub const CCFG_VOLT_LOAD_1_VDDR_EXT_TP125_S: u32 = 24;
pub const CCFG_VOLT_LOAD_1_VDDR_EXT_TP105_W: u32 = 8;
pub const CCFG_VOLT_LOAD_1_VDDR_EXT_TP105_M: u32 = 16711680;
pub const CCFG_VOLT_LOAD_1_VDDR_EXT_TP105_S: u32 = 16;
pub const CCFG_VOLT_LOAD_1_VDDR_EXT_TP85_W: u32 = 8;
pub const CCFG_VOLT_LOAD_1_VDDR_EXT_TP85_M: u32 = 65280;
pub const CCFG_VOLT_LOAD_1_VDDR_EXT_TP85_S: u32 = 8;
pub const CCFG_VOLT_LOAD_1_VDDR_EXT_TP65_W: u32 = 8;
pub const CCFG_VOLT_LOAD_1_VDDR_EXT_TP65_M: u32 = 255;
pub const CCFG_VOLT_LOAD_1_VDDR_EXT_TP65_S: u32 = 0;
pub const CCFG_RTC_OFFSET_RTC_COMP_P0_W: u32 = 16;
pub const CCFG_RTC_OFFSET_RTC_COMP_P0_M: u32 = 4294901760;
pub const CCFG_RTC_OFFSET_RTC_COMP_P0_S: u32 = 16;
pub const CCFG_RTC_OFFSET_RTC_COMP_P1_W: u32 = 8;
pub const CCFG_RTC_OFFSET_RTC_COMP_P1_M: u32 = 65280;
pub const CCFG_RTC_OFFSET_RTC_COMP_P1_S: u32 = 8;
pub const CCFG_RTC_OFFSET_RTC_COMP_P2_W: u32 = 8;
pub const CCFG_RTC_OFFSET_RTC_COMP_P2_M: u32 = 255;
pub const CCFG_RTC_OFFSET_RTC_COMP_P2_S: u32 = 0;
pub const CCFG_FREQ_OFFSET_HF_COMP_P0_W: u32 = 16;
pub const CCFG_FREQ_OFFSET_HF_COMP_P0_M: u32 = 4294901760;
pub const CCFG_FREQ_OFFSET_HF_COMP_P0_S: u32 = 16;
pub const CCFG_FREQ_OFFSET_HF_COMP_P1_W: u32 = 8;
pub const CCFG_FREQ_OFFSET_HF_COMP_P1_M: u32 = 65280;
pub const CCFG_FREQ_OFFSET_HF_COMP_P1_S: u32 = 8;
pub const CCFG_FREQ_OFFSET_HF_COMP_P2_W: u32 = 8;
pub const CCFG_FREQ_OFFSET_HF_COMP_P2_M: u32 = 255;
pub const CCFG_FREQ_OFFSET_HF_COMP_P2_S: u32 = 0;
pub const CCFG_IEEE_MAC_0_ADDR_W: u32 = 32;
pub const CCFG_IEEE_MAC_0_ADDR_M: u32 = 4294967295;
pub const CCFG_IEEE_MAC_0_ADDR_S: u32 = 0;
pub const CCFG_IEEE_MAC_1_ADDR_W: u32 = 32;
pub const CCFG_IEEE_MAC_1_ADDR_M: u32 = 4294967295;
pub const CCFG_IEEE_MAC_1_ADDR_S: u32 = 0;
pub const CCFG_IEEE_BLE_0_ADDR_W: u32 = 32;
pub const CCFG_IEEE_BLE_0_ADDR_M: u32 = 4294967295;
pub const CCFG_IEEE_BLE_0_ADDR_S: u32 = 0;
pub const CCFG_IEEE_BLE_1_ADDR_W: u32 = 32;
pub const CCFG_IEEE_BLE_1_ADDR_M: u32 = 4294967295;
pub const CCFG_IEEE_BLE_1_ADDR_S: u32 = 0;
pub const CCFG_BL_CONFIG_BOOTLOADER_ENABLE_W: u32 = 8;
pub const CCFG_BL_CONFIG_BOOTLOADER_ENABLE_M: u32 = 4278190080;
pub const CCFG_BL_CONFIG_BOOTLOADER_ENABLE_S: u32 = 24;
pub const CCFG_BL_CONFIG_BL_LEVEL: u32 = 65536;
pub const CCFG_BL_CONFIG_BL_LEVEL_BITN: u32 = 16;
pub const CCFG_BL_CONFIG_BL_LEVEL_M: u32 = 65536;
pub const CCFG_BL_CONFIG_BL_LEVEL_S: u32 = 16;
pub const CCFG_BL_CONFIG_BL_PIN_NUMBER_W: u32 = 8;
pub const CCFG_BL_CONFIG_BL_PIN_NUMBER_M: u32 = 65280;
pub const CCFG_BL_CONFIG_BL_PIN_NUMBER_S: u32 = 8;
pub const CCFG_BL_CONFIG_BL_ENABLE_W: u32 = 8;
pub const CCFG_BL_CONFIG_BL_ENABLE_M: u32 = 255;
pub const CCFG_BL_CONFIG_BL_ENABLE_S: u32 = 0;
pub const CCFG_ERASE_CONF_CHIP_ERASE_DIS_N: u32 = 256;
pub const CCFG_ERASE_CONF_CHIP_ERASE_DIS_N_BITN: u32 = 8;
pub const CCFG_ERASE_CONF_CHIP_ERASE_DIS_N_M: u32 = 256;
pub const CCFG_ERASE_CONF_CHIP_ERASE_DIS_N_S: u32 = 8;
pub const CCFG_ERASE_CONF_BANK_ERASE_DIS_N: u32 = 1;
pub const CCFG_ERASE_CONF_BANK_ERASE_DIS_N_BITN: u32 = 0;
pub const CCFG_ERASE_CONF_BANK_ERASE_DIS_N_M: u32 = 1;
pub const CCFG_ERASE_CONF_BANK_ERASE_DIS_N_S: u32 = 0;
pub const CCFG_CCFG_TI_OPTIONS_TI_FA_ENABLE_W: u32 = 8;
pub const CCFG_CCFG_TI_OPTIONS_TI_FA_ENABLE_M: u32 = 255;
pub const CCFG_CCFG_TI_OPTIONS_TI_FA_ENABLE_S: u32 = 0;
pub const CCFG_CCFG_TAP_DAP_0_CPU_DAP_ENABLE_W: u32 = 8;
pub const CCFG_CCFG_TAP_DAP_0_CPU_DAP_ENABLE_M: u32 = 16711680;
pub const CCFG_CCFG_TAP_DAP_0_CPU_DAP_ENABLE_S: u32 = 16;
pub const CCFG_CCFG_TAP_DAP_0_PRCM_TAP_ENABLE_W: u32 = 8;
pub const CCFG_CCFG_TAP_DAP_0_PRCM_TAP_ENABLE_M: u32 = 65280;
pub const CCFG_CCFG_TAP_DAP_0_PRCM_TAP_ENABLE_S: u32 = 8;
pub const CCFG_CCFG_TAP_DAP_0_TEST_TAP_ENABLE_W: u32 = 8;
pub const CCFG_CCFG_TAP_DAP_0_TEST_TAP_ENABLE_M: u32 = 255;
pub const CCFG_CCFG_TAP_DAP_0_TEST_TAP_ENABLE_S: u32 = 0;
pub const CCFG_CCFG_TAP_DAP_1_PBIST2_TAP_ENABLE_W: u32 = 8;
pub const CCFG_CCFG_TAP_DAP_1_PBIST2_TAP_ENABLE_M: u32 = 16711680;
pub const CCFG_CCFG_TAP_DAP_1_PBIST2_TAP_ENABLE_S: u32 = 16;
pub const CCFG_CCFG_TAP_DAP_1_PBIST1_TAP_ENABLE_W: u32 = 8;
pub const CCFG_CCFG_TAP_DAP_1_PBIST1_TAP_ENABLE_M: u32 = 65280;
pub const CCFG_CCFG_TAP_DAP_1_PBIST1_TAP_ENABLE_S: u32 = 8;
pub const CCFG_CCFG_TAP_DAP_1_WUC_TAP_ENABLE_W: u32 = 8;
pub const CCFG_CCFG_TAP_DAP_1_WUC_TAP_ENABLE_M: u32 = 255;
pub const CCFG_CCFG_TAP_DAP_1_WUC_TAP_ENABLE_S: u32 = 0;
pub const CCFG_IMAGE_VALID_CONF_IMAGE_VALID_W: u32 = 32;
pub const CCFG_IMAGE_VALID_CONF_IMAGE_VALID_M: u32 = 4294967295;
pub const CCFG_IMAGE_VALID_CONF_IMAGE_VALID_S: u32 = 0;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_31: u32 = 2147483648;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_31_BITN: u32 = 31;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_31_M: u32 = 2147483648;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_31_S: u32 = 31;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_30: u32 = 1073741824;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_30_BITN: u32 = 30;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_30_M: u32 = 1073741824;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_30_S: u32 = 30;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_29: u32 = 536870912;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_29_BITN: u32 = 29;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_29_M: u32 = 536870912;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_29_S: u32 = 29;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_28: u32 = 268435456;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_28_BITN: u32 = 28;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_28_M: u32 = 268435456;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_28_S: u32 = 28;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_27: u32 = 134217728;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_27_BITN: u32 = 27;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_27_M: u32 = 134217728;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_27_S: u32 = 27;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_26: u32 = 67108864;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_26_BITN: u32 = 26;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_26_M: u32 = 67108864;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_26_S: u32 = 26;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_25: u32 = 33554432;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_25_BITN: u32 = 25;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_25_M: u32 = 33554432;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_25_S: u32 = 25;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_24: u32 = 16777216;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_24_BITN: u32 = 24;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_24_M: u32 = 16777216;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_24_S: u32 = 24;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_23: u32 = 8388608;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_23_BITN: u32 = 23;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_23_M: u32 = 8388608;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_23_S: u32 = 23;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_22: u32 = 4194304;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_22_BITN: u32 = 22;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_22_M: u32 = 4194304;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_22_S: u32 = 22;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_21: u32 = 2097152;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_21_BITN: u32 = 21;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_21_M: u32 = 2097152;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_21_S: u32 = 21;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_20: u32 = 1048576;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_20_BITN: u32 = 20;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_20_M: u32 = 1048576;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_20_S: u32 = 20;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_19: u32 = 524288;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_19_BITN: u32 = 19;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_19_M: u32 = 524288;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_19_S: u32 = 19;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_18: u32 = 262144;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_18_BITN: u32 = 18;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_18_M: u32 = 262144;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_18_S: u32 = 18;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_17: u32 = 131072;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_17_BITN: u32 = 17;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_17_M: u32 = 131072;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_17_S: u32 = 17;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_16: u32 = 65536;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_16_BITN: u32 = 16;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_16_M: u32 = 65536;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_16_S: u32 = 16;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_15: u32 = 32768;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_15_BITN: u32 = 15;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_15_M: u32 = 32768;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_15_S: u32 = 15;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_14: u32 = 16384;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_14_BITN: u32 = 14;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_14_M: u32 = 16384;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_14_S: u32 = 14;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_13: u32 = 8192;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_13_BITN: u32 = 13;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_13_M: u32 = 8192;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_13_S: u32 = 13;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_12: u32 = 4096;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_12_BITN: u32 = 12;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_12_M: u32 = 4096;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_12_S: u32 = 12;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_11: u32 = 2048;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_11_BITN: u32 = 11;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_11_M: u32 = 2048;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_11_S: u32 = 11;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_10: u32 = 1024;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_10_BITN: u32 = 10;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_10_M: u32 = 1024;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_10_S: u32 = 10;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_9: u32 = 512;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_9_BITN: u32 = 9;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_9_M: u32 = 512;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_9_S: u32 = 9;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_8: u32 = 256;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_8_BITN: u32 = 8;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_8_M: u32 = 256;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_8_S: u32 = 8;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_7: u32 = 128;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_7_BITN: u32 = 7;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_7_M: u32 = 128;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_7_S: u32 = 7;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_6: u32 = 64;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_6_BITN: u32 = 6;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_6_M: u32 = 64;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_6_S: u32 = 6;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_5: u32 = 32;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_5_BITN: u32 = 5;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_5_M: u32 = 32;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_5_S: u32 = 5;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_4: u32 = 16;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_4_BITN: u32 = 4;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_4_M: u32 = 16;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_4_S: u32 = 4;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_3: u32 = 8;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_3_BITN: u32 = 3;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_3_M: u32 = 8;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_3_S: u32 = 3;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_2: u32 = 4;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_2_BITN: u32 = 2;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_2_M: u32 = 4;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_2_S: u32 = 2;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_1: u32 = 2;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_1_BITN: u32 = 1;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_1_M: u32 = 2;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_1_S: u32 = 1;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_0: u32 = 1;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_0_BITN: u32 = 0;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_0_M: u32 = 1;
pub const CCFG_CCFG_PROT_31_0_WRT_PROT_SEC_0_S: u32 = 0;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_63: u32 = 2147483648;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_63_BITN: u32 = 31;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_63_M: u32 = 2147483648;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_63_S: u32 = 31;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_62: u32 = 1073741824;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_62_BITN: u32 = 30;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_62_M: u32 = 1073741824;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_62_S: u32 = 30;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_61: u32 = 536870912;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_61_BITN: u32 = 29;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_61_M: u32 = 536870912;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_61_S: u32 = 29;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_60: u32 = 268435456;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_60_BITN: u32 = 28;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_60_M: u32 = 268435456;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_60_S: u32 = 28;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_59: u32 = 134217728;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_59_BITN: u32 = 27;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_59_M: u32 = 134217728;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_59_S: u32 = 27;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_58: u32 = 67108864;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_58_BITN: u32 = 26;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_58_M: u32 = 67108864;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_58_S: u32 = 26;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_57: u32 = 33554432;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_57_BITN: u32 = 25;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_57_M: u32 = 33554432;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_57_S: u32 = 25;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_56: u32 = 16777216;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_56_BITN: u32 = 24;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_56_M: u32 = 16777216;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_56_S: u32 = 24;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_55: u32 = 8388608;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_55_BITN: u32 = 23;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_55_M: u32 = 8388608;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_55_S: u32 = 23;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_54: u32 = 4194304;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_54_BITN: u32 = 22;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_54_M: u32 = 4194304;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_54_S: u32 = 22;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_53: u32 = 2097152;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_53_BITN: u32 = 21;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_53_M: u32 = 2097152;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_53_S: u32 = 21;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_52: u32 = 1048576;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_52_BITN: u32 = 20;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_52_M: u32 = 1048576;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_52_S: u32 = 20;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_51: u32 = 524288;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_51_BITN: u32 = 19;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_51_M: u32 = 524288;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_51_S: u32 = 19;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_50: u32 = 262144;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_50_BITN: u32 = 18;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_50_M: u32 = 262144;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_50_S: u32 = 18;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_49: u32 = 131072;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_49_BITN: u32 = 17;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_49_M: u32 = 131072;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_49_S: u32 = 17;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_48: u32 = 65536;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_48_BITN: u32 = 16;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_48_M: u32 = 65536;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_48_S: u32 = 16;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_47: u32 = 32768;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_47_BITN: u32 = 15;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_47_M: u32 = 32768;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_47_S: u32 = 15;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_46: u32 = 16384;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_46_BITN: u32 = 14;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_46_M: u32 = 16384;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_46_S: u32 = 14;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_45: u32 = 8192;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_45_BITN: u32 = 13;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_45_M: u32 = 8192;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_45_S: u32 = 13;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_44: u32 = 4096;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_44_BITN: u32 = 12;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_44_M: u32 = 4096;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_44_S: u32 = 12;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_43: u32 = 2048;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_43_BITN: u32 = 11;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_43_M: u32 = 2048;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_43_S: u32 = 11;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_42: u32 = 1024;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_42_BITN: u32 = 10;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_42_M: u32 = 1024;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_42_S: u32 = 10;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_41: u32 = 512;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_41_BITN: u32 = 9;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_41_M: u32 = 512;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_41_S: u32 = 9;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_40: u32 = 256;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_40_BITN: u32 = 8;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_40_M: u32 = 256;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_40_S: u32 = 8;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_39: u32 = 128;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_39_BITN: u32 = 7;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_39_M: u32 = 128;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_39_S: u32 = 7;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_38: u32 = 64;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_38_BITN: u32 = 6;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_38_M: u32 = 64;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_38_S: u32 = 6;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_37: u32 = 32;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_37_BITN: u32 = 5;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_37_M: u32 = 32;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_37_S: u32 = 5;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_36: u32 = 16;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_36_BITN: u32 = 4;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_36_M: u32 = 16;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_36_S: u32 = 4;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_35: u32 = 8;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_35_BITN: u32 = 3;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_35_M: u32 = 8;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_35_S: u32 = 3;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_34: u32 = 4;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_34_BITN: u32 = 2;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_34_M: u32 = 4;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_34_S: u32 = 2;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_33: u32 = 2;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_33_BITN: u32 = 1;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_33_M: u32 = 2;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_33_S: u32 = 1;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_32: u32 = 1;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_32_BITN: u32 = 0;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_32_M: u32 = 1;
pub const CCFG_CCFG_PROT_63_32_WRT_PROT_SEC_32_S: u32 = 0;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_95: u32 = 2147483648;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_95_BITN: u32 = 31;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_95_M: u32 = 2147483648;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_95_S: u32 = 31;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_94: u32 = 1073741824;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_94_BITN: u32 = 30;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_94_M: u32 = 1073741824;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_94_S: u32 = 30;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_93: u32 = 536870912;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_93_BITN: u32 = 29;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_93_M: u32 = 536870912;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_93_S: u32 = 29;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_92: u32 = 268435456;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_92_BITN: u32 = 28;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_92_M: u32 = 268435456;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_92_S: u32 = 28;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_91: u32 = 134217728;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_91_BITN: u32 = 27;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_91_M: u32 = 134217728;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_91_S: u32 = 27;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_90: u32 = 67108864;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_90_BITN: u32 = 26;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_90_M: u32 = 67108864;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_90_S: u32 = 26;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_89: u32 = 33554432;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_89_BITN: u32 = 25;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_89_M: u32 = 33554432;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_89_S: u32 = 25;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_88: u32 = 16777216;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_88_BITN: u32 = 24;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_88_M: u32 = 16777216;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_88_S: u32 = 24;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_87: u32 = 8388608;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_87_BITN: u32 = 23;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_87_M: u32 = 8388608;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_87_S: u32 = 23;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_86: u32 = 4194304;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_86_BITN: u32 = 22;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_86_M: u32 = 4194304;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_86_S: u32 = 22;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_85: u32 = 2097152;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_85_BITN: u32 = 21;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_85_M: u32 = 2097152;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_85_S: u32 = 21;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_84: u32 = 1048576;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_84_BITN: u32 = 20;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_84_M: u32 = 1048576;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_84_S: u32 = 20;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_83: u32 = 524288;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_83_BITN: u32 = 19;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_83_M: u32 = 524288;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_83_S: u32 = 19;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_82: u32 = 262144;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_82_BITN: u32 = 18;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_82_M: u32 = 262144;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_82_S: u32 = 18;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_81: u32 = 131072;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_81_BITN: u32 = 17;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_81_M: u32 = 131072;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_81_S: u32 = 17;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_80: u32 = 65536;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_80_BITN: u32 = 16;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_80_M: u32 = 65536;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_80_S: u32 = 16;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_79: u32 = 32768;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_79_BITN: u32 = 15;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_79_M: u32 = 32768;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_79_S: u32 = 15;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_78: u32 = 16384;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_78_BITN: u32 = 14;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_78_M: u32 = 16384;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_78_S: u32 = 14;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_77: u32 = 8192;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_77_BITN: u32 = 13;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_77_M: u32 = 8192;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_77_S: u32 = 13;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_76: u32 = 4096;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_76_BITN: u32 = 12;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_76_M: u32 = 4096;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_76_S: u32 = 12;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_75: u32 = 2048;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_75_BITN: u32 = 11;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_75_M: u32 = 2048;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_75_S: u32 = 11;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_74: u32 = 1024;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_74_BITN: u32 = 10;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_74_M: u32 = 1024;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_74_S: u32 = 10;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_73: u32 = 512;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_73_BITN: u32 = 9;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_73_M: u32 = 512;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_73_S: u32 = 9;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_72: u32 = 256;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_72_BITN: u32 = 8;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_72_M: u32 = 256;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_72_S: u32 = 8;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_71: u32 = 128;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_71_BITN: u32 = 7;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_71_M: u32 = 128;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_71_S: u32 = 7;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_70: u32 = 64;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_70_BITN: u32 = 6;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_70_M: u32 = 64;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_70_S: u32 = 6;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_69: u32 = 32;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_69_BITN: u32 = 5;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_69_M: u32 = 32;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_69_S: u32 = 5;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_68: u32 = 16;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_68_BITN: u32 = 4;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_68_M: u32 = 16;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_68_S: u32 = 4;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_67: u32 = 8;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_67_BITN: u32 = 3;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_67_M: u32 = 8;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_67_S: u32 = 3;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_66: u32 = 4;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_66_BITN: u32 = 2;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_66_M: u32 = 4;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_66_S: u32 = 2;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_65: u32 = 2;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_65_BITN: u32 = 1;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_65_M: u32 = 2;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_65_S: u32 = 1;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_64: u32 = 1;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_64_BITN: u32 = 0;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_64_M: u32 = 1;
pub const CCFG_CCFG_PROT_95_64_WRT_PROT_SEC_64_S: u32 = 0;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_127: u32 = 2147483648;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_127_BITN: u32 = 31;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_127_M: u32 = 2147483648;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_127_S: u32 = 31;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_126: u32 = 1073741824;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_126_BITN: u32 = 30;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_126_M: u32 = 1073741824;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_126_S: u32 = 30;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_125: u32 = 536870912;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_125_BITN: u32 = 29;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_125_M: u32 = 536870912;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_125_S: u32 = 29;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_124: u32 = 268435456;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_124_BITN: u32 = 28;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_124_M: u32 = 268435456;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_124_S: u32 = 28;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_123: u32 = 134217728;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_123_BITN: u32 = 27;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_123_M: u32 = 134217728;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_123_S: u32 = 27;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_122: u32 = 67108864;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_122_BITN: u32 = 26;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_122_M: u32 = 67108864;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_122_S: u32 = 26;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_121: u32 = 33554432;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_121_BITN: u32 = 25;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_121_M: u32 = 33554432;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_121_S: u32 = 25;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_120: u32 = 16777216;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_120_BITN: u32 = 24;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_120_M: u32 = 16777216;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_120_S: u32 = 24;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_119: u32 = 8388608;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_119_BITN: u32 = 23;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_119_M: u32 = 8388608;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_119_S: u32 = 23;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_118: u32 = 4194304;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_118_BITN: u32 = 22;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_118_M: u32 = 4194304;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_118_S: u32 = 22;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_117: u32 = 2097152;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_117_BITN: u32 = 21;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_117_M: u32 = 2097152;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_117_S: u32 = 21;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_116: u32 = 1048576;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_116_BITN: u32 = 20;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_116_M: u32 = 1048576;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_116_S: u32 = 20;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_115: u32 = 524288;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_115_BITN: u32 = 19;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_115_M: u32 = 524288;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_115_S: u32 = 19;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_114: u32 = 262144;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_114_BITN: u32 = 18;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_114_M: u32 = 262144;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_114_S: u32 = 18;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_113: u32 = 131072;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_113_BITN: u32 = 17;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_113_M: u32 = 131072;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_113_S: u32 = 17;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_112: u32 = 65536;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_112_BITN: u32 = 16;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_112_M: u32 = 65536;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_112_S: u32 = 16;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_111: u32 = 32768;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_111_BITN: u32 = 15;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_111_M: u32 = 32768;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_111_S: u32 = 15;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_110: u32 = 16384;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_110_BITN: u32 = 14;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_110_M: u32 = 16384;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_110_S: u32 = 14;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_109: u32 = 8192;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_109_BITN: u32 = 13;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_109_M: u32 = 8192;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_109_S: u32 = 13;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_108: u32 = 4096;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_108_BITN: u32 = 12;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_108_M: u32 = 4096;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_108_S: u32 = 12;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_107: u32 = 2048;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_107_BITN: u32 = 11;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_107_M: u32 = 2048;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_107_S: u32 = 11;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_106: u32 = 1024;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_106_BITN: u32 = 10;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_106_M: u32 = 1024;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_106_S: u32 = 10;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_105: u32 = 512;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_105_BITN: u32 = 9;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_105_M: u32 = 512;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_105_S: u32 = 9;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_104: u32 = 256;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_104_BITN: u32 = 8;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_104_M: u32 = 256;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_104_S: u32 = 8;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_103: u32 = 128;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_103_BITN: u32 = 7;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_103_M: u32 = 128;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_103_S: u32 = 7;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_102: u32 = 64;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_102_BITN: u32 = 6;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_102_M: u32 = 64;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_102_S: u32 = 6;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_101: u32 = 32;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_101_BITN: u32 = 5;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_101_M: u32 = 32;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_101_S: u32 = 5;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_100: u32 = 16;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_100_BITN: u32 = 4;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_100_M: u32 = 16;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_100_S: u32 = 4;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_99: u32 = 8;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_99_BITN: u32 = 3;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_99_M: u32 = 8;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_99_S: u32 = 3;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_98: u32 = 4;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_98_BITN: u32 = 2;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_98_M: u32 = 4;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_98_S: u32 = 2;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_97: u32 = 2;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_97_BITN: u32 = 1;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_97_M: u32 = 2;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_97_S: u32 = 1;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_96: u32 = 1;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_96_BITN: u32 = 0;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_96_M: u32 = 1;
pub const CCFG_CCFG_PROT_127_96_WRT_PROT_SEC_96_S: u32 = 0;
pub const CCFGREAD_SCLK_LF_OPTION_XOSC_HF_DLF: u32 = 0;
pub const CCFGREAD_SCLK_LF_OPTION_EXTERNAL_LF: u32 = 1;
pub const CCFGREAD_SCLK_LF_OPTION_XOSC_LF: u32 = 2;
pub const CCFGREAD_SCLK_LF_OPTION_RCOSC_LF: u32 = 3;
pub const CCFGREAD_XOSC_FREQ_24M: u32 = 3;
pub const CCFGREAD_XOSC_FREQ_48M: u32 = 2;
pub const CCFGREAD_XOSC_FREQ_HPOSC: u32 = 1;
pub const FCFG1_O_MISC_CONF_1: u32 = 160;
pub const FCFG1_O_MISC_CONF_2: u32 = 164;
pub const FCFG1_O_CONFIG_RF_FRONTEND_DIV5: u32 = 196;
pub const FCFG1_O_CONFIG_RF_FRONTEND_DIV6: u32 = 200;
pub const FCFG1_O_CONFIG_RF_FRONTEND_DIV10: u32 = 204;
pub const FCFG1_O_CONFIG_RF_FRONTEND_DIV12: u32 = 208;
pub const FCFG1_O_CONFIG_RF_FRONTEND_DIV15: u32 = 212;
pub const FCFG1_O_CONFIG_RF_FRONTEND_DIV30: u32 = 216;
pub const FCFG1_O_CONFIG_SYNTH_DIV5: u32 = 220;
pub const FCFG1_O_CONFIG_SYNTH_DIV6: u32 = 224;
pub const FCFG1_O_CONFIG_SYNTH_DIV10: u32 = 228;
pub const FCFG1_O_CONFIG_SYNTH_DIV12: u32 = 232;
pub const FCFG1_O_CONFIG_SYNTH_DIV15: u32 = 236;
pub const FCFG1_O_CONFIG_SYNTH_DIV30: u32 = 240;
pub const FCFG1_O_CONFIG_MISC_ADC_DIV5: u32 = 244;
pub const FCFG1_O_CONFIG_MISC_ADC_DIV6: u32 = 248;
pub const FCFG1_O_CONFIG_MISC_ADC_DIV10: u32 = 252;
pub const FCFG1_O_CONFIG_MISC_ADC_DIV12: u32 = 256;
pub const FCFG1_O_CONFIG_MISC_ADC_DIV15: u32 = 260;
pub const FCFG1_O_CONFIG_MISC_ADC_DIV30: u32 = 264;
pub const FCFG1_O_SHDW_DIE_ID_0: u32 = 280;
pub const FCFG1_O_SHDW_DIE_ID_1: u32 = 284;
pub const FCFG1_O_SHDW_DIE_ID_2: u32 = 288;
pub const FCFG1_O_SHDW_DIE_ID_3: u32 = 292;
pub const FCFG1_O_SHDW_OSC_BIAS_LDO_TRIM: u32 = 312;
pub const FCFG1_O_SHDW_ANA_TRIM: u32 = 316;
pub const FCFG1_O_FLASH_NUMBER: u32 = 356;
pub const FCFG1_O_FLASH_COORDINATE: u32 = 364;
pub const FCFG1_O_FLASH_E_P: u32 = 368;
pub const FCFG1_O_FLASH_C_E_P_R: u32 = 372;
pub const FCFG1_O_FLASH_P_R_PV: u32 = 376;
pub const FCFG1_O_FLASH_EH_SEQ: u32 = 380;
pub const FCFG1_O_FLASH_VHV_E: u32 = 384;
pub const FCFG1_O_FLASH_PP: u32 = 388;
pub const FCFG1_O_FLASH_PROG_EP: u32 = 392;
pub const FCFG1_O_FLASH_ERA_PW: u32 = 396;
pub const FCFG1_O_FLASH_VHV: u32 = 400;
pub const FCFG1_O_FLASH_VHV_PV: u32 = 404;
pub const FCFG1_O_FLASH_V: u32 = 408;
pub const FCFG1_O_USER_ID: u32 = 660;
pub const FCFG1_O_FLASH_OTP_DATA3: u32 = 688;
pub const FCFG1_O_ANA2_TRIM: u32 = 692;
pub const FCFG1_O_LDO_TRIM: u32 = 696;
pub const FCFG1_O_BAT_RC_LDO_TRIM: u32 = 700;
pub const FCFG1_O_MAC_BLE_0: u32 = 744;
pub const FCFG1_O_MAC_BLE_1: u32 = 748;
pub const FCFG1_O_MAC_15_4_0: u32 = 752;
pub const FCFG1_O_MAC_15_4_1: u32 = 756;
pub const FCFG1_O_FLASH_OTP_DATA4: u32 = 776;
pub const FCFG1_O_MISC_TRIM: u32 = 780;
pub const FCFG1_O_RCOSC_HF_TEMPCOMP: u32 = 784;
pub const FCFG1_O_TRIM_CAL_REVISION: u32 = 788;
pub const FCFG1_O_ICEPICK_DEVICE_ID: u32 = 792;
pub const FCFG1_O_FCFG1_REVISION: u32 = 796;
pub const FCFG1_O_MISC_OTP_DATA: u32 = 800;
pub const FCFG1_O_IOCONF: u32 = 836;
pub const FCFG1_O_CONFIG_IF_ADC: u32 = 844;
pub const FCFG1_O_CONFIG_OSC_TOP: u32 = 848;
pub const FCFG1_O_CONFIG_RF_FRONTEND: u32 = 852;
pub const FCFG1_O_CONFIG_SYNTH: u32 = 856;
pub const FCFG1_O_SOC_ADC_ABS_GAIN: u32 = 860;
pub const FCFG1_O_SOC_ADC_REL_GAIN: u32 = 864;
pub const FCFG1_O_SOC_ADC_OFFSET_INT: u32 = 872;
pub const FCFG1_O_SOC_ADC_REF_TRIM_AND_OFFSET_EXT: u32 = 876;
pub const FCFG1_O_AMPCOMP_TH1: u32 = 880;
pub const FCFG1_O_AMPCOMP_TH2: u32 = 884;
pub const FCFG1_O_AMPCOMP_CTRL1: u32 = 888;
pub const FCFG1_O_ANABYPASS_VALUE2: u32 = 892;
pub const FCFG1_O_CONFIG_MISC_ADC: u32 = 896;
pub const FCFG1_O_VOLT_TRIM: u32 = 904;
pub const FCFG1_O_OSC_CONF: u32 = 908;
pub const FCFG1_O_FREQ_OFFSET: u32 = 912;
pub const FCFG1_O_CAP_TRIM: u32 = 916;
pub const FCFG1_O_MISC_OTP_DATA_1: u32 = 920;
pub const FCFG1_O_PWD_CURR_20C: u32 = 924;
pub const FCFG1_O_PWD_CURR_35C: u32 = 928;
pub const FCFG1_O_PWD_CURR_50C: u32 = 932;
pub const FCFG1_O_PWD_CURR_65C: u32 = 936;
pub const FCFG1_O_PWD_CURR_80C: u32 = 940;
pub const FCFG1_O_PWD_CURR_95C: u32 = 944;
pub const FCFG1_O_PWD_CURR_110C: u32 = 948;
pub const FCFG1_O_PWD_CURR_125C: u32 = 952;
pub const FCFG1_MISC_CONF_1_DEVICE_MINOR_REV_W: u32 = 8;
pub const FCFG1_MISC_CONF_1_DEVICE_MINOR_REV_M: u32 = 255;
pub const FCFG1_MISC_CONF_1_DEVICE_MINOR_REV_S: u32 = 0;
pub const FCFG1_MISC_CONF_2_HPOSC_COMP_P3_W: u32 = 8;
pub const FCFG1_MISC_CONF_2_HPOSC_COMP_P3_M: u32 = 255;
pub const FCFG1_MISC_CONF_2_HPOSC_COMP_P3_S: u32 = 0;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_IFAMP_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_IFAMP_IB_M: u32 = 4026531840;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_IFAMP_IB_S: u32 = 28;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_LNA_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_LNA_IB_M: u32 = 251658240;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_LNA_IB_S: u32 = 24;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_IFAMP_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_IFAMP_TRIM_M: u32 = 16252928;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_IFAMP_TRIM_S: u32 = 19;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_CTL_PA0_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_CTL_PA0_TRIM_M: u32 = 507904;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_CTL_PA0_TRIM_S: u32 = 14;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_RFLDO_TRIM_OUTPUT_W: u32 = 7;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_RFLDO_TRIM_OUTPUT_M: u32 = 127;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV5_RFLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_IFAMP_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_IFAMP_IB_M: u32 = 4026531840;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_IFAMP_IB_S: u32 = 28;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_LNA_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_LNA_IB_M: u32 = 251658240;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_LNA_IB_S: u32 = 24;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_IFAMP_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_IFAMP_TRIM_M: u32 = 16252928;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_IFAMP_TRIM_S: u32 = 19;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_CTL_PA0_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_CTL_PA0_TRIM_M: u32 = 507904;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_CTL_PA0_TRIM_S: u32 = 14;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_RFLDO_TRIM_OUTPUT_W: u32 = 7;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_RFLDO_TRIM_OUTPUT_M: u32 = 127;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV6_RFLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_IFAMP_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_IFAMP_IB_M: u32 = 4026531840;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_IFAMP_IB_S: u32 = 28;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_LNA_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_LNA_IB_M: u32 = 251658240;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_LNA_IB_S: u32 = 24;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_IFAMP_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_IFAMP_TRIM_M: u32 = 16252928;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_IFAMP_TRIM_S: u32 = 19;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_CTL_PA0_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_CTL_PA0_TRIM_M: u32 = 507904;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_CTL_PA0_TRIM_S: u32 = 14;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_RFLDO_TRIM_OUTPUT_W: u32 = 7;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_RFLDO_TRIM_OUTPUT_M: u32 = 127;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV10_RFLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_IFAMP_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_IFAMP_IB_M: u32 = 4026531840;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_IFAMP_IB_S: u32 = 28;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_LNA_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_LNA_IB_M: u32 = 251658240;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_LNA_IB_S: u32 = 24;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_IFAMP_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_IFAMP_TRIM_M: u32 = 16252928;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_IFAMP_TRIM_S: u32 = 19;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_CTL_PA0_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_CTL_PA0_TRIM_M: u32 = 507904;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_CTL_PA0_TRIM_S: u32 = 14;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_RFLDO_TRIM_OUTPUT_W: u32 = 7;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_RFLDO_TRIM_OUTPUT_M: u32 = 127;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV12_RFLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_IFAMP_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_IFAMP_IB_M: u32 = 4026531840;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_IFAMP_IB_S: u32 = 28;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_LNA_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_LNA_IB_M: u32 = 251658240;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_LNA_IB_S: u32 = 24;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_IFAMP_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_IFAMP_TRIM_M: u32 = 16252928;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_IFAMP_TRIM_S: u32 = 19;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_CTL_PA0_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_CTL_PA0_TRIM_M: u32 = 507904;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_CTL_PA0_TRIM_S: u32 = 14;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_RFLDO_TRIM_OUTPUT_W: u32 = 7;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_RFLDO_TRIM_OUTPUT_M: u32 = 127;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV15_RFLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_IFAMP_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_IFAMP_IB_M: u32 = 4026531840;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_IFAMP_IB_S: u32 = 28;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_LNA_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_LNA_IB_M: u32 = 251658240;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_LNA_IB_S: u32 = 24;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_IFAMP_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_IFAMP_TRIM_M: u32 = 16252928;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_IFAMP_TRIM_S: u32 = 19;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_CTL_PA0_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_CTL_PA0_TRIM_M: u32 = 507904;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_CTL_PA0_TRIM_S: u32 = 14;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_RFLDO_TRIM_OUTPUT_W: u32 = 7;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_RFLDO_TRIM_OUTPUT_M: u32 = 127;
pub const FCFG1_CONFIG_RF_FRONTEND_DIV30_RFLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_SYNTH_DIV5_RFC_MDM_DEMIQMC0_W: u32 = 16;
pub const FCFG1_CONFIG_SYNTH_DIV5_RFC_MDM_DEMIQMC0_M: u32 = 268431360;
pub const FCFG1_CONFIG_SYNTH_DIV5_RFC_MDM_DEMIQMC0_S: u32 = 12;
pub const FCFG1_CONFIG_SYNTH_DIV5_LDOVCO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV5_LDOVCO_TRIM_OUTPUT_M: u32 = 4032;
pub const FCFG1_CONFIG_SYNTH_DIV5_LDOVCO_TRIM_OUTPUT_S: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV5_SLDO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV5_SLDO_TRIM_OUTPUT_M: u32 = 63;
pub const FCFG1_CONFIG_SYNTH_DIV5_SLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_SYNTH_DIV6_RFC_MDM_DEMIQMC0_W: u32 = 16;
pub const FCFG1_CONFIG_SYNTH_DIV6_RFC_MDM_DEMIQMC0_M: u32 = 268431360;
pub const FCFG1_CONFIG_SYNTH_DIV6_RFC_MDM_DEMIQMC0_S: u32 = 12;
pub const FCFG1_CONFIG_SYNTH_DIV6_LDOVCO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV6_LDOVCO_TRIM_OUTPUT_M: u32 = 4032;
pub const FCFG1_CONFIG_SYNTH_DIV6_LDOVCO_TRIM_OUTPUT_S: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV6_SLDO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV6_SLDO_TRIM_OUTPUT_M: u32 = 63;
pub const FCFG1_CONFIG_SYNTH_DIV6_SLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_SYNTH_DIV10_RFC_MDM_DEMIQMC0_W: u32 = 16;
pub const FCFG1_CONFIG_SYNTH_DIV10_RFC_MDM_DEMIQMC0_M: u32 = 268431360;
pub const FCFG1_CONFIG_SYNTH_DIV10_RFC_MDM_DEMIQMC0_S: u32 = 12;
pub const FCFG1_CONFIG_SYNTH_DIV10_LDOVCO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV10_LDOVCO_TRIM_OUTPUT_M: u32 = 4032;
pub const FCFG1_CONFIG_SYNTH_DIV10_LDOVCO_TRIM_OUTPUT_S: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV10_SLDO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV10_SLDO_TRIM_OUTPUT_M: u32 = 63;
pub const FCFG1_CONFIG_SYNTH_DIV10_SLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_SYNTH_DIV12_RFC_MDM_DEMIQMC0_W: u32 = 16;
pub const FCFG1_CONFIG_SYNTH_DIV12_RFC_MDM_DEMIQMC0_M: u32 = 268431360;
pub const FCFG1_CONFIG_SYNTH_DIV12_RFC_MDM_DEMIQMC0_S: u32 = 12;
pub const FCFG1_CONFIG_SYNTH_DIV12_LDOVCO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV12_LDOVCO_TRIM_OUTPUT_M: u32 = 4032;
pub const FCFG1_CONFIG_SYNTH_DIV12_LDOVCO_TRIM_OUTPUT_S: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV12_SLDO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV12_SLDO_TRIM_OUTPUT_M: u32 = 63;
pub const FCFG1_CONFIG_SYNTH_DIV12_SLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_SYNTH_DIV15_RFC_MDM_DEMIQMC0_W: u32 = 16;
pub const FCFG1_CONFIG_SYNTH_DIV15_RFC_MDM_DEMIQMC0_M: u32 = 268431360;
pub const FCFG1_CONFIG_SYNTH_DIV15_RFC_MDM_DEMIQMC0_S: u32 = 12;
pub const FCFG1_CONFIG_SYNTH_DIV15_LDOVCO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV15_LDOVCO_TRIM_OUTPUT_M: u32 = 4032;
pub const FCFG1_CONFIG_SYNTH_DIV15_LDOVCO_TRIM_OUTPUT_S: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV15_SLDO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV15_SLDO_TRIM_OUTPUT_M: u32 = 63;
pub const FCFG1_CONFIG_SYNTH_DIV15_SLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_SYNTH_DIV30_RFC_MDM_DEMIQMC0_W: u32 = 16;
pub const FCFG1_CONFIG_SYNTH_DIV30_RFC_MDM_DEMIQMC0_M: u32 = 268431360;
pub const FCFG1_CONFIG_SYNTH_DIV30_RFC_MDM_DEMIQMC0_S: u32 = 12;
pub const FCFG1_CONFIG_SYNTH_DIV30_LDOVCO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV30_LDOVCO_TRIM_OUTPUT_M: u32 = 4032;
pub const FCFG1_CONFIG_SYNTH_DIV30_LDOVCO_TRIM_OUTPUT_S: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV30_SLDO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_DIV30_SLDO_TRIM_OUTPUT_M: u32 = 63;
pub const FCFG1_CONFIG_SYNTH_DIV30_SLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_MISC_ADC_DIV5_RSSI_OFFSET_W: u32 = 8;
pub const FCFG1_CONFIG_MISC_ADC_DIV5_RSSI_OFFSET_M: u32 = 130560;
pub const FCFG1_CONFIG_MISC_ADC_DIV5_RSSI_OFFSET_S: u32 = 9;
pub const FCFG1_CONFIG_MISC_ADC_DIV5_QUANTCTLTHRES_W: u32 = 3;
pub const FCFG1_CONFIG_MISC_ADC_DIV5_QUANTCTLTHRES_M: u32 = 448;
pub const FCFG1_CONFIG_MISC_ADC_DIV5_QUANTCTLTHRES_S: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DIV5_DACTRIM_W: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DIV5_DACTRIM_M: u32 = 63;
pub const FCFG1_CONFIG_MISC_ADC_DIV5_DACTRIM_S: u32 = 0;
pub const FCFG1_CONFIG_MISC_ADC_DIV6_RSSI_OFFSET_W: u32 = 8;
pub const FCFG1_CONFIG_MISC_ADC_DIV6_RSSI_OFFSET_M: u32 = 130560;
pub const FCFG1_CONFIG_MISC_ADC_DIV6_RSSI_OFFSET_S: u32 = 9;
pub const FCFG1_CONFIG_MISC_ADC_DIV6_QUANTCTLTHRES_W: u32 = 3;
pub const FCFG1_CONFIG_MISC_ADC_DIV6_QUANTCTLTHRES_M: u32 = 448;
pub const FCFG1_CONFIG_MISC_ADC_DIV6_QUANTCTLTHRES_S: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DIV6_DACTRIM_W: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DIV6_DACTRIM_M: u32 = 63;
pub const FCFG1_CONFIG_MISC_ADC_DIV6_DACTRIM_S: u32 = 0;
pub const FCFG1_CONFIG_MISC_ADC_DIV10_RSSI_OFFSET_W: u32 = 8;
pub const FCFG1_CONFIG_MISC_ADC_DIV10_RSSI_OFFSET_M: u32 = 130560;
pub const FCFG1_CONFIG_MISC_ADC_DIV10_RSSI_OFFSET_S: u32 = 9;
pub const FCFG1_CONFIG_MISC_ADC_DIV10_QUANTCTLTHRES_W: u32 = 3;
pub const FCFG1_CONFIG_MISC_ADC_DIV10_QUANTCTLTHRES_M: u32 = 448;
pub const FCFG1_CONFIG_MISC_ADC_DIV10_QUANTCTLTHRES_S: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DIV10_DACTRIM_W: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DIV10_DACTRIM_M: u32 = 63;
pub const FCFG1_CONFIG_MISC_ADC_DIV10_DACTRIM_S: u32 = 0;
pub const FCFG1_CONFIG_MISC_ADC_DIV12_RSSI_OFFSET_W: u32 = 8;
pub const FCFG1_CONFIG_MISC_ADC_DIV12_RSSI_OFFSET_M: u32 = 130560;
pub const FCFG1_CONFIG_MISC_ADC_DIV12_RSSI_OFFSET_S: u32 = 9;
pub const FCFG1_CONFIG_MISC_ADC_DIV12_QUANTCTLTHRES_W: u32 = 3;
pub const FCFG1_CONFIG_MISC_ADC_DIV12_QUANTCTLTHRES_M: u32 = 448;
pub const FCFG1_CONFIG_MISC_ADC_DIV12_QUANTCTLTHRES_S: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DIV12_DACTRIM_W: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DIV12_DACTRIM_M: u32 = 63;
pub const FCFG1_CONFIG_MISC_ADC_DIV12_DACTRIM_S: u32 = 0;
pub const FCFG1_CONFIG_MISC_ADC_DIV15_RSSI_OFFSET_W: u32 = 8;
pub const FCFG1_CONFIG_MISC_ADC_DIV15_RSSI_OFFSET_M: u32 = 130560;
pub const FCFG1_CONFIG_MISC_ADC_DIV15_RSSI_OFFSET_S: u32 = 9;
pub const FCFG1_CONFIG_MISC_ADC_DIV15_QUANTCTLTHRES_W: u32 = 3;
pub const FCFG1_CONFIG_MISC_ADC_DIV15_QUANTCTLTHRES_M: u32 = 448;
pub const FCFG1_CONFIG_MISC_ADC_DIV15_QUANTCTLTHRES_S: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DIV15_DACTRIM_W: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DIV15_DACTRIM_M: u32 = 63;
pub const FCFG1_CONFIG_MISC_ADC_DIV15_DACTRIM_S: u32 = 0;
pub const FCFG1_CONFIG_MISC_ADC_DIV30_RSSI_OFFSET_W: u32 = 8;
pub const FCFG1_CONFIG_MISC_ADC_DIV30_RSSI_OFFSET_M: u32 = 130560;
pub const FCFG1_CONFIG_MISC_ADC_DIV30_RSSI_OFFSET_S: u32 = 9;
pub const FCFG1_CONFIG_MISC_ADC_DIV30_QUANTCTLTHRES_W: u32 = 3;
pub const FCFG1_CONFIG_MISC_ADC_DIV30_QUANTCTLTHRES_M: u32 = 448;
pub const FCFG1_CONFIG_MISC_ADC_DIV30_QUANTCTLTHRES_S: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DIV30_DACTRIM_W: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DIV30_DACTRIM_M: u32 = 63;
pub const FCFG1_CONFIG_MISC_ADC_DIV30_DACTRIM_S: u32 = 0;
pub const FCFG1_SHDW_DIE_ID_0_ID_31_0_W: u32 = 32;
pub const FCFG1_SHDW_DIE_ID_0_ID_31_0_M: u32 = 4294967295;
pub const FCFG1_SHDW_DIE_ID_0_ID_31_0_S: u32 = 0;
pub const FCFG1_SHDW_DIE_ID_1_ID_63_32_W: u32 = 32;
pub const FCFG1_SHDW_DIE_ID_1_ID_63_32_M: u32 = 4294967295;
pub const FCFG1_SHDW_DIE_ID_1_ID_63_32_S: u32 = 0;
pub const FCFG1_SHDW_DIE_ID_2_ID_95_64_W: u32 = 32;
pub const FCFG1_SHDW_DIE_ID_2_ID_95_64_M: u32 = 4294967295;
pub const FCFG1_SHDW_DIE_ID_2_ID_95_64_S: u32 = 0;
pub const FCFG1_SHDW_DIE_ID_3_ID_127_96_W: u32 = 32;
pub const FCFG1_SHDW_DIE_ID_3_ID_127_96_M: u32 = 4294967295;
pub const FCFG1_SHDW_DIE_ID_3_ID_127_96_S: u32 = 0;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_SET_RCOSC_HF_COARSE_RESISTOR_W: u32 = 2;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_SET_RCOSC_HF_COARSE_RESISTOR_M: u32 = 402653184;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_SET_RCOSC_HF_COARSE_RESISTOR_S: u32 = 27;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_TRIMMAG_W: u32 = 4;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_TRIMMAG_M: u32 = 125829120;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_TRIMMAG_S: u32 = 23;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_TRIMIREF_W: u32 = 5;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_TRIMIREF_M: u32 = 8126464;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_TRIMIREF_S: u32 = 18;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_ITRIM_DIG_LDO_W: u32 = 2;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_ITRIM_DIG_LDO_M: u32 = 196608;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_ITRIM_DIG_LDO_S: u32 = 16;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_VTRIM_DIG_W: u32 = 4;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_VTRIM_DIG_M: u32 = 61440;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_VTRIM_DIG_S: u32 = 12;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_VTRIM_COARSE_W: u32 = 4;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_VTRIM_COARSE_M: u32 = 3840;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_VTRIM_COARSE_S: u32 = 8;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_RCOSCHF_CTRIM_W: u32 = 8;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_RCOSCHF_CTRIM_M: u32 = 255;
pub const FCFG1_SHDW_OSC_BIAS_LDO_TRIM_RCOSCHF_CTRIM_S: u32 = 0;
pub const FCFG1_SHDW_ANA_TRIM_BOD_BANDGAP_TRIM_CNF_W: u32 = 2;
pub const FCFG1_SHDW_ANA_TRIM_BOD_BANDGAP_TRIM_CNF_M: u32 = 100663296;
pub const FCFG1_SHDW_ANA_TRIM_BOD_BANDGAP_TRIM_CNF_S: u32 = 25;
pub const FCFG1_SHDW_ANA_TRIM_VDDR_ENABLE_PG1: u32 = 16777216;
pub const FCFG1_SHDW_ANA_TRIM_VDDR_ENABLE_PG1_BITN: u32 = 24;
pub const FCFG1_SHDW_ANA_TRIM_VDDR_ENABLE_PG1_M: u32 = 16777216;
pub const FCFG1_SHDW_ANA_TRIM_VDDR_ENABLE_PG1_S: u32 = 24;
pub const FCFG1_SHDW_ANA_TRIM_VDDR_OK_HYS: u32 = 8388608;
pub const FCFG1_SHDW_ANA_TRIM_VDDR_OK_HYS_BITN: u32 = 23;
pub const FCFG1_SHDW_ANA_TRIM_VDDR_OK_HYS_M: u32 = 8388608;
pub const FCFG1_SHDW_ANA_TRIM_VDDR_OK_HYS_S: u32 = 23;
pub const FCFG1_SHDW_ANA_TRIM_IPTAT_TRIM_W: u32 = 2;
pub const FCFG1_SHDW_ANA_TRIM_IPTAT_TRIM_M: u32 = 6291456;
pub const FCFG1_SHDW_ANA_TRIM_IPTAT_TRIM_S: u32 = 21;
pub const FCFG1_SHDW_ANA_TRIM_VDDR_TRIM_W: u32 = 5;
pub const FCFG1_SHDW_ANA_TRIM_VDDR_TRIM_M: u32 = 2031616;
pub const FCFG1_SHDW_ANA_TRIM_VDDR_TRIM_S: u32 = 16;
pub const FCFG1_SHDW_ANA_TRIM_TRIMBOD_INTMODE_W: u32 = 5;
pub const FCFG1_SHDW_ANA_TRIM_TRIMBOD_INTMODE_M: u32 = 63488;
pub const FCFG1_SHDW_ANA_TRIM_TRIMBOD_INTMODE_S: u32 = 11;
pub const FCFG1_SHDW_ANA_TRIM_TRIMBOD_EXTMODE_W: u32 = 5;
pub const FCFG1_SHDW_ANA_TRIM_TRIMBOD_EXTMODE_M: u32 = 1984;
pub const FCFG1_SHDW_ANA_TRIM_TRIMBOD_EXTMODE_S: u32 = 6;
pub const FCFG1_SHDW_ANA_TRIM_TRIMTEMP_W: u32 = 6;
pub const FCFG1_SHDW_ANA_TRIM_TRIMTEMP_M: u32 = 63;
pub const FCFG1_SHDW_ANA_TRIM_TRIMTEMP_S: u32 = 0;
pub const FCFG1_FLASH_NUMBER_LOT_NUMBER_W: u32 = 32;
pub const FCFG1_FLASH_NUMBER_LOT_NUMBER_M: u32 = 4294967295;
pub const FCFG1_FLASH_NUMBER_LOT_NUMBER_S: u32 = 0;
pub const FCFG1_FLASH_COORDINATE_XCOORDINATE_W: u32 = 16;
pub const FCFG1_FLASH_COORDINATE_XCOORDINATE_M: u32 = 4294901760;
pub const FCFG1_FLASH_COORDINATE_XCOORDINATE_S: u32 = 16;
pub const FCFG1_FLASH_COORDINATE_YCOORDINATE_W: u32 = 16;
pub const FCFG1_FLASH_COORDINATE_YCOORDINATE_M: u32 = 65535;
pub const FCFG1_FLASH_COORDINATE_YCOORDINATE_S: u32 = 0;
pub const FCFG1_FLASH_E_P_PSU_W: u32 = 8;
pub const FCFG1_FLASH_E_P_PSU_M: u32 = 4278190080;
pub const FCFG1_FLASH_E_P_PSU_S: u32 = 24;
pub const FCFG1_FLASH_E_P_ESU_W: u32 = 8;
pub const FCFG1_FLASH_E_P_ESU_M: u32 = 16711680;
pub const FCFG1_FLASH_E_P_ESU_S: u32 = 16;
pub const FCFG1_FLASH_E_P_PVSU_W: u32 = 8;
pub const FCFG1_FLASH_E_P_PVSU_M: u32 = 65280;
pub const FCFG1_FLASH_E_P_PVSU_S: u32 = 8;
pub const FCFG1_FLASH_E_P_EVSU_W: u32 = 8;
pub const FCFG1_FLASH_E_P_EVSU_M: u32 = 255;
pub const FCFG1_FLASH_E_P_EVSU_S: u32 = 0;
pub const FCFG1_FLASH_C_E_P_R_RVSU_W: u32 = 8;
pub const FCFG1_FLASH_C_E_P_R_RVSU_M: u32 = 4278190080;
pub const FCFG1_FLASH_C_E_P_R_RVSU_S: u32 = 24;
pub const FCFG1_FLASH_C_E_P_R_PV_ACCESS_W: u32 = 8;
pub const FCFG1_FLASH_C_E_P_R_PV_ACCESS_M: u32 = 16711680;
pub const FCFG1_FLASH_C_E_P_R_PV_ACCESS_S: u32 = 16;
pub const FCFG1_FLASH_C_E_P_R_A_EXEZ_SETUP_W: u32 = 4;
pub const FCFG1_FLASH_C_E_P_R_A_EXEZ_SETUP_M: u32 = 61440;
pub const FCFG1_FLASH_C_E_P_R_A_EXEZ_SETUP_S: u32 = 12;
pub const FCFG1_FLASH_C_E_P_R_CVSU_W: u32 = 12;
pub const FCFG1_FLASH_C_E_P_R_CVSU_M: u32 = 4095;
pub const FCFG1_FLASH_C_E_P_R_CVSU_S: u32 = 0;
pub const FCFG1_FLASH_P_R_PV_PH_W: u32 = 8;
pub const FCFG1_FLASH_P_R_PV_PH_M: u32 = 4278190080;
pub const FCFG1_FLASH_P_R_PV_PH_S: u32 = 24;
pub const FCFG1_FLASH_P_R_PV_RH_W: u32 = 8;
pub const FCFG1_FLASH_P_R_PV_RH_M: u32 = 16711680;
pub const FCFG1_FLASH_P_R_PV_RH_S: u32 = 16;
pub const FCFG1_FLASH_P_R_PV_PVH_W: u32 = 8;
pub const FCFG1_FLASH_P_R_PV_PVH_M: u32 = 65280;
pub const FCFG1_FLASH_P_R_PV_PVH_S: u32 = 8;
pub const FCFG1_FLASH_P_R_PV_PVH2_W: u32 = 8;
pub const FCFG1_FLASH_P_R_PV_PVH2_M: u32 = 255;
pub const FCFG1_FLASH_P_R_PV_PVH2_S: u32 = 0;
pub const FCFG1_FLASH_EH_SEQ_EH_W: u32 = 8;
pub const FCFG1_FLASH_EH_SEQ_EH_M: u32 = 4278190080;
pub const FCFG1_FLASH_EH_SEQ_EH_S: u32 = 24;
pub const FCFG1_FLASH_EH_SEQ_SEQ_W: u32 = 8;
pub const FCFG1_FLASH_EH_SEQ_SEQ_M: u32 = 16711680;
pub const FCFG1_FLASH_EH_SEQ_SEQ_S: u32 = 16;
pub const FCFG1_FLASH_EH_SEQ_VSTAT_W: u32 = 4;
pub const FCFG1_FLASH_EH_SEQ_VSTAT_M: u32 = 61440;
pub const FCFG1_FLASH_EH_SEQ_VSTAT_S: u32 = 12;
pub const FCFG1_FLASH_EH_SEQ_SM_FREQUENCY_W: u32 = 12;
pub const FCFG1_FLASH_EH_SEQ_SM_FREQUENCY_M: u32 = 4095;
pub const FCFG1_FLASH_EH_SEQ_SM_FREQUENCY_S: u32 = 0;
pub const FCFG1_FLASH_VHV_E_VHV_E_START_W: u32 = 16;
pub const FCFG1_FLASH_VHV_E_VHV_E_START_M: u32 = 4294901760;
pub const FCFG1_FLASH_VHV_E_VHV_E_START_S: u32 = 16;
pub const FCFG1_FLASH_VHV_E_VHV_E_STEP_HIGHT_W: u32 = 16;
pub const FCFG1_FLASH_VHV_E_VHV_E_STEP_HIGHT_M: u32 = 65535;
pub const FCFG1_FLASH_VHV_E_VHV_E_STEP_HIGHT_S: u32 = 0;
pub const FCFG1_FLASH_PP_PUMP_SU_W: u32 = 8;
pub const FCFG1_FLASH_PP_PUMP_SU_M: u32 = 4278190080;
pub const FCFG1_FLASH_PP_PUMP_SU_S: u32 = 24;
pub const FCFG1_FLASH_PP_MAX_PP_W: u32 = 16;
pub const FCFG1_FLASH_PP_MAX_PP_M: u32 = 65535;
pub const FCFG1_FLASH_PP_MAX_PP_S: u32 = 0;
pub const FCFG1_FLASH_PROG_EP_MAX_EP_W: u32 = 16;
pub const FCFG1_FLASH_PROG_EP_MAX_EP_M: u32 = 4294901760;
pub const FCFG1_FLASH_PROG_EP_MAX_EP_S: u32 = 16;
pub const FCFG1_FLASH_PROG_EP_PROGRAM_PW_W: u32 = 16;
pub const FCFG1_FLASH_PROG_EP_PROGRAM_PW_M: u32 = 65535;
pub const FCFG1_FLASH_PROG_EP_PROGRAM_PW_S: u32 = 0;
pub const FCFG1_FLASH_ERA_PW_ERASE_PW_W: u32 = 32;
pub const FCFG1_FLASH_ERA_PW_ERASE_PW_M: u32 = 4294967295;
pub const FCFG1_FLASH_ERA_PW_ERASE_PW_S: u32 = 0;
pub const FCFG1_FLASH_VHV_TRIM13_P_W: u32 = 4;
pub const FCFG1_FLASH_VHV_TRIM13_P_M: u32 = 251658240;
pub const FCFG1_FLASH_VHV_TRIM13_P_S: u32 = 24;
pub const FCFG1_FLASH_VHV_VHV_P_W: u32 = 4;
pub const FCFG1_FLASH_VHV_VHV_P_M: u32 = 983040;
pub const FCFG1_FLASH_VHV_VHV_P_S: u32 = 16;
pub const FCFG1_FLASH_VHV_TRIM13_E_W: u32 = 4;
pub const FCFG1_FLASH_VHV_TRIM13_E_M: u32 = 3840;
pub const FCFG1_FLASH_VHV_TRIM13_E_S: u32 = 8;
pub const FCFG1_FLASH_VHV_VHV_E_W: u32 = 4;
pub const FCFG1_FLASH_VHV_VHV_E_M: u32 = 15;
pub const FCFG1_FLASH_VHV_VHV_E_S: u32 = 0;
pub const FCFG1_FLASH_VHV_PV_TRIM13_PV_W: u32 = 4;
pub const FCFG1_FLASH_VHV_PV_TRIM13_PV_M: u32 = 251658240;
pub const FCFG1_FLASH_VHV_PV_TRIM13_PV_S: u32 = 24;
pub const FCFG1_FLASH_VHV_PV_VHV_PV_W: u32 = 4;
pub const FCFG1_FLASH_VHV_PV_VHV_PV_M: u32 = 983040;
pub const FCFG1_FLASH_VHV_PV_VHV_PV_S: u32 = 16;
pub const FCFG1_FLASH_VHV_PV_VCG2P5_W: u32 = 8;
pub const FCFG1_FLASH_VHV_PV_VCG2P5_M: u32 = 65280;
pub const FCFG1_FLASH_VHV_PV_VCG2P5_S: u32 = 8;
pub const FCFG1_FLASH_VHV_PV_VINH_W: u32 = 8;
pub const FCFG1_FLASH_VHV_PV_VINH_M: u32 = 255;
pub const FCFG1_FLASH_VHV_PV_VINH_S: u32 = 0;
pub const FCFG1_FLASH_V_VSL_P_W: u32 = 8;
pub const FCFG1_FLASH_V_VSL_P_M: u32 = 4278190080;
pub const FCFG1_FLASH_V_VSL_P_S: u32 = 24;
pub const FCFG1_FLASH_V_VWL_P_W: u32 = 8;
pub const FCFG1_FLASH_V_VWL_P_M: u32 = 16711680;
pub const FCFG1_FLASH_V_VWL_P_S: u32 = 16;
pub const FCFG1_FLASH_V_V_READ_W: u32 = 8;
pub const FCFG1_FLASH_V_V_READ_M: u32 = 65280;
pub const FCFG1_FLASH_V_V_READ_S: u32 = 8;
pub const FCFG1_USER_ID_PG_REV_W: u32 = 4;
pub const FCFG1_USER_ID_PG_REV_M: u32 = 4026531840;
pub const FCFG1_USER_ID_PG_REV_S: u32 = 28;
pub const FCFG1_USER_ID_VER_W: u32 = 2;
pub const FCFG1_USER_ID_VER_M: u32 = 201326592;
pub const FCFG1_USER_ID_VER_S: u32 = 26;
pub const FCFG1_USER_ID_SEQUENCE_W: u32 = 4;
pub const FCFG1_USER_ID_SEQUENCE_M: u32 = 7864320;
pub const FCFG1_USER_ID_SEQUENCE_S: u32 = 19;
pub const FCFG1_USER_ID_PKG_W: u32 = 3;
pub const FCFG1_USER_ID_PKG_M: u32 = 458752;
pub const FCFG1_USER_ID_PKG_S: u32 = 16;
pub const FCFG1_USER_ID_PROTOCOL_W: u32 = 4;
pub const FCFG1_USER_ID_PROTOCOL_M: u32 = 61440;
pub const FCFG1_USER_ID_PROTOCOL_S: u32 = 12;
pub const FCFG1_FLASH_OTP_DATA3_EC_STEP_SIZE_W: u32 = 9;
pub const FCFG1_FLASH_OTP_DATA3_EC_STEP_SIZE_M: u32 = 4286578688;
pub const FCFG1_FLASH_OTP_DATA3_EC_STEP_SIZE_S: u32 = 23;
pub const FCFG1_FLASH_OTP_DATA3_DO_PRECOND: u32 = 4194304;
pub const FCFG1_FLASH_OTP_DATA3_DO_PRECOND_BITN: u32 = 22;
pub const FCFG1_FLASH_OTP_DATA3_DO_PRECOND_M: u32 = 4194304;
pub const FCFG1_FLASH_OTP_DATA3_DO_PRECOND_S: u32 = 22;
pub const FCFG1_FLASH_OTP_DATA3_MAX_EC_LEVEL_W: u32 = 4;
pub const FCFG1_FLASH_OTP_DATA3_MAX_EC_LEVEL_M: u32 = 3932160;
pub const FCFG1_FLASH_OTP_DATA3_MAX_EC_LEVEL_S: u32 = 18;
pub const FCFG1_FLASH_OTP_DATA3_TRIM_1P7_W: u32 = 2;
pub const FCFG1_FLASH_OTP_DATA3_TRIM_1P7_M: u32 = 196608;
pub const FCFG1_FLASH_OTP_DATA3_TRIM_1P7_S: u32 = 16;
pub const FCFG1_FLASH_OTP_DATA3_FLASH_SIZE_W: u32 = 8;
pub const FCFG1_FLASH_OTP_DATA3_FLASH_SIZE_M: u32 = 65280;
pub const FCFG1_FLASH_OTP_DATA3_FLASH_SIZE_S: u32 = 8;
pub const FCFG1_FLASH_OTP_DATA3_WAIT_SYSCODE_W: u32 = 8;
pub const FCFG1_FLASH_OTP_DATA3_WAIT_SYSCODE_M: u32 = 255;
pub const FCFG1_FLASH_OTP_DATA3_WAIT_SYSCODE_S: u32 = 0;
pub const FCFG1_ANA2_TRIM_RCOSCHFCTRIMFRACT_EN: u32 = 2147483648;
pub const FCFG1_ANA2_TRIM_RCOSCHFCTRIMFRACT_EN_BITN: u32 = 31;
pub const FCFG1_ANA2_TRIM_RCOSCHFCTRIMFRACT_EN_M: u32 = 2147483648;
pub const FCFG1_ANA2_TRIM_RCOSCHFCTRIMFRACT_EN_S: u32 = 31;
pub const FCFG1_ANA2_TRIM_RCOSCHFCTRIMFRACT_W: u32 = 5;
pub const FCFG1_ANA2_TRIM_RCOSCHFCTRIMFRACT_M: u32 = 2080374784;
pub const FCFG1_ANA2_TRIM_RCOSCHFCTRIMFRACT_S: u32 = 26;
pub const FCFG1_ANA2_TRIM_SET_RCOSC_HF_FINE_RESISTOR_W: u32 = 2;
pub const FCFG1_ANA2_TRIM_SET_RCOSC_HF_FINE_RESISTOR_M: u32 = 25165824;
pub const FCFG1_ANA2_TRIM_SET_RCOSC_HF_FINE_RESISTOR_S: u32 = 23;
pub const FCFG1_ANA2_TRIM_ATESTLF_UDIGLDO_IBIAS_TRIM: u32 = 4194304;
pub const FCFG1_ANA2_TRIM_ATESTLF_UDIGLDO_IBIAS_TRIM_BITN: u32 = 22;
pub const FCFG1_ANA2_TRIM_ATESTLF_UDIGLDO_IBIAS_TRIM_M: u32 = 4194304;
pub const FCFG1_ANA2_TRIM_ATESTLF_UDIGLDO_IBIAS_TRIM_S: u32 = 22;
pub const FCFG1_ANA2_TRIM_NANOAMP_RES_TRIM_W: u32 = 6;
pub const FCFG1_ANA2_TRIM_NANOAMP_RES_TRIM_M: u32 = 4128768;
pub const FCFG1_ANA2_TRIM_NANOAMP_RES_TRIM_S: u32 = 16;
pub const FCFG1_ANA2_TRIM_DITHER_EN: u32 = 2048;
pub const FCFG1_ANA2_TRIM_DITHER_EN_BITN: u32 = 11;
pub const FCFG1_ANA2_TRIM_DITHER_EN_M: u32 = 2048;
pub const FCFG1_ANA2_TRIM_DITHER_EN_S: u32 = 11;
pub const FCFG1_ANA2_TRIM_DCDC_IPEAK_W: u32 = 3;
pub const FCFG1_ANA2_TRIM_DCDC_IPEAK_M: u32 = 1792;
pub const FCFG1_ANA2_TRIM_DCDC_IPEAK_S: u32 = 8;
pub const FCFG1_ANA2_TRIM_DEAD_TIME_TRIM_W: u32 = 2;
pub const FCFG1_ANA2_TRIM_DEAD_TIME_TRIM_M: u32 = 192;
pub const FCFG1_ANA2_TRIM_DEAD_TIME_TRIM_S: u32 = 6;
pub const FCFG1_ANA2_TRIM_DCDC_LOW_EN_SEL_W: u32 = 3;
pub const FCFG1_ANA2_TRIM_DCDC_LOW_EN_SEL_M: u32 = 56;
pub const FCFG1_ANA2_TRIM_DCDC_LOW_EN_SEL_S: u32 = 3;
pub const FCFG1_ANA2_TRIM_DCDC_HIGH_EN_SEL_W: u32 = 3;
pub const FCFG1_ANA2_TRIM_DCDC_HIGH_EN_SEL_M: u32 = 7;
pub const FCFG1_ANA2_TRIM_DCDC_HIGH_EN_SEL_S: u32 = 0;
pub const FCFG1_LDO_TRIM_VDDR_TRIM_SLEEP_W: u32 = 5;
pub const FCFG1_LDO_TRIM_VDDR_TRIM_SLEEP_M: u32 = 520093696;
pub const FCFG1_LDO_TRIM_VDDR_TRIM_SLEEP_S: u32 = 24;
pub const FCFG1_LDO_TRIM_GLDO_CURSRC_W: u32 = 3;
pub const FCFG1_LDO_TRIM_GLDO_CURSRC_M: u32 = 458752;
pub const FCFG1_LDO_TRIM_GLDO_CURSRC_S: u32 = 16;
pub const FCFG1_LDO_TRIM_ITRIM_DIGLDO_LOAD_W: u32 = 2;
pub const FCFG1_LDO_TRIM_ITRIM_DIGLDO_LOAD_M: u32 = 6144;
pub const FCFG1_LDO_TRIM_ITRIM_DIGLDO_LOAD_S: u32 = 11;
pub const FCFG1_LDO_TRIM_ITRIM_UDIGLDO_W: u32 = 3;
pub const FCFG1_LDO_TRIM_ITRIM_UDIGLDO_M: u32 = 1792;
pub const FCFG1_LDO_TRIM_ITRIM_UDIGLDO_S: u32 = 8;
pub const FCFG1_LDO_TRIM_VTRIM_DELTA_W: u32 = 3;
pub const FCFG1_LDO_TRIM_VTRIM_DELTA_M: u32 = 7;
pub const FCFG1_LDO_TRIM_VTRIM_DELTA_S: u32 = 0;
pub const FCFG1_BAT_RC_LDO_TRIM_VTRIM_BOD_W: u32 = 4;
pub const FCFG1_BAT_RC_LDO_TRIM_VTRIM_BOD_M: u32 = 251658240;
pub const FCFG1_BAT_RC_LDO_TRIM_VTRIM_BOD_S: u32 = 24;
pub const FCFG1_BAT_RC_LDO_TRIM_VTRIM_UDIG_W: u32 = 4;
pub const FCFG1_BAT_RC_LDO_TRIM_VTRIM_UDIG_M: u32 = 983040;
pub const FCFG1_BAT_RC_LDO_TRIM_VTRIM_UDIG_S: u32 = 16;
pub const FCFG1_BAT_RC_LDO_TRIM_RCOSCHF_ITUNE_TRIM_W: u32 = 4;
pub const FCFG1_BAT_RC_LDO_TRIM_RCOSCHF_ITUNE_TRIM_M: u32 = 3840;
pub const FCFG1_BAT_RC_LDO_TRIM_RCOSCHF_ITUNE_TRIM_S: u32 = 8;
pub const FCFG1_BAT_RC_LDO_TRIM_MEASUREPER_W: u32 = 2;
pub const FCFG1_BAT_RC_LDO_TRIM_MEASUREPER_M: u32 = 3;
pub const FCFG1_BAT_RC_LDO_TRIM_MEASUREPER_S: u32 = 0;
pub const FCFG1_MAC_BLE_0_ADDR_0_31_W: u32 = 32;
pub const FCFG1_MAC_BLE_0_ADDR_0_31_M: u32 = 4294967295;
pub const FCFG1_MAC_BLE_0_ADDR_0_31_S: u32 = 0;
pub const FCFG1_MAC_BLE_1_ADDR_32_63_W: u32 = 32;
pub const FCFG1_MAC_BLE_1_ADDR_32_63_M: u32 = 4294967295;
pub const FCFG1_MAC_BLE_1_ADDR_32_63_S: u32 = 0;
pub const FCFG1_MAC_15_4_0_ADDR_0_31_W: u32 = 32;
pub const FCFG1_MAC_15_4_0_ADDR_0_31_M: u32 = 4294967295;
pub const FCFG1_MAC_15_4_0_ADDR_0_31_S: u32 = 0;
pub const FCFG1_MAC_15_4_1_ADDR_32_63_W: u32 = 32;
pub const FCFG1_MAC_15_4_1_ADDR_32_63_M: u32 = 4294967295;
pub const FCFG1_MAC_15_4_1_ADDR_32_63_S: u32 = 0;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_INT_WRT: u32 = 2147483648;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_INT_WRT_BITN: u32 = 31;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_INT_WRT_M: u32 = 2147483648;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_INT_WRT_S: u32 = 31;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_PW_SEL_INT_WRT_W: u32 = 2;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_PW_SEL_INT_WRT_M: u32 = 1610612736;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_PW_SEL_INT_WRT_S: u32 = 29;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_INT_WRT: u32 = 268435456;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_INT_WRT_BITN: u32 = 28;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_INT_WRT_M: u32 = 268435456;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_INT_WRT_S: u32 = 28;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_INT_WRT: u32 = 134217728;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_INT_WRT_BITN: u32 = 27;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_INT_WRT_M: u32 = 134217728;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_INT_WRT_S: u32 = 27;
pub const FCFG1_FLASH_OTP_DATA4_VIN_AT_X_INT_WRT_W: u32 = 3;
pub const FCFG1_FLASH_OTP_DATA4_VIN_AT_X_INT_WRT_M: u32 = 117440512;
pub const FCFG1_FLASH_OTP_DATA4_VIN_AT_X_INT_WRT_S: u32 = 24;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_EXT_WRT: u32 = 8388608;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_EXT_WRT_BITN: u32 = 23;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_EXT_WRT_M: u32 = 8388608;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_EXT_WRT_S: u32 = 23;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_PW_SEL_EXT_WRT_W: u32 = 2;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_PW_SEL_EXT_WRT_M: u32 = 6291456;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_PW_SEL_EXT_WRT_S: u32 = 21;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_EXT_WRT: u32 = 1048576;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_EXT_WRT_BITN: u32 = 20;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_EXT_WRT_M: u32 = 1048576;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_EXT_WRT_S: u32 = 20;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_EXT_WRT: u32 = 524288;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_EXT_WRT_BITN: u32 = 19;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_EXT_WRT_M: u32 = 524288;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_EXT_WRT_S: u32 = 19;
pub const FCFG1_FLASH_OTP_DATA4_VIN_AT_X_EXT_WRT_W: u32 = 3;
pub const FCFG1_FLASH_OTP_DATA4_VIN_AT_X_EXT_WRT_M: u32 = 458752;
pub const FCFG1_FLASH_OTP_DATA4_VIN_AT_X_EXT_WRT_S: u32 = 16;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_INT_RD: u32 = 32768;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_INT_RD_BITN: u32 = 15;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_INT_RD_M: u32 = 32768;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_INT_RD_S: u32 = 15;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_PW_SEL_INT_RD_W: u32 = 2;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_PW_SEL_INT_RD_M: u32 = 24576;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_PW_SEL_INT_RD_S: u32 = 13;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_INT_RD: u32 = 4096;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_INT_RD_BITN: u32 = 12;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_INT_RD_M: u32 = 4096;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_INT_RD_S: u32 = 12;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_INT_RD: u32 = 2048;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_INT_RD_BITN: u32 = 11;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_INT_RD_M: u32 = 2048;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_INT_RD_S: u32 = 11;
pub const FCFG1_FLASH_OTP_DATA4_VIN_AT_X_INT_RD_W: u32 = 3;
pub const FCFG1_FLASH_OTP_DATA4_VIN_AT_X_INT_RD_M: u32 = 1792;
pub const FCFG1_FLASH_OTP_DATA4_VIN_AT_X_INT_RD_S: u32 = 8;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_EXT_RD: u32 = 128;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_EXT_RD_BITN: u32 = 7;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_EXT_RD_M: u32 = 128;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_MODE_SEL_EXT_RD_S: u32 = 7;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_PW_SEL_EXT_RD_W: u32 = 2;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_PW_SEL_EXT_RD_M: u32 = 96;
pub const FCFG1_FLASH_OTP_DATA4_STANDBY_PW_SEL_EXT_RD_S: u32 = 5;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_EXT_RD: u32 = 16;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_EXT_RD_BITN: u32 = 4;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_EXT_RD_M: u32 = 16;
pub const FCFG1_FLASH_OTP_DATA4_DIS_STANDBY_EXT_RD_S: u32 = 4;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_EXT_RD: u32 = 8;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_EXT_RD_BITN: u32 = 3;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_EXT_RD_M: u32 = 8;
pub const FCFG1_FLASH_OTP_DATA4_DIS_IDLE_EXT_RD_S: u32 = 3;
pub const FCFG1_FLASH_OTP_DATA4_VIN_AT_X_EXT_RD_W: u32 = 3;
pub const FCFG1_FLASH_OTP_DATA4_VIN_AT_X_EXT_RD_M: u32 = 7;
pub const FCFG1_FLASH_OTP_DATA4_VIN_AT_X_EXT_RD_S: u32 = 0;
pub const FCFG1_MISC_TRIM_TEMPVSLOPE_W: u32 = 8;
pub const FCFG1_MISC_TRIM_TEMPVSLOPE_M: u32 = 255;
pub const FCFG1_MISC_TRIM_TEMPVSLOPE_S: u32 = 0;
pub const FCFG1_RCOSC_HF_TEMPCOMP_FINE_RESISTOR_W: u32 = 8;
pub const FCFG1_RCOSC_HF_TEMPCOMP_FINE_RESISTOR_M: u32 = 4278190080;
pub const FCFG1_RCOSC_HF_TEMPCOMP_FINE_RESISTOR_S: u32 = 24;
pub const FCFG1_RCOSC_HF_TEMPCOMP_CTRIM_W: u32 = 8;
pub const FCFG1_RCOSC_HF_TEMPCOMP_CTRIM_M: u32 = 16711680;
pub const FCFG1_RCOSC_HF_TEMPCOMP_CTRIM_S: u32 = 16;
pub const FCFG1_RCOSC_HF_TEMPCOMP_CTRIMFRACT_QUAD_W: u32 = 8;
pub const FCFG1_RCOSC_HF_TEMPCOMP_CTRIMFRACT_QUAD_M: u32 = 65280;
pub const FCFG1_RCOSC_HF_TEMPCOMP_CTRIMFRACT_QUAD_S: u32 = 8;
pub const FCFG1_RCOSC_HF_TEMPCOMP_CTRIMFRACT_SLOPE_W: u32 = 8;
pub const FCFG1_RCOSC_HF_TEMPCOMP_CTRIMFRACT_SLOPE_M: u32 = 255;
pub const FCFG1_RCOSC_HF_TEMPCOMP_CTRIMFRACT_SLOPE_S: u32 = 0;
pub const FCFG1_TRIM_CAL_REVISION_FT1_W: u32 = 16;
pub const FCFG1_TRIM_CAL_REVISION_FT1_M: u32 = 4294901760;
pub const FCFG1_TRIM_CAL_REVISION_FT1_S: u32 = 16;
pub const FCFG1_TRIM_CAL_REVISION_MP1_W: u32 = 16;
pub const FCFG1_TRIM_CAL_REVISION_MP1_M: u32 = 65535;
pub const FCFG1_TRIM_CAL_REVISION_MP1_S: u32 = 0;
pub const FCFG1_ICEPICK_DEVICE_ID_PG_REV_W: u32 = 4;
pub const FCFG1_ICEPICK_DEVICE_ID_PG_REV_M: u32 = 4026531840;
pub const FCFG1_ICEPICK_DEVICE_ID_PG_REV_S: u32 = 28;
pub const FCFG1_ICEPICK_DEVICE_ID_WAFER_ID_W: u32 = 16;
pub const FCFG1_ICEPICK_DEVICE_ID_WAFER_ID_M: u32 = 268431360;
pub const FCFG1_ICEPICK_DEVICE_ID_WAFER_ID_S: u32 = 12;
pub const FCFG1_ICEPICK_DEVICE_ID_MANUFACTURER_ID_W: u32 = 12;
pub const FCFG1_ICEPICK_DEVICE_ID_MANUFACTURER_ID_M: u32 = 4095;
pub const FCFG1_ICEPICK_DEVICE_ID_MANUFACTURER_ID_S: u32 = 0;
pub const FCFG1_FCFG1_REVISION_REV_W: u32 = 32;
pub const FCFG1_FCFG1_REVISION_REV_M: u32 = 4294967295;
pub const FCFG1_FCFG1_REVISION_REV_S: u32 = 0;
pub const FCFG1_MISC_OTP_DATA_RCOSC_HF_ITUNE_W: u32 = 4;
pub const FCFG1_MISC_OTP_DATA_RCOSC_HF_ITUNE_M: u32 = 4026531840;
pub const FCFG1_MISC_OTP_DATA_RCOSC_HF_ITUNE_S: u32 = 28;
pub const FCFG1_MISC_OTP_DATA_RCOSC_HF_CRIM_W: u32 = 8;
pub const FCFG1_MISC_OTP_DATA_RCOSC_HF_CRIM_M: u32 = 267386880;
pub const FCFG1_MISC_OTP_DATA_RCOSC_HF_CRIM_S: u32 = 20;
pub const FCFG1_MISC_OTP_DATA_PER_M_W: u32 = 5;
pub const FCFG1_MISC_OTP_DATA_PER_M_M: u32 = 1015808;
pub const FCFG1_MISC_OTP_DATA_PER_M_S: u32 = 15;
pub const FCFG1_MISC_OTP_DATA_PER_E_W: u32 = 3;
pub const FCFG1_MISC_OTP_DATA_PER_E_M: u32 = 28672;
pub const FCFG1_MISC_OTP_DATA_PER_E_S: u32 = 12;
pub const FCFG1_MISC_OTP_DATA_PO_TAIL_RES_TRIM_W: u32 = 4;
pub const FCFG1_MISC_OTP_DATA_PO_TAIL_RES_TRIM_M: u32 = 3840;
pub const FCFG1_MISC_OTP_DATA_PO_TAIL_RES_TRIM_S: u32 = 8;
pub const FCFG1_MISC_OTP_DATA_TEST_PROGRAM_REV_W: u32 = 8;
pub const FCFG1_MISC_OTP_DATA_TEST_PROGRAM_REV_M: u32 = 255;
pub const FCFG1_MISC_OTP_DATA_TEST_PROGRAM_REV_S: u32 = 0;
pub const FCFG1_IOCONF_GPIO_CNT_W: u32 = 7;
pub const FCFG1_IOCONF_GPIO_CNT_M: u32 = 127;
pub const FCFG1_IOCONF_GPIO_CNT_S: u32 = 0;
pub const FCFG1_CONFIG_IF_ADC_FF2ADJ_W: u32 = 4;
pub const FCFG1_CONFIG_IF_ADC_FF2ADJ_M: u32 = 4026531840;
pub const FCFG1_CONFIG_IF_ADC_FF2ADJ_S: u32 = 28;
pub const FCFG1_CONFIG_IF_ADC_FF3ADJ_W: u32 = 4;
pub const FCFG1_CONFIG_IF_ADC_FF3ADJ_M: u32 = 251658240;
pub const FCFG1_CONFIG_IF_ADC_FF3ADJ_S: u32 = 24;
pub const FCFG1_CONFIG_IF_ADC_INT3ADJ_W: u32 = 4;
pub const FCFG1_CONFIG_IF_ADC_INT3ADJ_M: u32 = 15728640;
pub const FCFG1_CONFIG_IF_ADC_INT3ADJ_S: u32 = 20;
pub const FCFG1_CONFIG_IF_ADC_FF1ADJ_W: u32 = 4;
pub const FCFG1_CONFIG_IF_ADC_FF1ADJ_M: u32 = 983040;
pub const FCFG1_CONFIG_IF_ADC_FF1ADJ_S: u32 = 16;
pub const FCFG1_CONFIG_IF_ADC_AAFCAP_W: u32 = 2;
pub const FCFG1_CONFIG_IF_ADC_AAFCAP_M: u32 = 49152;
pub const FCFG1_CONFIG_IF_ADC_AAFCAP_S: u32 = 14;
pub const FCFG1_CONFIG_IF_ADC_INT2ADJ_W: u32 = 4;
pub const FCFG1_CONFIG_IF_ADC_INT2ADJ_M: u32 = 15360;
pub const FCFG1_CONFIG_IF_ADC_INT2ADJ_S: u32 = 10;
pub const FCFG1_CONFIG_IF_ADC_IFDIGLDO_TRIM_OUTPUT_W: u32 = 5;
pub const FCFG1_CONFIG_IF_ADC_IFDIGLDO_TRIM_OUTPUT_M: u32 = 992;
pub const FCFG1_CONFIG_IF_ADC_IFDIGLDO_TRIM_OUTPUT_S: u32 = 5;
pub const FCFG1_CONFIG_IF_ADC_IFANALDO_TRIM_OUTPUT_W: u32 = 5;
pub const FCFG1_CONFIG_IF_ADC_IFANALDO_TRIM_OUTPUT_M: u32 = 31;
pub const FCFG1_CONFIG_IF_ADC_IFANALDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_OSC_TOP_XOSC_HF_ROW_Q12_W: u32 = 4;
pub const FCFG1_CONFIG_OSC_TOP_XOSC_HF_ROW_Q12_M: u32 = 1006632960;
pub const FCFG1_CONFIG_OSC_TOP_XOSC_HF_ROW_Q12_S: u32 = 26;
pub const FCFG1_CONFIG_OSC_TOP_XOSC_HF_COLUMN_Q12_W: u32 = 16;
pub const FCFG1_CONFIG_OSC_TOP_XOSC_HF_COLUMN_Q12_M: u32 = 67107840;
pub const FCFG1_CONFIG_OSC_TOP_XOSC_HF_COLUMN_Q12_S: u32 = 10;
pub const FCFG1_CONFIG_OSC_TOP_RCOSCLF_CTUNE_TRIM_W: u32 = 8;
pub const FCFG1_CONFIG_OSC_TOP_RCOSCLF_CTUNE_TRIM_M: u32 = 1020;
pub const FCFG1_CONFIG_OSC_TOP_RCOSCLF_CTUNE_TRIM_S: u32 = 2;
pub const FCFG1_CONFIG_OSC_TOP_RCOSCLF_RTUNE_TRIM_W: u32 = 2;
pub const FCFG1_CONFIG_OSC_TOP_RCOSCLF_RTUNE_TRIM_M: u32 = 3;
pub const FCFG1_CONFIG_OSC_TOP_RCOSCLF_RTUNE_TRIM_S: u32 = 0;
pub const FCFG1_CONFIG_RF_FRONTEND_IFAMP_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_IFAMP_IB_M: u32 = 4026531840;
pub const FCFG1_CONFIG_RF_FRONTEND_IFAMP_IB_S: u32 = 28;
pub const FCFG1_CONFIG_RF_FRONTEND_LNA_IB_W: u32 = 4;
pub const FCFG1_CONFIG_RF_FRONTEND_LNA_IB_M: u32 = 251658240;
pub const FCFG1_CONFIG_RF_FRONTEND_LNA_IB_S: u32 = 24;
pub const FCFG1_CONFIG_RF_FRONTEND_IFAMP_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_IFAMP_TRIM_M: u32 = 16252928;
pub const FCFG1_CONFIG_RF_FRONTEND_IFAMP_TRIM_S: u32 = 19;
pub const FCFG1_CONFIG_RF_FRONTEND_CTL_PA0_TRIM_W: u32 = 5;
pub const FCFG1_CONFIG_RF_FRONTEND_CTL_PA0_TRIM_M: u32 = 507904;
pub const FCFG1_CONFIG_RF_FRONTEND_CTL_PA0_TRIM_S: u32 = 14;
pub const FCFG1_CONFIG_RF_FRONTEND_PATRIMCOMPLETE_N: u32 = 8192;
pub const FCFG1_CONFIG_RF_FRONTEND_PATRIMCOMPLETE_N_BITN: u32 = 13;
pub const FCFG1_CONFIG_RF_FRONTEND_PATRIMCOMPLETE_N_M: u32 = 8192;
pub const FCFG1_CONFIG_RF_FRONTEND_PATRIMCOMPLETE_N_S: u32 = 13;
pub const FCFG1_CONFIG_RF_FRONTEND_RFLDO_TRIM_OUTPUT_W: u32 = 7;
pub const FCFG1_CONFIG_RF_FRONTEND_RFLDO_TRIM_OUTPUT_M: u32 = 127;
pub const FCFG1_CONFIG_RF_FRONTEND_RFLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_CONFIG_SYNTH_RFC_MDM_DEMIQMC0_W: u32 = 16;
pub const FCFG1_CONFIG_SYNTH_RFC_MDM_DEMIQMC0_M: u32 = 268431360;
pub const FCFG1_CONFIG_SYNTH_RFC_MDM_DEMIQMC0_S: u32 = 12;
pub const FCFG1_CONFIG_SYNTH_LDOVCO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_LDOVCO_TRIM_OUTPUT_M: u32 = 4032;
pub const FCFG1_CONFIG_SYNTH_LDOVCO_TRIM_OUTPUT_S: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_SLDO_TRIM_OUTPUT_W: u32 = 6;
pub const FCFG1_CONFIG_SYNTH_SLDO_TRIM_OUTPUT_M: u32 = 63;
pub const FCFG1_CONFIG_SYNTH_SLDO_TRIM_OUTPUT_S: u32 = 0;
pub const FCFG1_SOC_ADC_ABS_GAIN_SOC_ADC_ABS_GAIN_TEMP1_W: u32 = 16;
pub const FCFG1_SOC_ADC_ABS_GAIN_SOC_ADC_ABS_GAIN_TEMP1_M: u32 = 65535;
pub const FCFG1_SOC_ADC_ABS_GAIN_SOC_ADC_ABS_GAIN_TEMP1_S: u32 = 0;
pub const FCFG1_SOC_ADC_REL_GAIN_SOC_ADC_REL_GAIN_TEMP1_W: u32 = 16;
pub const FCFG1_SOC_ADC_REL_GAIN_SOC_ADC_REL_GAIN_TEMP1_M: u32 = 65535;
pub const FCFG1_SOC_ADC_REL_GAIN_SOC_ADC_REL_GAIN_TEMP1_S: u32 = 0;
pub const FCFG1_SOC_ADC_OFFSET_INT_SOC_ADC_REL_OFFSET_TEMP1_W: u32 = 8;
pub const FCFG1_SOC_ADC_OFFSET_INT_SOC_ADC_REL_OFFSET_TEMP1_M: u32 = 16711680;
pub const FCFG1_SOC_ADC_OFFSET_INT_SOC_ADC_REL_OFFSET_TEMP1_S: u32 = 16;
pub const FCFG1_SOC_ADC_OFFSET_INT_SOC_ADC_ABS_OFFSET_TEMP1_W: u32 = 8;
pub const FCFG1_SOC_ADC_OFFSET_INT_SOC_ADC_ABS_OFFSET_TEMP1_M: u32 = 255;
pub const FCFG1_SOC_ADC_OFFSET_INT_SOC_ADC_ABS_OFFSET_TEMP1_S: u32 = 0;
pub const FCFG1_SOC_ADC_REF_TRIM_AND_OFFSET_EXT_SOC_ADC_REF_VOLTAGE_TRIM_TEMP1_W: u32 = 6;
pub const FCFG1_SOC_ADC_REF_TRIM_AND_OFFSET_EXT_SOC_ADC_REF_VOLTAGE_TRIM_TEMP1_M: u32 = 63;
pub const FCFG1_SOC_ADC_REF_TRIM_AND_OFFSET_EXT_SOC_ADC_REF_VOLTAGE_TRIM_TEMP1_S: u32 = 0;
pub const FCFG1_AMPCOMP_TH1_HPMRAMP3_LTH_W: u32 = 6;
pub const FCFG1_AMPCOMP_TH1_HPMRAMP3_LTH_M: u32 = 16515072;
pub const FCFG1_AMPCOMP_TH1_HPMRAMP3_LTH_S: u32 = 18;
pub const FCFG1_AMPCOMP_TH1_HPMRAMP3_HTH_W: u32 = 6;
pub const FCFG1_AMPCOMP_TH1_HPMRAMP3_HTH_M: u32 = 64512;
pub const FCFG1_AMPCOMP_TH1_HPMRAMP3_HTH_S: u32 = 10;
pub const FCFG1_AMPCOMP_TH1_IBIASCAP_LPTOHP_OL_CNT_W: u32 = 4;
pub const FCFG1_AMPCOMP_TH1_IBIASCAP_LPTOHP_OL_CNT_M: u32 = 960;
pub const FCFG1_AMPCOMP_TH1_IBIASCAP_LPTOHP_OL_CNT_S: u32 = 6;
pub const FCFG1_AMPCOMP_TH1_HPMRAMP1_TH_W: u32 = 6;
pub const FCFG1_AMPCOMP_TH1_HPMRAMP1_TH_M: u32 = 63;
pub const FCFG1_AMPCOMP_TH1_HPMRAMP1_TH_S: u32 = 0;
pub const FCFG1_AMPCOMP_TH2_LPMUPDATE_LTH_W: u32 = 6;
pub const FCFG1_AMPCOMP_TH2_LPMUPDATE_LTH_M: u32 = 4227858432;
pub const FCFG1_AMPCOMP_TH2_LPMUPDATE_LTH_S: u32 = 26;
pub const FCFG1_AMPCOMP_TH2_LPMUPDATE_HTM_W: u32 = 6;
pub const FCFG1_AMPCOMP_TH2_LPMUPDATE_HTM_M: u32 = 16515072;
pub const FCFG1_AMPCOMP_TH2_LPMUPDATE_HTM_S: u32 = 18;
pub const FCFG1_AMPCOMP_TH2_ADC_COMP_AMPTH_LPM_W: u32 = 6;
pub const FCFG1_AMPCOMP_TH2_ADC_COMP_AMPTH_LPM_M: u32 = 64512;
pub const FCFG1_AMPCOMP_TH2_ADC_COMP_AMPTH_LPM_S: u32 = 10;
pub const FCFG1_AMPCOMP_TH2_ADC_COMP_AMPTH_HPM_W: u32 = 6;
pub const FCFG1_AMPCOMP_TH2_ADC_COMP_AMPTH_HPM_M: u32 = 252;
pub const FCFG1_AMPCOMP_TH2_ADC_COMP_AMPTH_HPM_S: u32 = 2;
pub const FCFG1_AMPCOMP_CTRL1_AMPCOMP_REQ_MODE: u32 = 1073741824;
pub const FCFG1_AMPCOMP_CTRL1_AMPCOMP_REQ_MODE_BITN: u32 = 30;
pub const FCFG1_AMPCOMP_CTRL1_AMPCOMP_REQ_MODE_M: u32 = 1073741824;
pub const FCFG1_AMPCOMP_CTRL1_AMPCOMP_REQ_MODE_S: u32 = 30;
pub const FCFG1_AMPCOMP_CTRL1_IBIAS_OFFSET_W: u32 = 4;
pub const FCFG1_AMPCOMP_CTRL1_IBIAS_OFFSET_M: u32 = 15728640;
pub const FCFG1_AMPCOMP_CTRL1_IBIAS_OFFSET_S: u32 = 20;
pub const FCFG1_AMPCOMP_CTRL1_IBIAS_INIT_W: u32 = 4;
pub const FCFG1_AMPCOMP_CTRL1_IBIAS_INIT_M: u32 = 983040;
pub const FCFG1_AMPCOMP_CTRL1_IBIAS_INIT_S: u32 = 16;
pub const FCFG1_AMPCOMP_CTRL1_LPM_IBIAS_WAIT_CNT_FINAL_W: u32 = 8;
pub const FCFG1_AMPCOMP_CTRL1_LPM_IBIAS_WAIT_CNT_FINAL_M: u32 = 65280;
pub const FCFG1_AMPCOMP_CTRL1_LPM_IBIAS_WAIT_CNT_FINAL_S: u32 = 8;
pub const FCFG1_AMPCOMP_CTRL1_CAP_STEP_W: u32 = 4;
pub const FCFG1_AMPCOMP_CTRL1_CAP_STEP_M: u32 = 240;
pub const FCFG1_AMPCOMP_CTRL1_CAP_STEP_S: u32 = 4;
pub const FCFG1_AMPCOMP_CTRL1_IBIASCAP_HPTOLP_OL_CNT_W: u32 = 4;
pub const FCFG1_AMPCOMP_CTRL1_IBIASCAP_HPTOLP_OL_CNT_M: u32 = 15;
pub const FCFG1_AMPCOMP_CTRL1_IBIASCAP_HPTOLP_OL_CNT_S: u32 = 0;
pub const FCFG1_ANABYPASS_VALUE2_XOSC_HF_IBIASTHERM_W: u32 = 14;
pub const FCFG1_ANABYPASS_VALUE2_XOSC_HF_IBIASTHERM_M: u32 = 16383;
pub const FCFG1_ANABYPASS_VALUE2_XOSC_HF_IBIASTHERM_S: u32 = 0;
pub const FCFG1_CONFIG_MISC_ADC_RSSITRIMCOMPLETE_N: u32 = 131072;
pub const FCFG1_CONFIG_MISC_ADC_RSSITRIMCOMPLETE_N_BITN: u32 = 17;
pub const FCFG1_CONFIG_MISC_ADC_RSSITRIMCOMPLETE_N_M: u32 = 131072;
pub const FCFG1_CONFIG_MISC_ADC_RSSITRIMCOMPLETE_N_S: u32 = 17;
pub const FCFG1_CONFIG_MISC_ADC_RSSI_OFFSET_W: u32 = 8;
pub const FCFG1_CONFIG_MISC_ADC_RSSI_OFFSET_M: u32 = 130560;
pub const FCFG1_CONFIG_MISC_ADC_RSSI_OFFSET_S: u32 = 9;
pub const FCFG1_CONFIG_MISC_ADC_QUANTCTLTHRES_W: u32 = 3;
pub const FCFG1_CONFIG_MISC_ADC_QUANTCTLTHRES_M: u32 = 448;
pub const FCFG1_CONFIG_MISC_ADC_QUANTCTLTHRES_S: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DACTRIM_W: u32 = 6;
pub const FCFG1_CONFIG_MISC_ADC_DACTRIM_M: u32 = 63;
pub const FCFG1_CONFIG_MISC_ADC_DACTRIM_S: u32 = 0;
pub const FCFG1_VOLT_TRIM_VDDR_TRIM_HH_W: u32 = 5;
pub const FCFG1_VOLT_TRIM_VDDR_TRIM_HH_M: u32 = 520093696;
pub const FCFG1_VOLT_TRIM_VDDR_TRIM_HH_S: u32 = 24;
pub const FCFG1_VOLT_TRIM_VDDR_TRIM_H_W: u32 = 5;
pub const FCFG1_VOLT_TRIM_VDDR_TRIM_H_M: u32 = 2031616;
pub const FCFG1_VOLT_TRIM_VDDR_TRIM_H_S: u32 = 16;
pub const FCFG1_VOLT_TRIM_VDDR_TRIM_SLEEP_H_W: u32 = 5;
pub const FCFG1_VOLT_TRIM_VDDR_TRIM_SLEEP_H_M: u32 = 7936;
pub const FCFG1_VOLT_TRIM_VDDR_TRIM_SLEEP_H_S: u32 = 8;
pub const FCFG1_VOLT_TRIM_TRIMBOD_H_W: u32 = 5;
pub const FCFG1_VOLT_TRIM_TRIMBOD_H_M: u32 = 31;
pub const FCFG1_VOLT_TRIM_TRIMBOD_H_S: u32 = 0;
pub const FCFG1_OSC_CONF_ADC_SH_VBUF_EN: u32 = 536870912;
pub const FCFG1_OSC_CONF_ADC_SH_VBUF_EN_BITN: u32 = 29;
pub const FCFG1_OSC_CONF_ADC_SH_VBUF_EN_M: u32 = 536870912;
pub const FCFG1_OSC_CONF_ADC_SH_VBUF_EN_S: u32 = 29;
pub const FCFG1_OSC_CONF_ADC_SH_MODE_EN: u32 = 268435456;
pub const FCFG1_OSC_CONF_ADC_SH_MODE_EN_BITN: u32 = 28;
pub const FCFG1_OSC_CONF_ADC_SH_MODE_EN_M: u32 = 268435456;
pub const FCFG1_OSC_CONF_ADC_SH_MODE_EN_S: u32 = 28;
pub const FCFG1_OSC_CONF_ATESTLF_RCOSCLF_IBIAS_TRIM: u32 = 134217728;
pub const FCFG1_OSC_CONF_ATESTLF_RCOSCLF_IBIAS_TRIM_BITN: u32 = 27;
pub const FCFG1_OSC_CONF_ATESTLF_RCOSCLF_IBIAS_TRIM_M: u32 = 134217728;
pub const FCFG1_OSC_CONF_ATESTLF_RCOSCLF_IBIAS_TRIM_S: u32 = 27;
pub const FCFG1_OSC_CONF_XOSCLF_REGULATOR_TRIM_W: u32 = 2;
pub const FCFG1_OSC_CONF_XOSCLF_REGULATOR_TRIM_M: u32 = 100663296;
pub const FCFG1_OSC_CONF_XOSCLF_REGULATOR_TRIM_S: u32 = 25;
pub const FCFG1_OSC_CONF_XOSCLF_CMIRRWR_RATIO_W: u32 = 4;
pub const FCFG1_OSC_CONF_XOSCLF_CMIRRWR_RATIO_M: u32 = 31457280;
pub const FCFG1_OSC_CONF_XOSCLF_CMIRRWR_RATIO_S: u32 = 21;
pub const FCFG1_OSC_CONF_XOSC_HF_FAST_START_W: u32 = 2;
pub const FCFG1_OSC_CONF_XOSC_HF_FAST_START_M: u32 = 1572864;
pub const FCFG1_OSC_CONF_XOSC_HF_FAST_START_S: u32 = 19;
pub const FCFG1_OSC_CONF_XOSC_OPTION: u32 = 262144;
pub const FCFG1_OSC_CONF_XOSC_OPTION_BITN: u32 = 18;
pub const FCFG1_OSC_CONF_XOSC_OPTION_M: u32 = 262144;
pub const FCFG1_OSC_CONF_XOSC_OPTION_S: u32 = 18;
pub const FCFG1_OSC_CONF_HPOSC_OPTION: u32 = 131072;
pub const FCFG1_OSC_CONF_HPOSC_OPTION_BITN: u32 = 17;
pub const FCFG1_OSC_CONF_HPOSC_OPTION_M: u32 = 131072;
pub const FCFG1_OSC_CONF_HPOSC_OPTION_S: u32 = 17;
pub const FCFG1_OSC_CONF_HPOSC_BIAS_HOLD_MODE_EN: u32 = 65536;
pub const FCFG1_OSC_CONF_HPOSC_BIAS_HOLD_MODE_EN_BITN: u32 = 16;
pub const FCFG1_OSC_CONF_HPOSC_BIAS_HOLD_MODE_EN_M: u32 = 65536;
pub const FCFG1_OSC_CONF_HPOSC_BIAS_HOLD_MODE_EN_S: u32 = 16;
pub const FCFG1_OSC_CONF_HPOSC_CURRMIRR_RATIO_W: u32 = 4;
pub const FCFG1_OSC_CONF_HPOSC_CURRMIRR_RATIO_M: u32 = 61440;
pub const FCFG1_OSC_CONF_HPOSC_CURRMIRR_RATIO_S: u32 = 12;
pub const FCFG1_OSC_CONF_HPOSC_BIAS_RES_SET_W: u32 = 4;
pub const FCFG1_OSC_CONF_HPOSC_BIAS_RES_SET_M: u32 = 3840;
pub const FCFG1_OSC_CONF_HPOSC_BIAS_RES_SET_S: u32 = 8;
pub const FCFG1_OSC_CONF_HPOSC_FILTER_EN: u32 = 128;
pub const FCFG1_OSC_CONF_HPOSC_FILTER_EN_BITN: u32 = 7;
pub const FCFG1_OSC_CONF_HPOSC_FILTER_EN_M: u32 = 128;
pub const FCFG1_OSC_CONF_HPOSC_FILTER_EN_S: u32 = 7;
pub const FCFG1_OSC_CONF_HPOSC_BIAS_RECHARGE_DELAY_W: u32 = 2;
pub const FCFG1_OSC_CONF_HPOSC_BIAS_RECHARGE_DELAY_M: u32 = 96;
pub const FCFG1_OSC_CONF_HPOSC_BIAS_RECHARGE_DELAY_S: u32 = 5;
pub const FCFG1_OSC_CONF_HPOSC_SERIES_CAP_W: u32 = 2;
pub const FCFG1_OSC_CONF_HPOSC_SERIES_CAP_M: u32 = 6;
pub const FCFG1_OSC_CONF_HPOSC_SERIES_CAP_S: u32 = 1;
pub const FCFG1_OSC_CONF_HPOSC_DIV3_BYPASS: u32 = 1;
pub const FCFG1_OSC_CONF_HPOSC_DIV3_BYPASS_BITN: u32 = 0;
pub const FCFG1_OSC_CONF_HPOSC_DIV3_BYPASS_M: u32 = 1;
pub const FCFG1_OSC_CONF_HPOSC_DIV3_BYPASS_S: u32 = 0;
pub const FCFG1_FREQ_OFFSET_HPOSC_COMP_P0_W: u32 = 16;
pub const FCFG1_FREQ_OFFSET_HPOSC_COMP_P0_M: u32 = 4294901760;
pub const FCFG1_FREQ_OFFSET_HPOSC_COMP_P0_S: u32 = 16;
pub const FCFG1_FREQ_OFFSET_HPOSC_COMP_P1_W: u32 = 8;
pub const FCFG1_FREQ_OFFSET_HPOSC_COMP_P1_M: u32 = 65280;
pub const FCFG1_FREQ_OFFSET_HPOSC_COMP_P1_S: u32 = 8;
pub const FCFG1_FREQ_OFFSET_HPOSC_COMP_P2_W: u32 = 8;
pub const FCFG1_FREQ_OFFSET_HPOSC_COMP_P2_M: u32 = 255;
pub const FCFG1_FREQ_OFFSET_HPOSC_COMP_P2_S: u32 = 0;
pub const FCFG1_CAP_TRIM_FLUX_CAP_0P28_TRIM_W: u32 = 16;
pub const FCFG1_CAP_TRIM_FLUX_CAP_0P28_TRIM_M: u32 = 4294901760;
pub const FCFG1_CAP_TRIM_FLUX_CAP_0P28_TRIM_S: u32 = 16;
pub const FCFG1_CAP_TRIM_FLUX_CAP_0P4_TRIM_W: u32 = 16;
pub const FCFG1_CAP_TRIM_FLUX_CAP_0P4_TRIM_M: u32 = 65535;
pub const FCFG1_CAP_TRIM_FLUX_CAP_0P4_TRIM_S: u32 = 0;
pub const FCFG1_MISC_OTP_DATA_1_PEAK_DET_ITRIM_W: u32 = 2;
pub const FCFG1_MISC_OTP_DATA_1_PEAK_DET_ITRIM_M: u32 = 402653184;
pub const FCFG1_MISC_OTP_DATA_1_PEAK_DET_ITRIM_S: u32 = 27;
pub const FCFG1_MISC_OTP_DATA_1_HP_BUF_ITRIM_W: u32 = 3;
pub const FCFG1_MISC_OTP_DATA_1_HP_BUF_ITRIM_M: u32 = 117440512;
pub const FCFG1_MISC_OTP_DATA_1_HP_BUF_ITRIM_S: u32 = 24;
pub const FCFG1_MISC_OTP_DATA_1_LP_BUF_ITRIM_W: u32 = 2;
pub const FCFG1_MISC_OTP_DATA_1_LP_BUF_ITRIM_M: u32 = 12582912;
pub const FCFG1_MISC_OTP_DATA_1_LP_BUF_ITRIM_S: u32 = 22;
pub const FCFG1_MISC_OTP_DATA_1_DBLR_LOOP_FILTER_RESET_VOLTAGE_W: u32 = 2;
pub const FCFG1_MISC_OTP_DATA_1_DBLR_LOOP_FILTER_RESET_VOLTAGE_M: u32 = 3145728;
pub const FCFG1_MISC_OTP_DATA_1_DBLR_LOOP_FILTER_RESET_VOLTAGE_S: u32 = 20;
pub const FCFG1_MISC_OTP_DATA_1_HPM_IBIAS_WAIT_CNT_W: u32 = 10;
pub const FCFG1_MISC_OTP_DATA_1_HPM_IBIAS_WAIT_CNT_M: u32 = 1047552;
pub const FCFG1_MISC_OTP_DATA_1_HPM_IBIAS_WAIT_CNT_S: u32 = 10;
pub const FCFG1_MISC_OTP_DATA_1_LPM_IBIAS_WAIT_CNT_W: u32 = 6;
pub const FCFG1_MISC_OTP_DATA_1_LPM_IBIAS_WAIT_CNT_M: u32 = 1008;
pub const FCFG1_MISC_OTP_DATA_1_LPM_IBIAS_WAIT_CNT_S: u32 = 4;
pub const FCFG1_MISC_OTP_DATA_1_IDAC_STEP_W: u32 = 4;
pub const FCFG1_MISC_OTP_DATA_1_IDAC_STEP_M: u32 = 15;
pub const FCFG1_MISC_OTP_DATA_1_IDAC_STEP_S: u32 = 0;
pub const FCFG1_PWD_CURR_20C_DELTA_CACHE_REF_W: u32 = 8;
pub const FCFG1_PWD_CURR_20C_DELTA_CACHE_REF_M: u32 = 4278190080;
pub const FCFG1_PWD_CURR_20C_DELTA_CACHE_REF_S: u32 = 24;
pub const FCFG1_PWD_CURR_20C_DELTA_RFMEM_RET_W: u32 = 8;
pub const FCFG1_PWD_CURR_20C_DELTA_RFMEM_RET_M: u32 = 16711680;
pub const FCFG1_PWD_CURR_20C_DELTA_RFMEM_RET_S: u32 = 16;
pub const FCFG1_PWD_CURR_20C_DELTA_XOSC_LPM_W: u32 = 8;
pub const FCFG1_PWD_CURR_20C_DELTA_XOSC_LPM_M: u32 = 65280;
pub const FCFG1_PWD_CURR_20C_DELTA_XOSC_LPM_S: u32 = 8;
pub const FCFG1_PWD_CURR_20C_BASELINE_W: u32 = 8;
pub const FCFG1_PWD_CURR_20C_BASELINE_M: u32 = 255;
pub const FCFG1_PWD_CURR_20C_BASELINE_S: u32 = 0;
pub const FCFG1_PWD_CURR_35C_DELTA_CACHE_REF_W: u32 = 8;
pub const FCFG1_PWD_CURR_35C_DELTA_CACHE_REF_M: u32 = 4278190080;
pub const FCFG1_PWD_CURR_35C_DELTA_CACHE_REF_S: u32 = 24;
pub const FCFG1_PWD_CURR_35C_DELTA_RFMEM_RET_W: u32 = 8;
pub const FCFG1_PWD_CURR_35C_DELTA_RFMEM_RET_M: u32 = 16711680;
pub const FCFG1_PWD_CURR_35C_DELTA_RFMEM_RET_S: u32 = 16;
pub const FCFG1_PWD_CURR_35C_DELTA_XOSC_LPM_W: u32 = 8;
pub const FCFG1_PWD_CURR_35C_DELTA_XOSC_LPM_M: u32 = 65280;
pub const FCFG1_PWD_CURR_35C_DELTA_XOSC_LPM_S: u32 = 8;
pub const FCFG1_PWD_CURR_35C_BASELINE_W: u32 = 8;
pub const FCFG1_PWD_CURR_35C_BASELINE_M: u32 = 255;
pub const FCFG1_PWD_CURR_35C_BASELINE_S: u32 = 0;
pub const FCFG1_PWD_CURR_50C_DELTA_CACHE_REF_W: u32 = 8;
pub const FCFG1_PWD_CURR_50C_DELTA_CACHE_REF_M: u32 = 4278190080;
pub const FCFG1_PWD_CURR_50C_DELTA_CACHE_REF_S: u32 = 24;
pub const FCFG1_PWD_CURR_50C_DELTA_RFMEM_RET_W: u32 = 8;
pub const FCFG1_PWD_CURR_50C_DELTA_RFMEM_RET_M: u32 = 16711680;
pub const FCFG1_PWD_CURR_50C_DELTA_RFMEM_RET_S: u32 = 16;
pub const FCFG1_PWD_CURR_50C_DELTA_XOSC_LPM_W: u32 = 8;
pub const FCFG1_PWD_CURR_50C_DELTA_XOSC_LPM_M: u32 = 65280;
pub const FCFG1_PWD_CURR_50C_DELTA_XOSC_LPM_S: u32 = 8;
pub const FCFG1_PWD_CURR_50C_BASELINE_W: u32 = 8;
pub const FCFG1_PWD_CURR_50C_BASELINE_M: u32 = 255;
pub const FCFG1_PWD_CURR_50C_BASELINE_S: u32 = 0;
pub const FCFG1_PWD_CURR_65C_DELTA_CACHE_REF_W: u32 = 8;
pub const FCFG1_PWD_CURR_65C_DELTA_CACHE_REF_M: u32 = 4278190080;
pub const FCFG1_PWD_CURR_65C_DELTA_CACHE_REF_S: u32 = 24;
pub const FCFG1_PWD_CURR_65C_DELTA_RFMEM_RET_W: u32 = 8;
pub const FCFG1_PWD_CURR_65C_DELTA_RFMEM_RET_M: u32 = 16711680;
pub const FCFG1_PWD_CURR_65C_DELTA_RFMEM_RET_S: u32 = 16;
pub const FCFG1_PWD_CURR_65C_DELTA_XOSC_LPM_W: u32 = 8;
pub const FCFG1_PWD_CURR_65C_DELTA_XOSC_LPM_M: u32 = 65280;
pub const FCFG1_PWD_CURR_65C_DELTA_XOSC_LPM_S: u32 = 8;
pub const FCFG1_PWD_CURR_65C_BASELINE_W: u32 = 8;
pub const FCFG1_PWD_CURR_65C_BASELINE_M: u32 = 255;
pub const FCFG1_PWD_CURR_65C_BASELINE_S: u32 = 0;
pub const FCFG1_PWD_CURR_80C_DELTA_CACHE_REF_W: u32 = 8;
pub const FCFG1_PWD_CURR_80C_DELTA_CACHE_REF_M: u32 = 4278190080;
pub const FCFG1_PWD_CURR_80C_DELTA_CACHE_REF_S: u32 = 24;
pub const FCFG1_PWD_CURR_80C_DELTA_RFMEM_RET_W: u32 = 8;
pub const FCFG1_PWD_CURR_80C_DELTA_RFMEM_RET_M: u32 = 16711680;
pub const FCFG1_PWD_CURR_80C_DELTA_RFMEM_RET_S: u32 = 16;
pub const FCFG1_PWD_CURR_80C_DELTA_XOSC_LPM_W: u32 = 8;
pub const FCFG1_PWD_CURR_80C_DELTA_XOSC_LPM_M: u32 = 65280;
pub const FCFG1_PWD_CURR_80C_DELTA_XOSC_LPM_S: u32 = 8;
pub const FCFG1_PWD_CURR_80C_BASELINE_W: u32 = 8;
pub const FCFG1_PWD_CURR_80C_BASELINE_M: u32 = 255;
pub const FCFG1_PWD_CURR_80C_BASELINE_S: u32 = 0;
pub const FCFG1_PWD_CURR_95C_DELTA_CACHE_REF_W: u32 = 8;
pub const FCFG1_PWD_CURR_95C_DELTA_CACHE_REF_M: u32 = 4278190080;
pub const FCFG1_PWD_CURR_95C_DELTA_CACHE_REF_S: u32 = 24;
pub const FCFG1_PWD_CURR_95C_DELTA_RFMEM_RET_W: u32 = 8;
pub const FCFG1_PWD_CURR_95C_DELTA_RFMEM_RET_M: u32 = 16711680;
pub const FCFG1_PWD_CURR_95C_DELTA_RFMEM_RET_S: u32 = 16;
pub const FCFG1_PWD_CURR_95C_DELTA_XOSC_LPM_W: u32 = 8;
pub const FCFG1_PWD_CURR_95C_DELTA_XOSC_LPM_M: u32 = 65280;
pub const FCFG1_PWD_CURR_95C_DELTA_XOSC_LPM_S: u32 = 8;
pub const FCFG1_PWD_CURR_95C_BASELINE_W: u32 = 8;
pub const FCFG1_PWD_CURR_95C_BASELINE_M: u32 = 255;
pub const FCFG1_PWD_CURR_95C_BASELINE_S: u32 = 0;
pub const FCFG1_PWD_CURR_110C_DELTA_CACHE_REF_W: u32 = 8;
pub const FCFG1_PWD_CURR_110C_DELTA_CACHE_REF_M: u32 = 4278190080;
pub const FCFG1_PWD_CURR_110C_DELTA_CACHE_REF_S: u32 = 24;
pub const FCFG1_PWD_CURR_110C_DELTA_RFMEM_RET_W: u32 = 8;
pub const FCFG1_PWD_CURR_110C_DELTA_RFMEM_RET_M: u32 = 16711680;
pub const FCFG1_PWD_CURR_110C_DELTA_RFMEM_RET_S: u32 = 16;
pub const FCFG1_PWD_CURR_110C_DELTA_XOSC_LPM_W: u32 = 8;
pub const FCFG1_PWD_CURR_110C_DELTA_XOSC_LPM_M: u32 = 65280;
pub const FCFG1_PWD_CURR_110C_DELTA_XOSC_LPM_S: u32 = 8;
pub const FCFG1_PWD_CURR_110C_BASELINE_W: u32 = 8;
pub const FCFG1_PWD_CURR_110C_BASELINE_M: u32 = 255;
pub const FCFG1_PWD_CURR_110C_BASELINE_S: u32 = 0;
pub const FCFG1_PWD_CURR_125C_DELTA_CACHE_REF_W: u32 = 8;
pub const FCFG1_PWD_CURR_125C_DELTA_CACHE_REF_M: u32 = 4278190080;
pub const FCFG1_PWD_CURR_125C_DELTA_CACHE_REF_S: u32 = 24;
pub const FCFG1_PWD_CURR_125C_DELTA_RFMEM_RET_W: u32 = 8;
pub const FCFG1_PWD_CURR_125C_DELTA_RFMEM_RET_M: u32 = 16711680;
pub const FCFG1_PWD_CURR_125C_DELTA_RFMEM_RET_S: u32 = 16;
pub const FCFG1_PWD_CURR_125C_DELTA_XOSC_LPM_W: u32 = 8;
pub const FCFG1_PWD_CURR_125C_DELTA_XOSC_LPM_M: u32 = 65280;
pub const FCFG1_PWD_CURR_125C_DELTA_XOSC_LPM_S: u32 = 8;
pub const FCFG1_PWD_CURR_125C_BASELINE_W: u32 = 8;
pub const FCFG1_PWD_CURR_125C_BASELINE_M: u32 = 255;
pub const FCFG1_PWD_CURR_125C_BASELINE_S: u32 = 0;
pub const DRIVERLIB_BUILD_CC26X0: u32 = 0;
pub const DRIVERLIB_BUILD_CC13X0: u32 = 1;
pub const DRIVERLIB_BUILD_CC26X1: u32 = 2;
pub const DRIVERLIB_BUILD_CC26X0R2: u32 = 3;
pub const DRIVERLIB_BUILD_CC13X2_CC26X2: u32 = 4;
pub const THIS_DRIVERLIB_BUILD: u32 = 0;
pub const CRYPTO_O_DMACH0CTL: u32 = 0;
pub const CRYPTO_O_DMACH0EXTADDR: u32 = 4;
pub const CRYPTO_O_DMACH0LEN: u32 = 12;
pub const CRYPTO_O_DMASTAT: u32 = 24;
pub const CRYPTO_O_DMASWRESET: u32 = 28;
pub const CRYPTO_O_DMACH1CTL: u32 = 32;
pub const CRYPTO_O_DMACH1EXTADDR: u32 = 36;
pub const CRYPTO_O_DMACH1LEN: u32 = 44;
pub const CRYPTO_O_DMABUSCFG: u32 = 120;
pub const CRYPTO_O_DMAPORTERR: u32 = 124;
pub const CRYPTO_O_DMAHWVER: u32 = 252;
pub const CRYPTO_O_KEYWRITEAREA: u32 = 1024;
pub const CRYPTO_O_KEYWRITTENAREA: u32 = 1028;
pub const CRYPTO_O_KEYSIZE: u32 = 1032;
pub const CRYPTO_O_KEYREADAREA: u32 = 1036;
pub const CRYPTO_O_AESKEY20: u32 = 1280;
pub const CRYPTO_O_AESKEY21: u32 = 1284;
pub const CRYPTO_O_AESKEY22: u32 = 1288;
pub const CRYPTO_O_AESKEY23: u32 = 1292;
pub const CRYPTO_O_AESKEY30: u32 = 1296;
pub const CRYPTO_O_AESKEY31: u32 = 1300;
pub const CRYPTO_O_AESKEY32: u32 = 1304;
pub const CRYPTO_O_AESKEY33: u32 = 1308;
pub const CRYPTO_O_AESIV0: u32 = 1344;
pub const CRYPTO_O_AESIV1: u32 = 1348;
pub const CRYPTO_O_AESIV2: u32 = 1352;
pub const CRYPTO_O_AESIV3: u32 = 1356;
pub const CRYPTO_O_AESCTL: u32 = 1360;
pub const CRYPTO_O_AESDATALEN0: u32 = 1364;
pub const CRYPTO_O_AESDATALEN1: u32 = 1368;
pub const CRYPTO_O_AESAUTHLEN: u32 = 1372;
pub const CRYPTO_O_AESDATAOUT0: u32 = 1376;
pub const CRYPTO_O_AESDATAIN0: u32 = 1376;
pub const CRYPTO_O_AESDATAOUT1: u32 = 1380;
pub const CRYPTO_O_AESDATAIN1: u32 = 1380;
pub const CRYPTO_O_AESDATAOUT2: u32 = 1384;
pub const CRYPTO_O_AESDATAIN2: u32 = 1384;
pub const CRYPTO_O_AESDATAOUT3: u32 = 1388;
pub const CRYPTO_O_AESDATAIN3: u32 = 1388;
pub const CRYPTO_O_AESTAGOUT0: u32 = 1392;
pub const CRYPTO_O_AESTAGOUT1: u32 = 1396;
pub const CRYPTO_O_AESTAGOUT2: u32 = 1400;
pub const CRYPTO_O_AESTAGOUT3: u32 = 1404;
pub const CRYPTO_O_ALGSEL: u32 = 1792;
pub const CRYPTO_O_DMAPROTCTL: u32 = 1796;
pub const CRYPTO_O_SWRESET: u32 = 1856;
pub const CRYPTO_O_IRQTYPE: u32 = 1920;
pub const CRYPTO_O_IRQEN: u32 = 1924;
pub const CRYPTO_O_IRQCLR: u32 = 1928;
pub const CRYPTO_O_IRQSET: u32 = 1932;
pub const CRYPTO_O_IRQSTAT: u32 = 1936;
pub const CRYPTO_O_HWVER: u32 = 2044;
pub const CRYPTO_DMACH0CTL_PRIO: u32 = 2;
pub const CRYPTO_DMACH0CTL_PRIO_BITN: u32 = 1;
pub const CRYPTO_DMACH0CTL_PRIO_M: u32 = 2;
pub const CRYPTO_DMACH0CTL_PRIO_S: u32 = 1;
pub const CRYPTO_DMACH0CTL_PRIO_HIGH: u32 = 2;
pub const CRYPTO_DMACH0CTL_PRIO_LOW: u32 = 0;
pub const CRYPTO_DMACH0CTL_EN: u32 = 1;
pub const CRYPTO_DMACH0CTL_EN_BITN: u32 = 0;
pub const CRYPTO_DMACH0CTL_EN_M: u32 = 1;
pub const CRYPTO_DMACH0CTL_EN_S: u32 = 0;
pub const CRYPTO_DMACH0CTL_EN_EN: u32 = 1;
pub const CRYPTO_DMACH0CTL_EN_DIS: u32 = 0;
pub const CRYPTO_DMACH0EXTADDR_ADDR_W: u32 = 32;
pub const CRYPTO_DMACH0EXTADDR_ADDR_M: u32 = 4294967295;
pub const CRYPTO_DMACH0EXTADDR_ADDR_S: u32 = 0;
pub const CRYPTO_DMACH0LEN_LEN_W: u32 = 16;
pub const CRYPTO_DMACH0LEN_LEN_M: u32 = 65535;
pub const CRYPTO_DMACH0LEN_LEN_S: u32 = 0;
pub const CRYPTO_DMASTAT_PORT_ERR: u32 = 131072;
pub const CRYPTO_DMASTAT_PORT_ERR_BITN: u32 = 17;
pub const CRYPTO_DMASTAT_PORT_ERR_M: u32 = 131072;
pub const CRYPTO_DMASTAT_PORT_ERR_S: u32 = 17;
pub const CRYPTO_DMASTAT_CH1_ACTIVE: u32 = 2;
pub const CRYPTO_DMASTAT_CH1_ACTIVE_BITN: u32 = 1;
pub const CRYPTO_DMASTAT_CH1_ACTIVE_M: u32 = 2;
pub const CRYPTO_DMASTAT_CH1_ACTIVE_S: u32 = 1;
pub const CRYPTO_DMASTAT_CH0_ACTIVE: u32 = 1;
pub const CRYPTO_DMASTAT_CH0_ACTIVE_BITN: u32 = 0;
pub const CRYPTO_DMASTAT_CH0_ACTIVE_M: u32 = 1;
pub const CRYPTO_DMASTAT_CH0_ACTIVE_S: u32 = 0;
pub const CRYPTO_DMASWRESET_RESET: u32 = 1;
pub const CRYPTO_DMASWRESET_RESET_BITN: u32 = 0;
pub const CRYPTO_DMASWRESET_RESET_M: u32 = 1;
pub const CRYPTO_DMASWRESET_RESET_S: u32 = 0;
pub const CRYPTO_DMACH1CTL_PRIO: u32 = 2;
pub const CRYPTO_DMACH1CTL_PRIO_BITN: u32 = 1;
pub const CRYPTO_DMACH1CTL_PRIO_M: u32 = 2;
pub const CRYPTO_DMACH1CTL_PRIO_S: u32 = 1;
pub const CRYPTO_DMACH1CTL_PRIO_HIGH: u32 = 2;
pub const CRYPTO_DMACH1CTL_PRIO_LOW: u32 = 0;
pub const CRYPTO_DMACH1CTL_EN: u32 = 1;
pub const CRYPTO_DMACH1CTL_EN_BITN: u32 = 0;
pub const CRYPTO_DMACH1CTL_EN_M: u32 = 1;
pub const CRYPTO_DMACH1CTL_EN_S: u32 = 0;
pub const CRYPTO_DMACH1CTL_EN_EN: u32 = 1;
pub const CRYPTO_DMACH1CTL_EN_DIS: u32 = 0;
pub const CRYPTO_DMACH1EXTADDR_ADDR_W: u32 = 32;
pub const CRYPTO_DMACH1EXTADDR_ADDR_M: u32 = 4294967295;
pub const CRYPTO_DMACH1EXTADDR_ADDR_S: u32 = 0;
pub const CRYPTO_DMACH1LEN_LEN_W: u32 = 16;
pub const CRYPTO_DMACH1LEN_LEN_M: u32 = 65535;
pub const CRYPTO_DMACH1LEN_LEN_S: u32 = 0;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BURST_SIZE_W: u32 = 4;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BURST_SIZE_M: u32 = 61440;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BURST_SIZE_S: u32 = 12;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BURST_SIZE_64_BYTE: u32 = 24576;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BURST_SIZE_32_BYTE: u32 = 20480;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BURST_SIZE_16_BYTE: u32 = 16384;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BURST_SIZE_8_BYTE: u32 = 12288;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BURST_SIZE_4_BYTE: u32 = 8192;
pub const CRYPTO_DMABUSCFG_AHB_MST1_IDLE_EN: u32 = 2048;
pub const CRYPTO_DMABUSCFG_AHB_MST1_IDLE_EN_BITN: u32 = 11;
pub const CRYPTO_DMABUSCFG_AHB_MST1_IDLE_EN_M: u32 = 2048;
pub const CRYPTO_DMABUSCFG_AHB_MST1_IDLE_EN_S: u32 = 11;
pub const CRYPTO_DMABUSCFG_AHB_MST1_IDLE_EN_IDLE: u32 = 2048;
pub const CRYPTO_DMABUSCFG_AHB_MST1_IDLE_EN_NO_IDLE: u32 = 0;
pub const CRYPTO_DMABUSCFG_AHB_MST1_INCR_EN: u32 = 1024;
pub const CRYPTO_DMABUSCFG_AHB_MST1_INCR_EN_BITN: u32 = 10;
pub const CRYPTO_DMABUSCFG_AHB_MST1_INCR_EN_M: u32 = 1024;
pub const CRYPTO_DMABUSCFG_AHB_MST1_INCR_EN_S: u32 = 10;
pub const CRYPTO_DMABUSCFG_AHB_MST1_INCR_EN_SPECIFIED: u32 = 1024;
pub const CRYPTO_DMABUSCFG_AHB_MST1_INCR_EN_UNSPECIFIED: u32 = 0;
pub const CRYPTO_DMABUSCFG_AHB_MST1_LOCK_EN: u32 = 512;
pub const CRYPTO_DMABUSCFG_AHB_MST1_LOCK_EN_BITN: u32 = 9;
pub const CRYPTO_DMABUSCFG_AHB_MST1_LOCK_EN_M: u32 = 512;
pub const CRYPTO_DMABUSCFG_AHB_MST1_LOCK_EN_S: u32 = 9;
pub const CRYPTO_DMABUSCFG_AHB_MST1_LOCK_EN_LOCKED: u32 = 512;
pub const CRYPTO_DMABUSCFG_AHB_MST1_LOCK_EN_NOT_LOCKED: u32 = 0;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BIGEND: u32 = 256;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BIGEND_BITN: u32 = 8;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BIGEND_M: u32 = 256;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BIGEND_S: u32 = 8;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BIGEND_BIG_ENDIAN: u32 = 256;
pub const CRYPTO_DMABUSCFG_AHB_MST1_BIGEND_LITTLE_ENDIAN: u32 = 0;
pub const CRYPTO_DMAPORTERR_AHB_ERR: u32 = 4096;
pub const CRYPTO_DMAPORTERR_AHB_ERR_BITN: u32 = 12;
pub const CRYPTO_DMAPORTERR_AHB_ERR_M: u32 = 4096;
pub const CRYPTO_DMAPORTERR_AHB_ERR_S: u32 = 12;
pub const CRYPTO_DMAPORTERR_LAST_CH: u32 = 512;
pub const CRYPTO_DMAPORTERR_LAST_CH_BITN: u32 = 9;
pub const CRYPTO_DMAPORTERR_LAST_CH_M: u32 = 512;
pub const CRYPTO_DMAPORTERR_LAST_CH_S: u32 = 9;
pub const CRYPTO_DMAHWVER_HW_MAJOR_VER_W: u32 = 4;
pub const CRYPTO_DMAHWVER_HW_MAJOR_VER_M: u32 = 251658240;
pub const CRYPTO_DMAHWVER_HW_MAJOR_VER_S: u32 = 24;
pub const CRYPTO_DMAHWVER_HW_MINOR_VER_W: u32 = 4;
pub const CRYPTO_DMAHWVER_HW_MINOR_VER_M: u32 = 15728640;
pub const CRYPTO_DMAHWVER_HW_MINOR_VER_S: u32 = 20;
pub const CRYPTO_DMAHWVER_HW_PATCH_LVL_W: u32 = 4;
pub const CRYPTO_DMAHWVER_HW_PATCH_LVL_M: u32 = 983040;
pub const CRYPTO_DMAHWVER_HW_PATCH_LVL_S: u32 = 16;
pub const CRYPTO_DMAHWVER_VER_NUM_COMPL_W: u32 = 8;
pub const CRYPTO_DMAHWVER_VER_NUM_COMPL_M: u32 = 65280;
pub const CRYPTO_DMAHWVER_VER_NUM_COMPL_S: u32 = 8;
pub const CRYPTO_DMAHWVER_VER_NUM_W: u32 = 8;
pub const CRYPTO_DMAHWVER_VER_NUM_M: u32 = 255;
pub const CRYPTO_DMAHWVER_VER_NUM_S: u32 = 0;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA7: u32 = 128;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA7_BITN: u32 = 7;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA7_M: u32 = 128;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA7_S: u32 = 7;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA7_SEL: u32 = 128;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA7_NOT_SEL: u32 = 0;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA6: u32 = 64;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA6_BITN: u32 = 6;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA6_M: u32 = 64;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA6_S: u32 = 6;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA6_SEL: u32 = 64;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA6_NOT_SEL: u32 = 0;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA5: u32 = 32;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA5_BITN: u32 = 5;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA5_M: u32 = 32;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA5_S: u32 = 5;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA5_SEL: u32 = 32;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA5_NOT_SEL: u32 = 0;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA4: u32 = 16;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA4_BITN: u32 = 4;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA4_M: u32 = 16;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA4_S: u32 = 4;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA4_SEL: u32 = 16;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA4_NOT_SEL: u32 = 0;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA3: u32 = 8;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA3_BITN: u32 = 3;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA3_M: u32 = 8;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA3_S: u32 = 3;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA3_SEL: u32 = 8;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA3_NOT_SEL: u32 = 0;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA2: u32 = 4;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA2_BITN: u32 = 2;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA2_M: u32 = 4;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA2_S: u32 = 2;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA2_SEL: u32 = 4;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA2_NOT_SEL: u32 = 0;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA1: u32 = 2;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA1_BITN: u32 = 1;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA1_M: u32 = 2;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA1_S: u32 = 1;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA1_SEL: u32 = 2;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA1_NOT_SEL: u32 = 0;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA0: u32 = 1;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA0_BITN: u32 = 0;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA0_M: u32 = 1;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA0_S: u32 = 0;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA0_SEL: u32 = 1;
pub const CRYPTO_KEYWRITEAREA_RAM_AREA0_NOT_SEL: u32 = 0;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN7: u32 = 128;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN7_BITN: u32 = 7;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN7_M: u32 = 128;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN7_S: u32 = 7;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN7_WRITTEN: u32 = 128;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN7_NOT_WRITTEN: u32 = 0;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN6: u32 = 64;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN6_BITN: u32 = 6;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN6_M: u32 = 64;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN6_S: u32 = 6;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN6_WRITTEN: u32 = 64;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN6_NOT_WRITTEN: u32 = 0;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN5: u32 = 32;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN5_BITN: u32 = 5;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN5_M: u32 = 32;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN5_S: u32 = 5;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN5_WRITTEN: u32 = 32;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN5_NOT_WRITTEN: u32 = 0;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN4: u32 = 16;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN4_BITN: u32 = 4;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN4_M: u32 = 16;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN4_S: u32 = 4;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN4_WRITTEN: u32 = 16;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN4_NOT_WRITTEN: u32 = 0;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN3: u32 = 8;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN3_BITN: u32 = 3;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN3_M: u32 = 8;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN3_S: u32 = 3;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN3_WRITTEN: u32 = 8;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN3_NOT_WRITTEN: u32 = 0;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN2: u32 = 4;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN2_BITN: u32 = 2;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN2_M: u32 = 4;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN2_S: u32 = 2;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN2_WRITTEN: u32 = 4;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN2_NOT_WRITTEN: u32 = 0;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN1: u32 = 2;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN1_BITN: u32 = 1;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN1_M: u32 = 2;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN1_S: u32 = 1;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN1_WRITTEN: u32 = 2;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN1_NOT_WRITTEN: u32 = 0;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN0: u32 = 1;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN0_BITN: u32 = 0;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN0_M: u32 = 1;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN0_S: u32 = 0;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN0_WRITTEN: u32 = 1;
pub const CRYPTO_KEYWRITTENAREA_RAM_AREA_WRITTEN0_NOT_WRITTEN: u32 = 0;
pub const CRYPTO_KEYSIZE_SIZE_W: u32 = 2;
pub const CRYPTO_KEYSIZE_SIZE_M: u32 = 3;
pub const CRYPTO_KEYSIZE_SIZE_S: u32 = 0;
pub const CRYPTO_KEYSIZE_SIZE_256_BIT: u32 = 3;
pub const CRYPTO_KEYSIZE_SIZE_192_BIT: u32 = 2;
pub const CRYPTO_KEYSIZE_SIZE_128_BIT: u32 = 1;
pub const CRYPTO_KEYREADAREA_BUSY: u32 = 2147483648;
pub const CRYPTO_KEYREADAREA_BUSY_BITN: u32 = 31;
pub const CRYPTO_KEYREADAREA_BUSY_M: u32 = 2147483648;
pub const CRYPTO_KEYREADAREA_BUSY_S: u32 = 31;
pub const CRYPTO_KEYREADAREA_RAM_AREA_W: u32 = 4;
pub const CRYPTO_KEYREADAREA_RAM_AREA_M: u32 = 15;
pub const CRYPTO_KEYREADAREA_RAM_AREA_S: u32 = 0;
pub const CRYPTO_KEYREADAREA_RAM_AREA_NO_RAM: u32 = 8;
pub const CRYPTO_KEYREADAREA_RAM_AREA_RAM_AREA7: u32 = 7;
pub const CRYPTO_KEYREADAREA_RAM_AREA_RAM_AREA6: u32 = 6;
pub const CRYPTO_KEYREADAREA_RAM_AREA_RAM_AREA5: u32 = 5;
pub const CRYPTO_KEYREADAREA_RAM_AREA_RAM_AREA4: u32 = 4;
pub const CRYPTO_KEYREADAREA_RAM_AREA_RAM_AREA3: u32 = 3;
pub const CRYPTO_KEYREADAREA_RAM_AREA_RAM_AREA2: u32 = 2;
pub const CRYPTO_KEYREADAREA_RAM_AREA_RAM_AREA1: u32 = 1;
pub const CRYPTO_KEYREADAREA_RAM_AREA_RAM_AREA0: u32 = 0;
pub const CRYPTO_AESKEY20_KEY2_W: u32 = 32;
pub const CRYPTO_AESKEY20_KEY2_M: u32 = 4294967295;
pub const CRYPTO_AESKEY20_KEY2_S: u32 = 0;
pub const CRYPTO_AESKEY21_KEY2_W: u32 = 32;
pub const CRYPTO_AESKEY21_KEY2_M: u32 = 4294967295;
pub const CRYPTO_AESKEY21_KEY2_S: u32 = 0;
pub const CRYPTO_AESKEY22_KEY2_W: u32 = 32;
pub const CRYPTO_AESKEY22_KEY2_M: u32 = 4294967295;
pub const CRYPTO_AESKEY22_KEY2_S: u32 = 0;
pub const CRYPTO_AESKEY23_KEY2_W: u32 = 32;
pub const CRYPTO_AESKEY23_KEY2_M: u32 = 4294967295;
pub const CRYPTO_AESKEY23_KEY2_S: u32 = 0;
pub const CRYPTO_AESKEY30_KEY3_W: u32 = 32;
pub const CRYPTO_AESKEY30_KEY3_M: u32 = 4294967295;
pub const CRYPTO_AESKEY30_KEY3_S: u32 = 0;
pub const CRYPTO_AESKEY31_KEY3_W: u32 = 32;
pub const CRYPTO_AESKEY31_KEY3_M: u32 = 4294967295;
pub const CRYPTO_AESKEY31_KEY3_S: u32 = 0;
pub const CRYPTO_AESKEY32_KEY3_W: u32 = 32;
pub const CRYPTO_AESKEY32_KEY3_M: u32 = 4294967295;
pub const CRYPTO_AESKEY32_KEY3_S: u32 = 0;
pub const CRYPTO_AESKEY33_KEY3_W: u32 = 32;
pub const CRYPTO_AESKEY33_KEY3_M: u32 = 4294967295;
pub const CRYPTO_AESKEY33_KEY3_S: u32 = 0;
pub const CRYPTO_AESIV0_IV_W: u32 = 32;
pub const CRYPTO_AESIV0_IV_M: u32 = 4294967295;
pub const CRYPTO_AESIV0_IV_S: u32 = 0;
pub const CRYPTO_AESIV1_IV_W: u32 = 32;
pub const CRYPTO_AESIV1_IV_M: u32 = 4294967295;
pub const CRYPTO_AESIV1_IV_S: u32 = 0;
pub const CRYPTO_AESIV2_IV_W: u32 = 32;
pub const CRYPTO_AESIV2_IV_M: u32 = 4294967295;
pub const CRYPTO_AESIV2_IV_S: u32 = 0;
pub const CRYPTO_AESIV3_IV_W: u32 = 32;
pub const CRYPTO_AESIV3_IV_M: u32 = 4294967295;
pub const CRYPTO_AESIV3_IV_S: u32 = 0;
pub const CRYPTO_AESCTL_CONTEXT_RDY: u32 = 2147483648;
pub const CRYPTO_AESCTL_CONTEXT_RDY_BITN: u32 = 31;
pub const CRYPTO_AESCTL_CONTEXT_RDY_M: u32 = 2147483648;
pub const CRYPTO_AESCTL_CONTEXT_RDY_S: u32 = 31;
pub const CRYPTO_AESCTL_SAVED_CONTEXT_RDY: u32 = 1073741824;
pub const CRYPTO_AESCTL_SAVED_CONTEXT_RDY_BITN: u32 = 30;
pub const CRYPTO_AESCTL_SAVED_CONTEXT_RDY_M: u32 = 1073741824;
pub const CRYPTO_AESCTL_SAVED_CONTEXT_RDY_S: u32 = 30;
pub const CRYPTO_AESCTL_SAVE_CONTEXT: u32 = 536870912;
pub const CRYPTO_AESCTL_SAVE_CONTEXT_BITN: u32 = 29;
pub const CRYPTO_AESCTL_SAVE_CONTEXT_M: u32 = 536870912;
pub const CRYPTO_AESCTL_SAVE_CONTEXT_S: u32 = 29;
pub const CRYPTO_AESCTL_CCM_M_W: u32 = 3;
pub const CRYPTO_AESCTL_CCM_M_M: u32 = 29360128;
pub const CRYPTO_AESCTL_CCM_M_S: u32 = 22;
pub const CRYPTO_AESCTL_CCM_L_W: u32 = 3;
pub const CRYPTO_AESCTL_CCM_L_M: u32 = 3670016;
pub const CRYPTO_AESCTL_CCM_L_S: u32 = 19;
pub const CRYPTO_AESCTL_CCM: u32 = 262144;
pub const CRYPTO_AESCTL_CCM_BITN: u32 = 18;
pub const CRYPTO_AESCTL_CCM_M: u32 = 262144;
pub const CRYPTO_AESCTL_CCM_S: u32 = 18;
pub const CRYPTO_AESCTL_CBC_MAC: u32 = 32768;
pub const CRYPTO_AESCTL_CBC_MAC_BITN: u32 = 15;
pub const CRYPTO_AESCTL_CBC_MAC_M: u32 = 32768;
pub const CRYPTO_AESCTL_CBC_MAC_S: u32 = 15;
pub const CRYPTO_AESCTL_CTR_WIDTH_W: u32 = 2;
pub const CRYPTO_AESCTL_CTR_WIDTH_M: u32 = 384;
pub const CRYPTO_AESCTL_CTR_WIDTH_S: u32 = 7;
pub const CRYPTO_AESCTL_CTR_WIDTH_128_BIT: u32 = 384;
pub const CRYPTO_AESCTL_CTR_WIDTH_96_BIT: u32 = 256;
pub const CRYPTO_AESCTL_CTR_WIDTH_64_BIT: u32 = 128;
pub const CRYPTO_AESCTL_CTR_WIDTH_32_BIT: u32 = 0;
pub const CRYPTO_AESCTL_CTR: u32 = 64;
pub const CRYPTO_AESCTL_CTR_BITN: u32 = 6;
pub const CRYPTO_AESCTL_CTR_M: u32 = 64;
pub const CRYPTO_AESCTL_CTR_S: u32 = 6;
pub const CRYPTO_AESCTL_CBC: u32 = 32;
pub const CRYPTO_AESCTL_CBC_BITN: u32 = 5;
pub const CRYPTO_AESCTL_CBC_M: u32 = 32;
pub const CRYPTO_AESCTL_CBC_S: u32 = 5;
pub const CRYPTO_AESCTL_KEY_SIZE_W: u32 = 2;
pub const CRYPTO_AESCTL_KEY_SIZE_M: u32 = 24;
pub const CRYPTO_AESCTL_KEY_SIZE_S: u32 = 3;
pub const CRYPTO_AESCTL_DIR: u32 = 4;
pub const CRYPTO_AESCTL_DIR_BITN: u32 = 2;
pub const CRYPTO_AESCTL_DIR_M: u32 = 4;
pub const CRYPTO_AESCTL_DIR_S: u32 = 2;
pub const CRYPTO_AESCTL_INPUT_RDY: u32 = 2;
pub const CRYPTO_AESCTL_INPUT_RDY_BITN: u32 = 1;
pub const CRYPTO_AESCTL_INPUT_RDY_M: u32 = 2;
pub const CRYPTO_AESCTL_INPUT_RDY_S: u32 = 1;
pub const CRYPTO_AESCTL_OUTPUT_RDY: u32 = 1;
pub const CRYPTO_AESCTL_OUTPUT_RDY_BITN: u32 = 0;
pub const CRYPTO_AESCTL_OUTPUT_RDY_M: u32 = 1;
pub const CRYPTO_AESCTL_OUTPUT_RDY_S: u32 = 0;
pub const CRYPTO_AESDATALEN0_LEN_LSW_W: u32 = 32;
pub const CRYPTO_AESDATALEN0_LEN_LSW_M: u32 = 4294967295;
pub const CRYPTO_AESDATALEN0_LEN_LSW_S: u32 = 0;
pub const CRYPTO_AESDATALEN1_LEN_MSW_W: u32 = 29;
pub const CRYPTO_AESDATALEN1_LEN_MSW_M: u32 = 536870911;
pub const CRYPTO_AESDATALEN1_LEN_MSW_S: u32 = 0;
pub const CRYPTO_AESAUTHLEN_LEN_W: u32 = 32;
pub const CRYPTO_AESAUTHLEN_LEN_M: u32 = 4294967295;
pub const CRYPTO_AESAUTHLEN_LEN_S: u32 = 0;
pub const CRYPTO_AESDATAOUT0_DATA_W: u32 = 32;
pub const CRYPTO_AESDATAOUT0_DATA_M: u32 = 4294967295;
pub const CRYPTO_AESDATAOUT0_DATA_S: u32 = 0;
pub const CRYPTO_AESDATAIN0_DATA_W: u32 = 32;
pub const CRYPTO_AESDATAIN0_DATA_M: u32 = 4294967295;
pub const CRYPTO_AESDATAIN0_DATA_S: u32 = 0;
pub const CRYPTO_AESDATAOUT1_DATA_W: u32 = 32;
pub const CRYPTO_AESDATAOUT1_DATA_M: u32 = 4294967295;
pub const CRYPTO_AESDATAOUT1_DATA_S: u32 = 0;
pub const CRYPTO_AESDATAIN1_DATA_W: u32 = 32;
pub const CRYPTO_AESDATAIN1_DATA_M: u32 = 4294967295;
pub const CRYPTO_AESDATAIN1_DATA_S: u32 = 0;
pub const CRYPTO_AESDATAOUT2_DATA_W: u32 = 32;
pub const CRYPTO_AESDATAOUT2_DATA_M: u32 = 4294967295;
pub const CRYPTO_AESDATAOUT2_DATA_S: u32 = 0;
pub const CRYPTO_AESDATAIN2_DATA_W: u32 = 32;
pub const CRYPTO_AESDATAIN2_DATA_M: u32 = 4294967295;
pub const CRYPTO_AESDATAIN2_DATA_S: u32 = 0;
pub const CRYPTO_AESDATAOUT3_DATA_W: u32 = 32;
pub const CRYPTO_AESDATAOUT3_DATA_M: u32 = 4294967295;
pub const CRYPTO_AESDATAOUT3_DATA_S: u32 = 0;
pub const CRYPTO_AESDATAIN3_DATA_W: u32 = 32;
pub const CRYPTO_AESDATAIN3_DATA_M: u32 = 4294967295;
pub const CRYPTO_AESDATAIN3_DATA_S: u32 = 0;
pub const CRYPTO_AESTAGOUT0_TAG_W: u32 = 32;
pub const CRYPTO_AESTAGOUT0_TAG_M: u32 = 4294967295;
pub const CRYPTO_AESTAGOUT0_TAG_S: u32 = 0;
pub const CRYPTO_AESTAGOUT1_TAG_W: u32 = 32;
pub const CRYPTO_AESTAGOUT1_TAG_M: u32 = 4294967295;
pub const CRYPTO_AESTAGOUT1_TAG_S: u32 = 0;
pub const CRYPTO_AESTAGOUT2_TAG_W: u32 = 32;
pub const CRYPTO_AESTAGOUT2_TAG_M: u32 = 4294967295;
pub const CRYPTO_AESTAGOUT2_TAG_S: u32 = 0;
pub const CRYPTO_AESTAGOUT3_TAG_W: u32 = 32;
pub const CRYPTO_AESTAGOUT3_TAG_M: u32 = 4294967295;
pub const CRYPTO_AESTAGOUT3_TAG_S: u32 = 0;
pub const CRYPTO_ALGSEL_TAG: u32 = 2147483648;
pub const CRYPTO_ALGSEL_TAG_BITN: u32 = 31;
pub const CRYPTO_ALGSEL_TAG_M: u32 = 2147483648;
pub const CRYPTO_ALGSEL_TAG_S: u32 = 31;
pub const CRYPTO_ALGSEL_AES: u32 = 2;
pub const CRYPTO_ALGSEL_AES_BITN: u32 = 1;
pub const CRYPTO_ALGSEL_AES_M: u32 = 2;
pub const CRYPTO_ALGSEL_AES_S: u32 = 1;
pub const CRYPTO_ALGSEL_KEY_STORE: u32 = 1;
pub const CRYPTO_ALGSEL_KEY_STORE_BITN: u32 = 0;
pub const CRYPTO_ALGSEL_KEY_STORE_M: u32 = 1;
pub const CRYPTO_ALGSEL_KEY_STORE_S: u32 = 0;
pub const CRYPTO_DMAPROTCTL_EN: u32 = 1;
pub const CRYPTO_DMAPROTCTL_EN_BITN: u32 = 0;
pub const CRYPTO_DMAPROTCTL_EN_M: u32 = 1;
pub const CRYPTO_DMAPROTCTL_EN_S: u32 = 0;
pub const CRYPTO_SWRESET_RESET: u32 = 1;
pub const CRYPTO_SWRESET_RESET_BITN: u32 = 0;
pub const CRYPTO_SWRESET_RESET_M: u32 = 1;
pub const CRYPTO_SWRESET_RESET_S: u32 = 0;
pub const CRYPTO_IRQTYPE_LEVEL: u32 = 1;
pub const CRYPTO_IRQTYPE_LEVEL_BITN: u32 = 0;
pub const CRYPTO_IRQTYPE_LEVEL_M: u32 = 1;
pub const CRYPTO_IRQTYPE_LEVEL_S: u32 = 0;
pub const CRYPTO_IRQEN_DMA_IN_DONE: u32 = 2;
pub const CRYPTO_IRQEN_DMA_IN_DONE_BITN: u32 = 1;
pub const CRYPTO_IRQEN_DMA_IN_DONE_M: u32 = 2;
pub const CRYPTO_IRQEN_DMA_IN_DONE_S: u32 = 1;
pub const CRYPTO_IRQEN_RESULT_AVAIL: u32 = 1;
pub const CRYPTO_IRQEN_RESULT_AVAIL_BITN: u32 = 0;
pub const CRYPTO_IRQEN_RESULT_AVAIL_M: u32 = 1;
pub const CRYPTO_IRQEN_RESULT_AVAIL_S: u32 = 0;
pub const CRYPTO_IRQCLR_DMA_BUS_ERR: u32 = 2147483648;
pub const CRYPTO_IRQCLR_DMA_BUS_ERR_BITN: u32 = 31;
pub const CRYPTO_IRQCLR_DMA_BUS_ERR_M: u32 = 2147483648;
pub const CRYPTO_IRQCLR_DMA_BUS_ERR_S: u32 = 31;
pub const CRYPTO_IRQCLR_KEY_ST_WR_ERR: u32 = 1073741824;
pub const CRYPTO_IRQCLR_KEY_ST_WR_ERR_BITN: u32 = 30;
pub const CRYPTO_IRQCLR_KEY_ST_WR_ERR_M: u32 = 1073741824;
pub const CRYPTO_IRQCLR_KEY_ST_WR_ERR_S: u32 = 30;
pub const CRYPTO_IRQCLR_KEY_ST_RD_ERR: u32 = 536870912;
pub const CRYPTO_IRQCLR_KEY_ST_RD_ERR_BITN: u32 = 29;
pub const CRYPTO_IRQCLR_KEY_ST_RD_ERR_M: u32 = 536870912;
pub const CRYPTO_IRQCLR_KEY_ST_RD_ERR_S: u32 = 29;
pub const CRYPTO_IRQCLR_DMA_IN_DONE: u32 = 2;
pub const CRYPTO_IRQCLR_DMA_IN_DONE_BITN: u32 = 1;
pub const CRYPTO_IRQCLR_DMA_IN_DONE_M: u32 = 2;
pub const CRYPTO_IRQCLR_DMA_IN_DONE_S: u32 = 1;
pub const CRYPTO_IRQCLR_RESULT_AVAIL: u32 = 1;
pub const CRYPTO_IRQCLR_RESULT_AVAIL_BITN: u32 = 0;
pub const CRYPTO_IRQCLR_RESULT_AVAIL_M: u32 = 1;
pub const CRYPTO_IRQCLR_RESULT_AVAIL_S: u32 = 0;
pub const CRYPTO_IRQSET_DMA_IN_DONE: u32 = 2;
pub const CRYPTO_IRQSET_DMA_IN_DONE_BITN: u32 = 1;
pub const CRYPTO_IRQSET_DMA_IN_DONE_M: u32 = 2;
pub const CRYPTO_IRQSET_DMA_IN_DONE_S: u32 = 1;
pub const CRYPTO_IRQSET_RESULT_AVAIL: u32 = 1;
pub const CRYPTO_IRQSET_RESULT_AVAIL_BITN: u32 = 0;
pub const CRYPTO_IRQSET_RESULT_AVAIL_M: u32 = 1;
pub const CRYPTO_IRQSET_RESULT_AVAIL_S: u32 = 0;
pub const CRYPTO_IRQSTAT_DMA_BUS_ERR: u32 = 2147483648;
pub const CRYPTO_IRQSTAT_DMA_BUS_ERR_BITN: u32 = 31;
pub const CRYPTO_IRQSTAT_DMA_BUS_ERR_M: u32 = 2147483648;
pub const CRYPTO_IRQSTAT_DMA_BUS_ERR_S: u32 = 31;
pub const CRYPTO_IRQSTAT_KEY_ST_WR_ERR: u32 = 1073741824;
pub const CRYPTO_IRQSTAT_KEY_ST_WR_ERR_BITN: u32 = 30;
pub const CRYPTO_IRQSTAT_KEY_ST_WR_ERR_M: u32 = 1073741824;
pub const CRYPTO_IRQSTAT_KEY_ST_WR_ERR_S: u32 = 30;
pub const CRYPTO_IRQSTAT_KEY_ST_RD_ERR: u32 = 536870912;
pub const CRYPTO_IRQSTAT_KEY_ST_RD_ERR_BITN: u32 = 29;
pub const CRYPTO_IRQSTAT_KEY_ST_RD_ERR_M: u32 = 536870912;
pub const CRYPTO_IRQSTAT_KEY_ST_RD_ERR_S: u32 = 29;
pub const CRYPTO_IRQSTAT_DMA_IN_DONE: u32 = 2;
pub const CRYPTO_IRQSTAT_DMA_IN_DONE_BITN: u32 = 1;
pub const CRYPTO_IRQSTAT_DMA_IN_DONE_M: u32 = 2;
pub const CRYPTO_IRQSTAT_DMA_IN_DONE_S: u32 = 1;
pub const CRYPTO_IRQSTAT_RESULT_AVAIL: u32 = 1;
pub const CRYPTO_IRQSTAT_RESULT_AVAIL_BITN: u32 = 0;
pub const CRYPTO_IRQSTAT_RESULT_AVAIL_M: u32 = 1;
pub const CRYPTO_IRQSTAT_RESULT_AVAIL_S: u32 = 0;
pub const CRYPTO_HWVER_HW_MAJOR_VER_W: u32 = 4;
pub const CRYPTO_HWVER_HW_MAJOR_VER_M: u32 = 251658240;
pub const CRYPTO_HWVER_HW_MAJOR_VER_S: u32 = 24;
pub const CRYPTO_HWVER_HW_MINOR_VER_W: u32 = 4;
pub const CRYPTO_HWVER_HW_MINOR_VER_M: u32 = 15728640;
pub const CRYPTO_HWVER_HW_MINOR_VER_S: u32 = 20;
pub const CRYPTO_HWVER_HW_PATCH_LVL_W: u32 = 4;
pub const CRYPTO_HWVER_HW_PATCH_LVL_M: u32 = 983040;
pub const CRYPTO_HWVER_HW_PATCH_LVL_S: u32 = 16;
pub const CRYPTO_HWVER_VER_NUM_COMPL_W: u32 = 8;
pub const CRYPTO_HWVER_VER_NUM_COMPL_M: u32 = 65280;
pub const CRYPTO_HWVER_VER_NUM_COMPL_S: u32 = 8;
pub const CRYPTO_HWVER_VER_NUM_W: u32 = 8;
pub const CRYPTO_HWVER_VER_NUM_M: u32 = 255;
pub const CRYPTO_HWVER_VER_NUM_S: u32 = 0;
pub const AES_ECB_LENGTH: u32 = 16;
pub const CRYPTO_DMA_IN_DONE: u32 = 2;
pub const CRYPTO_RESULT_RDY: u32 = 1;
pub const CRYPTO_DMA_BUS_ERR: u32 = 2147483648;
pub const CRYPTO_KEY_ST_WR_ERR: u32 = 1073741824;
pub const CRYPTO_KEY_ST_RD_ERR: u32 = 536870912;
pub const CRYPTO_IRQTYPE_PULSE: u32 = 0;
pub const CRYPTO_DMA_CHAN0: u32 = 1;
pub const CRYPTO_DMA_CHAN1: u32 = 2;
pub const CRYPTO_AES128_ENCRYPT: u32 = 12;
pub const CRYPTO_AES128_DECRYPT: u32 = 8;
pub const CRYPTO_DMA_READY: u32 = 0;
pub const CRYPTO_DMA_BSY: u32 = 3;
pub const CRYPTO_DMA_BUS_ERROR: u32 = 131072;
pub const AES_SUCCESS: u32 = 0;
pub const AES_KEYSTORE_READ_ERROR: u32 = 1;
pub const AES_KEYSTORE_WRITE_ERROR: u32 = 2;
pub const AES_DMA_BUS_ERROR: u32 = 3;
pub const CCM_AUTHENTICATION_FAILED: u32 = 4;
pub const AES_ECB_TEST_ERROR: u32 = 8;
pub const AES_NULL_ERROR: u32 = 9;
pub const AES_CCM_TEST_ERROR: u32 = 10;
pub const AES_DMA_BSY: u32 = 11;
pub const STATE_BLENGTH: u32 = 16;
pub const KEY_BLENGTH: u32 = 16;
pub const KEY_EXP_LENGTH: u32 = 176;
pub const KEY_STORE_SIZE_128: u32 = 1;
pub const KEY_STORE_SIZE_192: u32 = 2;
pub const KEY_STORE_SIZE_256: u32 = 3;
pub const KEY_STORE_SIZE_BITS: u32 = 3;
pub const CRYPTO_KEY_AREA_0: u32 = 0;
pub const CRYPTO_KEY_AREA_1: u32 = 1;
pub const CRYPTO_KEY_AREA_2: u32 = 2;
pub const CRYPTO_KEY_AREA_3: u32 = 3;
pub const CRYPTO_KEY_AREA_4: u32 = 4;
pub const CRYPTO_KEY_AREA_5: u32 = 5;
pub const CRYPTO_KEY_AREA_6: u32 = 6;
pub const CRYPTO_KEY_AREA_7: u32 = 7;
pub const CRYPTO_AES_NONE: u32 = 0;
pub const CRYPTO_AES_KEYL0AD: u32 = 1;
pub const CRYPTO_AES_ECB: u32 = 2;
pub const CRYPTO_AES_CCM: u32 = 3;
pub const CRYPTO_AES_RNG: u32 = 4;
pub const CRYPTO_AES_CBC: u32 = 5;
pub const CRYPTO_AES_CTR_32: u32 = 0;
pub const CRYPTO_AES_CTR_64: u32 = 1;
pub const CRYPTO_AES_CTR_96: u32 = 2;
pub const CRYPTO_AES_CTR_128: u32 = 3;
pub const DRIVERLIB_RELEASE_GROUP: u32 = 0;
pub const DRIVERLIB_RELEASE_BUILD: u32 = 49664;
pub const FLASH_O_STAT: u32 = 28;
pub const FLASH_O_CFG: u32 = 36;
pub const FLASH_O_SYSCODE_START: u32 = 40;
pub const FLASH_O_FLASH_SIZE: u32 = 44;
pub const FLASH_O_FWLOCK: u32 = 60;
pub const FLASH_O_FWFLAG: u32 = 64;
pub const FLASH_O_EFUSE: u32 = 4096;
pub const FLASH_O_EFUSEADDR: u32 = 4100;
pub const FLASH_O_DATAUPPER: u32 = 4104;
pub const FLASH_O_DATALOWER: u32 = 4108;
pub const FLASH_O_EFUSECFG: u32 = 4112;
pub const FLASH_O_EFUSESTAT: u32 = 4116;
pub const FLASH_O_ACC: u32 = 4120;
pub const FLASH_O_BOUNDARY: u32 = 4124;
pub const FLASH_O_EFUSEFLAG: u32 = 4128;
pub const FLASH_O_EFUSEKEY: u32 = 4132;
pub const FLASH_O_EFUSERELEASE: u32 = 4136;
pub const FLASH_O_EFUSEPINS: u32 = 4140;
pub const FLASH_O_EFUSECRA: u32 = 4144;
pub const FLASH_O_EFUSEREAD: u32 = 4148;
pub const FLASH_O_EFUSEPROGRAM: u32 = 4152;
pub const FLASH_O_EFUSEERROR: u32 = 4156;
pub const FLASH_O_SINGLEBIT: u32 = 4160;
pub const FLASH_O_TWOBIT: u32 = 4164;
pub const FLASH_O_SELFTESTCYC: u32 = 4168;
pub const FLASH_O_SELFTESTSIGN: u32 = 4172;
pub const FLASH_O_FRDCTL: u32 = 8192;
pub const FLASH_O_FSPRD: u32 = 8196;
pub const FLASH_O_FEDACCTL1: u32 = 8200;
pub const FLASH_O_FEDACSTAT: u32 = 8220;
pub const FLASH_O_FBPROT: u32 = 8240;
pub const FLASH_O_FBSE: u32 = 8244;
pub const FLASH_O_FBBUSY: u32 = 8248;
pub const FLASH_O_FBAC: u32 = 8252;
pub const FLASH_O_FBFALLBACK: u32 = 8256;
pub const FLASH_O_FBPRDY: u32 = 8260;
pub const FLASH_O_FPAC1: u32 = 8264;
pub const FLASH_O_FPAC2: u32 = 8268;
pub const FLASH_O_FMAC: u32 = 8272;
pub const FLASH_O_FMSTAT: u32 = 8276;
pub const FLASH_O_FLOCK: u32 = 8292;
pub const FLASH_O_FVREADCT: u32 = 8320;
pub const FLASH_O_FVHVCT1: u32 = 8324;
pub const FLASH_O_FVHVCT2: u32 = 8328;
pub const FLASH_O_FVHVCT3: u32 = 8332;
pub const FLASH_O_FVNVCT: u32 = 8336;
pub const FLASH_O_FVSLP: u32 = 8340;
pub const FLASH_O_FVWLCT: u32 = 8344;
pub const FLASH_O_FEFUSECTL: u32 = 8348;
pub const FLASH_O_FEFUSESTAT: u32 = 8352;
pub const FLASH_O_FEFUSEDATA: u32 = 8356;
pub const FLASH_O_FSEQPMP: u32 = 8360;
pub const FLASH_O_FBSTROBES: u32 = 8448;
pub const FLASH_O_FPSTROBES: u32 = 8452;
pub const FLASH_O_FBMODE: u32 = 8456;
pub const FLASH_O_FTCR: u32 = 8460;
pub const FLASH_O_FADDR: u32 = 8464;
pub const FLASH_O_FTCTL: u32 = 8476;
pub const FLASH_O_FWPWRITE0: u32 = 8480;
pub const FLASH_O_FWPWRITE1: u32 = 8484;
pub const FLASH_O_FWPWRITE2: u32 = 8488;
pub const FLASH_O_FWPWRITE3: u32 = 8492;
pub const FLASH_O_FWPWRITE4: u32 = 8496;
pub const FLASH_O_FWPWRITE5: u32 = 8500;
pub const FLASH_O_FWPWRITE6: u32 = 8504;
pub const FLASH_O_FWPWRITE7: u32 = 8508;
pub const FLASH_O_FWPWRITE_ECC: u32 = 8512;
pub const FLASH_O_FSWSTAT: u32 = 8516;
pub const FLASH_O_FSM_GLBCTL: u32 = 8704;
pub const FLASH_O_FSM_STATE: u32 = 8708;
pub const FLASH_O_FSM_STAT: u32 = 8712;
pub const FLASH_O_FSM_CMD: u32 = 8716;
pub const FLASH_O_FSM_PE_OSU: u32 = 8720;
pub const FLASH_O_FSM_VSTAT: u32 = 8724;
pub const FLASH_O_FSM_PE_VSU: u32 = 8728;
pub const FLASH_O_FSM_CMP_VSU: u32 = 8732;
pub const FLASH_O_FSM_EX_VAL: u32 = 8736;
pub const FLASH_O_FSM_RD_H: u32 = 8740;
pub const FLASH_O_FSM_P_OH: u32 = 8744;
pub const FLASH_O_FSM_ERA_OH: u32 = 8748;
pub const FLASH_O_FSM_SAV_PPUL: u32 = 8752;
pub const FLASH_O_FSM_PE_VH: u32 = 8756;
pub const FLASH_O_FSM_PRG_PW: u32 = 8768;
pub const FLASH_O_FSM_ERA_PW: u32 = 8772;
pub const FLASH_O_FSM_SAV_ERA_PUL: u32 = 8788;
pub const FLASH_O_FSM_TIMER: u32 = 8792;
pub const FLASH_O_FSM_MODE: u32 = 8796;
pub const FLASH_O_FSM_PGM: u32 = 8800;
pub const FLASH_O_FSM_ERA: u32 = 8804;
pub const FLASH_O_FSM_PRG_PUL: u32 = 8808;
pub const FLASH_O_FSM_ERA_PUL: u32 = 8812;
pub const FLASH_O_FSM_STEP_SIZE: u32 = 8816;
pub const FLASH_O_FSM_PUL_CNTR: u32 = 8820;
pub const FLASH_O_FSM_EC_STEP_HEIGHT: u32 = 8824;
pub const FLASH_O_FSM_ST_MACHINE: u32 = 8828;
pub const FLASH_O_FSM_FLES: u32 = 8832;
pub const FLASH_O_FSM_WR_ENA: u32 = 8840;
pub const FLASH_O_FSM_ACC_PP: u32 = 8844;
pub const FLASH_O_FSM_ACC_EP: u32 = 8848;
pub const FLASH_O_FSM_ADDR: u32 = 8864;
pub const FLASH_O_FSM_SECTOR: u32 = 8868;
pub const FLASH_O_FMC_REV_ID: u32 = 8872;
pub const FLASH_O_FSM_ERR_ADDR: u32 = 8876;
pub const FLASH_O_FSM_PGM_MAXPUL: u32 = 8880;
pub const FLASH_O_FSM_EXECUTE: u32 = 8884;
pub const FLASH_O_FSM_SECTOR1: u32 = 8896;
pub const FLASH_O_FSM_SECTOR2: u32 = 8900;
pub const FLASH_O_FSM_BSLE0: u32 = 8928;
pub const FLASH_O_FSM_BSLE1: u32 = 8932;
pub const FLASH_O_FSM_BSLP0: u32 = 8944;
pub const FLASH_O_FSM_BSLP1: u32 = 8948;
pub const FLASH_O_FCFG_BANK: u32 = 9216;
pub const FLASH_O_FCFG_WRAPPER: u32 = 9220;
pub const FLASH_O_FCFG_BNK_TYPE: u32 = 9224;
pub const FLASH_O_FCFG_B0_START: u32 = 9232;
pub const FLASH_O_FCFG_B1_START: u32 = 9236;
pub const FLASH_O_FCFG_B2_START: u32 = 9240;
pub const FLASH_O_FCFG_B3_START: u32 = 9244;
pub const FLASH_O_FCFG_B4_START: u32 = 9248;
pub const FLASH_O_FCFG_B5_START: u32 = 9252;
pub const FLASH_O_FCFG_B6_START: u32 = 9256;
pub const FLASH_O_FCFG_B7_START: u32 = 9260;
pub const FLASH_O_FCFG_B0_SSIZE0: u32 = 9264;
pub const FLASH_STAT_EFUSE_BLANK: u32 = 32768;
pub const FLASH_STAT_EFUSE_BLANK_BITN: u32 = 15;
pub const FLASH_STAT_EFUSE_BLANK_M: u32 = 32768;
pub const FLASH_STAT_EFUSE_BLANK_S: u32 = 15;
pub const FLASH_STAT_EFUSE_TIMEOUT: u32 = 16384;
pub const FLASH_STAT_EFUSE_TIMEOUT_BITN: u32 = 14;
pub const FLASH_STAT_EFUSE_TIMEOUT_M: u32 = 16384;
pub const FLASH_STAT_EFUSE_TIMEOUT_S: u32 = 14;
pub const FLASH_STAT_EFUSE_CRC_ERROR: u32 = 8192;
pub const FLASH_STAT_EFUSE_CRC_ERROR_BITN: u32 = 13;
pub const FLASH_STAT_EFUSE_CRC_ERROR_M: u32 = 8192;
pub const FLASH_STAT_EFUSE_CRC_ERROR_S: u32 = 13;
pub const FLASH_STAT_EFUSE_ERRCODE_W: u32 = 5;
pub const FLASH_STAT_EFUSE_ERRCODE_M: u32 = 7936;
pub const FLASH_STAT_EFUSE_ERRCODE_S: u32 = 8;
pub const FLASH_STAT_SAMHOLD_DIS: u32 = 4;
pub const FLASH_STAT_SAMHOLD_DIS_BITN: u32 = 2;
pub const FLASH_STAT_SAMHOLD_DIS_M: u32 = 4;
pub const FLASH_STAT_SAMHOLD_DIS_S: u32 = 2;
pub const FLASH_STAT_BUSY: u32 = 2;
pub const FLASH_STAT_BUSY_BITN: u32 = 1;
pub const FLASH_STAT_BUSY_M: u32 = 2;
pub const FLASH_STAT_BUSY_S: u32 = 1;
pub const FLASH_STAT_POWER_MODE: u32 = 1;
pub const FLASH_STAT_POWER_MODE_BITN: u32 = 0;
pub const FLASH_STAT_POWER_MODE_M: u32 = 1;
pub const FLASH_STAT_POWER_MODE_S: u32 = 0;
pub const FLASH_CFG_STANDBY_MODE_SEL: u32 = 256;
pub const FLASH_CFG_STANDBY_MODE_SEL_BITN: u32 = 8;
pub const FLASH_CFG_STANDBY_MODE_SEL_M: u32 = 256;
pub const FLASH_CFG_STANDBY_MODE_SEL_S: u32 = 8;
pub const FLASH_CFG_STANDBY_PW_SEL_W: u32 = 2;
pub const FLASH_CFG_STANDBY_PW_SEL_M: u32 = 192;
pub const FLASH_CFG_STANDBY_PW_SEL_S: u32 = 6;
pub const FLASH_CFG_DIS_EFUSECLK: u32 = 32;
pub const FLASH_CFG_DIS_EFUSECLK_BITN: u32 = 5;
pub const FLASH_CFG_DIS_EFUSECLK_M: u32 = 32;
pub const FLASH_CFG_DIS_EFUSECLK_S: u32 = 5;
pub const FLASH_CFG_DIS_READACCESS: u32 = 16;
pub const FLASH_CFG_DIS_READACCESS_BITN: u32 = 4;
pub const FLASH_CFG_DIS_READACCESS_M: u32 = 16;
pub const FLASH_CFG_DIS_READACCESS_S: u32 = 4;
pub const FLASH_CFG_ENABLE_SWINTF: u32 = 8;
pub const FLASH_CFG_ENABLE_SWINTF_BITN: u32 = 3;
pub const FLASH_CFG_ENABLE_SWINTF_M: u32 = 8;
pub const FLASH_CFG_ENABLE_SWINTF_S: u32 = 3;
pub const FLASH_CFG_DIS_STANDBY: u32 = 2;
pub const FLASH_CFG_DIS_STANDBY_BITN: u32 = 1;
pub const FLASH_CFG_DIS_STANDBY_M: u32 = 2;
pub const FLASH_CFG_DIS_STANDBY_S: u32 = 1;
pub const FLASH_CFG_DIS_IDLE: u32 = 1;
pub const FLASH_CFG_DIS_IDLE_BITN: u32 = 0;
pub const FLASH_CFG_DIS_IDLE_M: u32 = 1;
pub const FLASH_CFG_DIS_IDLE_S: u32 = 0;
pub const FLASH_SYSCODE_START_SYSCODE_START_W: u32 = 5;
pub const FLASH_SYSCODE_START_SYSCODE_START_M: u32 = 31;
pub const FLASH_SYSCODE_START_SYSCODE_START_S: u32 = 0;
pub const FLASH_FLASH_SIZE_SECTORS_W: u32 = 8;
pub const FLASH_FLASH_SIZE_SECTORS_M: u32 = 255;
pub const FLASH_FLASH_SIZE_SECTORS_S: u32 = 0;
pub const FLASH_FWLOCK_FWLOCK_W: u32 = 3;
pub const FLASH_FWLOCK_FWLOCK_M: u32 = 7;
pub const FLASH_FWLOCK_FWLOCK_S: u32 = 0;
pub const FLASH_FWFLAG_FWFLAG_W: u32 = 3;
pub const FLASH_FWFLAG_FWFLAG_M: u32 = 7;
pub const FLASH_FWFLAG_FWFLAG_S: u32 = 0;
pub const FLASH_EFUSE_INSTRUCTION_W: u32 = 5;
pub const FLASH_EFUSE_INSTRUCTION_M: u32 = 520093696;
pub const FLASH_EFUSE_INSTRUCTION_S: u32 = 24;
pub const FLASH_EFUSE_DUMPWORD_W: u32 = 16;
pub const FLASH_EFUSE_DUMPWORD_M: u32 = 65535;
pub const FLASH_EFUSE_DUMPWORD_S: u32 = 0;
pub const FLASH_EFUSEADDR_BLOCK_W: u32 = 5;
pub const FLASH_EFUSEADDR_BLOCK_M: u32 = 63488;
pub const FLASH_EFUSEADDR_BLOCK_S: u32 = 11;
pub const FLASH_EFUSEADDR_ROW_W: u32 = 11;
pub const FLASH_EFUSEADDR_ROW_M: u32 = 2047;
pub const FLASH_EFUSEADDR_ROW_S: u32 = 0;
pub const FLASH_DATAUPPER_SPARE_W: u32 = 5;
pub const FLASH_DATAUPPER_SPARE_M: u32 = 248;
pub const FLASH_DATAUPPER_SPARE_S: u32 = 3;
pub const FLASH_DATAUPPER_P: u32 = 4;
pub const FLASH_DATAUPPER_P_BITN: u32 = 2;
pub const FLASH_DATAUPPER_P_M: u32 = 4;
pub const FLASH_DATAUPPER_P_S: u32 = 2;
pub const FLASH_DATAUPPER_R: u32 = 2;
pub const FLASH_DATAUPPER_R_BITN: u32 = 1;
pub const FLASH_DATAUPPER_R_M: u32 = 2;
pub const FLASH_DATAUPPER_R_S: u32 = 1;
pub const FLASH_DATAUPPER_EEN: u32 = 1;
pub const FLASH_DATAUPPER_EEN_BITN: u32 = 0;
pub const FLASH_DATAUPPER_EEN_M: u32 = 1;
pub const FLASH_DATAUPPER_EEN_S: u32 = 0;
pub const FLASH_DATALOWER_DATA_W: u32 = 32;
pub const FLASH_DATALOWER_DATA_M: u32 = 4294967295;
pub const FLASH_DATALOWER_DATA_S: u32 = 0;
pub const FLASH_EFUSECFG_IDLEGATING: u32 = 256;
pub const FLASH_EFUSECFG_IDLEGATING_BITN: u32 = 8;
pub const FLASH_EFUSECFG_IDLEGATING_M: u32 = 256;
pub const FLASH_EFUSECFG_IDLEGATING_S: u32 = 8;
pub const FLASH_EFUSECFG_SLAVEPOWER_W: u32 = 2;
pub const FLASH_EFUSECFG_SLAVEPOWER_M: u32 = 24;
pub const FLASH_EFUSECFG_SLAVEPOWER_S: u32 = 3;
pub const FLASH_EFUSECFG_GATING: u32 = 1;
pub const FLASH_EFUSECFG_GATING_BITN: u32 = 0;
pub const FLASH_EFUSECFG_GATING_M: u32 = 1;
pub const FLASH_EFUSECFG_GATING_S: u32 = 0;
pub const FLASH_EFUSESTAT_RESETDONE: u32 = 1;
pub const FLASH_EFUSESTAT_RESETDONE_BITN: u32 = 0;
pub const FLASH_EFUSESTAT_RESETDONE_M: u32 = 1;
pub const FLASH_EFUSESTAT_RESETDONE_S: u32 = 0;
pub const FLASH_ACC_ACCUMULATOR_W: u32 = 24;
pub const FLASH_ACC_ACCUMULATOR_M: u32 = 16777215;
pub const FLASH_ACC_ACCUMULATOR_S: u32 = 0;
pub const FLASH_BOUNDARY_DISROW0: u32 = 8388608;
pub const FLASH_BOUNDARY_DISROW0_BITN: u32 = 23;
pub const FLASH_BOUNDARY_DISROW0_M: u32 = 8388608;
pub const FLASH_BOUNDARY_DISROW0_S: u32 = 23;
pub const FLASH_BOUNDARY_SPARE: u32 = 4194304;
pub const FLASH_BOUNDARY_SPARE_BITN: u32 = 22;
pub const FLASH_BOUNDARY_SPARE_M: u32 = 4194304;
pub const FLASH_BOUNDARY_SPARE_S: u32 = 22;
pub const FLASH_BOUNDARY_EFC_SELF_TEST_ERROR: u32 = 2097152;
pub const FLASH_BOUNDARY_EFC_SELF_TEST_ERROR_BITN: u32 = 21;
pub const FLASH_BOUNDARY_EFC_SELF_TEST_ERROR_M: u32 = 2097152;
pub const FLASH_BOUNDARY_EFC_SELF_TEST_ERROR_S: u32 = 21;
pub const FLASH_BOUNDARY_EFC_INSTRUCTION_INFO: u32 = 1048576;
pub const FLASH_BOUNDARY_EFC_INSTRUCTION_INFO_BITN: u32 = 20;
pub const FLASH_BOUNDARY_EFC_INSTRUCTION_INFO_M: u32 = 1048576;
pub const FLASH_BOUNDARY_EFC_INSTRUCTION_INFO_S: u32 = 20;
pub const FLASH_BOUNDARY_EFC_INSTRUCTION_ERROR: u32 = 524288;
pub const FLASH_BOUNDARY_EFC_INSTRUCTION_ERROR_BITN: u32 = 19;
pub const FLASH_BOUNDARY_EFC_INSTRUCTION_ERROR_M: u32 = 524288;
pub const FLASH_BOUNDARY_EFC_INSTRUCTION_ERROR_S: u32 = 19;
pub const FLASH_BOUNDARY_EFC_AUTOLOAD_ERROR: u32 = 262144;
pub const FLASH_BOUNDARY_EFC_AUTOLOAD_ERROR_BITN: u32 = 18;
pub const FLASH_BOUNDARY_EFC_AUTOLOAD_ERROR_M: u32 = 262144;
pub const FLASH_BOUNDARY_EFC_AUTOLOAD_ERROR_S: u32 = 18;
pub const FLASH_BOUNDARY_OUTPUTENABLE_W: u32 = 4;
pub const FLASH_BOUNDARY_OUTPUTENABLE_M: u32 = 245760;
pub const FLASH_BOUNDARY_OUTPUTENABLE_S: u32 = 14;
pub const FLASH_BOUNDARY_SYS_ECC_SELF_TEST_EN: u32 = 8192;
pub const FLASH_BOUNDARY_SYS_ECC_SELF_TEST_EN_BITN: u32 = 13;
pub const FLASH_BOUNDARY_SYS_ECC_SELF_TEST_EN_M: u32 = 8192;
pub const FLASH_BOUNDARY_SYS_ECC_SELF_TEST_EN_S: u32 = 13;
pub const FLASH_BOUNDARY_SYS_ECC_OVERRIDE_EN: u32 = 4096;
pub const FLASH_BOUNDARY_SYS_ECC_OVERRIDE_EN_BITN: u32 = 12;
pub const FLASH_BOUNDARY_SYS_ECC_OVERRIDE_EN_M: u32 = 4096;
pub const FLASH_BOUNDARY_SYS_ECC_OVERRIDE_EN_S: u32 = 12;
pub const FLASH_BOUNDARY_EFC_FDI: u32 = 2048;
pub const FLASH_BOUNDARY_EFC_FDI_BITN: u32 = 11;
pub const FLASH_BOUNDARY_EFC_FDI_M: u32 = 2048;
pub const FLASH_BOUNDARY_EFC_FDI_S: u32 = 11;
pub const FLASH_BOUNDARY_SYS_DIEID_AUTOLOAD_EN: u32 = 1024;
pub const FLASH_BOUNDARY_SYS_DIEID_AUTOLOAD_EN_BITN: u32 = 10;
pub const FLASH_BOUNDARY_SYS_DIEID_AUTOLOAD_EN_M: u32 = 1024;
pub const FLASH_BOUNDARY_SYS_DIEID_AUTOLOAD_EN_S: u32 = 10;
pub const FLASH_BOUNDARY_SYS_REPAIR_EN_W: u32 = 2;
pub const FLASH_BOUNDARY_SYS_REPAIR_EN_M: u32 = 768;
pub const FLASH_BOUNDARY_SYS_REPAIR_EN_S: u32 = 8;
pub const FLASH_BOUNDARY_SYS_WS_READ_STATES_W: u32 = 4;
pub const FLASH_BOUNDARY_SYS_WS_READ_STATES_M: u32 = 240;
pub const FLASH_BOUNDARY_SYS_WS_READ_STATES_S: u32 = 4;
pub const FLASH_BOUNDARY_INPUTENABLE_W: u32 = 4;
pub const FLASH_BOUNDARY_INPUTENABLE_M: u32 = 15;
pub const FLASH_BOUNDARY_INPUTENABLE_S: u32 = 0;
pub const FLASH_EFUSEFLAG_KEY: u32 = 1;
pub const FLASH_EFUSEFLAG_KEY_BITN: u32 = 0;
pub const FLASH_EFUSEFLAG_KEY_M: u32 = 1;
pub const FLASH_EFUSEFLAG_KEY_S: u32 = 0;
pub const FLASH_EFUSEKEY_CODE_W: u32 = 32;
pub const FLASH_EFUSEKEY_CODE_M: u32 = 4294967295;
pub const FLASH_EFUSEKEY_CODE_S: u32 = 0;
pub const FLASH_EFUSERELEASE_ODPYEAR_W: u32 = 7;
pub const FLASH_EFUSERELEASE_ODPYEAR_M: u32 = 4261412864;
pub const FLASH_EFUSERELEASE_ODPYEAR_S: u32 = 25;
pub const FLASH_EFUSERELEASE_ODPMONTH_W: u32 = 4;
pub const FLASH_EFUSERELEASE_ODPMONTH_M: u32 = 31457280;
pub const FLASH_EFUSERELEASE_ODPMONTH_S: u32 = 21;
pub const FLASH_EFUSERELEASE_ODPDAY_W: u32 = 5;
pub const FLASH_EFUSERELEASE_ODPDAY_M: u32 = 2031616;
pub const FLASH_EFUSERELEASE_ODPDAY_S: u32 = 16;
pub const FLASH_EFUSERELEASE_EFUSEYEAR_W: u32 = 7;
pub const FLASH_EFUSERELEASE_EFUSEYEAR_M: u32 = 65024;
pub const FLASH_EFUSERELEASE_EFUSEYEAR_S: u32 = 9;
pub const FLASH_EFUSERELEASE_EFUSEMONTH_W: u32 = 4;
pub const FLASH_EFUSERELEASE_EFUSEMONTH_M: u32 = 480;
pub const FLASH_EFUSERELEASE_EFUSEMONTH_S: u32 = 5;
pub const FLASH_EFUSERELEASE_EFUSEDAY_W: u32 = 5;
pub const FLASH_EFUSERELEASE_EFUSEDAY_M: u32 = 31;
pub const FLASH_EFUSERELEASE_EFUSEDAY_S: u32 = 0;
pub const FLASH_EFUSEPINS_EFC_SELF_TEST_DONE: u32 = 32768;
pub const FLASH_EFUSEPINS_EFC_SELF_TEST_DONE_BITN: u32 = 15;
pub const FLASH_EFUSEPINS_EFC_SELF_TEST_DONE_M: u32 = 32768;
pub const FLASH_EFUSEPINS_EFC_SELF_TEST_DONE_S: u32 = 15;
pub const FLASH_EFUSEPINS_EFC_SELF_TEST_ERROR: u32 = 16384;
pub const FLASH_EFUSEPINS_EFC_SELF_TEST_ERROR_BITN: u32 = 14;
pub const FLASH_EFUSEPINS_EFC_SELF_TEST_ERROR_M: u32 = 16384;
pub const FLASH_EFUSEPINS_EFC_SELF_TEST_ERROR_S: u32 = 14;
pub const FLASH_EFUSEPINS_SYS_ECC_SELF_TEST_EN: u32 = 8192;
pub const FLASH_EFUSEPINS_SYS_ECC_SELF_TEST_EN_BITN: u32 = 13;
pub const FLASH_EFUSEPINS_SYS_ECC_SELF_TEST_EN_M: u32 = 8192;
pub const FLASH_EFUSEPINS_SYS_ECC_SELF_TEST_EN_S: u32 = 13;
pub const FLASH_EFUSEPINS_EFC_INSTRUCTION_INFO: u32 = 4096;
pub const FLASH_EFUSEPINS_EFC_INSTRUCTION_INFO_BITN: u32 = 12;
pub const FLASH_EFUSEPINS_EFC_INSTRUCTION_INFO_M: u32 = 4096;
pub const FLASH_EFUSEPINS_EFC_INSTRUCTION_INFO_S: u32 = 12;
pub const FLASH_EFUSEPINS_EFC_INSTRUCTION_ERROR: u32 = 2048;
pub const FLASH_EFUSEPINS_EFC_INSTRUCTION_ERROR_BITN: u32 = 11;
pub const FLASH_EFUSEPINS_EFC_INSTRUCTION_ERROR_M: u32 = 2048;
pub const FLASH_EFUSEPINS_EFC_INSTRUCTION_ERROR_S: u32 = 11;
pub const FLASH_EFUSEPINS_EFC_AUTOLOAD_ERROR: u32 = 1024;
pub const FLASH_EFUSEPINS_EFC_AUTOLOAD_ERROR_BITN: u32 = 10;
pub const FLASH_EFUSEPINS_EFC_AUTOLOAD_ERROR_M: u32 = 1024;
pub const FLASH_EFUSEPINS_EFC_AUTOLOAD_ERROR_S: u32 = 10;
pub const FLASH_EFUSEPINS_SYS_ECC_OVERRIDE_EN: u32 = 512;
pub const FLASH_EFUSEPINS_SYS_ECC_OVERRIDE_EN_BITN: u32 = 9;
pub const FLASH_EFUSEPINS_SYS_ECC_OVERRIDE_EN_M: u32 = 512;
pub const FLASH_EFUSEPINS_SYS_ECC_OVERRIDE_EN_S: u32 = 9;
pub const FLASH_EFUSEPINS_EFC_READY: u32 = 256;
pub const FLASH_EFUSEPINS_EFC_READY_BITN: u32 = 8;
pub const FLASH_EFUSEPINS_EFC_READY_M: u32 = 256;
pub const FLASH_EFUSEPINS_EFC_READY_S: u32 = 8;
pub const FLASH_EFUSEPINS_EFC_FCLRZ: u32 = 128;
pub const FLASH_EFUSEPINS_EFC_FCLRZ_BITN: u32 = 7;
pub const FLASH_EFUSEPINS_EFC_FCLRZ_M: u32 = 128;
pub const FLASH_EFUSEPINS_EFC_FCLRZ_S: u32 = 7;
pub const FLASH_EFUSEPINS_SYS_DIEID_AUTOLOAD_EN: u32 = 64;
pub const FLASH_EFUSEPINS_SYS_DIEID_AUTOLOAD_EN_BITN: u32 = 6;
pub const FLASH_EFUSEPINS_SYS_DIEID_AUTOLOAD_EN_M: u32 = 64;
pub const FLASH_EFUSEPINS_SYS_DIEID_AUTOLOAD_EN_S: u32 = 6;
pub const FLASH_EFUSEPINS_SYS_REPAIR_EN_W: u32 = 2;
pub const FLASH_EFUSEPINS_SYS_REPAIR_EN_M: u32 = 48;
pub const FLASH_EFUSEPINS_SYS_REPAIR_EN_S: u32 = 4;
pub const FLASH_EFUSEPINS_SYS_WS_READ_STATES_W: u32 = 4;
pub const FLASH_EFUSEPINS_SYS_WS_READ_STATES_M: u32 = 15;
pub const FLASH_EFUSEPINS_SYS_WS_READ_STATES_S: u32 = 0;
pub const FLASH_EFUSECRA_DATA_W: u32 = 6;
pub const FLASH_EFUSECRA_DATA_M: u32 = 63;
pub const FLASH_EFUSECRA_DATA_S: u32 = 0;
pub const FLASH_EFUSEREAD_DATABIT_W: u32 = 2;
pub const FLASH_EFUSEREAD_DATABIT_M: u32 = 768;
pub const FLASH_EFUSEREAD_DATABIT_S: u32 = 8;
pub const FLASH_EFUSEREAD_READCLOCK_W: u32 = 4;
pub const FLASH_EFUSEREAD_READCLOCK_M: u32 = 240;
pub const FLASH_EFUSEREAD_READCLOCK_S: u32 = 4;
pub const FLASH_EFUSEREAD_DEBUG: u32 = 8;
pub const FLASH_EFUSEREAD_DEBUG_BITN: u32 = 3;
pub const FLASH_EFUSEREAD_DEBUG_M: u32 = 8;
pub const FLASH_EFUSEREAD_DEBUG_S: u32 = 3;
pub const FLASH_EFUSEREAD_SPARE: u32 = 4;
pub const FLASH_EFUSEREAD_SPARE_BITN: u32 = 2;
pub const FLASH_EFUSEREAD_SPARE_M: u32 = 4;
pub const FLASH_EFUSEREAD_SPARE_S: u32 = 2;
pub const FLASH_EFUSEREAD_MARGIN_W: u32 = 2;
pub const FLASH_EFUSEREAD_MARGIN_M: u32 = 3;
pub const FLASH_EFUSEREAD_MARGIN_S: u32 = 0;
pub const FLASH_EFUSEPROGRAM_COMPAREDISABLE: u32 = 1073741824;
pub const FLASH_EFUSEPROGRAM_COMPAREDISABLE_BITN: u32 = 30;
pub const FLASH_EFUSEPROGRAM_COMPAREDISABLE_M: u32 = 1073741824;
pub const FLASH_EFUSEPROGRAM_COMPAREDISABLE_S: u32 = 30;
pub const FLASH_EFUSEPROGRAM_CLOCKSTALL_W: u32 = 16;
pub const FLASH_EFUSEPROGRAM_CLOCKSTALL_M: u32 = 1073725440;
pub const FLASH_EFUSEPROGRAM_CLOCKSTALL_S: u32 = 14;
pub const FLASH_EFUSEPROGRAM_VPPTOVDD: u32 = 8192;
pub const FLASH_EFUSEPROGRAM_VPPTOVDD_BITN: u32 = 13;
pub const FLASH_EFUSEPROGRAM_VPPTOVDD_M: u32 = 8192;
pub const FLASH_EFUSEPROGRAM_VPPTOVDD_S: u32 = 13;
pub const FLASH_EFUSEPROGRAM_ITERATIONS_W: u32 = 4;
pub const FLASH_EFUSEPROGRAM_ITERATIONS_M: u32 = 7680;
pub const FLASH_EFUSEPROGRAM_ITERATIONS_S: u32 = 9;
pub const FLASH_EFUSEPROGRAM_WRITECLOCK_W: u32 = 9;
pub const FLASH_EFUSEPROGRAM_WRITECLOCK_M: u32 = 511;
pub const FLASH_EFUSEPROGRAM_WRITECLOCK_S: u32 = 0;
pub const FLASH_EFUSEERROR_DONE: u32 = 32;
pub const FLASH_EFUSEERROR_DONE_BITN: u32 = 5;
pub const FLASH_EFUSEERROR_DONE_M: u32 = 32;
pub const FLASH_EFUSEERROR_DONE_S: u32 = 5;
pub const FLASH_EFUSEERROR_CODE_W: u32 = 5;
pub const FLASH_EFUSEERROR_CODE_M: u32 = 31;
pub const FLASH_EFUSEERROR_CODE_S: u32 = 0;
pub const FLASH_SINGLEBIT_FROMN_W: u32 = 31;
pub const FLASH_SINGLEBIT_FROMN_M: u32 = 4294967294;
pub const FLASH_SINGLEBIT_FROMN_S: u32 = 1;
pub const FLASH_SINGLEBIT_FROM0: u32 = 1;
pub const FLASH_SINGLEBIT_FROM0_BITN: u32 = 0;
pub const FLASH_SINGLEBIT_FROM0_M: u32 = 1;
pub const FLASH_SINGLEBIT_FROM0_S: u32 = 0;
pub const FLASH_TWOBIT_FROMN_W: u32 = 31;
pub const FLASH_TWOBIT_FROMN_M: u32 = 4294967294;
pub const FLASH_TWOBIT_FROMN_S: u32 = 1;
pub const FLASH_TWOBIT_FROM0: u32 = 1;
pub const FLASH_TWOBIT_FROM0_BITN: u32 = 0;
pub const FLASH_TWOBIT_FROM0_M: u32 = 1;
pub const FLASH_TWOBIT_FROM0_S: u32 = 0;
pub const FLASH_SELFTESTCYC_CYCLES_W: u32 = 32;
pub const FLASH_SELFTESTCYC_CYCLES_M: u32 = 4294967295;
pub const FLASH_SELFTESTCYC_CYCLES_S: u32 = 0;
pub const FLASH_SELFTESTSIGN_SIGNATURE_W: u32 = 32;
pub const FLASH_SELFTESTSIGN_SIGNATURE_M: u32 = 4294967295;
pub const FLASH_SELFTESTSIGN_SIGNATURE_S: u32 = 0;
pub const FLASH_FRDCTL_RWAIT_W: u32 = 4;
pub const FLASH_FRDCTL_RWAIT_M: u32 = 3840;
pub const FLASH_FRDCTL_RWAIT_S: u32 = 8;
pub const FLASH_FSPRD_RMBSEM_W: u32 = 8;
pub const FLASH_FSPRD_RMBSEM_M: u32 = 65280;
pub const FLASH_FSPRD_RMBSEM_S: u32 = 8;
pub const FLASH_FSPRD_RM1: u32 = 2;
pub const FLASH_FSPRD_RM1_BITN: u32 = 1;
pub const FLASH_FSPRD_RM1_M: u32 = 2;
pub const FLASH_FSPRD_RM1_S: u32 = 1;
pub const FLASH_FSPRD_RM0: u32 = 1;
pub const FLASH_FSPRD_RM0_BITN: u32 = 0;
pub const FLASH_FSPRD_RM0_M: u32 = 1;
pub const FLASH_FSPRD_RM0_S: u32 = 0;
pub const FLASH_FEDACCTL1_SUSP_IGNR: u32 = 16777216;
pub const FLASH_FEDACCTL1_SUSP_IGNR_BITN: u32 = 24;
pub const FLASH_FEDACCTL1_SUSP_IGNR_M: u32 = 16777216;
pub const FLASH_FEDACCTL1_SUSP_IGNR_S: u32 = 24;
pub const FLASH_FEDACSTAT_RVF_INT: u32 = 33554432;
pub const FLASH_FEDACSTAT_RVF_INT_BITN: u32 = 25;
pub const FLASH_FEDACSTAT_RVF_INT_M: u32 = 33554432;
pub const FLASH_FEDACSTAT_RVF_INT_S: u32 = 25;
pub const FLASH_FEDACSTAT_FSM_DONE: u32 = 16777216;
pub const FLASH_FEDACSTAT_FSM_DONE_BITN: u32 = 24;
pub const FLASH_FEDACSTAT_FSM_DONE_M: u32 = 16777216;
pub const FLASH_FEDACSTAT_FSM_DONE_S: u32 = 24;
pub const FLASH_FBPROT_PROTL1DIS: u32 = 1;
pub const FLASH_FBPROT_PROTL1DIS_BITN: u32 = 0;
pub const FLASH_FBPROT_PROTL1DIS_M: u32 = 1;
pub const FLASH_FBPROT_PROTL1DIS_S: u32 = 0;
pub const FLASH_FBSE_BSE_W: u32 = 16;
pub const FLASH_FBSE_BSE_M: u32 = 65535;
pub const FLASH_FBSE_BSE_S: u32 = 0;
pub const FLASH_FBBUSY_BUSY_W: u32 = 8;
pub const FLASH_FBBUSY_BUSY_M: u32 = 255;
pub const FLASH_FBBUSY_BUSY_S: u32 = 0;
pub const FLASH_FBAC_OTPPROTDIS: u32 = 65536;
pub const FLASH_FBAC_OTPPROTDIS_BITN: u32 = 16;
pub const FLASH_FBAC_OTPPROTDIS_M: u32 = 65536;
pub const FLASH_FBAC_OTPPROTDIS_S: u32 = 16;
pub const FLASH_FBAC_BAGP_W: u32 = 8;
pub const FLASH_FBAC_BAGP_M: u32 = 65280;
pub const FLASH_FBAC_BAGP_S: u32 = 8;
pub const FLASH_FBAC_VREADS_W: u32 = 8;
pub const FLASH_FBAC_VREADS_M: u32 = 255;
pub const FLASH_FBAC_VREADS_S: u32 = 0;
pub const FLASH_FBFALLBACK_FSM_PWRSAV_W: u32 = 4;
pub const FLASH_FBFALLBACK_FSM_PWRSAV_M: u32 = 251658240;
pub const FLASH_FBFALLBACK_FSM_PWRSAV_S: u32 = 24;
pub const FLASH_FBFALLBACK_REG_PWRSAV_W: u32 = 4;
pub const FLASH_FBFALLBACK_REG_PWRSAV_M: u32 = 983040;
pub const FLASH_FBFALLBACK_REG_PWRSAV_S: u32 = 16;
pub const FLASH_FBFALLBACK_BANKPWR7_W: u32 = 2;
pub const FLASH_FBFALLBACK_BANKPWR7_M: u32 = 49152;
pub const FLASH_FBFALLBACK_BANKPWR7_S: u32 = 14;
pub const FLASH_FBFALLBACK_BANKPWR6_W: u32 = 2;
pub const FLASH_FBFALLBACK_BANKPWR6_M: u32 = 12288;
pub const FLASH_FBFALLBACK_BANKPWR6_S: u32 = 12;
pub const FLASH_FBFALLBACK_BANKPWR5_W: u32 = 2;
pub const FLASH_FBFALLBACK_BANKPWR5_M: u32 = 3072;
pub const FLASH_FBFALLBACK_BANKPWR5_S: u32 = 10;
pub const FLASH_FBFALLBACK_BANKPWR4_W: u32 = 2;
pub const FLASH_FBFALLBACK_BANKPWR4_M: u32 = 768;
pub const FLASH_FBFALLBACK_BANKPWR4_S: u32 = 8;
pub const FLASH_FBFALLBACK_BANKPWR3_W: u32 = 2;
pub const FLASH_FBFALLBACK_BANKPWR3_M: u32 = 192;
pub const FLASH_FBFALLBACK_BANKPWR3_S: u32 = 6;
pub const FLASH_FBFALLBACK_BANKPWR2_W: u32 = 2;
pub const FLASH_FBFALLBACK_BANKPWR2_M: u32 = 48;
pub const FLASH_FBFALLBACK_BANKPWR2_S: u32 = 4;
pub const FLASH_FBFALLBACK_BANKPWR1_W: u32 = 2;
pub const FLASH_FBFALLBACK_BANKPWR1_M: u32 = 12;
pub const FLASH_FBFALLBACK_BANKPWR1_S: u32 = 2;
pub const FLASH_FBFALLBACK_BANKPWR0_W: u32 = 2;
pub const FLASH_FBFALLBACK_BANKPWR0_M: u32 = 3;
pub const FLASH_FBFALLBACK_BANKPWR0_S: u32 = 0;
pub const FLASH_FBPRDY_BANKBUSY: u32 = 65536;
pub const FLASH_FBPRDY_BANKBUSY_BITN: u32 = 16;
pub const FLASH_FBPRDY_BANKBUSY_M: u32 = 65536;
pub const FLASH_FBPRDY_BANKBUSY_S: u32 = 16;
pub const FLASH_FBPRDY_PUMPRDY: u32 = 32768;
pub const FLASH_FBPRDY_PUMPRDY_BITN: u32 = 15;
pub const FLASH_FBPRDY_PUMPRDY_M: u32 = 32768;
pub const FLASH_FBPRDY_PUMPRDY_S: u32 = 15;
pub const FLASH_FBPRDY_BANKRDY: u32 = 1;
pub const FLASH_FBPRDY_BANKRDY_BITN: u32 = 0;
pub const FLASH_FBPRDY_BANKRDY_M: u32 = 1;
pub const FLASH_FBPRDY_BANKRDY_S: u32 = 0;
pub const FLASH_FPAC1_PSLEEPTDIS_W: u32 = 12;
pub const FLASH_FPAC1_PSLEEPTDIS_M: u32 = 268369920;
pub const FLASH_FPAC1_PSLEEPTDIS_S: u32 = 16;
pub const FLASH_FPAC1_PUMPRESET_PW_W: u32 = 12;
pub const FLASH_FPAC1_PUMPRESET_PW_M: u32 = 65520;
pub const FLASH_FPAC1_PUMPRESET_PW_S: u32 = 4;
pub const FLASH_FPAC1_PUMPPWR_W: u32 = 2;
pub const FLASH_FPAC1_PUMPPWR_M: u32 = 3;
pub const FLASH_FPAC1_PUMPPWR_S: u32 = 0;
pub const FLASH_FPAC2_PAGP_W: u32 = 16;
pub const FLASH_FPAC2_PAGP_M: u32 = 65535;
pub const FLASH_FPAC2_PAGP_S: u32 = 0;
pub const FLASH_FMAC_BANK_W: u32 = 3;
pub const FLASH_FMAC_BANK_M: u32 = 7;
pub const FLASH_FMAC_BANK_S: u32 = 0;
pub const FLASH_FMSTAT_RVSUSP: u32 = 131072;
pub const FLASH_FMSTAT_RVSUSP_BITN: u32 = 17;
pub const FLASH_FMSTAT_RVSUSP_M: u32 = 131072;
pub const FLASH_FMSTAT_RVSUSP_S: u32 = 17;
pub const FLASH_FMSTAT_RDVER: u32 = 65536;
pub const FLASH_FMSTAT_RDVER_BITN: u32 = 16;
pub const FLASH_FMSTAT_RDVER_M: u32 = 65536;
pub const FLASH_FMSTAT_RDVER_S: u32 = 16;
pub const FLASH_FMSTAT_RVF: u32 = 32768;
pub const FLASH_FMSTAT_RVF_BITN: u32 = 15;
pub const FLASH_FMSTAT_RVF_M: u32 = 32768;
pub const FLASH_FMSTAT_RVF_S: u32 = 15;
pub const FLASH_FMSTAT_ILA: u32 = 16384;
pub const FLASH_FMSTAT_ILA_BITN: u32 = 14;
pub const FLASH_FMSTAT_ILA_M: u32 = 16384;
pub const FLASH_FMSTAT_ILA_S: u32 = 14;
pub const FLASH_FMSTAT_DBF: u32 = 8192;
pub const FLASH_FMSTAT_DBF_BITN: u32 = 13;
pub const FLASH_FMSTAT_DBF_M: u32 = 8192;
pub const FLASH_FMSTAT_DBF_S: u32 = 13;
pub const FLASH_FMSTAT_PGV: u32 = 4096;
pub const FLASH_FMSTAT_PGV_BITN: u32 = 12;
pub const FLASH_FMSTAT_PGV_M: u32 = 4096;
pub const FLASH_FMSTAT_PGV_S: u32 = 12;
pub const FLASH_FMSTAT_PCV: u32 = 2048;
pub const FLASH_FMSTAT_PCV_BITN: u32 = 11;
pub const FLASH_FMSTAT_PCV_M: u32 = 2048;
pub const FLASH_FMSTAT_PCV_S: u32 = 11;
pub const FLASH_FMSTAT_EV: u32 = 1024;
pub const FLASH_FMSTAT_EV_BITN: u32 = 10;
pub const FLASH_FMSTAT_EV_M: u32 = 1024;
pub const FLASH_FMSTAT_EV_S: u32 = 10;
pub const FLASH_FMSTAT_CV: u32 = 512;
pub const FLASH_FMSTAT_CV_BITN: u32 = 9;
pub const FLASH_FMSTAT_CV_M: u32 = 512;
pub const FLASH_FMSTAT_CV_S: u32 = 9;
pub const FLASH_FMSTAT_BUSY: u32 = 256;
pub const FLASH_FMSTAT_BUSY_BITN: u32 = 8;
pub const FLASH_FMSTAT_BUSY_M: u32 = 256;
pub const FLASH_FMSTAT_BUSY_S: u32 = 8;
pub const FLASH_FMSTAT_ERS: u32 = 128;
pub const FLASH_FMSTAT_ERS_BITN: u32 = 7;
pub const FLASH_FMSTAT_ERS_M: u32 = 128;
pub const FLASH_FMSTAT_ERS_S: u32 = 7;
pub const FLASH_FMSTAT_PGM: u32 = 64;
pub const FLASH_FMSTAT_PGM_BITN: u32 = 6;
pub const FLASH_FMSTAT_PGM_M: u32 = 64;
pub const FLASH_FMSTAT_PGM_S: u32 = 6;
pub const FLASH_FMSTAT_INVDAT: u32 = 32;
pub const FLASH_FMSTAT_INVDAT_BITN: u32 = 5;
pub const FLASH_FMSTAT_INVDAT_M: u32 = 32;
pub const FLASH_FMSTAT_INVDAT_S: u32 = 5;
pub const FLASH_FMSTAT_CSTAT: u32 = 16;
pub const FLASH_FMSTAT_CSTAT_BITN: u32 = 4;
pub const FLASH_FMSTAT_CSTAT_M: u32 = 16;
pub const FLASH_FMSTAT_CSTAT_S: u32 = 4;
pub const FLASH_FMSTAT_VOLSTAT: u32 = 8;
pub const FLASH_FMSTAT_VOLSTAT_BITN: u32 = 3;
pub const FLASH_FMSTAT_VOLSTAT_M: u32 = 8;
pub const FLASH_FMSTAT_VOLSTAT_S: u32 = 3;
pub const FLASH_FMSTAT_ESUSP: u32 = 4;
pub const FLASH_FMSTAT_ESUSP_BITN: u32 = 2;
pub const FLASH_FMSTAT_ESUSP_M: u32 = 4;
pub const FLASH_FMSTAT_ESUSP_S: u32 = 2;
pub const FLASH_FMSTAT_PSUSP: u32 = 2;
pub const FLASH_FMSTAT_PSUSP_BITN: u32 = 1;
pub const FLASH_FMSTAT_PSUSP_M: u32 = 2;
pub const FLASH_FMSTAT_PSUSP_S: u32 = 1;
pub const FLASH_FMSTAT_SLOCK: u32 = 1;
pub const FLASH_FMSTAT_SLOCK_BITN: u32 = 0;
pub const FLASH_FMSTAT_SLOCK_M: u32 = 1;
pub const FLASH_FMSTAT_SLOCK_S: u32 = 0;
pub const FLASH_FLOCK_ENCOM_W: u32 = 16;
pub const FLASH_FLOCK_ENCOM_M: u32 = 65535;
pub const FLASH_FLOCK_ENCOM_S: u32 = 0;
pub const FLASH_FVREADCT_VREADCT_W: u32 = 4;
pub const FLASH_FVREADCT_VREADCT_M: u32 = 15;
pub const FLASH_FVREADCT_VREADCT_S: u32 = 0;
pub const FLASH_FVHVCT1_TRIM13_E_W: u32 = 4;
pub const FLASH_FVHVCT1_TRIM13_E_M: u32 = 15728640;
pub const FLASH_FVHVCT1_TRIM13_E_S: u32 = 20;
pub const FLASH_FVHVCT1_VHVCT_E_W: u32 = 4;
pub const FLASH_FVHVCT1_VHVCT_E_M: u32 = 983040;
pub const FLASH_FVHVCT1_VHVCT_E_S: u32 = 16;
pub const FLASH_FVHVCT1_TRIM13_PV_W: u32 = 4;
pub const FLASH_FVHVCT1_TRIM13_PV_M: u32 = 240;
pub const FLASH_FVHVCT1_TRIM13_PV_S: u32 = 4;
pub const FLASH_FVHVCT1_VHVCT_PV_W: u32 = 4;
pub const FLASH_FVHVCT1_VHVCT_PV_M: u32 = 15;
pub const FLASH_FVHVCT1_VHVCT_PV_S: u32 = 0;
pub const FLASH_FVHVCT2_TRIM13_P_W: u32 = 4;
pub const FLASH_FVHVCT2_TRIM13_P_M: u32 = 15728640;
pub const FLASH_FVHVCT2_TRIM13_P_S: u32 = 20;
pub const FLASH_FVHVCT2_VHVCT_P_W: u32 = 4;
pub const FLASH_FVHVCT2_VHVCT_P_M: u32 = 983040;
pub const FLASH_FVHVCT2_VHVCT_P_S: u32 = 16;
pub const FLASH_FVHVCT3_WCT_W: u32 = 4;
pub const FLASH_FVHVCT3_WCT_M: u32 = 983040;
pub const FLASH_FVHVCT3_WCT_S: u32 = 16;
pub const FLASH_FVHVCT3_VHVCT_READ_W: u32 = 4;
pub const FLASH_FVHVCT3_VHVCT_READ_M: u32 = 15;
pub const FLASH_FVHVCT3_VHVCT_READ_S: u32 = 0;
pub const FLASH_FVNVCT_VCG2P5CT_W: u32 = 5;
pub const FLASH_FVNVCT_VCG2P5CT_M: u32 = 7936;
pub const FLASH_FVNVCT_VCG2P5CT_S: u32 = 8;
pub const FLASH_FVNVCT_VIN_CT_W: u32 = 5;
pub const FLASH_FVNVCT_VIN_CT_M: u32 = 31;
pub const FLASH_FVNVCT_VIN_CT_S: u32 = 0;
pub const FLASH_FVSLP_VSL_P_W: u32 = 4;
pub const FLASH_FVSLP_VSL_P_M: u32 = 61440;
pub const FLASH_FVSLP_VSL_P_S: u32 = 12;
pub const FLASH_FVWLCT_VWLCT_P_W: u32 = 5;
pub const FLASH_FVWLCT_VWLCT_P_M: u32 = 31;
pub const FLASH_FVWLCT_VWLCT_P_S: u32 = 0;
pub const FLASH_FEFUSECTL_CHAIN_SEL_W: u32 = 3;
pub const FLASH_FEFUSECTL_CHAIN_SEL_M: u32 = 117440512;
pub const FLASH_FEFUSECTL_CHAIN_SEL_S: u32 = 24;
pub const FLASH_FEFUSECTL_WRITE_EN: u32 = 131072;
pub const FLASH_FEFUSECTL_WRITE_EN_BITN: u32 = 17;
pub const FLASH_FEFUSECTL_WRITE_EN_M: u32 = 131072;
pub const FLASH_FEFUSECTL_WRITE_EN_S: u32 = 17;
pub const FLASH_FEFUSECTL_BP_SEL: u32 = 65536;
pub const FLASH_FEFUSECTL_BP_SEL_BITN: u32 = 16;
pub const FLASH_FEFUSECTL_BP_SEL_M: u32 = 65536;
pub const FLASH_FEFUSECTL_BP_SEL_S: u32 = 16;
pub const FLASH_FEFUSECTL_EF_CLRZ: u32 = 256;
pub const FLASH_FEFUSECTL_EF_CLRZ_BITN: u32 = 8;
pub const FLASH_FEFUSECTL_EF_CLRZ_M: u32 = 256;
pub const FLASH_FEFUSECTL_EF_CLRZ_S: u32 = 8;
pub const FLASH_FEFUSECTL_EF_TEST: u32 = 16;
pub const FLASH_FEFUSECTL_EF_TEST_BITN: u32 = 4;
pub const FLASH_FEFUSECTL_EF_TEST_M: u32 = 16;
pub const FLASH_FEFUSECTL_EF_TEST_S: u32 = 4;
pub const FLASH_FEFUSECTL_EFUSE_EN_W: u32 = 4;
pub const FLASH_FEFUSECTL_EFUSE_EN_M: u32 = 15;
pub const FLASH_FEFUSECTL_EFUSE_EN_S: u32 = 0;
pub const FLASH_FEFUSESTAT_SHIFT_DONE: u32 = 1;
pub const FLASH_FEFUSESTAT_SHIFT_DONE_BITN: u32 = 0;
pub const FLASH_FEFUSESTAT_SHIFT_DONE_M: u32 = 1;
pub const FLASH_FEFUSESTAT_SHIFT_DONE_S: u32 = 0;
pub const FLASH_FEFUSEDATA_FEFUSEDATA_W: u32 = 32;
pub const FLASH_FEFUSEDATA_FEFUSEDATA_M: u32 = 4294967295;
pub const FLASH_FEFUSEDATA_FEFUSEDATA_S: u32 = 0;
pub const FLASH_FSEQPMP_TRIM_3P4_W: u32 = 4;
pub const FLASH_FSEQPMP_TRIM_3P4_M: u32 = 251658240;
pub const FLASH_FSEQPMP_TRIM_3P4_S: u32 = 24;
pub const FLASH_FSEQPMP_TRIM_1P7_W: u32 = 2;
pub const FLASH_FSEQPMP_TRIM_1P7_M: u32 = 3145728;
pub const FLASH_FSEQPMP_TRIM_1P7_S: u32 = 20;
pub const FLASH_FSEQPMP_TRIM_0P8_W: u32 = 4;
pub const FLASH_FSEQPMP_TRIM_0P8_M: u32 = 983040;
pub const FLASH_FSEQPMP_TRIM_0P8_S: u32 = 16;
pub const FLASH_FSEQPMP_VIN_AT_X_W: u32 = 3;
pub const FLASH_FSEQPMP_VIN_AT_X_M: u32 = 28672;
pub const FLASH_FSEQPMP_VIN_AT_X_S: u32 = 12;
pub const FLASH_FSEQPMP_VIN_BY_PASS: u32 = 256;
pub const FLASH_FSEQPMP_VIN_BY_PASS_BITN: u32 = 8;
pub const FLASH_FSEQPMP_VIN_BY_PASS_M: u32 = 256;
pub const FLASH_FSEQPMP_VIN_BY_PASS_S: u32 = 8;
pub const FLASH_FBSTROBES_ECBIT: u32 = 16777216;
pub const FLASH_FBSTROBES_ECBIT_BITN: u32 = 24;
pub const FLASH_FBSTROBES_ECBIT_M: u32 = 16777216;
pub const FLASH_FBSTROBES_ECBIT_S: u32 = 24;
pub const FLASH_FBSTROBES_RWAIT2_FLCLK: u32 = 262144;
pub const FLASH_FBSTROBES_RWAIT2_FLCLK_BITN: u32 = 18;
pub const FLASH_FBSTROBES_RWAIT2_FLCLK_M: u32 = 262144;
pub const FLASH_FBSTROBES_RWAIT2_FLCLK_S: u32 = 18;
pub const FLASH_FBSTROBES_RWAIT_FLCLK: u32 = 131072;
pub const FLASH_FBSTROBES_RWAIT_FLCLK_BITN: u32 = 17;
pub const FLASH_FBSTROBES_RWAIT_FLCLK_M: u32 = 131072;
pub const FLASH_FBSTROBES_RWAIT_FLCLK_S: u32 = 17;
pub const FLASH_FBSTROBES_FLCLKEN: u32 = 65536;
pub const FLASH_FBSTROBES_FLCLKEN_BITN: u32 = 16;
pub const FLASH_FBSTROBES_FLCLKEN_M: u32 = 65536;
pub const FLASH_FBSTROBES_FLCLKEN_S: u32 = 16;
pub const FLASH_FBSTROBES_CTRLENZ: u32 = 256;
pub const FLASH_FBSTROBES_CTRLENZ_BITN: u32 = 8;
pub const FLASH_FBSTROBES_CTRLENZ_M: u32 = 256;
pub const FLASH_FBSTROBES_CTRLENZ_S: u32 = 8;
pub const FLASH_FBSTROBES_NOCOLRED: u32 = 64;
pub const FLASH_FBSTROBES_NOCOLRED_BITN: u32 = 6;
pub const FLASH_FBSTROBES_NOCOLRED_M: u32 = 64;
pub const FLASH_FBSTROBES_NOCOLRED_S: u32 = 6;
pub const FLASH_FBSTROBES_PRECOL: u32 = 32;
pub const FLASH_FBSTROBES_PRECOL_BITN: u32 = 5;
pub const FLASH_FBSTROBES_PRECOL_M: u32 = 32;
pub const FLASH_FBSTROBES_PRECOL_S: u32 = 5;
pub const FLASH_FBSTROBES_TI_OTP: u32 = 16;
pub const FLASH_FBSTROBES_TI_OTP_BITN: u32 = 4;
pub const FLASH_FBSTROBES_TI_OTP_M: u32 = 16;
pub const FLASH_FBSTROBES_TI_OTP_S: u32 = 4;
pub const FLASH_FBSTROBES_OTP: u32 = 8;
pub const FLASH_FBSTROBES_OTP_BITN: u32 = 3;
pub const FLASH_FBSTROBES_OTP_M: u32 = 8;
pub const FLASH_FBSTROBES_OTP_S: u32 = 3;
pub const FLASH_FBSTROBES_TEZ: u32 = 4;
pub const FLASH_FBSTROBES_TEZ_BITN: u32 = 2;
pub const FLASH_FBSTROBES_TEZ_M: u32 = 4;
pub const FLASH_FBSTROBES_TEZ_S: u32 = 2;
pub const FLASH_FPSTROBES_EXECUTEZ: u32 = 256;
pub const FLASH_FPSTROBES_EXECUTEZ_BITN: u32 = 8;
pub const FLASH_FPSTROBES_EXECUTEZ_M: u32 = 256;
pub const FLASH_FPSTROBES_EXECUTEZ_S: u32 = 8;
pub const FLASH_FPSTROBES_V3PWRDNZ: u32 = 2;
pub const FLASH_FPSTROBES_V3PWRDNZ_BITN: u32 = 1;
pub const FLASH_FPSTROBES_V3PWRDNZ_M: u32 = 2;
pub const FLASH_FPSTROBES_V3PWRDNZ_S: u32 = 1;
pub const FLASH_FPSTROBES_V5PWRDNZ: u32 = 1;
pub const FLASH_FPSTROBES_V5PWRDNZ_BITN: u32 = 0;
pub const FLASH_FPSTROBES_V5PWRDNZ_M: u32 = 1;
pub const FLASH_FPSTROBES_V5PWRDNZ_S: u32 = 0;
pub const FLASH_FBMODE_MODE_W: u32 = 3;
pub const FLASH_FBMODE_MODE_M: u32 = 7;
pub const FLASH_FBMODE_MODE_S: u32 = 0;
pub const FLASH_FTCR_TCR_W: u32 = 7;
pub const FLASH_FTCR_TCR_M: u32 = 127;
pub const FLASH_FTCR_TCR_S: u32 = 0;
pub const FLASH_FADDR_FADDR_W: u32 = 32;
pub const FLASH_FADDR_FADDR_M: u32 = 4294967295;
pub const FLASH_FADDR_FADDR_S: u32 = 0;
pub const FLASH_FTCTL_WDATA_BLK_CLR: u32 = 65536;
pub const FLASH_FTCTL_WDATA_BLK_CLR_BITN: u32 = 16;
pub const FLASH_FTCTL_WDATA_BLK_CLR_M: u32 = 65536;
pub const FLASH_FTCTL_WDATA_BLK_CLR_S: u32 = 16;
pub const FLASH_FTCTL_TEST_EN: u32 = 2;
pub const FLASH_FTCTL_TEST_EN_BITN: u32 = 1;
pub const FLASH_FTCTL_TEST_EN_M: u32 = 2;
pub const FLASH_FTCTL_TEST_EN_S: u32 = 1;
pub const FLASH_FWPWRITE0_FWPWRITE0_W: u32 = 32;
pub const FLASH_FWPWRITE0_FWPWRITE0_M: u32 = 4294967295;
pub const FLASH_FWPWRITE0_FWPWRITE0_S: u32 = 0;
pub const FLASH_FWPWRITE1_FWPWRITE1_W: u32 = 32;
pub const FLASH_FWPWRITE1_FWPWRITE1_M: u32 = 4294967295;
pub const FLASH_FWPWRITE1_FWPWRITE1_S: u32 = 0;
pub const FLASH_FWPWRITE2_FWPWRITE2_W: u32 = 32;
pub const FLASH_FWPWRITE2_FWPWRITE2_M: u32 = 4294967295;
pub const FLASH_FWPWRITE2_FWPWRITE2_S: u32 = 0;
pub const FLASH_FWPWRITE3_FWPWRITE3_W: u32 = 32;
pub const FLASH_FWPWRITE3_FWPWRITE3_M: u32 = 4294967295;
pub const FLASH_FWPWRITE3_FWPWRITE3_S: u32 = 0;
pub const FLASH_FWPWRITE4_FWPWRITE4_W: u32 = 32;
pub const FLASH_FWPWRITE4_FWPWRITE4_M: u32 = 4294967295;
pub const FLASH_FWPWRITE4_FWPWRITE4_S: u32 = 0;
pub const FLASH_FWPWRITE5_FWPWRITE5_W: u32 = 32;
pub const FLASH_FWPWRITE5_FWPWRITE5_M: u32 = 4294967295;
pub const FLASH_FWPWRITE5_FWPWRITE5_S: u32 = 0;
pub const FLASH_FWPWRITE6_FWPWRITE6_W: u32 = 32;
pub const FLASH_FWPWRITE6_FWPWRITE6_M: u32 = 4294967295;
pub const FLASH_FWPWRITE6_FWPWRITE6_S: u32 = 0;
pub const FLASH_FWPWRITE7_FWPWRITE7_W: u32 = 32;
pub const FLASH_FWPWRITE7_FWPWRITE7_M: u32 = 4294967295;
pub const FLASH_FWPWRITE7_FWPWRITE7_S: u32 = 0;
pub const FLASH_FWPWRITE_ECC_ECCBYTES07_00_W: u32 = 8;
pub const FLASH_FWPWRITE_ECC_ECCBYTES07_00_M: u32 = 4278190080;
pub const FLASH_FWPWRITE_ECC_ECCBYTES07_00_S: u32 = 24;
pub const FLASH_FWPWRITE_ECC_ECCBYTES15_08_W: u32 = 8;
pub const FLASH_FWPWRITE_ECC_ECCBYTES15_08_M: u32 = 16711680;
pub const FLASH_FWPWRITE_ECC_ECCBYTES15_08_S: u32 = 16;
pub const FLASH_FWPWRITE_ECC_ECCBYTES23_16_W: u32 = 8;
pub const FLASH_FWPWRITE_ECC_ECCBYTES23_16_M: u32 = 65280;
pub const FLASH_FWPWRITE_ECC_ECCBYTES23_16_S: u32 = 8;
pub const FLASH_FWPWRITE_ECC_ECCBYTES31_24_W: u32 = 8;
pub const FLASH_FWPWRITE_ECC_ECCBYTES31_24_M: u32 = 255;
pub const FLASH_FWPWRITE_ECC_ECCBYTES31_24_S: u32 = 0;
pub const FLASH_FSWSTAT_SAFELV: u32 = 1;
pub const FLASH_FSWSTAT_SAFELV_BITN: u32 = 0;
pub const FLASH_FSWSTAT_SAFELV_M: u32 = 1;
pub const FLASH_FSWSTAT_SAFELV_S: u32 = 0;
pub const FLASH_FSM_GLBCTL_CLKSEL: u32 = 1;
pub const FLASH_FSM_GLBCTL_CLKSEL_BITN: u32 = 0;
pub const FLASH_FSM_GLBCTL_CLKSEL_M: u32 = 1;
pub const FLASH_FSM_GLBCTL_CLKSEL_S: u32 = 0;
pub const FLASH_FSM_STATE_CTRLENZ: u32 = 2048;
pub const FLASH_FSM_STATE_CTRLENZ_BITN: u32 = 11;
pub const FLASH_FSM_STATE_CTRLENZ_M: u32 = 2048;
pub const FLASH_FSM_STATE_CTRLENZ_S: u32 = 11;
pub const FLASH_FSM_STATE_EXECUTEZ: u32 = 1024;
pub const FLASH_FSM_STATE_EXECUTEZ_BITN: u32 = 10;
pub const FLASH_FSM_STATE_EXECUTEZ_M: u32 = 1024;
pub const FLASH_FSM_STATE_EXECUTEZ_S: u32 = 10;
pub const FLASH_FSM_STATE_FSM_ACT: u32 = 256;
pub const FLASH_FSM_STATE_FSM_ACT_BITN: u32 = 8;
pub const FLASH_FSM_STATE_FSM_ACT_M: u32 = 256;
pub const FLASH_FSM_STATE_FSM_ACT_S: u32 = 8;
pub const FLASH_FSM_STATE_TIOTP_ACT: u32 = 128;
pub const FLASH_FSM_STATE_TIOTP_ACT_BITN: u32 = 7;
pub const FLASH_FSM_STATE_TIOTP_ACT_M: u32 = 128;
pub const FLASH_FSM_STATE_TIOTP_ACT_S: u32 = 7;
pub const FLASH_FSM_STATE_OTP_ACT: u32 = 64;
pub const FLASH_FSM_STATE_OTP_ACT_BITN: u32 = 6;
pub const FLASH_FSM_STATE_OTP_ACT_M: u32 = 64;
pub const FLASH_FSM_STATE_OTP_ACT_S: u32 = 6;
pub const FLASH_FSM_STAT_NON_OP: u32 = 4;
pub const FLASH_FSM_STAT_NON_OP_BITN: u32 = 2;
pub const FLASH_FSM_STAT_NON_OP_M: u32 = 4;
pub const FLASH_FSM_STAT_NON_OP_S: u32 = 2;
pub const FLASH_FSM_STAT_OVR_PUL_CNT: u32 = 2;
pub const FLASH_FSM_STAT_OVR_PUL_CNT_BITN: u32 = 1;
pub const FLASH_FSM_STAT_OVR_PUL_CNT_M: u32 = 2;
pub const FLASH_FSM_STAT_OVR_PUL_CNT_S: u32 = 1;
pub const FLASH_FSM_STAT_INV_DAT: u32 = 1;
pub const FLASH_FSM_STAT_INV_DAT_BITN: u32 = 0;
pub const FLASH_FSM_STAT_INV_DAT_M: u32 = 1;
pub const FLASH_FSM_STAT_INV_DAT_S: u32 = 0;
pub const FLASH_FSM_CMD_FSMCMD_W: u32 = 6;
pub const FLASH_FSM_CMD_FSMCMD_M: u32 = 63;
pub const FLASH_FSM_CMD_FSMCMD_S: u32 = 0;
pub const FLASH_FSM_PE_OSU_PGM_OSU_W: u32 = 8;
pub const FLASH_FSM_PE_OSU_PGM_OSU_M: u32 = 65280;
pub const FLASH_FSM_PE_OSU_PGM_OSU_S: u32 = 8;
pub const FLASH_FSM_PE_OSU_ERA_OSU_W: u32 = 8;
pub const FLASH_FSM_PE_OSU_ERA_OSU_M: u32 = 255;
pub const FLASH_FSM_PE_OSU_ERA_OSU_S: u32 = 0;
pub const FLASH_FSM_VSTAT_VSTAT_CNT_W: u32 = 4;
pub const FLASH_FSM_VSTAT_VSTAT_CNT_M: u32 = 61440;
pub const FLASH_FSM_VSTAT_VSTAT_CNT_S: u32 = 12;
pub const FLASH_FSM_PE_VSU_PGM_VSU_W: u32 = 8;
pub const FLASH_FSM_PE_VSU_PGM_VSU_M: u32 = 65280;
pub const FLASH_FSM_PE_VSU_PGM_VSU_S: u32 = 8;
pub const FLASH_FSM_PE_VSU_ERA_VSU_W: u32 = 8;
pub const FLASH_FSM_PE_VSU_ERA_VSU_M: u32 = 255;
pub const FLASH_FSM_PE_VSU_ERA_VSU_S: u32 = 0;
pub const FLASH_FSM_CMP_VSU_ADD_EXZ_W: u32 = 4;
pub const FLASH_FSM_CMP_VSU_ADD_EXZ_M: u32 = 61440;
pub const FLASH_FSM_CMP_VSU_ADD_EXZ_S: u32 = 12;
pub const FLASH_FSM_EX_VAL_REP_VSU_W: u32 = 8;
pub const FLASH_FSM_EX_VAL_REP_VSU_M: u32 = 65280;
pub const FLASH_FSM_EX_VAL_REP_VSU_S: u32 = 8;
pub const FLASH_FSM_EX_VAL_EXE_VALD_W: u32 = 8;
pub const FLASH_FSM_EX_VAL_EXE_VALD_M: u32 = 255;
pub const FLASH_FSM_EX_VAL_EXE_VALD_S: u32 = 0;
pub const FLASH_FSM_RD_H_RD_H_W: u32 = 8;
pub const FLASH_FSM_RD_H_RD_H_M: u32 = 255;
pub const FLASH_FSM_RD_H_RD_H_S: u32 = 0;
pub const FLASH_FSM_P_OH_PGM_OH_W: u32 = 8;
pub const FLASH_FSM_P_OH_PGM_OH_M: u32 = 65280;
pub const FLASH_FSM_P_OH_PGM_OH_S: u32 = 8;
pub const FLASH_FSM_ERA_OH_ERA_OH_W: u32 = 16;
pub const FLASH_FSM_ERA_OH_ERA_OH_M: u32 = 65535;
pub const FLASH_FSM_ERA_OH_ERA_OH_S: u32 = 0;
pub const FLASH_FSM_SAV_PPUL_SAV_P_PUL_W: u32 = 12;
pub const FLASH_FSM_SAV_PPUL_SAV_P_PUL_M: u32 = 4095;
pub const FLASH_FSM_SAV_PPUL_SAV_P_PUL_S: u32 = 0;
pub const FLASH_FSM_PE_VH_PGM_VH_W: u32 = 8;
pub const FLASH_FSM_PE_VH_PGM_VH_M: u32 = 65280;
pub const FLASH_FSM_PE_VH_PGM_VH_S: u32 = 8;
pub const FLASH_FSM_PRG_PW_PROG_PUL_WIDTH_W: u32 = 16;
pub const FLASH_FSM_PRG_PW_PROG_PUL_WIDTH_M: u32 = 65535;
pub const FLASH_FSM_PRG_PW_PROG_PUL_WIDTH_S: u32 = 0;
pub const FLASH_FSM_ERA_PW_FSM_ERA_PW_W: u32 = 32;
pub const FLASH_FSM_ERA_PW_FSM_ERA_PW_M: u32 = 4294967295;
pub const FLASH_FSM_ERA_PW_FSM_ERA_PW_S: u32 = 0;
pub const FLASH_FSM_SAV_ERA_PUL_SAV_ERA_PUL_W: u32 = 12;
pub const FLASH_FSM_SAV_ERA_PUL_SAV_ERA_PUL_M: u32 = 4095;
pub const FLASH_FSM_SAV_ERA_PUL_SAV_ERA_PUL_S: u32 = 0;
pub const FLASH_FSM_TIMER_FSM_TIMER_W: u32 = 32;
pub const FLASH_FSM_TIMER_FSM_TIMER_M: u32 = 4294967295;
pub const FLASH_FSM_TIMER_FSM_TIMER_S: u32 = 0;
pub const FLASH_FSM_MODE_RDV_SUBMODE_W: u32 = 2;
pub const FLASH_FSM_MODE_RDV_SUBMODE_M: u32 = 786432;
pub const FLASH_FSM_MODE_RDV_SUBMODE_S: u32 = 18;
pub const FLASH_FSM_MODE_PGM_SUBMODE_W: u32 = 2;
pub const FLASH_FSM_MODE_PGM_SUBMODE_M: u32 = 196608;
pub const FLASH_FSM_MODE_PGM_SUBMODE_S: u32 = 16;
pub const FLASH_FSM_MODE_ERA_SUBMODE_W: u32 = 2;
pub const FLASH_FSM_MODE_ERA_SUBMODE_M: u32 = 49152;
pub const FLASH_FSM_MODE_ERA_SUBMODE_S: u32 = 14;
pub const FLASH_FSM_MODE_SUBMODE_W: u32 = 2;
pub const FLASH_FSM_MODE_SUBMODE_M: u32 = 12288;
pub const FLASH_FSM_MODE_SUBMODE_S: u32 = 12;
pub const FLASH_FSM_MODE_SAV_PGM_CMD_W: u32 = 3;
pub const FLASH_FSM_MODE_SAV_PGM_CMD_M: u32 = 3584;
pub const FLASH_FSM_MODE_SAV_PGM_CMD_S: u32 = 9;
pub const FLASH_FSM_MODE_SAV_ERA_MODE_W: u32 = 3;
pub const FLASH_FSM_MODE_SAV_ERA_MODE_M: u32 = 448;
pub const FLASH_FSM_MODE_SAV_ERA_MODE_S: u32 = 6;
pub const FLASH_FSM_MODE_MODE_W: u32 = 3;
pub const FLASH_FSM_MODE_MODE_M: u32 = 56;
pub const FLASH_FSM_MODE_MODE_S: u32 = 3;
pub const FLASH_FSM_MODE_CMD_W: u32 = 3;
pub const FLASH_FSM_MODE_CMD_M: u32 = 7;
pub const FLASH_FSM_MODE_CMD_S: u32 = 0;
pub const FLASH_FSM_PGM_PGM_BANK_W: u32 = 3;
pub const FLASH_FSM_PGM_PGM_BANK_M: u32 = 58720256;
pub const FLASH_FSM_PGM_PGM_BANK_S: u32 = 23;
pub const FLASH_FSM_PGM_PGM_ADDR_W: u32 = 23;
pub const FLASH_FSM_PGM_PGM_ADDR_M: u32 = 8388607;
pub const FLASH_FSM_PGM_PGM_ADDR_S: u32 = 0;
pub const FLASH_FSM_ERA_ERA_BANK_W: u32 = 3;
pub const FLASH_FSM_ERA_ERA_BANK_M: u32 = 58720256;
pub const FLASH_FSM_ERA_ERA_BANK_S: u32 = 23;
pub const FLASH_FSM_ERA_ERA_ADDR_W: u32 = 23;
pub const FLASH_FSM_ERA_ERA_ADDR_M: u32 = 8388607;
pub const FLASH_FSM_ERA_ERA_ADDR_S: u32 = 0;
pub const FLASH_FSM_PRG_PUL_BEG_EC_LEVEL_W: u32 = 4;
pub const FLASH_FSM_PRG_PUL_BEG_EC_LEVEL_M: u32 = 983040;
pub const FLASH_FSM_PRG_PUL_BEG_EC_LEVEL_S: u32 = 16;
pub const FLASH_FSM_PRG_PUL_MAX_PRG_PUL_W: u32 = 12;
pub const FLASH_FSM_PRG_PUL_MAX_PRG_PUL_M: u32 = 4095;
pub const FLASH_FSM_PRG_PUL_MAX_PRG_PUL_S: u32 = 0;
pub const FLASH_FSM_ERA_PUL_MAX_EC_LEVEL_W: u32 = 4;
pub const FLASH_FSM_ERA_PUL_MAX_EC_LEVEL_M: u32 = 983040;
pub const FLASH_FSM_ERA_PUL_MAX_EC_LEVEL_S: u32 = 16;
pub const FLASH_FSM_ERA_PUL_MAX_ERA_PUL_W: u32 = 12;
pub const FLASH_FSM_ERA_PUL_MAX_ERA_PUL_M: u32 = 4095;
pub const FLASH_FSM_ERA_PUL_MAX_ERA_PUL_S: u32 = 0;
pub const FLASH_FSM_STEP_SIZE_EC_STEP_SIZE_W: u32 = 9;
pub const FLASH_FSM_STEP_SIZE_EC_STEP_SIZE_M: u32 = 33488896;
pub const FLASH_FSM_STEP_SIZE_EC_STEP_SIZE_S: u32 = 16;
pub const FLASH_FSM_PUL_CNTR_CUR_EC_LEVEL_W: u32 = 9;
pub const FLASH_FSM_PUL_CNTR_CUR_EC_LEVEL_M: u32 = 33488896;
pub const FLASH_FSM_PUL_CNTR_CUR_EC_LEVEL_S: u32 = 16;
pub const FLASH_FSM_PUL_CNTR_PUL_CNTR_W: u32 = 12;
pub const FLASH_FSM_PUL_CNTR_PUL_CNTR_M: u32 = 4095;
pub const FLASH_FSM_PUL_CNTR_PUL_CNTR_S: u32 = 0;
pub const FLASH_FSM_EC_STEP_HEIGHT_EC_STEP_HEIGHT_W: u32 = 4;
pub const FLASH_FSM_EC_STEP_HEIGHT_EC_STEP_HEIGHT_M: u32 = 15;
pub const FLASH_FSM_EC_STEP_HEIGHT_EC_STEP_HEIGHT_S: u32 = 0;
pub const FLASH_FSM_ST_MACHINE_DO_PRECOND: u32 = 8388608;
pub const FLASH_FSM_ST_MACHINE_DO_PRECOND_BITN: u32 = 23;
pub const FLASH_FSM_ST_MACHINE_DO_PRECOND_M: u32 = 8388608;
pub const FLASH_FSM_ST_MACHINE_DO_PRECOND_S: u32 = 23;
pub const FLASH_FSM_ST_MACHINE_FSM_INT_EN: u32 = 4194304;
pub const FLASH_FSM_ST_MACHINE_FSM_INT_EN_BITN: u32 = 22;
pub const FLASH_FSM_ST_MACHINE_FSM_INT_EN_M: u32 = 4194304;
pub const FLASH_FSM_ST_MACHINE_FSM_INT_EN_S: u32 = 22;
pub const FLASH_FSM_ST_MACHINE_ALL_BANKS: u32 = 2097152;
pub const FLASH_FSM_ST_MACHINE_ALL_BANKS_BITN: u32 = 21;
pub const FLASH_FSM_ST_MACHINE_ALL_BANKS_M: u32 = 2097152;
pub const FLASH_FSM_ST_MACHINE_ALL_BANKS_S: u32 = 21;
pub const FLASH_FSM_ST_MACHINE_CMPV_ALLOWED: u32 = 1048576;
pub const FLASH_FSM_ST_MACHINE_CMPV_ALLOWED_BITN: u32 = 20;
pub const FLASH_FSM_ST_MACHINE_CMPV_ALLOWED_M: u32 = 1048576;
pub const FLASH_FSM_ST_MACHINE_CMPV_ALLOWED_S: u32 = 20;
pub const FLASH_FSM_ST_MACHINE_RANDOM: u32 = 524288;
pub const FLASH_FSM_ST_MACHINE_RANDOM_BITN: u32 = 19;
pub const FLASH_FSM_ST_MACHINE_RANDOM_M: u32 = 524288;
pub const FLASH_FSM_ST_MACHINE_RANDOM_S: u32 = 19;
pub const FLASH_FSM_ST_MACHINE_RV_SEC_EN: u32 = 262144;
pub const FLASH_FSM_ST_MACHINE_RV_SEC_EN_BITN: u32 = 18;
pub const FLASH_FSM_ST_MACHINE_RV_SEC_EN_M: u32 = 262144;
pub const FLASH_FSM_ST_MACHINE_RV_SEC_EN_S: u32 = 18;
pub const FLASH_FSM_ST_MACHINE_RV_RES: u32 = 131072;
pub const FLASH_FSM_ST_MACHINE_RV_RES_BITN: u32 = 17;
pub const FLASH_FSM_ST_MACHINE_RV_RES_M: u32 = 131072;
pub const FLASH_FSM_ST_MACHINE_RV_RES_S: u32 = 17;
pub const FLASH_FSM_ST_MACHINE_RV_INT_EN: u32 = 65536;
pub const FLASH_FSM_ST_MACHINE_RV_INT_EN_BITN: u32 = 16;
pub const FLASH_FSM_ST_MACHINE_RV_INT_EN_M: u32 = 65536;
pub const FLASH_FSM_ST_MACHINE_RV_INT_EN_S: u32 = 16;
pub const FLASH_FSM_ST_MACHINE_ONE_TIME_GOOD: u32 = 16384;
pub const FLASH_FSM_ST_MACHINE_ONE_TIME_GOOD_BITN: u32 = 14;
pub const FLASH_FSM_ST_MACHINE_ONE_TIME_GOOD_M: u32 = 16384;
pub const FLASH_FSM_ST_MACHINE_ONE_TIME_GOOD_S: u32 = 14;
pub const FLASH_FSM_ST_MACHINE_DO_REDU_COL: u32 = 2048;
pub const FLASH_FSM_ST_MACHINE_DO_REDU_COL_BITN: u32 = 11;
pub const FLASH_FSM_ST_MACHINE_DO_REDU_COL_M: u32 = 2048;
pub const FLASH_FSM_ST_MACHINE_DO_REDU_COL_S: u32 = 11;
pub const FLASH_FSM_ST_MACHINE_DBG_SHORT_ROW_W: u32 = 4;
pub const FLASH_FSM_ST_MACHINE_DBG_SHORT_ROW_M: u32 = 1920;
pub const FLASH_FSM_ST_MACHINE_DBG_SHORT_ROW_S: u32 = 7;
pub const FLASH_FSM_ST_MACHINE_PGM_SEC_COF_EN: u32 = 32;
pub const FLASH_FSM_ST_MACHINE_PGM_SEC_COF_EN_BITN: u32 = 5;
pub const FLASH_FSM_ST_MACHINE_PGM_SEC_COF_EN_M: u32 = 32;
pub const FLASH_FSM_ST_MACHINE_PGM_SEC_COF_EN_S: u32 = 5;
pub const FLASH_FSM_ST_MACHINE_PREC_STOP_EN: u32 = 16;
pub const FLASH_FSM_ST_MACHINE_PREC_STOP_EN_BITN: u32 = 4;
pub const FLASH_FSM_ST_MACHINE_PREC_STOP_EN_M: u32 = 16;
pub const FLASH_FSM_ST_MACHINE_PREC_STOP_EN_S: u32 = 4;
pub const FLASH_FSM_ST_MACHINE_DIS_TST_EN: u32 = 8;
pub const FLASH_FSM_ST_MACHINE_DIS_TST_EN_BITN: u32 = 3;
pub const FLASH_FSM_ST_MACHINE_DIS_TST_EN_M: u32 = 8;
pub const FLASH_FSM_ST_MACHINE_DIS_TST_EN_S: u32 = 3;
pub const FLASH_FSM_ST_MACHINE_CMD_EN: u32 = 4;
pub const FLASH_FSM_ST_MACHINE_CMD_EN_BITN: u32 = 2;
pub const FLASH_FSM_ST_MACHINE_CMD_EN_M: u32 = 4;
pub const FLASH_FSM_ST_MACHINE_CMD_EN_S: u32 = 2;
pub const FLASH_FSM_ST_MACHINE_INV_DATA: u32 = 2;
pub const FLASH_FSM_ST_MACHINE_INV_DATA_BITN: u32 = 1;
pub const FLASH_FSM_ST_MACHINE_INV_DATA_M: u32 = 2;
pub const FLASH_FSM_ST_MACHINE_INV_DATA_S: u32 = 1;
pub const FLASH_FSM_ST_MACHINE_OVERRIDE: u32 = 1;
pub const FLASH_FSM_ST_MACHINE_OVERRIDE_BITN: u32 = 0;
pub const FLASH_FSM_ST_MACHINE_OVERRIDE_M: u32 = 1;
pub const FLASH_FSM_ST_MACHINE_OVERRIDE_S: u32 = 0;
pub const FLASH_FSM_FLES_BLK_TIOTP_W: u32 = 4;
pub const FLASH_FSM_FLES_BLK_TIOTP_M: u32 = 3840;
pub const FLASH_FSM_FLES_BLK_TIOTP_S: u32 = 8;
pub const FLASH_FSM_FLES_BLK_OTP_W: u32 = 8;
pub const FLASH_FSM_FLES_BLK_OTP_M: u32 = 255;
pub const FLASH_FSM_FLES_BLK_OTP_S: u32 = 0;
pub const FLASH_FSM_WR_ENA_WR_ENA_W: u32 = 3;
pub const FLASH_FSM_WR_ENA_WR_ENA_M: u32 = 7;
pub const FLASH_FSM_WR_ENA_WR_ENA_S: u32 = 0;
pub const FLASH_FSM_ACC_PP_FSM_ACC_PP_W: u32 = 32;
pub const FLASH_FSM_ACC_PP_FSM_ACC_PP_M: u32 = 4294967295;
pub const FLASH_FSM_ACC_PP_FSM_ACC_PP_S: u32 = 0;
pub const FLASH_FSM_ACC_EP_ACC_EP_W: u32 = 16;
pub const FLASH_FSM_ACC_EP_ACC_EP_M: u32 = 65535;
pub const FLASH_FSM_ACC_EP_ACC_EP_S: u32 = 0;
pub const FLASH_FSM_ADDR_BANK_W: u32 = 3;
pub const FLASH_FSM_ADDR_BANK_M: u32 = 1879048192;
pub const FLASH_FSM_ADDR_BANK_S: u32 = 28;
pub const FLASH_FSM_ADDR_CUR_ADDR_W: u32 = 28;
pub const FLASH_FSM_ADDR_CUR_ADDR_M: u32 = 268435455;
pub const FLASH_FSM_ADDR_CUR_ADDR_S: u32 = 0;
pub const FLASH_FSM_SECTOR_SECT_ERASED_W: u32 = 16;
pub const FLASH_FSM_SECTOR_SECT_ERASED_M: u32 = 4294901760;
pub const FLASH_FSM_SECTOR_SECT_ERASED_S: u32 = 16;
pub const FLASH_FSM_SECTOR_FSM_SECTOR_EXTENSION_W: u32 = 8;
pub const FLASH_FSM_SECTOR_FSM_SECTOR_EXTENSION_M: u32 = 65280;
pub const FLASH_FSM_SECTOR_FSM_SECTOR_EXTENSION_S: u32 = 8;
pub const FLASH_FSM_SECTOR_SECTOR_W: u32 = 4;
pub const FLASH_FSM_SECTOR_SECTOR_M: u32 = 240;
pub const FLASH_FSM_SECTOR_SECTOR_S: u32 = 4;
pub const FLASH_FSM_SECTOR_SEC_OUT_W: u32 = 4;
pub const FLASH_FSM_SECTOR_SEC_OUT_M: u32 = 15;
pub const FLASH_FSM_SECTOR_SEC_OUT_S: u32 = 0;
pub const FLASH_FMC_REV_ID_MOD_VERSION_W: u32 = 20;
pub const FLASH_FMC_REV_ID_MOD_VERSION_M: u32 = 4294963200;
pub const FLASH_FMC_REV_ID_MOD_VERSION_S: u32 = 12;
pub const FLASH_FMC_REV_ID_CONFIG_CRC_W: u32 = 12;
pub const FLASH_FMC_REV_ID_CONFIG_CRC_M: u32 = 4095;
pub const FLASH_FMC_REV_ID_CONFIG_CRC_S: u32 = 0;
pub const FLASH_FSM_ERR_ADDR_FSM_ERR_ADDR_W: u32 = 24;
pub const FLASH_FSM_ERR_ADDR_FSM_ERR_ADDR_M: u32 = 4294967040;
pub const FLASH_FSM_ERR_ADDR_FSM_ERR_ADDR_S: u32 = 8;
pub const FLASH_FSM_ERR_ADDR_FSM_ERR_BANK_W: u32 = 4;
pub const FLASH_FSM_ERR_ADDR_FSM_ERR_BANK_M: u32 = 15;
pub const FLASH_FSM_ERR_ADDR_FSM_ERR_BANK_S: u32 = 0;
pub const FLASH_FSM_PGM_MAXPUL_FSM_PGM_MAXPUL_W: u32 = 12;
pub const FLASH_FSM_PGM_MAXPUL_FSM_PGM_MAXPUL_M: u32 = 4095;
pub const FLASH_FSM_PGM_MAXPUL_FSM_PGM_MAXPUL_S: u32 = 0;
pub const FLASH_FSM_EXECUTE_SUSPEND_NOW_W: u32 = 4;
pub const FLASH_FSM_EXECUTE_SUSPEND_NOW_M: u32 = 983040;
pub const FLASH_FSM_EXECUTE_SUSPEND_NOW_S: u32 = 16;
pub const FLASH_FSM_EXECUTE_FSMEXECUTE_W: u32 = 5;
pub const FLASH_FSM_EXECUTE_FSMEXECUTE_M: u32 = 31;
pub const FLASH_FSM_EXECUTE_FSMEXECUTE_S: u32 = 0;
pub const FLASH_FSM_SECTOR1_FSM_SECTOR1_W: u32 = 32;
pub const FLASH_FSM_SECTOR1_FSM_SECTOR1_M: u32 = 4294967295;
pub const FLASH_FSM_SECTOR1_FSM_SECTOR1_S: u32 = 0;
pub const FLASH_FSM_SECTOR2_FSM_SECTOR2_W: u32 = 32;
pub const FLASH_FSM_SECTOR2_FSM_SECTOR2_M: u32 = 4294967295;
pub const FLASH_FSM_SECTOR2_FSM_SECTOR2_S: u32 = 0;
pub const FLASH_FSM_BSLE0_FSM_BSLE0_W: u32 = 32;
pub const FLASH_FSM_BSLE0_FSM_BSLE0_M: u32 = 4294967295;
pub const FLASH_FSM_BSLE0_FSM_BSLE0_S: u32 = 0;
pub const FLASH_FSM_BSLE1_FSM_BSL1_W: u32 = 32;
pub const FLASH_FSM_BSLE1_FSM_BSL1_M: u32 = 4294967295;
pub const FLASH_FSM_BSLE1_FSM_BSL1_S: u32 = 0;
pub const FLASH_FSM_BSLP0_FSM_BSLP0_W: u32 = 32;
pub const FLASH_FSM_BSLP0_FSM_BSLP0_M: u32 = 4294967295;
pub const FLASH_FSM_BSLP0_FSM_BSLP0_S: u32 = 0;
pub const FLASH_FSM_BSLP1_FSM_BSL1_W: u32 = 32;
pub const FLASH_FSM_BSLP1_FSM_BSL1_M: u32 = 4294967295;
pub const FLASH_FSM_BSLP1_FSM_BSL1_S: u32 = 0;
pub const FLASH_FCFG_BANK_EE_BANK_WIDTH_W: u32 = 12;
pub const FLASH_FCFG_BANK_EE_BANK_WIDTH_M: u32 = 4293918720;
pub const FLASH_FCFG_BANK_EE_BANK_WIDTH_S: u32 = 20;
pub const FLASH_FCFG_BANK_EE_NUM_BANK_W: u32 = 4;
pub const FLASH_FCFG_BANK_EE_NUM_BANK_M: u32 = 983040;
pub const FLASH_FCFG_BANK_EE_NUM_BANK_S: u32 = 16;
pub const FLASH_FCFG_BANK_MAIN_BANK_WIDTH_W: u32 = 12;
pub const FLASH_FCFG_BANK_MAIN_BANK_WIDTH_M: u32 = 65520;
pub const FLASH_FCFG_BANK_MAIN_BANK_WIDTH_S: u32 = 4;
pub const FLASH_FCFG_BANK_MAIN_NUM_BANK_W: u32 = 4;
pub const FLASH_FCFG_BANK_MAIN_NUM_BANK_M: u32 = 15;
pub const FLASH_FCFG_BANK_MAIN_NUM_BANK_S: u32 = 0;
pub const FLASH_FCFG_WRAPPER_FAMILY_TYPE_W: u32 = 8;
pub const FLASH_FCFG_WRAPPER_FAMILY_TYPE_M: u32 = 4278190080;
pub const FLASH_FCFG_WRAPPER_FAMILY_TYPE_S: u32 = 24;
pub const FLASH_FCFG_WRAPPER_MEM_MAP: u32 = 1048576;
pub const FLASH_FCFG_WRAPPER_MEM_MAP_BITN: u32 = 20;
pub const FLASH_FCFG_WRAPPER_MEM_MAP_M: u32 = 1048576;
pub const FLASH_FCFG_WRAPPER_MEM_MAP_S: u32 = 20;
pub const FLASH_FCFG_WRAPPER_CPU2_W: u32 = 4;
pub const FLASH_FCFG_WRAPPER_CPU2_M: u32 = 983040;
pub const FLASH_FCFG_WRAPPER_CPU2_S: u32 = 16;
pub const FLASH_FCFG_WRAPPER_EE_IN_MAIN_W: u32 = 4;
pub const FLASH_FCFG_WRAPPER_EE_IN_MAIN_M: u32 = 61440;
pub const FLASH_FCFG_WRAPPER_EE_IN_MAIN_S: u32 = 12;
pub const FLASH_FCFG_WRAPPER_ROM: u32 = 2048;
pub const FLASH_FCFG_WRAPPER_ROM_BITN: u32 = 11;
pub const FLASH_FCFG_WRAPPER_ROM_M: u32 = 2048;
pub const FLASH_FCFG_WRAPPER_ROM_S: u32 = 11;
pub const FLASH_FCFG_WRAPPER_IFLUSH: u32 = 1024;
pub const FLASH_FCFG_WRAPPER_IFLUSH_BITN: u32 = 10;
pub const FLASH_FCFG_WRAPPER_IFLUSH_M: u32 = 1024;
pub const FLASH_FCFG_WRAPPER_IFLUSH_S: u32 = 10;
pub const FLASH_FCFG_WRAPPER_SIL3: u32 = 512;
pub const FLASH_FCFG_WRAPPER_SIL3_BITN: u32 = 9;
pub const FLASH_FCFG_WRAPPER_SIL3_M: u32 = 512;
pub const FLASH_FCFG_WRAPPER_SIL3_S: u32 = 9;
pub const FLASH_FCFG_WRAPPER_ECCA: u32 = 256;
pub const FLASH_FCFG_WRAPPER_ECCA_BITN: u32 = 8;
pub const FLASH_FCFG_WRAPPER_ECCA_M: u32 = 256;
pub const FLASH_FCFG_WRAPPER_ECCA_S: u32 = 8;
pub const FLASH_FCFG_WRAPPER_AUTO_SUSP_W: u32 = 2;
pub const FLASH_FCFG_WRAPPER_AUTO_SUSP_M: u32 = 192;
pub const FLASH_FCFG_WRAPPER_AUTO_SUSP_S: u32 = 6;
pub const FLASH_FCFG_WRAPPER_UERR_W: u32 = 2;
pub const FLASH_FCFG_WRAPPER_UERR_M: u32 = 48;
pub const FLASH_FCFG_WRAPPER_UERR_S: u32 = 4;
pub const FLASH_FCFG_WRAPPER_CPU_TYPE1_W: u32 = 4;
pub const FLASH_FCFG_WRAPPER_CPU_TYPE1_M: u32 = 15;
pub const FLASH_FCFG_WRAPPER_CPU_TYPE1_S: u32 = 0;
pub const FLASH_FCFG_BNK_TYPE_B7_TYPE_W: u32 = 4;
pub const FLASH_FCFG_BNK_TYPE_B7_TYPE_M: u32 = 4026531840;
pub const FLASH_FCFG_BNK_TYPE_B7_TYPE_S: u32 = 28;
pub const FLASH_FCFG_BNK_TYPE_B6_TYPE_W: u32 = 4;
pub const FLASH_FCFG_BNK_TYPE_B6_TYPE_M: u32 = 251658240;
pub const FLASH_FCFG_BNK_TYPE_B6_TYPE_S: u32 = 24;
pub const FLASH_FCFG_BNK_TYPE_B5_TYPE_W: u32 = 4;
pub const FLASH_FCFG_BNK_TYPE_B5_TYPE_M: u32 = 15728640;
pub const FLASH_FCFG_BNK_TYPE_B5_TYPE_S: u32 = 20;
pub const FLASH_FCFG_BNK_TYPE_B4_TYPE_W: u32 = 4;
pub const FLASH_FCFG_BNK_TYPE_B4_TYPE_M: u32 = 983040;
pub const FLASH_FCFG_BNK_TYPE_B4_TYPE_S: u32 = 16;
pub const FLASH_FCFG_BNK_TYPE_B3_TYPE_W: u32 = 4;
pub const FLASH_FCFG_BNK_TYPE_B3_TYPE_M: u32 = 61440;
pub const FLASH_FCFG_BNK_TYPE_B3_TYPE_S: u32 = 12;
pub const FLASH_FCFG_BNK_TYPE_B2_TYPE_W: u32 = 4;
pub const FLASH_FCFG_BNK_TYPE_B2_TYPE_M: u32 = 3840;
pub const FLASH_FCFG_BNK_TYPE_B2_TYPE_S: u32 = 8;
pub const FLASH_FCFG_BNK_TYPE_B1_TYPE_W: u32 = 4;
pub const FLASH_FCFG_BNK_TYPE_B1_TYPE_M: u32 = 240;
pub const FLASH_FCFG_BNK_TYPE_B1_TYPE_S: u32 = 4;
pub const FLASH_FCFG_BNK_TYPE_B0_TYPE_W: u32 = 4;
pub const FLASH_FCFG_BNK_TYPE_B0_TYPE_M: u32 = 15;
pub const FLASH_FCFG_BNK_TYPE_B0_TYPE_S: u32 = 0;
pub const FLASH_FCFG_B0_START_B0_MAX_SECTOR_W: u32 = 4;
pub const FLASH_FCFG_B0_START_B0_MAX_SECTOR_M: u32 = 4026531840;
pub const FLASH_FCFG_B0_START_B0_MAX_SECTOR_S: u32 = 28;
pub const FLASH_FCFG_B0_START_B0_MUX_FACTOR_W: u32 = 4;
pub const FLASH_FCFG_B0_START_B0_MUX_FACTOR_M: u32 = 251658240;
pub const FLASH_FCFG_B0_START_B0_MUX_FACTOR_S: u32 = 24;
pub const FLASH_FCFG_B0_START_B0_START_ADDR_W: u32 = 24;
pub const FLASH_FCFG_B0_START_B0_START_ADDR_M: u32 = 16777215;
pub const FLASH_FCFG_B0_START_B0_START_ADDR_S: u32 = 0;
pub const FLASH_FCFG_B1_START_B1_MAX_SECTOR_W: u32 = 4;
pub const FLASH_FCFG_B1_START_B1_MAX_SECTOR_M: u32 = 4026531840;
pub const FLASH_FCFG_B1_START_B1_MAX_SECTOR_S: u32 = 28;
pub const FLASH_FCFG_B1_START_B1_MUX_FACTOR_W: u32 = 4;
pub const FLASH_FCFG_B1_START_B1_MUX_FACTOR_M: u32 = 251658240;
pub const FLASH_FCFG_B1_START_B1_MUX_FACTOR_S: u32 = 24;
pub const FLASH_FCFG_B1_START_B1_START_ADDR_W: u32 = 24;
pub const FLASH_FCFG_B1_START_B1_START_ADDR_M: u32 = 16777215;
pub const FLASH_FCFG_B1_START_B1_START_ADDR_S: u32 = 0;
pub const FLASH_FCFG_B2_START_B2_MAX_SECTOR_W: u32 = 4;
pub const FLASH_FCFG_B2_START_B2_MAX_SECTOR_M: u32 = 4026531840;
pub const FLASH_FCFG_B2_START_B2_MAX_SECTOR_S: u32 = 28;
pub const FLASH_FCFG_B2_START_B2_MUX_FACTOR_W: u32 = 4;
pub const FLASH_FCFG_B2_START_B2_MUX_FACTOR_M: u32 = 251658240;
pub const FLASH_FCFG_B2_START_B2_MUX_FACTOR_S: u32 = 24;
pub const FLASH_FCFG_B2_START_B2_START_ADDR_W: u32 = 24;
pub const FLASH_FCFG_B2_START_B2_START_ADDR_M: u32 = 16777215;
pub const FLASH_FCFG_B2_START_B2_START_ADDR_S: u32 = 0;
pub const FLASH_FCFG_B3_START_B3_MAX_SECTOR_W: u32 = 4;
pub const FLASH_FCFG_B3_START_B3_MAX_SECTOR_M: u32 = 4026531840;
pub const FLASH_FCFG_B3_START_B3_MAX_SECTOR_S: u32 = 28;
pub const FLASH_FCFG_B3_START_B3_MUX_FACTOR_W: u32 = 4;
pub const FLASH_FCFG_B3_START_B3_MUX_FACTOR_M: u32 = 251658240;
pub const FLASH_FCFG_B3_START_B3_MUX_FACTOR_S: u32 = 24;
pub const FLASH_FCFG_B3_START_B3_START_ADDR_W: u32 = 24;
pub const FLASH_FCFG_B3_START_B3_START_ADDR_M: u32 = 16777215;
pub const FLASH_FCFG_B3_START_B3_START_ADDR_S: u32 = 0;
pub const FLASH_FCFG_B4_START_B4_MAX_SECTOR_W: u32 = 4;
pub const FLASH_FCFG_B4_START_B4_MAX_SECTOR_M: u32 = 4026531840;
pub const FLASH_FCFG_B4_START_B4_MAX_SECTOR_S: u32 = 28;
pub const FLASH_FCFG_B4_START_B4_MUX_FACTOR_W: u32 = 4;
pub const FLASH_FCFG_B4_START_B4_MUX_FACTOR_M: u32 = 251658240;
pub const FLASH_FCFG_B4_START_B4_MUX_FACTOR_S: u32 = 24;
pub const FLASH_FCFG_B4_START_B4_START_ADDR_W: u32 = 24;
pub const FLASH_FCFG_B4_START_B4_START_ADDR_M: u32 = 16777215;
pub const FLASH_FCFG_B4_START_B4_START_ADDR_S: u32 = 0;
pub const FLASH_FCFG_B5_START_B5_MAX_SECTOR_W: u32 = 4;
pub const FLASH_FCFG_B5_START_B5_MAX_SECTOR_M: u32 = 4026531840;
pub const FLASH_FCFG_B5_START_B5_MAX_SECTOR_S: u32 = 28;
pub const FLASH_FCFG_B5_START_B5_MUX_FACTOR_W: u32 = 4;
pub const FLASH_FCFG_B5_START_B5_MUX_FACTOR_M: u32 = 251658240;
pub const FLASH_FCFG_B5_START_B5_MUX_FACTOR_S: u32 = 24;
pub const FLASH_FCFG_B5_START_B5_START_ADDR_W: u32 = 24;
pub const FLASH_FCFG_B5_START_B5_START_ADDR_M: u32 = 16777215;
pub const FLASH_FCFG_B5_START_B5_START_ADDR_S: u32 = 0;
pub const FLASH_FCFG_B6_START_B6_MAX_SECTOR_W: u32 = 4;
pub const FLASH_FCFG_B6_START_B6_MAX_SECTOR_M: u32 = 4026531840;
pub const FLASH_FCFG_B6_START_B6_MAX_SECTOR_S: u32 = 28;
pub const FLASH_FCFG_B6_START_B6_MUX_FACTOR_W: u32 = 4;
pub const FLASH_FCFG_B6_START_B6_MUX_FACTOR_M: u32 = 251658240;
pub const FLASH_FCFG_B6_START_B6_MUX_FACTOR_S: u32 = 24;
pub const FLASH_FCFG_B6_START_B6_START_ADDR_W: u32 = 24;
pub const FLASH_FCFG_B6_START_B6_START_ADDR_M: u32 = 16777215;
pub const FLASH_FCFG_B6_START_B6_START_ADDR_S: u32 = 0;
pub const FLASH_FCFG_B7_START_B7_MAX_SECTOR_W: u32 = 4;
pub const FLASH_FCFG_B7_START_B7_MAX_SECTOR_M: u32 = 4026531840;
pub const FLASH_FCFG_B7_START_B7_MAX_SECTOR_S: u32 = 28;
pub const FLASH_FCFG_B7_START_B7_MUX_FACTOR_W: u32 = 4;
pub const FLASH_FCFG_B7_START_B7_MUX_FACTOR_M: u32 = 251658240;
pub const FLASH_FCFG_B7_START_B7_MUX_FACTOR_S: u32 = 24;
pub const FLASH_FCFG_B7_START_B7_START_ADDR_W: u32 = 24;
pub const FLASH_FCFG_B7_START_B7_START_ADDR_M: u32 = 16777215;
pub const FLASH_FCFG_B7_START_B7_START_ADDR_S: u32 = 0;
pub const FLASH_FCFG_B0_SSIZE0_B0_NUM_SECTORS_W: u32 = 12;
pub const FLASH_FCFG_B0_SSIZE0_B0_NUM_SECTORS_M: u32 = 268369920;
pub const FLASH_FCFG_B0_SSIZE0_B0_NUM_SECTORS_S: u32 = 16;
pub const FLASH_FCFG_B0_SSIZE0_B0_SECT_SIZE_W: u32 = 4;
pub const FLASH_FCFG_B0_SSIZE0_B0_SECT_SIZE_M: u32 = 15;
pub const FLASH_FCFG_B0_SSIZE0_B0_SECT_SIZE_S: u32 = 0;
pub const AON_SYSCTL_O_PWRCTL: u32 = 0;
pub const AON_SYSCTL_O_RESETCTL: u32 = 4;
pub const AON_SYSCTL_O_SLEEPCTL: u32 = 8;
pub const AON_SYSCTL_PWRCTL_DCDC_ACTIVE: u32 = 4;
pub const AON_SYSCTL_PWRCTL_DCDC_ACTIVE_BITN: u32 = 2;
pub const AON_SYSCTL_PWRCTL_DCDC_ACTIVE_M: u32 = 4;
pub const AON_SYSCTL_PWRCTL_DCDC_ACTIVE_S: u32 = 2;
pub const AON_SYSCTL_PWRCTL_EXT_REG_MODE: u32 = 2;
pub const AON_SYSCTL_PWRCTL_EXT_REG_MODE_BITN: u32 = 1;
pub const AON_SYSCTL_PWRCTL_EXT_REG_MODE_M: u32 = 2;
pub const AON_SYSCTL_PWRCTL_EXT_REG_MODE_S: u32 = 1;
pub const AON_SYSCTL_PWRCTL_DCDC_EN: u32 = 1;
pub const AON_SYSCTL_PWRCTL_DCDC_EN_BITN: u32 = 0;
pub const AON_SYSCTL_PWRCTL_DCDC_EN_M: u32 = 1;
pub const AON_SYSCTL_PWRCTL_DCDC_EN_S: u32 = 0;
pub const AON_SYSCTL_RESETCTL_SYSRESET: u32 = 2147483648;
pub const AON_SYSCTL_RESETCTL_SYSRESET_BITN: u32 = 31;
pub const AON_SYSCTL_RESETCTL_SYSRESET_M: u32 = 2147483648;
pub const AON_SYSCTL_RESETCTL_SYSRESET_S: u32 = 31;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_1_CLR: u32 = 33554432;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_1_CLR_BITN: u32 = 25;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_1_CLR_M: u32 = 33554432;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_1_CLR_S: u32 = 25;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_0_CLR: u32 = 16777216;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_0_CLR_BITN: u32 = 24;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_0_CLR_M: u32 = 16777216;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_0_CLR_S: u32 = 24;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_1_SET: u32 = 131072;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_1_SET_BITN: u32 = 17;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_1_SET_M: u32 = 131072;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_1_SET_S: u32 = 17;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_0_SET: u32 = 65536;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_0_SET_BITN: u32 = 16;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_0_SET_M: u32 = 65536;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_0_SET_S: u32 = 16;
pub const AON_SYSCTL_RESETCTL_WU_FROM_SD: u32 = 32768;
pub const AON_SYSCTL_RESETCTL_WU_FROM_SD_BITN: u32 = 15;
pub const AON_SYSCTL_RESETCTL_WU_FROM_SD_M: u32 = 32768;
pub const AON_SYSCTL_RESETCTL_WU_FROM_SD_S: u32 = 15;
pub const AON_SYSCTL_RESETCTL_GPIO_WU_FROM_SD: u32 = 16384;
pub const AON_SYSCTL_RESETCTL_GPIO_WU_FROM_SD_BITN: u32 = 14;
pub const AON_SYSCTL_RESETCTL_GPIO_WU_FROM_SD_M: u32 = 16384;
pub const AON_SYSCTL_RESETCTL_GPIO_WU_FROM_SD_S: u32 = 14;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_1: u32 = 8192;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_1_BITN: u32 = 13;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_1_M: u32 = 8192;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_1_S: u32 = 13;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_0: u32 = 4096;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_0_BITN: u32 = 12;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_0_M: u32 = 4096;
pub const AON_SYSCTL_RESETCTL_BOOT_DET_0_S: u32 = 12;
pub const AON_SYSCTL_RESETCTL_VDDS_LOSS_EN_OVR: u32 = 2048;
pub const AON_SYSCTL_RESETCTL_VDDS_LOSS_EN_OVR_BITN: u32 = 11;
pub const AON_SYSCTL_RESETCTL_VDDS_LOSS_EN_OVR_M: u32 = 2048;
pub const AON_SYSCTL_RESETCTL_VDDS_LOSS_EN_OVR_S: u32 = 11;
pub const AON_SYSCTL_RESETCTL_VDDR_LOSS_EN_OVR: u32 = 1024;
pub const AON_SYSCTL_RESETCTL_VDDR_LOSS_EN_OVR_BITN: u32 = 10;
pub const AON_SYSCTL_RESETCTL_VDDR_LOSS_EN_OVR_M: u32 = 1024;
pub const AON_SYSCTL_RESETCTL_VDDR_LOSS_EN_OVR_S: u32 = 10;
pub const AON_SYSCTL_RESETCTL_VDD_LOSS_EN_OVR: u32 = 512;
pub const AON_SYSCTL_RESETCTL_VDD_LOSS_EN_OVR_BITN: u32 = 9;
pub const AON_SYSCTL_RESETCTL_VDD_LOSS_EN_OVR_M: u32 = 512;
pub const AON_SYSCTL_RESETCTL_VDD_LOSS_EN_OVR_S: u32 = 9;
pub const AON_SYSCTL_RESETCTL_VDDS_LOSS_EN: u32 = 128;
pub const AON_SYSCTL_RESETCTL_VDDS_LOSS_EN_BITN: u32 = 7;
pub const AON_SYSCTL_RESETCTL_VDDS_LOSS_EN_M: u32 = 128;
pub const AON_SYSCTL_RESETCTL_VDDS_LOSS_EN_S: u32 = 7;
pub const AON_SYSCTL_RESETCTL_VDDR_LOSS_EN: u32 = 64;
pub const AON_SYSCTL_RESETCTL_VDDR_LOSS_EN_BITN: u32 = 6;
pub const AON_SYSCTL_RESETCTL_VDDR_LOSS_EN_M: u32 = 64;
pub const AON_SYSCTL_RESETCTL_VDDR_LOSS_EN_S: u32 = 6;
pub const AON_SYSCTL_RESETCTL_VDD_LOSS_EN: u32 = 32;
pub const AON_SYSCTL_RESETCTL_VDD_LOSS_EN_BITN: u32 = 5;
pub const AON_SYSCTL_RESETCTL_VDD_LOSS_EN_M: u32 = 32;
pub const AON_SYSCTL_RESETCTL_VDD_LOSS_EN_S: u32 = 5;
pub const AON_SYSCTL_RESETCTL_CLK_LOSS_EN: u32 = 16;
pub const AON_SYSCTL_RESETCTL_CLK_LOSS_EN_BITN: u32 = 4;
pub const AON_SYSCTL_RESETCTL_CLK_LOSS_EN_M: u32 = 16;
pub const AON_SYSCTL_RESETCTL_CLK_LOSS_EN_S: u32 = 4;
pub const AON_SYSCTL_RESETCTL_RESET_SRC_W: u32 = 3;
pub const AON_SYSCTL_RESETCTL_RESET_SRC_M: u32 = 14;
pub const AON_SYSCTL_RESETCTL_RESET_SRC_S: u32 = 1;
pub const AON_SYSCTL_RESETCTL_RESET_SRC_WARMRESET: u32 = 14;
pub const AON_SYSCTL_RESETCTL_RESET_SRC_SYSRESET: u32 = 12;
pub const AON_SYSCTL_RESETCTL_RESET_SRC_CLK_LOSS: u32 = 10;
pub const AON_SYSCTL_RESETCTL_RESET_SRC_VDDR_LOSS: u32 = 8;
pub const AON_SYSCTL_RESETCTL_RESET_SRC_VDD_LOSS: u32 = 6;
pub const AON_SYSCTL_RESETCTL_RESET_SRC_VDDS_LOSS: u32 = 4;
pub const AON_SYSCTL_RESETCTL_RESET_SRC_PIN_RESET: u32 = 2;
pub const AON_SYSCTL_RESETCTL_RESET_SRC_PWR_ON: u32 = 0;
pub const AON_SYSCTL_SLEEPCTL_IO_PAD_SLEEP_DIS: u32 = 1;
pub const AON_SYSCTL_SLEEPCTL_IO_PAD_SLEEP_DIS_BITN: u32 = 0;
pub const AON_SYSCTL_SLEEPCTL_IO_PAD_SLEEP_DIS_M: u32 = 1;
pub const AON_SYSCTL_SLEEPCTL_IO_PAD_SLEEP_DIS_S: u32 = 0;
pub const FAPI_STATUS_SUCCESS: u32 = 0;
pub const FAPI_STATUS_FSM_BUSY: u32 = 1;
pub const FAPI_STATUS_FSM_READY: u32 = 2;
pub const FAPI_STATUS_INCORRECT_DATABUFFER_LENGTH: u32 = 3;
pub const FAPI_STATUS_FSM_ERROR: u32 = 4;
pub const FLASH_INT_FSM_DONE: u32 = 4194304;
pub const FLASH_INT_RV: u32 = 65536;
pub const FLASH_PWR_ACTIVE_MODE: u32 = 0;
pub const FLASH_PWR_OFF_MODE: u32 = 1;
pub const FLASH_PWR_DEEP_STDBY_MODE: u32 = 2;
pub const FLASH_NO_PROTECT: u32 = 0;
pub const FLASH_WRITE_PROTECT: u32 = 1;
pub const ADDR_OFFSET: u32 = 528482304;
pub const FCFG1_OFFSET: u32 = 4096;
pub const FLASH_MODULE_CLK_FREQ: u32 = 48;
pub const FSM_REG_WRT_ENABLE: u32 = 5;
pub const FSM_REG_WRT_DISABLE: u32 = 2;
pub const FBFALLBACK_SLEEP: u32 = 0;
pub const FBFALLBACK_DEEP_STDBY: u32 = 1;
pub const FBFALLBACK_ACTIVE: u32 = 3;
pub const FLASH_BAGP: u32 = 20;
pub const FLASH_PAGP: u32 = 20;
pub const PATTERN_BITS: u32 = 32;
pub const FW_WRT_TRIMMED: u32 = 1;
pub const DUMPWORD_INSTR: u32 = 4;
pub const FLASH_CMD_EXEC: u32 = 21;
pub const GPIO_O_DOUT3_0: u32 = 0;
pub const GPIO_O_DOUT7_4: u32 = 4;
pub const GPIO_O_DOUT11_8: u32 = 8;
pub const GPIO_O_DOUT15_12: u32 = 12;
pub const GPIO_O_DOUT19_16: u32 = 16;
pub const GPIO_O_DOUT23_20: u32 = 20;
pub const GPIO_O_DOUT27_24: u32 = 24;
pub const GPIO_O_DOUT31_28: u32 = 28;
pub const GPIO_O_DOUT31_0: u32 = 128;
pub const GPIO_O_DOUTSET31_0: u32 = 144;
pub const GPIO_O_DOUTCLR31_0: u32 = 160;
pub const GPIO_O_DOUTTGL31_0: u32 = 176;
pub const GPIO_O_DIN31_0: u32 = 192;
pub const GPIO_O_DOE31_0: u32 = 208;
pub const GPIO_O_EVFLAGS31_0: u32 = 224;
pub const GPIO_DOUT3_0_DIO3: u32 = 16777216;
pub const GPIO_DOUT3_0_DIO3_BITN: u32 = 24;
pub const GPIO_DOUT3_0_DIO3_M: u32 = 16777216;
pub const GPIO_DOUT3_0_DIO3_S: u32 = 24;
pub const GPIO_DOUT3_0_DIO2: u32 = 65536;
pub const GPIO_DOUT3_0_DIO2_BITN: u32 = 16;
pub const GPIO_DOUT3_0_DIO2_M: u32 = 65536;
pub const GPIO_DOUT3_0_DIO2_S: u32 = 16;
pub const GPIO_DOUT3_0_DIO1: u32 = 256;
pub const GPIO_DOUT3_0_DIO1_BITN: u32 = 8;
pub const GPIO_DOUT3_0_DIO1_M: u32 = 256;
pub const GPIO_DOUT3_0_DIO1_S: u32 = 8;
pub const GPIO_DOUT3_0_DIO0: u32 = 1;
pub const GPIO_DOUT3_0_DIO0_BITN: u32 = 0;
pub const GPIO_DOUT3_0_DIO0_M: u32 = 1;
pub const GPIO_DOUT3_0_DIO0_S: u32 = 0;
pub const GPIO_DOUT7_4_DIO7: u32 = 16777216;
pub const GPIO_DOUT7_4_DIO7_BITN: u32 = 24;
pub const GPIO_DOUT7_4_DIO7_M: u32 = 16777216;
pub const GPIO_DOUT7_4_DIO7_S: u32 = 24;
pub const GPIO_DOUT7_4_DIO6: u32 = 65536;
pub const GPIO_DOUT7_4_DIO6_BITN: u32 = 16;
pub const GPIO_DOUT7_4_DIO6_M: u32 = 65536;
pub const GPIO_DOUT7_4_DIO6_S: u32 = 16;
pub const GPIO_DOUT7_4_DIO5: u32 = 256;
pub const GPIO_DOUT7_4_DIO5_BITN: u32 = 8;
pub const GPIO_DOUT7_4_DIO5_M: u32 = 256;
pub const GPIO_DOUT7_4_DIO5_S: u32 = 8;
pub const GPIO_DOUT7_4_DIO4: u32 = 1;
pub const GPIO_DOUT7_4_DIO4_BITN: u32 = 0;
pub const GPIO_DOUT7_4_DIO4_M: u32 = 1;
pub const GPIO_DOUT7_4_DIO4_S: u32 = 0;
pub const GPIO_DOUT11_8_DIO11: u32 = 16777216;
pub const GPIO_DOUT11_8_DIO11_BITN: u32 = 24;
pub const GPIO_DOUT11_8_DIO11_M: u32 = 16777216;
pub const GPIO_DOUT11_8_DIO11_S: u32 = 24;
pub const GPIO_DOUT11_8_DIO10: u32 = 65536;
pub const GPIO_DOUT11_8_DIO10_BITN: u32 = 16;
pub const GPIO_DOUT11_8_DIO10_M: u32 = 65536;
pub const GPIO_DOUT11_8_DIO10_S: u32 = 16;
pub const GPIO_DOUT11_8_DIO9: u32 = 256;
pub const GPIO_DOUT11_8_DIO9_BITN: u32 = 8;
pub const GPIO_DOUT11_8_DIO9_M: u32 = 256;
pub const GPIO_DOUT11_8_DIO9_S: u32 = 8;
pub const GPIO_DOUT11_8_DIO8: u32 = 1;
pub const GPIO_DOUT11_8_DIO8_BITN: u32 = 0;
pub const GPIO_DOUT11_8_DIO8_M: u32 = 1;
pub const GPIO_DOUT11_8_DIO8_S: u32 = 0;
pub const GPIO_DOUT15_12_DIO15: u32 = 16777216;
pub const GPIO_DOUT15_12_DIO15_BITN: u32 = 24;
pub const GPIO_DOUT15_12_DIO15_M: u32 = 16777216;
pub const GPIO_DOUT15_12_DIO15_S: u32 = 24;
pub const GPIO_DOUT15_12_DIO14: u32 = 65536;
pub const GPIO_DOUT15_12_DIO14_BITN: u32 = 16;
pub const GPIO_DOUT15_12_DIO14_M: u32 = 65536;
pub const GPIO_DOUT15_12_DIO14_S: u32 = 16;
pub const GPIO_DOUT15_12_DIO13: u32 = 256;
pub const GPIO_DOUT15_12_DIO13_BITN: u32 = 8;
pub const GPIO_DOUT15_12_DIO13_M: u32 = 256;
pub const GPIO_DOUT15_12_DIO13_S: u32 = 8;
pub const GPIO_DOUT15_12_DIO12: u32 = 1;
pub const GPIO_DOUT15_12_DIO12_BITN: u32 = 0;
pub const GPIO_DOUT15_12_DIO12_M: u32 = 1;
pub const GPIO_DOUT15_12_DIO12_S: u32 = 0;
pub const GPIO_DOUT19_16_DIO19: u32 = 16777216;
pub const GPIO_DOUT19_16_DIO19_BITN: u32 = 24;
pub const GPIO_DOUT19_16_DIO19_M: u32 = 16777216;
pub const GPIO_DOUT19_16_DIO19_S: u32 = 24;
pub const GPIO_DOUT19_16_DIO18: u32 = 65536;
pub const GPIO_DOUT19_16_DIO18_BITN: u32 = 16;
pub const GPIO_DOUT19_16_DIO18_M: u32 = 65536;
pub const GPIO_DOUT19_16_DIO18_S: u32 = 16;
pub const GPIO_DOUT19_16_DIO17: u32 = 256;
pub const GPIO_DOUT19_16_DIO17_BITN: u32 = 8;
pub const GPIO_DOUT19_16_DIO17_M: u32 = 256;
pub const GPIO_DOUT19_16_DIO17_S: u32 = 8;
pub const GPIO_DOUT19_16_DIO16: u32 = 1;
pub const GPIO_DOUT19_16_DIO16_BITN: u32 = 0;
pub const GPIO_DOUT19_16_DIO16_M: u32 = 1;
pub const GPIO_DOUT19_16_DIO16_S: u32 = 0;
pub const GPIO_DOUT23_20_DIO23: u32 = 16777216;
pub const GPIO_DOUT23_20_DIO23_BITN: u32 = 24;
pub const GPIO_DOUT23_20_DIO23_M: u32 = 16777216;
pub const GPIO_DOUT23_20_DIO23_S: u32 = 24;
pub const GPIO_DOUT23_20_DIO22: u32 = 65536;
pub const GPIO_DOUT23_20_DIO22_BITN: u32 = 16;
pub const GPIO_DOUT23_20_DIO22_M: u32 = 65536;
pub const GPIO_DOUT23_20_DIO22_S: u32 = 16;
pub const GPIO_DOUT23_20_DIO21: u32 = 256;
pub const GPIO_DOUT23_20_DIO21_BITN: u32 = 8;
pub const GPIO_DOUT23_20_DIO21_M: u32 = 256;
pub const GPIO_DOUT23_20_DIO21_S: u32 = 8;
pub const GPIO_DOUT23_20_DIO20: u32 = 1;
pub const GPIO_DOUT23_20_DIO20_BITN: u32 = 0;
pub const GPIO_DOUT23_20_DIO20_M: u32 = 1;
pub const GPIO_DOUT23_20_DIO20_S: u32 = 0;
pub const GPIO_DOUT27_24_DIO27: u32 = 16777216;
pub const GPIO_DOUT27_24_DIO27_BITN: u32 = 24;
pub const GPIO_DOUT27_24_DIO27_M: u32 = 16777216;
pub const GPIO_DOUT27_24_DIO27_S: u32 = 24;
pub const GPIO_DOUT27_24_DIO26: u32 = 65536;
pub const GPIO_DOUT27_24_DIO26_BITN: u32 = 16;
pub const GPIO_DOUT27_24_DIO26_M: u32 = 65536;
pub const GPIO_DOUT27_24_DIO26_S: u32 = 16;
pub const GPIO_DOUT27_24_DIO25: u32 = 256;
pub const GPIO_DOUT27_24_DIO25_BITN: u32 = 8;
pub const GPIO_DOUT27_24_DIO25_M: u32 = 256;
pub const GPIO_DOUT27_24_DIO25_S: u32 = 8;
pub const GPIO_DOUT27_24_DIO24: u32 = 1;
pub const GPIO_DOUT27_24_DIO24_BITN: u32 = 0;
pub const GPIO_DOUT27_24_DIO24_M: u32 = 1;
pub const GPIO_DOUT27_24_DIO24_S: u32 = 0;
pub const GPIO_DOUT31_28_DIO31: u32 = 16777216;
pub const GPIO_DOUT31_28_DIO31_BITN: u32 = 24;
pub const GPIO_DOUT31_28_DIO31_M: u32 = 16777216;
pub const GPIO_DOUT31_28_DIO31_S: u32 = 24;
pub const GPIO_DOUT31_28_DIO30: u32 = 65536;
pub const GPIO_DOUT31_28_DIO30_BITN: u32 = 16;
pub const GPIO_DOUT31_28_DIO30_M: u32 = 65536;
pub const GPIO_DOUT31_28_DIO30_S: u32 = 16;
pub const GPIO_DOUT31_28_DIO29: u32 = 256;
pub const GPIO_DOUT31_28_DIO29_BITN: u32 = 8;
pub const GPIO_DOUT31_28_DIO29_M: u32 = 256;
pub const GPIO_DOUT31_28_DIO29_S: u32 = 8;
pub const GPIO_DOUT31_28_DIO28: u32 = 1;
pub const GPIO_DOUT31_28_DIO28_BITN: u32 = 0;
pub const GPIO_DOUT31_28_DIO28_M: u32 = 1;
pub const GPIO_DOUT31_28_DIO28_S: u32 = 0;
pub const GPIO_DOUT31_0_DIO31: u32 = 2147483648;
pub const GPIO_DOUT31_0_DIO31_BITN: u32 = 31;
pub const GPIO_DOUT31_0_DIO31_M: u32 = 2147483648;
pub const GPIO_DOUT31_0_DIO31_S: u32 = 31;
pub const GPIO_DOUT31_0_DIO30: u32 = 1073741824;
pub const GPIO_DOUT31_0_DIO30_BITN: u32 = 30;
pub const GPIO_DOUT31_0_DIO30_M: u32 = 1073741824;
pub const GPIO_DOUT31_0_DIO30_S: u32 = 30;
pub const GPIO_DOUT31_0_DIO29: u32 = 536870912;
pub const GPIO_DOUT31_0_DIO29_BITN: u32 = 29;
pub const GPIO_DOUT31_0_DIO29_M: u32 = 536870912;
pub const GPIO_DOUT31_0_DIO29_S: u32 = 29;
pub const GPIO_DOUT31_0_DIO28: u32 = 268435456;
pub const GPIO_DOUT31_0_DIO28_BITN: u32 = 28;
pub const GPIO_DOUT31_0_DIO28_M: u32 = 268435456;
pub const GPIO_DOUT31_0_DIO28_S: u32 = 28;
pub const GPIO_DOUT31_0_DIO27: u32 = 134217728;
pub const GPIO_DOUT31_0_DIO27_BITN: u32 = 27;
pub const GPIO_DOUT31_0_DIO27_M: u32 = 134217728;
pub const GPIO_DOUT31_0_DIO27_S: u32 = 27;
pub const GPIO_DOUT31_0_DIO26: u32 = 67108864;
pub const GPIO_DOUT31_0_DIO26_BITN: u32 = 26;
pub const GPIO_DOUT31_0_DIO26_M: u32 = 67108864;
pub const GPIO_DOUT31_0_DIO26_S: u32 = 26;
pub const GPIO_DOUT31_0_DIO25: u32 = 33554432;
pub const GPIO_DOUT31_0_DIO25_BITN: u32 = 25;
pub const GPIO_DOUT31_0_DIO25_M: u32 = 33554432;
pub const GPIO_DOUT31_0_DIO25_S: u32 = 25;
pub const GPIO_DOUT31_0_DIO24: u32 = 16777216;
pub const GPIO_DOUT31_0_DIO24_BITN: u32 = 24;
pub const GPIO_DOUT31_0_DIO24_M: u32 = 16777216;
pub const GPIO_DOUT31_0_DIO24_S: u32 = 24;
pub const GPIO_DOUT31_0_DIO23: u32 = 8388608;
pub const GPIO_DOUT31_0_DIO23_BITN: u32 = 23;
pub const GPIO_DOUT31_0_DIO23_M: u32 = 8388608;
pub const GPIO_DOUT31_0_DIO23_S: u32 = 23;
pub const GPIO_DOUT31_0_DIO22: u32 = 4194304;
pub const GPIO_DOUT31_0_DIO22_BITN: u32 = 22;
pub const GPIO_DOUT31_0_DIO22_M: u32 = 4194304;
pub const GPIO_DOUT31_0_DIO22_S: u32 = 22;
pub const GPIO_DOUT31_0_DIO21: u32 = 2097152;
pub const GPIO_DOUT31_0_DIO21_BITN: u32 = 21;
pub const GPIO_DOUT31_0_DIO21_M: u32 = 2097152;
pub const GPIO_DOUT31_0_DIO21_S: u32 = 21;
pub const GPIO_DOUT31_0_DIO20: u32 = 1048576;
pub const GPIO_DOUT31_0_DIO20_BITN: u32 = 20;
pub const GPIO_DOUT31_0_DIO20_M: u32 = 1048576;
pub const GPIO_DOUT31_0_DIO20_S: u32 = 20;
pub const GPIO_DOUT31_0_DIO19: u32 = 524288;
pub const GPIO_DOUT31_0_DIO19_BITN: u32 = 19;
pub const GPIO_DOUT31_0_DIO19_M: u32 = 524288;
pub const GPIO_DOUT31_0_DIO19_S: u32 = 19;
pub const GPIO_DOUT31_0_DIO18: u32 = 262144;
pub const GPIO_DOUT31_0_DIO18_BITN: u32 = 18;
pub const GPIO_DOUT31_0_DIO18_M: u32 = 262144;
pub const GPIO_DOUT31_0_DIO18_S: u32 = 18;
pub const GPIO_DOUT31_0_DIO17: u32 = 131072;
pub const GPIO_DOUT31_0_DIO17_BITN: u32 = 17;
pub const GPIO_DOUT31_0_DIO17_M: u32 = 131072;
pub const GPIO_DOUT31_0_DIO17_S: u32 = 17;
pub const GPIO_DOUT31_0_DIO16: u32 = 65536;
pub const GPIO_DOUT31_0_DIO16_BITN: u32 = 16;
pub const GPIO_DOUT31_0_DIO16_M: u32 = 65536;
pub const GPIO_DOUT31_0_DIO16_S: u32 = 16;
pub const GPIO_DOUT31_0_DIO15: u32 = 32768;
pub const GPIO_DOUT31_0_DIO15_BITN: u32 = 15;
pub const GPIO_DOUT31_0_DIO15_M: u32 = 32768;
pub const GPIO_DOUT31_0_DIO15_S: u32 = 15;
pub const GPIO_DOUT31_0_DIO14: u32 = 16384;
pub const GPIO_DOUT31_0_DIO14_BITN: u32 = 14;
pub const GPIO_DOUT31_0_DIO14_M: u32 = 16384;
pub const GPIO_DOUT31_0_DIO14_S: u32 = 14;
pub const GPIO_DOUT31_0_DIO13: u32 = 8192;
pub const GPIO_DOUT31_0_DIO13_BITN: u32 = 13;
pub const GPIO_DOUT31_0_DIO13_M: u32 = 8192;
pub const GPIO_DOUT31_0_DIO13_S: u32 = 13;
pub const GPIO_DOUT31_0_DIO12: u32 = 4096;
pub const GPIO_DOUT31_0_DIO12_BITN: u32 = 12;
pub const GPIO_DOUT31_0_DIO12_M: u32 = 4096;
pub const GPIO_DOUT31_0_DIO12_S: u32 = 12;
pub const GPIO_DOUT31_0_DIO11: u32 = 2048;
pub const GPIO_DOUT31_0_DIO11_BITN: u32 = 11;
pub const GPIO_DOUT31_0_DIO11_M: u32 = 2048;
pub const GPIO_DOUT31_0_DIO11_S: u32 = 11;
pub const GPIO_DOUT31_0_DIO10: u32 = 1024;
pub const GPIO_DOUT31_0_DIO10_BITN: u32 = 10;
pub const GPIO_DOUT31_0_DIO10_M: u32 = 1024;
pub const GPIO_DOUT31_0_DIO10_S: u32 = 10;
pub const GPIO_DOUT31_0_DIO9: u32 = 512;
pub const GPIO_DOUT31_0_DIO9_BITN: u32 = 9;
pub const GPIO_DOUT31_0_DIO9_M: u32 = 512;
pub const GPIO_DOUT31_0_DIO9_S: u32 = 9;
pub const GPIO_DOUT31_0_DIO8: u32 = 256;
pub const GPIO_DOUT31_0_DIO8_BITN: u32 = 8;
pub const GPIO_DOUT31_0_DIO8_M: u32 = 256;
pub const GPIO_DOUT31_0_DIO8_S: u32 = 8;
pub const GPIO_DOUT31_0_DIO7: u32 = 128;
pub const GPIO_DOUT31_0_DIO7_BITN: u32 = 7;
pub const GPIO_DOUT31_0_DIO7_M: u32 = 128;
pub const GPIO_DOUT31_0_DIO7_S: u32 = 7;
pub const GPIO_DOUT31_0_DIO6: u32 = 64;
pub const GPIO_DOUT31_0_DIO6_BITN: u32 = 6;
pub const GPIO_DOUT31_0_DIO6_M: u32 = 64;
pub const GPIO_DOUT31_0_DIO6_S: u32 = 6;
pub const GPIO_DOUT31_0_DIO5: u32 = 32;
pub const GPIO_DOUT31_0_DIO5_BITN: u32 = 5;
pub const GPIO_DOUT31_0_DIO5_M: u32 = 32;
pub const GPIO_DOUT31_0_DIO5_S: u32 = 5;
pub const GPIO_DOUT31_0_DIO4: u32 = 16;
pub const GPIO_DOUT31_0_DIO4_BITN: u32 = 4;
pub const GPIO_DOUT31_0_DIO4_M: u32 = 16;
pub const GPIO_DOUT31_0_DIO4_S: u32 = 4;
pub const GPIO_DOUT31_0_DIO3: u32 = 8;
pub const GPIO_DOUT31_0_DIO3_BITN: u32 = 3;
pub const GPIO_DOUT31_0_DIO3_M: u32 = 8;
pub const GPIO_DOUT31_0_DIO3_S: u32 = 3;
pub const GPIO_DOUT31_0_DIO2: u32 = 4;
pub const GPIO_DOUT31_0_DIO2_BITN: u32 = 2;
pub const GPIO_DOUT31_0_DIO2_M: u32 = 4;
pub const GPIO_DOUT31_0_DIO2_S: u32 = 2;
pub const GPIO_DOUT31_0_DIO1: u32 = 2;
pub const GPIO_DOUT31_0_DIO1_BITN: u32 = 1;
pub const GPIO_DOUT31_0_DIO1_M: u32 = 2;
pub const GPIO_DOUT31_0_DIO1_S: u32 = 1;
pub const GPIO_DOUT31_0_DIO0: u32 = 1;
pub const GPIO_DOUT31_0_DIO0_BITN: u32 = 0;
pub const GPIO_DOUT31_0_DIO0_M: u32 = 1;
pub const GPIO_DOUT31_0_DIO0_S: u32 = 0;
pub const GPIO_DOUTSET31_0_DIO31: u32 = 2147483648;
pub const GPIO_DOUTSET31_0_DIO31_BITN: u32 = 31;
pub const GPIO_DOUTSET31_0_DIO31_M: u32 = 2147483648;
pub const GPIO_DOUTSET31_0_DIO31_S: u32 = 31;
pub const GPIO_DOUTSET31_0_DIO30: u32 = 1073741824;
pub const GPIO_DOUTSET31_0_DIO30_BITN: u32 = 30;
pub const GPIO_DOUTSET31_0_DIO30_M: u32 = 1073741824;
pub const GPIO_DOUTSET31_0_DIO30_S: u32 = 30;
pub const GPIO_DOUTSET31_0_DIO29: u32 = 536870912;
pub const GPIO_DOUTSET31_0_DIO29_BITN: u32 = 29;
pub const GPIO_DOUTSET31_0_DIO29_M: u32 = 536870912;
pub const GPIO_DOUTSET31_0_DIO29_S: u32 = 29;
pub const GPIO_DOUTSET31_0_DIO28: u32 = 268435456;
pub const GPIO_DOUTSET31_0_DIO28_BITN: u32 = 28;
pub const GPIO_DOUTSET31_0_DIO28_M: u32 = 268435456;
pub const GPIO_DOUTSET31_0_DIO28_S: u32 = 28;
pub const GPIO_DOUTSET31_0_DIO27: u32 = 134217728;
pub const GPIO_DOUTSET31_0_DIO27_BITN: u32 = 27;
pub const GPIO_DOUTSET31_0_DIO27_M: u32 = 134217728;
pub const GPIO_DOUTSET31_0_DIO27_S: u32 = 27;
pub const GPIO_DOUTSET31_0_DIO26: u32 = 67108864;
pub const GPIO_DOUTSET31_0_DIO26_BITN: u32 = 26;
pub const GPIO_DOUTSET31_0_DIO26_M: u32 = 67108864;
pub const GPIO_DOUTSET31_0_DIO26_S: u32 = 26;
pub const GPIO_DOUTSET31_0_DIO25: u32 = 33554432;
pub const GPIO_DOUTSET31_0_DIO25_BITN: u32 = 25;
pub const GPIO_DOUTSET31_0_DIO25_M: u32 = 33554432;
pub const GPIO_DOUTSET31_0_DIO25_S: u32 = 25;
pub const GPIO_DOUTSET31_0_DIO24: u32 = 16777216;
pub const GPIO_DOUTSET31_0_DIO24_BITN: u32 = 24;
pub const GPIO_DOUTSET31_0_DIO24_M: u32 = 16777216;
pub const GPIO_DOUTSET31_0_DIO24_S: u32 = 24;
pub const GPIO_DOUTSET31_0_DIO23: u32 = 8388608;
pub const GPIO_DOUTSET31_0_DIO23_BITN: u32 = 23;
pub const GPIO_DOUTSET31_0_DIO23_M: u32 = 8388608;
pub const GPIO_DOUTSET31_0_DIO23_S: u32 = 23;
pub const GPIO_DOUTSET31_0_DIO22: u32 = 4194304;
pub const GPIO_DOUTSET31_0_DIO22_BITN: u32 = 22;
pub const GPIO_DOUTSET31_0_DIO22_M: u32 = 4194304;
pub const GPIO_DOUTSET31_0_DIO22_S: u32 = 22;
pub const GPIO_DOUTSET31_0_DIO21: u32 = 2097152;
pub const GPIO_DOUTSET31_0_DIO21_BITN: u32 = 21;
pub const GPIO_DOUTSET31_0_DIO21_M: u32 = 2097152;
pub const GPIO_DOUTSET31_0_DIO21_S: u32 = 21;
pub const GPIO_DOUTSET31_0_DIO20: u32 = 1048576;
pub const GPIO_DOUTSET31_0_DIO20_BITN: u32 = 20;
pub const GPIO_DOUTSET31_0_DIO20_M: u32 = 1048576;
pub const GPIO_DOUTSET31_0_DIO20_S: u32 = 20;
pub const GPIO_DOUTSET31_0_DIO19: u32 = 524288;
pub const GPIO_DOUTSET31_0_DIO19_BITN: u32 = 19;
pub const GPIO_DOUTSET31_0_DIO19_M: u32 = 524288;
pub const GPIO_DOUTSET31_0_DIO19_S: u32 = 19;
pub const GPIO_DOUTSET31_0_DIO18: u32 = 262144;
pub const GPIO_DOUTSET31_0_DIO18_BITN: u32 = 18;
pub const GPIO_DOUTSET31_0_DIO18_M: u32 = 262144;
pub const GPIO_DOUTSET31_0_DIO18_S: u32 = 18;
pub const GPIO_DOUTSET31_0_DIO17: u32 = 131072;
pub const GPIO_DOUTSET31_0_DIO17_BITN: u32 = 17;
pub const GPIO_DOUTSET31_0_DIO17_M: u32 = 131072;
pub const GPIO_DOUTSET31_0_DIO17_S: u32 = 17;
pub const GPIO_DOUTSET31_0_DIO16: u32 = 65536;
pub const GPIO_DOUTSET31_0_DIO16_BITN: u32 = 16;
pub const GPIO_DOUTSET31_0_DIO16_M: u32 = 65536;
pub const GPIO_DOUTSET31_0_DIO16_S: u32 = 16;
pub const GPIO_DOUTSET31_0_DIO15: u32 = 32768;
pub const GPIO_DOUTSET31_0_DIO15_BITN: u32 = 15;
pub const GPIO_DOUTSET31_0_DIO15_M: u32 = 32768;
pub const GPIO_DOUTSET31_0_DIO15_S: u32 = 15;
pub const GPIO_DOUTSET31_0_DIO14: u32 = 16384;
pub const GPIO_DOUTSET31_0_DIO14_BITN: u32 = 14;
pub const GPIO_DOUTSET31_0_DIO14_M: u32 = 16384;
pub const GPIO_DOUTSET31_0_DIO14_S: u32 = 14;
pub const GPIO_DOUTSET31_0_DIO13: u32 = 8192;
pub const GPIO_DOUTSET31_0_DIO13_BITN: u32 = 13;
pub const GPIO_DOUTSET31_0_DIO13_M: u32 = 8192;
pub const GPIO_DOUTSET31_0_DIO13_S: u32 = 13;
pub const GPIO_DOUTSET31_0_DIO12: u32 = 4096;
pub const GPIO_DOUTSET31_0_DIO12_BITN: u32 = 12;
pub const GPIO_DOUTSET31_0_DIO12_M: u32 = 4096;
pub const GPIO_DOUTSET31_0_DIO12_S: u32 = 12;
pub const GPIO_DOUTSET31_0_DIO11: u32 = 2048;
pub const GPIO_DOUTSET31_0_DIO11_BITN: u32 = 11;
pub const GPIO_DOUTSET31_0_DIO11_M: u32 = 2048;
pub const GPIO_DOUTSET31_0_DIO11_S: u32 = 11;
pub const GPIO_DOUTSET31_0_DIO10: u32 = 1024;
pub const GPIO_DOUTSET31_0_DIO10_BITN: u32 = 10;
pub const GPIO_DOUTSET31_0_DIO10_M: u32 = 1024;
pub const GPIO_DOUTSET31_0_DIO10_S: u32 = 10;
pub const GPIO_DOUTSET31_0_DIO9: u32 = 512;
pub const GPIO_DOUTSET31_0_DIO9_BITN: u32 = 9;
pub const GPIO_DOUTSET31_0_DIO9_M: u32 = 512;
pub const GPIO_DOUTSET31_0_DIO9_S: u32 = 9;
pub const GPIO_DOUTSET31_0_DIO8: u32 = 256;
pub const GPIO_DOUTSET31_0_DIO8_BITN: u32 = 8;
pub const GPIO_DOUTSET31_0_DIO8_M: u32 = 256;
pub const GPIO_DOUTSET31_0_DIO8_S: u32 = 8;
pub const GPIO_DOUTSET31_0_DIO7: u32 = 128;
pub const GPIO_DOUTSET31_0_DIO7_BITN: u32 = 7;
pub const GPIO_DOUTSET31_0_DIO7_M: u32 = 128;
pub const GPIO_DOUTSET31_0_DIO7_S: u32 = 7;
pub const GPIO_DOUTSET31_0_DIO6: u32 = 64;
pub const GPIO_DOUTSET31_0_DIO6_BITN: u32 = 6;
pub const GPIO_DOUTSET31_0_DIO6_M: u32 = 64;
pub const GPIO_DOUTSET31_0_DIO6_S: u32 = 6;
pub const GPIO_DOUTSET31_0_DIO5: u32 = 32;
pub const GPIO_DOUTSET31_0_DIO5_BITN: u32 = 5;
pub const GPIO_DOUTSET31_0_DIO5_M: u32 = 32;
pub const GPIO_DOUTSET31_0_DIO5_S: u32 = 5;
pub const GPIO_DOUTSET31_0_DIO4: u32 = 16;
pub const GPIO_DOUTSET31_0_DIO4_BITN: u32 = 4;
pub const GPIO_DOUTSET31_0_DIO4_M: u32 = 16;
pub const GPIO_DOUTSET31_0_DIO4_S: u32 = 4;
pub const GPIO_DOUTSET31_0_DIO3: u32 = 8;
pub const GPIO_DOUTSET31_0_DIO3_BITN: u32 = 3;
pub const GPIO_DOUTSET31_0_DIO3_M: u32 = 8;
pub const GPIO_DOUTSET31_0_DIO3_S: u32 = 3;
pub const GPIO_DOUTSET31_0_DIO2: u32 = 4;
pub const GPIO_DOUTSET31_0_DIO2_BITN: u32 = 2;
pub const GPIO_DOUTSET31_0_DIO2_M: u32 = 4;
pub const GPIO_DOUTSET31_0_DIO2_S: u32 = 2;
pub const GPIO_DOUTSET31_0_DIO1: u32 = 2;
pub const GPIO_DOUTSET31_0_DIO1_BITN: u32 = 1;
pub const GPIO_DOUTSET31_0_DIO1_M: u32 = 2;
pub const GPIO_DOUTSET31_0_DIO1_S: u32 = 1;
pub const GPIO_DOUTSET31_0_DIO0: u32 = 1;
pub const GPIO_DOUTSET31_0_DIO0_BITN: u32 = 0;
pub const GPIO_DOUTSET31_0_DIO0_M: u32 = 1;
pub const GPIO_DOUTSET31_0_DIO0_S: u32 = 0;
pub const GPIO_DOUTCLR31_0_DIO31: u32 = 2147483648;
pub const GPIO_DOUTCLR31_0_DIO31_BITN: u32 = 31;
pub const GPIO_DOUTCLR31_0_DIO31_M: u32 = 2147483648;
pub const GPIO_DOUTCLR31_0_DIO31_S: u32 = 31;
pub const GPIO_DOUTCLR31_0_DIO30: u32 = 1073741824;
pub const GPIO_DOUTCLR31_0_DIO30_BITN: u32 = 30;
pub const GPIO_DOUTCLR31_0_DIO30_M: u32 = 1073741824;
pub const GPIO_DOUTCLR31_0_DIO30_S: u32 = 30;
pub const GPIO_DOUTCLR31_0_DIO29: u32 = 536870912;
pub const GPIO_DOUTCLR31_0_DIO29_BITN: u32 = 29;
pub const GPIO_DOUTCLR31_0_DIO29_M: u32 = 536870912;
pub const GPIO_DOUTCLR31_0_DIO29_S: u32 = 29;
pub const GPIO_DOUTCLR31_0_DIO28: u32 = 268435456;
pub const GPIO_DOUTCLR31_0_DIO28_BITN: u32 = 28;
pub const GPIO_DOUTCLR31_0_DIO28_M: u32 = 268435456;
pub const GPIO_DOUTCLR31_0_DIO28_S: u32 = 28;
pub const GPIO_DOUTCLR31_0_DIO27: u32 = 134217728;
pub const GPIO_DOUTCLR31_0_DIO27_BITN: u32 = 27;
pub const GPIO_DOUTCLR31_0_DIO27_M: u32 = 134217728;
pub const GPIO_DOUTCLR31_0_DIO27_S: u32 = 27;
pub const GPIO_DOUTCLR31_0_DIO26: u32 = 67108864;
pub const GPIO_DOUTCLR31_0_DIO26_BITN: u32 = 26;
pub const GPIO_DOUTCLR31_0_DIO26_M: u32 = 67108864;
pub const GPIO_DOUTCLR31_0_DIO26_S: u32 = 26;
pub const GPIO_DOUTCLR31_0_DIO25: u32 = 33554432;
pub const GPIO_DOUTCLR31_0_DIO25_BITN: u32 = 25;
pub const GPIO_DOUTCLR31_0_DIO25_M: u32 = 33554432;
pub const GPIO_DOUTCLR31_0_DIO25_S: u32 = 25;
pub const GPIO_DOUTCLR31_0_DIO24: u32 = 16777216;
pub const GPIO_DOUTCLR31_0_DIO24_BITN: u32 = 24;
pub const GPIO_DOUTCLR31_0_DIO24_M: u32 = 16777216;
pub const GPIO_DOUTCLR31_0_DIO24_S: u32 = 24;
pub const GPIO_DOUTCLR31_0_DIO23: u32 = 8388608;
pub const GPIO_DOUTCLR31_0_DIO23_BITN: u32 = 23;
pub const GPIO_DOUTCLR31_0_DIO23_M: u32 = 8388608;
pub const GPIO_DOUTCLR31_0_DIO23_S: u32 = 23;
pub const GPIO_DOUTCLR31_0_DIO22: u32 = 4194304;
pub const GPIO_DOUTCLR31_0_DIO22_BITN: u32 = 22;
pub const GPIO_DOUTCLR31_0_DIO22_M: u32 = 4194304;
pub const GPIO_DOUTCLR31_0_DIO22_S: u32 = 22;
pub const GPIO_DOUTCLR31_0_DIO21: u32 = 2097152;
pub const GPIO_DOUTCLR31_0_DIO21_BITN: u32 = 21;
pub const GPIO_DOUTCLR31_0_DIO21_M: u32 = 2097152;
pub const GPIO_DOUTCLR31_0_DIO21_S: u32 = 21;
pub const GPIO_DOUTCLR31_0_DIO20: u32 = 1048576;
pub const GPIO_DOUTCLR31_0_DIO20_BITN: u32 = 20;
pub const GPIO_DOUTCLR31_0_DIO20_M: u32 = 1048576;
pub const GPIO_DOUTCLR31_0_DIO20_S: u32 = 20;
pub const GPIO_DOUTCLR31_0_DIO19: u32 = 524288;
pub const GPIO_DOUTCLR31_0_DIO19_BITN: u32 = 19;
pub const GPIO_DOUTCLR31_0_DIO19_M: u32 = 524288;
pub const GPIO_DOUTCLR31_0_DIO19_S: u32 = 19;
pub const GPIO_DOUTCLR31_0_DIO18: u32 = 262144;
pub const GPIO_DOUTCLR31_0_DIO18_BITN: u32 = 18;
pub const GPIO_DOUTCLR31_0_DIO18_M: u32 = 262144;
pub const GPIO_DOUTCLR31_0_DIO18_S: u32 = 18;
pub const GPIO_DOUTCLR31_0_DIO17: u32 = 131072;
pub const GPIO_DOUTCLR31_0_DIO17_BITN: u32 = 17;
pub const GPIO_DOUTCLR31_0_DIO17_M: u32 = 131072;
pub const GPIO_DOUTCLR31_0_DIO17_S: u32 = 17;
pub const GPIO_DOUTCLR31_0_DIO16: u32 = 65536;
pub const GPIO_DOUTCLR31_0_DIO16_BITN: u32 = 16;
pub const GPIO_DOUTCLR31_0_DIO16_M: u32 = 65536;
pub const GPIO_DOUTCLR31_0_DIO16_S: u32 = 16;
pub const GPIO_DOUTCLR31_0_DIO15: u32 = 32768;
pub const GPIO_DOUTCLR31_0_DIO15_BITN: u32 = 15;
pub const GPIO_DOUTCLR31_0_DIO15_M: u32 = 32768;
pub const GPIO_DOUTCLR31_0_DIO15_S: u32 = 15;
pub const GPIO_DOUTCLR31_0_DIO14: u32 = 16384;
pub const GPIO_DOUTCLR31_0_DIO14_BITN: u32 = 14;
pub const GPIO_DOUTCLR31_0_DIO14_M: u32 = 16384;
pub const GPIO_DOUTCLR31_0_DIO14_S: u32 = 14;
pub const GPIO_DOUTCLR31_0_DIO13: u32 = 8192;
pub const GPIO_DOUTCLR31_0_DIO13_BITN: u32 = 13;
pub const GPIO_DOUTCLR31_0_DIO13_M: u32 = 8192;
pub const GPIO_DOUTCLR31_0_DIO13_S: u32 = 13;
pub const GPIO_DOUTCLR31_0_DIO12: u32 = 4096;
pub const GPIO_DOUTCLR31_0_DIO12_BITN: u32 = 12;
pub const GPIO_DOUTCLR31_0_DIO12_M: u32 = 4096;
pub const GPIO_DOUTCLR31_0_DIO12_S: u32 = 12;
pub const GPIO_DOUTCLR31_0_DIO11: u32 = 2048;
pub const GPIO_DOUTCLR31_0_DIO11_BITN: u32 = 11;
pub const GPIO_DOUTCLR31_0_DIO11_M: u32 = 2048;
pub const GPIO_DOUTCLR31_0_DIO11_S: u32 = 11;
pub const GPIO_DOUTCLR31_0_DIO10: u32 = 1024;
pub const GPIO_DOUTCLR31_0_DIO10_BITN: u32 = 10;
pub const GPIO_DOUTCLR31_0_DIO10_M: u32 = 1024;
pub const GPIO_DOUTCLR31_0_DIO10_S: u32 = 10;
pub const GPIO_DOUTCLR31_0_DIO9: u32 = 512;
pub const GPIO_DOUTCLR31_0_DIO9_BITN: u32 = 9;
pub const GPIO_DOUTCLR31_0_DIO9_M: u32 = 512;
pub const GPIO_DOUTCLR31_0_DIO9_S: u32 = 9;
pub const GPIO_DOUTCLR31_0_DIO8: u32 = 256;
pub const GPIO_DOUTCLR31_0_DIO8_BITN: u32 = 8;
pub const GPIO_DOUTCLR31_0_DIO8_M: u32 = 256;
pub const GPIO_DOUTCLR31_0_DIO8_S: u32 = 8;
pub const GPIO_DOUTCLR31_0_DIO7: u32 = 128;
pub const GPIO_DOUTCLR31_0_DIO7_BITN: u32 = 7;
pub const GPIO_DOUTCLR31_0_DIO7_M: u32 = 128;
pub const GPIO_DOUTCLR31_0_DIO7_S: u32 = 7;
pub const GPIO_DOUTCLR31_0_DIO6: u32 = 64;
pub const GPIO_DOUTCLR31_0_DIO6_BITN: u32 = 6;
pub const GPIO_DOUTCLR31_0_DIO6_M: u32 = 64;
pub const GPIO_DOUTCLR31_0_DIO6_S: u32 = 6;
pub const GPIO_DOUTCLR31_0_DIO5: u32 = 32;
pub const GPIO_DOUTCLR31_0_DIO5_BITN: u32 = 5;
pub const GPIO_DOUTCLR31_0_DIO5_M: u32 = 32;
pub const GPIO_DOUTCLR31_0_DIO5_S: u32 = 5;
pub const GPIO_DOUTCLR31_0_DIO4: u32 = 16;
pub const GPIO_DOUTCLR31_0_DIO4_BITN: u32 = 4;
pub const GPIO_DOUTCLR31_0_DIO4_M: u32 = 16;
pub const GPIO_DOUTCLR31_0_DIO4_S: u32 = 4;
pub const GPIO_DOUTCLR31_0_DIO3: u32 = 8;
pub const GPIO_DOUTCLR31_0_DIO3_BITN: u32 = 3;
pub const GPIO_DOUTCLR31_0_DIO3_M: u32 = 8;
pub const GPIO_DOUTCLR31_0_DIO3_S: u32 = 3;
pub const GPIO_DOUTCLR31_0_DIO2: u32 = 4;
pub const GPIO_DOUTCLR31_0_DIO2_BITN: u32 = 2;
pub const GPIO_DOUTCLR31_0_DIO2_M: u32 = 4;
pub const GPIO_DOUTCLR31_0_DIO2_S: u32 = 2;
pub const GPIO_DOUTCLR31_0_DIO1: u32 = 2;
pub const GPIO_DOUTCLR31_0_DIO1_BITN: u32 = 1;
pub const GPIO_DOUTCLR31_0_DIO1_M: u32 = 2;
pub const GPIO_DOUTCLR31_0_DIO1_S: u32 = 1;
pub const GPIO_DOUTCLR31_0_DIO0: u32 = 1;
pub const GPIO_DOUTCLR31_0_DIO0_BITN: u32 = 0;
pub const GPIO_DOUTCLR31_0_DIO0_M: u32 = 1;
pub const GPIO_DOUTCLR31_0_DIO0_S: u32 = 0;
pub const GPIO_DOUTTGL31_0_DIO31: u32 = 2147483648;
pub const GPIO_DOUTTGL31_0_DIO31_BITN: u32 = 31;
pub const GPIO_DOUTTGL31_0_DIO31_M: u32 = 2147483648;
pub const GPIO_DOUTTGL31_0_DIO31_S: u32 = 31;
pub const GPIO_DOUTTGL31_0_DIO30: u32 = 1073741824;
pub const GPIO_DOUTTGL31_0_DIO30_BITN: u32 = 30;
pub const GPIO_DOUTTGL31_0_DIO30_M: u32 = 1073741824;
pub const GPIO_DOUTTGL31_0_DIO30_S: u32 = 30;
pub const GPIO_DOUTTGL31_0_DIO29: u32 = 536870912;
pub const GPIO_DOUTTGL31_0_DIO29_BITN: u32 = 29;
pub const GPIO_DOUTTGL31_0_DIO29_M: u32 = 536870912;
pub const GPIO_DOUTTGL31_0_DIO29_S: u32 = 29;
pub const GPIO_DOUTTGL31_0_DIO28: u32 = 268435456;
pub const GPIO_DOUTTGL31_0_DIO28_BITN: u32 = 28;
pub const GPIO_DOUTTGL31_0_DIO28_M: u32 = 268435456;
pub const GPIO_DOUTTGL31_0_DIO28_S: u32 = 28;
pub const GPIO_DOUTTGL31_0_DIO27: u32 = 134217728;
pub const GPIO_DOUTTGL31_0_DIO27_BITN: u32 = 27;
pub const GPIO_DOUTTGL31_0_DIO27_M: u32 = 134217728;
pub const GPIO_DOUTTGL31_0_DIO27_S: u32 = 27;
pub const GPIO_DOUTTGL31_0_DIO26: u32 = 67108864;
pub const GPIO_DOUTTGL31_0_DIO26_BITN: u32 = 26;
pub const GPIO_DOUTTGL31_0_DIO26_M: u32 = 67108864;
pub const GPIO_DOUTTGL31_0_DIO26_S: u32 = 26;
pub const GPIO_DOUTTGL31_0_DIO25: u32 = 33554432;
pub const GPIO_DOUTTGL31_0_DIO25_BITN: u32 = 25;
pub const GPIO_DOUTTGL31_0_DIO25_M: u32 = 33554432;
pub const GPIO_DOUTTGL31_0_DIO25_S: u32 = 25;
pub const GPIO_DOUTTGL31_0_DIO24: u32 = 16777216;
pub const GPIO_DOUTTGL31_0_DIO24_BITN: u32 = 24;
pub const GPIO_DOUTTGL31_0_DIO24_M: u32 = 16777216;
pub const GPIO_DOUTTGL31_0_DIO24_S: u32 = 24;
pub const GPIO_DOUTTGL31_0_DIO23: u32 = 8388608;
pub const GPIO_DOUTTGL31_0_DIO23_BITN: u32 = 23;
pub const GPIO_DOUTTGL31_0_DIO23_M: u32 = 8388608;
pub const GPIO_DOUTTGL31_0_DIO23_S: u32 = 23;
pub const GPIO_DOUTTGL31_0_DIO22: u32 = 4194304;
pub const GPIO_DOUTTGL31_0_DIO22_BITN: u32 = 22;
pub const GPIO_DOUTTGL31_0_DIO22_M: u32 = 4194304;
pub const GPIO_DOUTTGL31_0_DIO22_S: u32 = 22;
pub const GPIO_DOUTTGL31_0_DIO21: u32 = 2097152;
pub const GPIO_DOUTTGL31_0_DIO21_BITN: u32 = 21;
pub const GPIO_DOUTTGL31_0_DIO21_M: u32 = 2097152;
pub const GPIO_DOUTTGL31_0_DIO21_S: u32 = 21;
pub const GPIO_DOUTTGL31_0_DIO20: u32 = 1048576;
pub const GPIO_DOUTTGL31_0_DIO20_BITN: u32 = 20;
pub const GPIO_DOUTTGL31_0_DIO20_M: u32 = 1048576;
pub const GPIO_DOUTTGL31_0_DIO20_S: u32 = 20;
pub const GPIO_DOUTTGL31_0_DIO19: u32 = 524288;
pub const GPIO_DOUTTGL31_0_DIO19_BITN: u32 = 19;
pub const GPIO_DOUTTGL31_0_DIO19_M: u32 = 524288;
pub const GPIO_DOUTTGL31_0_DIO19_S: u32 = 19;
pub const GPIO_DOUTTGL31_0_DIO18: u32 = 262144;
pub const GPIO_DOUTTGL31_0_DIO18_BITN: u32 = 18;
pub const GPIO_DOUTTGL31_0_DIO18_M: u32 = 262144;
pub const GPIO_DOUTTGL31_0_DIO18_S: u32 = 18;
pub const GPIO_DOUTTGL31_0_DIO17: u32 = 131072;
pub const GPIO_DOUTTGL31_0_DIO17_BITN: u32 = 17;
pub const GPIO_DOUTTGL31_0_DIO17_M: u32 = 131072;
pub const GPIO_DOUTTGL31_0_DIO17_S: u32 = 17;
pub const GPIO_DOUTTGL31_0_DIO16: u32 = 65536;
pub const GPIO_DOUTTGL31_0_DIO16_BITN: u32 = 16;
pub const GPIO_DOUTTGL31_0_DIO16_M: u32 = 65536;
pub const GPIO_DOUTTGL31_0_DIO16_S: u32 = 16;
pub const GPIO_DOUTTGL31_0_DIO15: u32 = 32768;
pub const GPIO_DOUTTGL31_0_DIO15_BITN: u32 = 15;
pub const GPIO_DOUTTGL31_0_DIO15_M: u32 = 32768;
pub const GPIO_DOUTTGL31_0_DIO15_S: u32 = 15;
pub const GPIO_DOUTTGL31_0_DIO14: u32 = 16384;
pub const GPIO_DOUTTGL31_0_DIO14_BITN: u32 = 14;
pub const GPIO_DOUTTGL31_0_DIO14_M: u32 = 16384;
pub const GPIO_DOUTTGL31_0_DIO14_S: u32 = 14;
pub const GPIO_DOUTTGL31_0_DIO13: u32 = 8192;
pub const GPIO_DOUTTGL31_0_DIO13_BITN: u32 = 13;
pub const GPIO_DOUTTGL31_0_DIO13_M: u32 = 8192;
pub const GPIO_DOUTTGL31_0_DIO13_S: u32 = 13;
pub const GPIO_DOUTTGL31_0_DIO12: u32 = 4096;
pub const GPIO_DOUTTGL31_0_DIO12_BITN: u32 = 12;
pub const GPIO_DOUTTGL31_0_DIO12_M: u32 = 4096;
pub const GPIO_DOUTTGL31_0_DIO12_S: u32 = 12;
pub const GPIO_DOUTTGL31_0_DIO11: u32 = 2048;
pub const GPIO_DOUTTGL31_0_DIO11_BITN: u32 = 11;
pub const GPIO_DOUTTGL31_0_DIO11_M: u32 = 2048;
pub const GPIO_DOUTTGL31_0_DIO11_S: u32 = 11;
pub const GPIO_DOUTTGL31_0_DIO10: u32 = 1024;
pub const GPIO_DOUTTGL31_0_DIO10_BITN: u32 = 10;
pub const GPIO_DOUTTGL31_0_DIO10_M: u32 = 1024;
pub const GPIO_DOUTTGL31_0_DIO10_S: u32 = 10;
pub const GPIO_DOUTTGL31_0_DIO9: u32 = 512;
pub const GPIO_DOUTTGL31_0_DIO9_BITN: u32 = 9;
pub const GPIO_DOUTTGL31_0_DIO9_M: u32 = 512;
pub const GPIO_DOUTTGL31_0_DIO9_S: u32 = 9;
pub const GPIO_DOUTTGL31_0_DIO8: u32 = 256;
pub const GPIO_DOUTTGL31_0_DIO8_BITN: u32 = 8;
pub const GPIO_DOUTTGL31_0_DIO8_M: u32 = 256;
pub const GPIO_DOUTTGL31_0_DIO8_S: u32 = 8;
pub const GPIO_DOUTTGL31_0_DIO7: u32 = 128;
pub const GPIO_DOUTTGL31_0_DIO7_BITN: u32 = 7;
pub const GPIO_DOUTTGL31_0_DIO7_M: u32 = 128;
pub const GPIO_DOUTTGL31_0_DIO7_S: u32 = 7;
pub const GPIO_DOUTTGL31_0_DIO6: u32 = 64;
pub const GPIO_DOUTTGL31_0_DIO6_BITN: u32 = 6;
pub const GPIO_DOUTTGL31_0_DIO6_M: u32 = 64;
pub const GPIO_DOUTTGL31_0_DIO6_S: u32 = 6;
pub const GPIO_DOUTTGL31_0_DIO5: u32 = 32;
pub const GPIO_DOUTTGL31_0_DIO5_BITN: u32 = 5;
pub const GPIO_DOUTTGL31_0_DIO5_M: u32 = 32;
pub const GPIO_DOUTTGL31_0_DIO5_S: u32 = 5;
pub const GPIO_DOUTTGL31_0_DIO4: u32 = 16;
pub const GPIO_DOUTTGL31_0_DIO4_BITN: u32 = 4;
pub const GPIO_DOUTTGL31_0_DIO4_M: u32 = 16;
pub const GPIO_DOUTTGL31_0_DIO4_S: u32 = 4;
pub const GPIO_DOUTTGL31_0_DIO3: u32 = 8;
pub const GPIO_DOUTTGL31_0_DIO3_BITN: u32 = 3;
pub const GPIO_DOUTTGL31_0_DIO3_M: u32 = 8;
pub const GPIO_DOUTTGL31_0_DIO3_S: u32 = 3;
pub const GPIO_DOUTTGL31_0_DIO2: u32 = 4;
pub const GPIO_DOUTTGL31_0_DIO2_BITN: u32 = 2;
pub const GPIO_DOUTTGL31_0_DIO2_M: u32 = 4;
pub const GPIO_DOUTTGL31_0_DIO2_S: u32 = 2;
pub const GPIO_DOUTTGL31_0_DIO1: u32 = 2;
pub const GPIO_DOUTTGL31_0_DIO1_BITN: u32 = 1;
pub const GPIO_DOUTTGL31_0_DIO1_M: u32 = 2;
pub const GPIO_DOUTTGL31_0_DIO1_S: u32 = 1;
pub const GPIO_DOUTTGL31_0_DIO0: u32 = 1;
pub const GPIO_DOUTTGL31_0_DIO0_BITN: u32 = 0;
pub const GPIO_DOUTTGL31_0_DIO0_M: u32 = 1;
pub const GPIO_DOUTTGL31_0_DIO0_S: u32 = 0;
pub const GPIO_DIN31_0_DIO31: u32 = 2147483648;
pub const GPIO_DIN31_0_DIO31_BITN: u32 = 31;
pub const GPIO_DIN31_0_DIO31_M: u32 = 2147483648;
pub const GPIO_DIN31_0_DIO31_S: u32 = 31;
pub const GPIO_DIN31_0_DIO30: u32 = 1073741824;
pub const GPIO_DIN31_0_DIO30_BITN: u32 = 30;
pub const GPIO_DIN31_0_DIO30_M: u32 = 1073741824;
pub const GPIO_DIN31_0_DIO30_S: u32 = 30;
pub const GPIO_DIN31_0_DIO29: u32 = 536870912;
pub const GPIO_DIN31_0_DIO29_BITN: u32 = 29;
pub const GPIO_DIN31_0_DIO29_M: u32 = 536870912;
pub const GPIO_DIN31_0_DIO29_S: u32 = 29;
pub const GPIO_DIN31_0_DIO28: u32 = 268435456;
pub const GPIO_DIN31_0_DIO28_BITN: u32 = 28;
pub const GPIO_DIN31_0_DIO28_M: u32 = 268435456;
pub const GPIO_DIN31_0_DIO28_S: u32 = 28;
pub const GPIO_DIN31_0_DIO27: u32 = 134217728;
pub const GPIO_DIN31_0_DIO27_BITN: u32 = 27;
pub const GPIO_DIN31_0_DIO27_M: u32 = 134217728;
pub const GPIO_DIN31_0_DIO27_S: u32 = 27;
pub const GPIO_DIN31_0_DIO26: u32 = 67108864;
pub const GPIO_DIN31_0_DIO26_BITN: u32 = 26;
pub const GPIO_DIN31_0_DIO26_M: u32 = 67108864;
pub const GPIO_DIN31_0_DIO26_S: u32 = 26;
pub const GPIO_DIN31_0_DIO25: u32 = 33554432;
pub const GPIO_DIN31_0_DIO25_BITN: u32 = 25;
pub const GPIO_DIN31_0_DIO25_M: u32 = 33554432;
pub const GPIO_DIN31_0_DIO25_S: u32 = 25;
pub const GPIO_DIN31_0_DIO24: u32 = 16777216;
pub const GPIO_DIN31_0_DIO24_BITN: u32 = 24;
pub const GPIO_DIN31_0_DIO24_M: u32 = 16777216;
pub const GPIO_DIN31_0_DIO24_S: u32 = 24;
pub const GPIO_DIN31_0_DIO23: u32 = 8388608;
pub const GPIO_DIN31_0_DIO23_BITN: u32 = 23;
pub const GPIO_DIN31_0_DIO23_M: u32 = 8388608;
pub const GPIO_DIN31_0_DIO23_S: u32 = 23;
pub const GPIO_DIN31_0_DIO22: u32 = 4194304;
pub const GPIO_DIN31_0_DIO22_BITN: u32 = 22;
pub const GPIO_DIN31_0_DIO22_M: u32 = 4194304;
pub const GPIO_DIN31_0_DIO22_S: u32 = 22;
pub const GPIO_DIN31_0_DIO21: u32 = 2097152;
pub const GPIO_DIN31_0_DIO21_BITN: u32 = 21;
pub const GPIO_DIN31_0_DIO21_M: u32 = 2097152;
pub const GPIO_DIN31_0_DIO21_S: u32 = 21;
pub const GPIO_DIN31_0_DIO20: u32 = 1048576;
pub const GPIO_DIN31_0_DIO20_BITN: u32 = 20;
pub const GPIO_DIN31_0_DIO20_M: u32 = 1048576;
pub const GPIO_DIN31_0_DIO20_S: u32 = 20;
pub const GPIO_DIN31_0_DIO19: u32 = 524288;
pub const GPIO_DIN31_0_DIO19_BITN: u32 = 19;
pub const GPIO_DIN31_0_DIO19_M: u32 = 524288;
pub const GPIO_DIN31_0_DIO19_S: u32 = 19;
pub const GPIO_DIN31_0_DIO18: u32 = 262144;
pub const GPIO_DIN31_0_DIO18_BITN: u32 = 18;
pub const GPIO_DIN31_0_DIO18_M: u32 = 262144;
pub const GPIO_DIN31_0_DIO18_S: u32 = 18;
pub const GPIO_DIN31_0_DIO17: u32 = 131072;
pub const GPIO_DIN31_0_DIO17_BITN: u32 = 17;
pub const GPIO_DIN31_0_DIO17_M: u32 = 131072;
pub const GPIO_DIN31_0_DIO17_S: u32 = 17;
pub const GPIO_DIN31_0_DIO16: u32 = 65536;
pub const GPIO_DIN31_0_DIO16_BITN: u32 = 16;
pub const GPIO_DIN31_0_DIO16_M: u32 = 65536;
pub const GPIO_DIN31_0_DIO16_S: u32 = 16;
pub const GPIO_DIN31_0_DIO15: u32 = 32768;
pub const GPIO_DIN31_0_DIO15_BITN: u32 = 15;
pub const GPIO_DIN31_0_DIO15_M: u32 = 32768;
pub const GPIO_DIN31_0_DIO15_S: u32 = 15;
pub const GPIO_DIN31_0_DIO14: u32 = 16384;
pub const GPIO_DIN31_0_DIO14_BITN: u32 = 14;
pub const GPIO_DIN31_0_DIO14_M: u32 = 16384;
pub const GPIO_DIN31_0_DIO14_S: u32 = 14;
pub const GPIO_DIN31_0_DIO13: u32 = 8192;
pub const GPIO_DIN31_0_DIO13_BITN: u32 = 13;
pub const GPIO_DIN31_0_DIO13_M: u32 = 8192;
pub const GPIO_DIN31_0_DIO13_S: u32 = 13;
pub const GPIO_DIN31_0_DIO12: u32 = 4096;
pub const GPIO_DIN31_0_DIO12_BITN: u32 = 12;
pub const GPIO_DIN31_0_DIO12_M: u32 = 4096;
pub const GPIO_DIN31_0_DIO12_S: u32 = 12;
pub const GPIO_DIN31_0_DIO11: u32 = 2048;
pub const GPIO_DIN31_0_DIO11_BITN: u32 = 11;
pub const GPIO_DIN31_0_DIO11_M: u32 = 2048;
pub const GPIO_DIN31_0_DIO11_S: u32 = 11;
pub const GPIO_DIN31_0_DIO10: u32 = 1024;
pub const GPIO_DIN31_0_DIO10_BITN: u32 = 10;
pub const GPIO_DIN31_0_DIO10_M: u32 = 1024;
pub const GPIO_DIN31_0_DIO10_S: u32 = 10;
pub const GPIO_DIN31_0_DIO9: u32 = 512;
pub const GPIO_DIN31_0_DIO9_BITN: u32 = 9;
pub const GPIO_DIN31_0_DIO9_M: u32 = 512;
pub const GPIO_DIN31_0_DIO9_S: u32 = 9;
pub const GPIO_DIN31_0_DIO8: u32 = 256;
pub const GPIO_DIN31_0_DIO8_BITN: u32 = 8;
pub const GPIO_DIN31_0_DIO8_M: u32 = 256;
pub const GPIO_DIN31_0_DIO8_S: u32 = 8;
pub const GPIO_DIN31_0_DIO7: u32 = 128;
pub const GPIO_DIN31_0_DIO7_BITN: u32 = 7;
pub const GPIO_DIN31_0_DIO7_M: u32 = 128;
pub const GPIO_DIN31_0_DIO7_S: u32 = 7;
pub const GPIO_DIN31_0_DIO6: u32 = 64;
pub const GPIO_DIN31_0_DIO6_BITN: u32 = 6;
pub const GPIO_DIN31_0_DIO6_M: u32 = 64;
pub const GPIO_DIN31_0_DIO6_S: u32 = 6;
pub const GPIO_DIN31_0_DIO5: u32 = 32;
pub const GPIO_DIN31_0_DIO5_BITN: u32 = 5;
pub const GPIO_DIN31_0_DIO5_M: u32 = 32;
pub const GPIO_DIN31_0_DIO5_S: u32 = 5;
pub const GPIO_DIN31_0_DIO4: u32 = 16;
pub const GPIO_DIN31_0_DIO4_BITN: u32 = 4;
pub const GPIO_DIN31_0_DIO4_M: u32 = 16;
pub const GPIO_DIN31_0_DIO4_S: u32 = 4;
pub const GPIO_DIN31_0_DIO3: u32 = 8;
pub const GPIO_DIN31_0_DIO3_BITN: u32 = 3;
pub const GPIO_DIN31_0_DIO3_M: u32 = 8;
pub const GPIO_DIN31_0_DIO3_S: u32 = 3;
pub const GPIO_DIN31_0_DIO2: u32 = 4;
pub const GPIO_DIN31_0_DIO2_BITN: u32 = 2;
pub const GPIO_DIN31_0_DIO2_M: u32 = 4;
pub const GPIO_DIN31_0_DIO2_S: u32 = 2;
pub const GPIO_DIN31_0_DIO1: u32 = 2;
pub const GPIO_DIN31_0_DIO1_BITN: u32 = 1;
pub const GPIO_DIN31_0_DIO1_M: u32 = 2;
pub const GPIO_DIN31_0_DIO1_S: u32 = 1;
pub const GPIO_DIN31_0_DIO0: u32 = 1;
pub const GPIO_DIN31_0_DIO0_BITN: u32 = 0;
pub const GPIO_DIN31_0_DIO0_M: u32 = 1;
pub const GPIO_DIN31_0_DIO0_S: u32 = 0;
pub const GPIO_DOE31_0_DIO31: u32 = 2147483648;
pub const GPIO_DOE31_0_DIO31_BITN: u32 = 31;
pub const GPIO_DOE31_0_DIO31_M: u32 = 2147483648;
pub const GPIO_DOE31_0_DIO31_S: u32 = 31;
pub const GPIO_DOE31_0_DIO30: u32 = 1073741824;
pub const GPIO_DOE31_0_DIO30_BITN: u32 = 30;
pub const GPIO_DOE31_0_DIO30_M: u32 = 1073741824;
pub const GPIO_DOE31_0_DIO30_S: u32 = 30;
pub const GPIO_DOE31_0_DIO29: u32 = 536870912;
pub const GPIO_DOE31_0_DIO29_BITN: u32 = 29;
pub const GPIO_DOE31_0_DIO29_M: u32 = 536870912;
pub const GPIO_DOE31_0_DIO29_S: u32 = 29;
pub const GPIO_DOE31_0_DIO28: u32 = 268435456;
pub const GPIO_DOE31_0_DIO28_BITN: u32 = 28;
pub const GPIO_DOE31_0_DIO28_M: u32 = 268435456;
pub const GPIO_DOE31_0_DIO28_S: u32 = 28;
pub const GPIO_DOE31_0_DIO27: u32 = 134217728;
pub const GPIO_DOE31_0_DIO27_BITN: u32 = 27;
pub const GPIO_DOE31_0_DIO27_M: u32 = 134217728;
pub const GPIO_DOE31_0_DIO27_S: u32 = 27;
pub const GPIO_DOE31_0_DIO26: u32 = 67108864;
pub const GPIO_DOE31_0_DIO26_BITN: u32 = 26;
pub const GPIO_DOE31_0_DIO26_M: u32 = 67108864;
pub const GPIO_DOE31_0_DIO26_S: u32 = 26;
pub const GPIO_DOE31_0_DIO25: u32 = 33554432;
pub const GPIO_DOE31_0_DIO25_BITN: u32 = 25;
pub const GPIO_DOE31_0_DIO25_M: u32 = 33554432;
pub const GPIO_DOE31_0_DIO25_S: u32 = 25;
pub const GPIO_DOE31_0_DIO24: u32 = 16777216;
pub const GPIO_DOE31_0_DIO24_BITN: u32 = 24;
pub const GPIO_DOE31_0_DIO24_M: u32 = 16777216;
pub const GPIO_DOE31_0_DIO24_S: u32 = 24;
pub const GPIO_DOE31_0_DIO23: u32 = 8388608;
pub const GPIO_DOE31_0_DIO23_BITN: u32 = 23;
pub const GPIO_DOE31_0_DIO23_M: u32 = 8388608;
pub const GPIO_DOE31_0_DIO23_S: u32 = 23;
pub const GPIO_DOE31_0_DIO22: u32 = 4194304;
pub const GPIO_DOE31_0_DIO22_BITN: u32 = 22;
pub const GPIO_DOE31_0_DIO22_M: u32 = 4194304;
pub const GPIO_DOE31_0_DIO22_S: u32 = 22;
pub const GPIO_DOE31_0_DIO21: u32 = 2097152;
pub const GPIO_DOE31_0_DIO21_BITN: u32 = 21;
pub const GPIO_DOE31_0_DIO21_M: u32 = 2097152;
pub const GPIO_DOE31_0_DIO21_S: u32 = 21;
pub const GPIO_DOE31_0_DIO20: u32 = 1048576;
pub const GPIO_DOE31_0_DIO20_BITN: u32 = 20;
pub const GPIO_DOE31_0_DIO20_M: u32 = 1048576;
pub const GPIO_DOE31_0_DIO20_S: u32 = 20;
pub const GPIO_DOE31_0_DIO19: u32 = 524288;
pub const GPIO_DOE31_0_DIO19_BITN: u32 = 19;
pub const GPIO_DOE31_0_DIO19_M: u32 = 524288;
pub const GPIO_DOE31_0_DIO19_S: u32 = 19;
pub const GPIO_DOE31_0_DIO18: u32 = 262144;
pub const GPIO_DOE31_0_DIO18_BITN: u32 = 18;
pub const GPIO_DOE31_0_DIO18_M: u32 = 262144;
pub const GPIO_DOE31_0_DIO18_S: u32 = 18;
pub const GPIO_DOE31_0_DIO17: u32 = 131072;
pub const GPIO_DOE31_0_DIO17_BITN: u32 = 17;
pub const GPIO_DOE31_0_DIO17_M: u32 = 131072;
pub const GPIO_DOE31_0_DIO17_S: u32 = 17;
pub const GPIO_DOE31_0_DIO16: u32 = 65536;
pub const GPIO_DOE31_0_DIO16_BITN: u32 = 16;
pub const GPIO_DOE31_0_DIO16_M: u32 = 65536;
pub const GPIO_DOE31_0_DIO16_S: u32 = 16;
pub const GPIO_DOE31_0_DIO15: u32 = 32768;
pub const GPIO_DOE31_0_DIO15_BITN: u32 = 15;
pub const GPIO_DOE31_0_DIO15_M: u32 = 32768;
pub const GPIO_DOE31_0_DIO15_S: u32 = 15;
pub const GPIO_DOE31_0_DIO14: u32 = 16384;
pub const GPIO_DOE31_0_DIO14_BITN: u32 = 14;
pub const GPIO_DOE31_0_DIO14_M: u32 = 16384;
pub const GPIO_DOE31_0_DIO14_S: u32 = 14;
pub const GPIO_DOE31_0_DIO13: u32 = 8192;
pub const GPIO_DOE31_0_DIO13_BITN: u32 = 13;
pub const GPIO_DOE31_0_DIO13_M: u32 = 8192;
pub const GPIO_DOE31_0_DIO13_S: u32 = 13;
pub const GPIO_DOE31_0_DIO12: u32 = 4096;
pub const GPIO_DOE31_0_DIO12_BITN: u32 = 12;
pub const GPIO_DOE31_0_DIO12_M: u32 = 4096;
pub const GPIO_DOE31_0_DIO12_S: u32 = 12;
pub const GPIO_DOE31_0_DIO11: u32 = 2048;
pub const GPIO_DOE31_0_DIO11_BITN: u32 = 11;
pub const GPIO_DOE31_0_DIO11_M: u32 = 2048;
pub const GPIO_DOE31_0_DIO11_S: u32 = 11;
pub const GPIO_DOE31_0_DIO10: u32 = 1024;
pub const GPIO_DOE31_0_DIO10_BITN: u32 = 10;
pub const GPIO_DOE31_0_DIO10_M: u32 = 1024;
pub const GPIO_DOE31_0_DIO10_S: u32 = 10;
pub const GPIO_DOE31_0_DIO9: u32 = 512;
pub const GPIO_DOE31_0_DIO9_BITN: u32 = 9;
pub const GPIO_DOE31_0_DIO9_M: u32 = 512;
pub const GPIO_DOE31_0_DIO9_S: u32 = 9;
pub const GPIO_DOE31_0_DIO8: u32 = 256;
pub const GPIO_DOE31_0_DIO8_BITN: u32 = 8;
pub const GPIO_DOE31_0_DIO8_M: u32 = 256;
pub const GPIO_DOE31_0_DIO8_S: u32 = 8;
pub const GPIO_DOE31_0_DIO7: u32 = 128;
pub const GPIO_DOE31_0_DIO7_BITN: u32 = 7;
pub const GPIO_DOE31_0_DIO7_M: u32 = 128;
pub const GPIO_DOE31_0_DIO7_S: u32 = 7;
pub const GPIO_DOE31_0_DIO6: u32 = 64;
pub const GPIO_DOE31_0_DIO6_BITN: u32 = 6;
pub const GPIO_DOE31_0_DIO6_M: u32 = 64;
pub const GPIO_DOE31_0_DIO6_S: u32 = 6;
pub const GPIO_DOE31_0_DIO5: u32 = 32;
pub const GPIO_DOE31_0_DIO5_BITN: u32 = 5;
pub const GPIO_DOE31_0_DIO5_M: u32 = 32;
pub const GPIO_DOE31_0_DIO5_S: u32 = 5;
pub const GPIO_DOE31_0_DIO4: u32 = 16;
pub const GPIO_DOE31_0_DIO4_BITN: u32 = 4;
pub const GPIO_DOE31_0_DIO4_M: u32 = 16;
pub const GPIO_DOE31_0_DIO4_S: u32 = 4;
pub const GPIO_DOE31_0_DIO3: u32 = 8;
pub const GPIO_DOE31_0_DIO3_BITN: u32 = 3;
pub const GPIO_DOE31_0_DIO3_M: u32 = 8;
pub const GPIO_DOE31_0_DIO3_S: u32 = 3;
pub const GPIO_DOE31_0_DIO2: u32 = 4;
pub const GPIO_DOE31_0_DIO2_BITN: u32 = 2;
pub const GPIO_DOE31_0_DIO2_M: u32 = 4;
pub const GPIO_DOE31_0_DIO2_S: u32 = 2;
pub const GPIO_DOE31_0_DIO1: u32 = 2;
pub const GPIO_DOE31_0_DIO1_BITN: u32 = 1;
pub const GPIO_DOE31_0_DIO1_M: u32 = 2;
pub const GPIO_DOE31_0_DIO1_S: u32 = 1;
pub const GPIO_DOE31_0_DIO0: u32 = 1;
pub const GPIO_DOE31_0_DIO0_BITN: u32 = 0;
pub const GPIO_DOE31_0_DIO0_M: u32 = 1;
pub const GPIO_DOE31_0_DIO0_S: u32 = 0;
pub const GPIO_EVFLAGS31_0_DIO31: u32 = 2147483648;
pub const GPIO_EVFLAGS31_0_DIO31_BITN: u32 = 31;
pub const GPIO_EVFLAGS31_0_DIO31_M: u32 = 2147483648;
pub const GPIO_EVFLAGS31_0_DIO31_S: u32 = 31;
pub const GPIO_EVFLAGS31_0_DIO30: u32 = 1073741824;
pub const GPIO_EVFLAGS31_0_DIO30_BITN: u32 = 30;
pub const GPIO_EVFLAGS31_0_DIO30_M: u32 = 1073741824;
pub const GPIO_EVFLAGS31_0_DIO30_S: u32 = 30;
pub const GPIO_EVFLAGS31_0_DIO29: u32 = 536870912;
pub const GPIO_EVFLAGS31_0_DIO29_BITN: u32 = 29;
pub const GPIO_EVFLAGS31_0_DIO29_M: u32 = 536870912;
pub const GPIO_EVFLAGS31_0_DIO29_S: u32 = 29;
pub const GPIO_EVFLAGS31_0_DIO28: u32 = 268435456;
pub const GPIO_EVFLAGS31_0_DIO28_BITN: u32 = 28;
pub const GPIO_EVFLAGS31_0_DIO28_M: u32 = 268435456;
pub const GPIO_EVFLAGS31_0_DIO28_S: u32 = 28;
pub const GPIO_EVFLAGS31_0_DIO27: u32 = 134217728;
pub const GPIO_EVFLAGS31_0_DIO27_BITN: u32 = 27;
pub const GPIO_EVFLAGS31_0_DIO27_M: u32 = 134217728;
pub const GPIO_EVFLAGS31_0_DIO27_S: u32 = 27;
pub const GPIO_EVFLAGS31_0_DIO26: u32 = 67108864;
pub const GPIO_EVFLAGS31_0_DIO26_BITN: u32 = 26;
pub const GPIO_EVFLAGS31_0_DIO26_M: u32 = 67108864;
pub const GPIO_EVFLAGS31_0_DIO26_S: u32 = 26;
pub const GPIO_EVFLAGS31_0_DIO25: u32 = 33554432;
pub const GPIO_EVFLAGS31_0_DIO25_BITN: u32 = 25;
pub const GPIO_EVFLAGS31_0_DIO25_M: u32 = 33554432;
pub const GPIO_EVFLAGS31_0_DIO25_S: u32 = 25;
pub const GPIO_EVFLAGS31_0_DIO24: u32 = 16777216;
pub const GPIO_EVFLAGS31_0_DIO24_BITN: u32 = 24;
pub const GPIO_EVFLAGS31_0_DIO24_M: u32 = 16777216;
pub const GPIO_EVFLAGS31_0_DIO24_S: u32 = 24;
pub const GPIO_EVFLAGS31_0_DIO23: u32 = 8388608;
pub const GPIO_EVFLAGS31_0_DIO23_BITN: u32 = 23;
pub const GPIO_EVFLAGS31_0_DIO23_M: u32 = 8388608;
pub const GPIO_EVFLAGS31_0_DIO23_S: u32 = 23;
pub const GPIO_EVFLAGS31_0_DIO22: u32 = 4194304;
pub const GPIO_EVFLAGS31_0_DIO22_BITN: u32 = 22;
pub const GPIO_EVFLAGS31_0_DIO22_M: u32 = 4194304;
pub const GPIO_EVFLAGS31_0_DIO22_S: u32 = 22;
pub const GPIO_EVFLAGS31_0_DIO21: u32 = 2097152;
pub const GPIO_EVFLAGS31_0_DIO21_BITN: u32 = 21;
pub const GPIO_EVFLAGS31_0_DIO21_M: u32 = 2097152;
pub const GPIO_EVFLAGS31_0_DIO21_S: u32 = 21;
pub const GPIO_EVFLAGS31_0_DIO20: u32 = 1048576;
pub const GPIO_EVFLAGS31_0_DIO20_BITN: u32 = 20;
pub const GPIO_EVFLAGS31_0_DIO20_M: u32 = 1048576;
pub const GPIO_EVFLAGS31_0_DIO20_S: u32 = 20;
pub const GPIO_EVFLAGS31_0_DIO19: u32 = 524288;
pub const GPIO_EVFLAGS31_0_DIO19_BITN: u32 = 19;
pub const GPIO_EVFLAGS31_0_DIO19_M: u32 = 524288;
pub const GPIO_EVFLAGS31_0_DIO19_S: u32 = 19;
pub const GPIO_EVFLAGS31_0_DIO18: u32 = 262144;
pub const GPIO_EVFLAGS31_0_DIO18_BITN: u32 = 18;
pub const GPIO_EVFLAGS31_0_DIO18_M: u32 = 262144;
pub const GPIO_EVFLAGS31_0_DIO18_S: u32 = 18;
pub const GPIO_EVFLAGS31_0_DIO17: u32 = 131072;
pub const GPIO_EVFLAGS31_0_DIO17_BITN: u32 = 17;
pub const GPIO_EVFLAGS31_0_DIO17_M: u32 = 131072;
pub const GPIO_EVFLAGS31_0_DIO17_S: u32 = 17;
pub const GPIO_EVFLAGS31_0_DIO16: u32 = 65536;
pub const GPIO_EVFLAGS31_0_DIO16_BITN: u32 = 16;
pub const GPIO_EVFLAGS31_0_DIO16_M: u32 = 65536;
pub const GPIO_EVFLAGS31_0_DIO16_S: u32 = 16;
pub const GPIO_EVFLAGS31_0_DIO15: u32 = 32768;
pub const GPIO_EVFLAGS31_0_DIO15_BITN: u32 = 15;
pub const GPIO_EVFLAGS31_0_DIO15_M: u32 = 32768;
pub const GPIO_EVFLAGS31_0_DIO15_S: u32 = 15;
pub const GPIO_EVFLAGS31_0_DIO14: u32 = 16384;
pub const GPIO_EVFLAGS31_0_DIO14_BITN: u32 = 14;
pub const GPIO_EVFLAGS31_0_DIO14_M: u32 = 16384;
pub const GPIO_EVFLAGS31_0_DIO14_S: u32 = 14;
pub const GPIO_EVFLAGS31_0_DIO13: u32 = 8192;
pub const GPIO_EVFLAGS31_0_DIO13_BITN: u32 = 13;
pub const GPIO_EVFLAGS31_0_DIO13_M: u32 = 8192;
pub const GPIO_EVFLAGS31_0_DIO13_S: u32 = 13;
pub const GPIO_EVFLAGS31_0_DIO12: u32 = 4096;
pub const GPIO_EVFLAGS31_0_DIO12_BITN: u32 = 12;
pub const GPIO_EVFLAGS31_0_DIO12_M: u32 = 4096;
pub const GPIO_EVFLAGS31_0_DIO12_S: u32 = 12;
pub const GPIO_EVFLAGS31_0_DIO11: u32 = 2048;
pub const GPIO_EVFLAGS31_0_DIO11_BITN: u32 = 11;
pub const GPIO_EVFLAGS31_0_DIO11_M: u32 = 2048;
pub const GPIO_EVFLAGS31_0_DIO11_S: u32 = 11;
pub const GPIO_EVFLAGS31_0_DIO10: u32 = 1024;
pub const GPIO_EVFLAGS31_0_DIO10_BITN: u32 = 10;
pub const GPIO_EVFLAGS31_0_DIO10_M: u32 = 1024;
pub const GPIO_EVFLAGS31_0_DIO10_S: u32 = 10;
pub const GPIO_EVFLAGS31_0_DIO9: u32 = 512;
pub const GPIO_EVFLAGS31_0_DIO9_BITN: u32 = 9;
pub const GPIO_EVFLAGS31_0_DIO9_M: u32 = 512;
pub const GPIO_EVFLAGS31_0_DIO9_S: u32 = 9;
pub const GPIO_EVFLAGS31_0_DIO8: u32 = 256;
pub const GPIO_EVFLAGS31_0_DIO8_BITN: u32 = 8;
pub const GPIO_EVFLAGS31_0_DIO8_M: u32 = 256;
pub const GPIO_EVFLAGS31_0_DIO8_S: u32 = 8;
pub const GPIO_EVFLAGS31_0_DIO7: u32 = 128;
pub const GPIO_EVFLAGS31_0_DIO7_BITN: u32 = 7;
pub const GPIO_EVFLAGS31_0_DIO7_M: u32 = 128;
pub const GPIO_EVFLAGS31_0_DIO7_S: u32 = 7;
pub const GPIO_EVFLAGS31_0_DIO6: u32 = 64;
pub const GPIO_EVFLAGS31_0_DIO6_BITN: u32 = 6;
pub const GPIO_EVFLAGS31_0_DIO6_M: u32 = 64;
pub const GPIO_EVFLAGS31_0_DIO6_S: u32 = 6;
pub const GPIO_EVFLAGS31_0_DIO5: u32 = 32;
pub const GPIO_EVFLAGS31_0_DIO5_BITN: u32 = 5;
pub const GPIO_EVFLAGS31_0_DIO5_M: u32 = 32;
pub const GPIO_EVFLAGS31_0_DIO5_S: u32 = 5;
pub const GPIO_EVFLAGS31_0_DIO4: u32 = 16;
pub const GPIO_EVFLAGS31_0_DIO4_BITN: u32 = 4;
pub const GPIO_EVFLAGS31_0_DIO4_M: u32 = 16;
pub const GPIO_EVFLAGS31_0_DIO4_S: u32 = 4;
pub const GPIO_EVFLAGS31_0_DIO3: u32 = 8;
pub const GPIO_EVFLAGS31_0_DIO3_BITN: u32 = 3;
pub const GPIO_EVFLAGS31_0_DIO3_M: u32 = 8;
pub const GPIO_EVFLAGS31_0_DIO3_S: u32 = 3;
pub const GPIO_EVFLAGS31_0_DIO2: u32 = 4;
pub const GPIO_EVFLAGS31_0_DIO2_BITN: u32 = 2;
pub const GPIO_EVFLAGS31_0_DIO2_M: u32 = 4;
pub const GPIO_EVFLAGS31_0_DIO2_S: u32 = 2;
pub const GPIO_EVFLAGS31_0_DIO1: u32 = 2;
pub const GPIO_EVFLAGS31_0_DIO1_BITN: u32 = 1;
pub const GPIO_EVFLAGS31_0_DIO1_M: u32 = 2;
pub const GPIO_EVFLAGS31_0_DIO1_S: u32 = 1;
pub const GPIO_EVFLAGS31_0_DIO0: u32 = 1;
pub const GPIO_EVFLAGS31_0_DIO0_BITN: u32 = 0;
pub const GPIO_EVFLAGS31_0_DIO0_M: u32 = 1;
pub const GPIO_EVFLAGS31_0_DIO0_S: u32 = 0;
pub const GPIO_DIO_0_MASK: u32 = 1;
pub const GPIO_DIO_1_MASK: u32 = 2;
pub const GPIO_DIO_2_MASK: u32 = 4;
pub const GPIO_DIO_3_MASK: u32 = 8;
pub const GPIO_DIO_4_MASK: u32 = 16;
pub const GPIO_DIO_5_MASK: u32 = 32;
pub const GPIO_DIO_6_MASK: u32 = 64;
pub const GPIO_DIO_7_MASK: u32 = 128;
pub const GPIO_DIO_8_MASK: u32 = 256;
pub const GPIO_DIO_9_MASK: u32 = 512;
pub const GPIO_DIO_10_MASK: u32 = 1024;
pub const GPIO_DIO_11_MASK: u32 = 2048;
pub const GPIO_DIO_12_MASK: u32 = 4096;
pub const GPIO_DIO_13_MASK: u32 = 8192;
pub const GPIO_DIO_14_MASK: u32 = 16384;
pub const GPIO_DIO_15_MASK: u32 = 32768;
pub const GPIO_DIO_16_MASK: u32 = 65536;
pub const GPIO_DIO_17_MASK: u32 = 131072;
pub const GPIO_DIO_18_MASK: u32 = 262144;
pub const GPIO_DIO_19_MASK: u32 = 524288;
pub const GPIO_DIO_20_MASK: u32 = 1048576;
pub const GPIO_DIO_21_MASK: u32 = 2097152;
pub const GPIO_DIO_22_MASK: u32 = 4194304;
pub const GPIO_DIO_23_MASK: u32 = 8388608;
pub const GPIO_DIO_24_MASK: u32 = 16777216;
pub const GPIO_DIO_25_MASK: u32 = 33554432;
pub const GPIO_DIO_26_MASK: u32 = 67108864;
pub const GPIO_DIO_27_MASK: u32 = 134217728;
pub const GPIO_DIO_28_MASK: u32 = 268435456;
pub const GPIO_DIO_29_MASK: u32 = 536870912;
pub const GPIO_DIO_30_MASK: u32 = 1073741824;
pub const GPIO_DIO_31_MASK: u32 = 2147483648;
pub const GPIO_DIO_ALL_MASK: u32 = 4294967295;
pub const GPIO_OUTPUT_DISABLE: u32 = 0;
pub const GPIO_OUTPUT_ENABLE: u32 = 1;
pub const I2C_O_SOAR: u32 = 0;
pub const I2C_O_SSTAT: u32 = 4;
pub const I2C_O_SCTL: u32 = 4;
pub const I2C_O_SDR: u32 = 8;
pub const I2C_O_SIMR: u32 = 12;
pub const I2C_O_SRIS: u32 = 16;
pub const I2C_O_SMIS: u32 = 20;
pub const I2C_O_SICR: u32 = 24;
pub const I2C_O_MSA: u32 = 2048;
pub const I2C_O_MSTAT: u32 = 2052;
pub const I2C_O_MCTRL: u32 = 2052;
pub const I2C_O_MDR: u32 = 2056;
pub const I2C_O_MTPR: u32 = 2060;
pub const I2C_O_MIMR: u32 = 2064;
pub const I2C_O_MRIS: u32 = 2068;
pub const I2C_O_MMIS: u32 = 2072;
pub const I2C_O_MICR: u32 = 2076;
pub const I2C_O_MCR: u32 = 2080;
pub const I2C_SOAR_OAR_W: u32 = 7;
pub const I2C_SOAR_OAR_M: u32 = 127;
pub const I2C_SOAR_OAR_S: u32 = 0;
pub const I2C_SSTAT_FBR: u32 = 4;
pub const I2C_SSTAT_FBR_BITN: u32 = 2;
pub const I2C_SSTAT_FBR_M: u32 = 4;
pub const I2C_SSTAT_FBR_S: u32 = 2;
pub const I2C_SSTAT_TREQ: u32 = 2;
pub const I2C_SSTAT_TREQ_BITN: u32 = 1;
pub const I2C_SSTAT_TREQ_M: u32 = 2;
pub const I2C_SSTAT_TREQ_S: u32 = 1;
pub const I2C_SSTAT_RREQ: u32 = 1;
pub const I2C_SSTAT_RREQ_BITN: u32 = 0;
pub const I2C_SSTAT_RREQ_M: u32 = 1;
pub const I2C_SSTAT_RREQ_S: u32 = 0;
pub const I2C_SCTL_DA: u32 = 1;
pub const I2C_SCTL_DA_BITN: u32 = 0;
pub const I2C_SCTL_DA_M: u32 = 1;
pub const I2C_SCTL_DA_S: u32 = 0;
pub const I2C_SDR_DATA_W: u32 = 8;
pub const I2C_SDR_DATA_M: u32 = 255;
pub const I2C_SDR_DATA_S: u32 = 0;
pub const I2C_SIMR_STOPIM: u32 = 4;
pub const I2C_SIMR_STOPIM_BITN: u32 = 2;
pub const I2C_SIMR_STOPIM_M: u32 = 4;
pub const I2C_SIMR_STOPIM_S: u32 = 2;
pub const I2C_SIMR_STOPIM_EN: u32 = 4;
pub const I2C_SIMR_STOPIM_DIS: u32 = 0;
pub const I2C_SIMR_STARTIM: u32 = 2;
pub const I2C_SIMR_STARTIM_BITN: u32 = 1;
pub const I2C_SIMR_STARTIM_M: u32 = 2;
pub const I2C_SIMR_STARTIM_S: u32 = 1;
pub const I2C_SIMR_STARTIM_EN: u32 = 2;
pub const I2C_SIMR_STARTIM_DIS: u32 = 0;
pub const I2C_SIMR_DATAIM: u32 = 1;
pub const I2C_SIMR_DATAIM_BITN: u32 = 0;
pub const I2C_SIMR_DATAIM_M: u32 = 1;
pub const I2C_SIMR_DATAIM_S: u32 = 0;
pub const I2C_SRIS_STOPRIS: u32 = 4;
pub const I2C_SRIS_STOPRIS_BITN: u32 = 2;
pub const I2C_SRIS_STOPRIS_M: u32 = 4;
pub const I2C_SRIS_STOPRIS_S: u32 = 2;
pub const I2C_SRIS_STARTRIS: u32 = 2;
pub const I2C_SRIS_STARTRIS_BITN: u32 = 1;
pub const I2C_SRIS_STARTRIS_M: u32 = 2;
pub const I2C_SRIS_STARTRIS_S: u32 = 1;
pub const I2C_SRIS_DATARIS: u32 = 1;
pub const I2C_SRIS_DATARIS_BITN: u32 = 0;
pub const I2C_SRIS_DATARIS_M: u32 = 1;
pub const I2C_SRIS_DATARIS_S: u32 = 0;
pub const I2C_SMIS_STOPMIS: u32 = 4;
pub const I2C_SMIS_STOPMIS_BITN: u32 = 2;
pub const I2C_SMIS_STOPMIS_M: u32 = 4;
pub const I2C_SMIS_STOPMIS_S: u32 = 2;
pub const I2C_SMIS_STARTMIS: u32 = 2;
pub const I2C_SMIS_STARTMIS_BITN: u32 = 1;
pub const I2C_SMIS_STARTMIS_M: u32 = 2;
pub const I2C_SMIS_STARTMIS_S: u32 = 1;
pub const I2C_SMIS_DATAMIS: u32 = 1;
pub const I2C_SMIS_DATAMIS_BITN: u32 = 0;
pub const I2C_SMIS_DATAMIS_M: u32 = 1;
pub const I2C_SMIS_DATAMIS_S: u32 = 0;
pub const I2C_SICR_STOPIC: u32 = 4;
pub const I2C_SICR_STOPIC_BITN: u32 = 2;
pub const I2C_SICR_STOPIC_M: u32 = 4;
pub const I2C_SICR_STOPIC_S: u32 = 2;
pub const I2C_SICR_STARTIC: u32 = 2;
pub const I2C_SICR_STARTIC_BITN: u32 = 1;
pub const I2C_SICR_STARTIC_M: u32 = 2;
pub const I2C_SICR_STARTIC_S: u32 = 1;
pub const I2C_SICR_DATAIC: u32 = 1;
pub const I2C_SICR_DATAIC_BITN: u32 = 0;
pub const I2C_SICR_DATAIC_M: u32 = 1;
pub const I2C_SICR_DATAIC_S: u32 = 0;
pub const I2C_MSA_SA_W: u32 = 7;
pub const I2C_MSA_SA_M: u32 = 254;
pub const I2C_MSA_SA_S: u32 = 1;
pub const I2C_MSA_RS: u32 = 1;
pub const I2C_MSA_RS_BITN: u32 = 0;
pub const I2C_MSA_RS_M: u32 = 1;
pub const I2C_MSA_RS_S: u32 = 0;
pub const I2C_MSA_RS_RX: u32 = 1;
pub const I2C_MSA_RS_TX: u32 = 0;
pub const I2C_MSTAT_BUSBSY: u32 = 64;
pub const I2C_MSTAT_BUSBSY_BITN: u32 = 6;
pub const I2C_MSTAT_BUSBSY_M: u32 = 64;
pub const I2C_MSTAT_BUSBSY_S: u32 = 6;
pub const I2C_MSTAT_IDLE: u32 = 32;
pub const I2C_MSTAT_IDLE_BITN: u32 = 5;
pub const I2C_MSTAT_IDLE_M: u32 = 32;
pub const I2C_MSTAT_IDLE_S: u32 = 5;
pub const I2C_MSTAT_ARBLST: u32 = 16;
pub const I2C_MSTAT_ARBLST_BITN: u32 = 4;
pub const I2C_MSTAT_ARBLST_M: u32 = 16;
pub const I2C_MSTAT_ARBLST_S: u32 = 4;
pub const I2C_MSTAT_DATACK_N: u32 = 8;
pub const I2C_MSTAT_DATACK_N_BITN: u32 = 3;
pub const I2C_MSTAT_DATACK_N_M: u32 = 8;
pub const I2C_MSTAT_DATACK_N_S: u32 = 3;
pub const I2C_MSTAT_ADRACK_N: u32 = 4;
pub const I2C_MSTAT_ADRACK_N_BITN: u32 = 2;
pub const I2C_MSTAT_ADRACK_N_M: u32 = 4;
pub const I2C_MSTAT_ADRACK_N_S: u32 = 2;
pub const I2C_MSTAT_ERR: u32 = 2;
pub const I2C_MSTAT_ERR_BITN: u32 = 1;
pub const I2C_MSTAT_ERR_M: u32 = 2;
pub const I2C_MSTAT_ERR_S: u32 = 1;
pub const I2C_MSTAT_BUSY: u32 = 1;
pub const I2C_MSTAT_BUSY_BITN: u32 = 0;
pub const I2C_MSTAT_BUSY_M: u32 = 1;
pub const I2C_MSTAT_BUSY_S: u32 = 0;
pub const I2C_MCTRL_ACK: u32 = 8;
pub const I2C_MCTRL_ACK_BITN: u32 = 3;
pub const I2C_MCTRL_ACK_M: u32 = 8;
pub const I2C_MCTRL_ACK_S: u32 = 3;
pub const I2C_MCTRL_ACK_EN: u32 = 8;
pub const I2C_MCTRL_ACK_DIS: u32 = 0;
pub const I2C_MCTRL_STOP: u32 = 4;
pub const I2C_MCTRL_STOP_BITN: u32 = 2;
pub const I2C_MCTRL_STOP_M: u32 = 4;
pub const I2C_MCTRL_STOP_S: u32 = 2;
pub const I2C_MCTRL_STOP_EN: u32 = 4;
pub const I2C_MCTRL_STOP_DIS: u32 = 0;
pub const I2C_MCTRL_START: u32 = 2;
pub const I2C_MCTRL_START_BITN: u32 = 1;
pub const I2C_MCTRL_START_M: u32 = 2;
pub const I2C_MCTRL_START_S: u32 = 1;
pub const I2C_MCTRL_START_EN: u32 = 2;
pub const I2C_MCTRL_START_DIS: u32 = 0;
pub const I2C_MCTRL_RUN: u32 = 1;
pub const I2C_MCTRL_RUN_BITN: u32 = 0;
pub const I2C_MCTRL_RUN_M: u32 = 1;
pub const I2C_MCTRL_RUN_S: u32 = 0;
pub const I2C_MCTRL_RUN_EN: u32 = 1;
pub const I2C_MCTRL_RUN_DIS: u32 = 0;
pub const I2C_MDR_DATA_W: u32 = 8;
pub const I2C_MDR_DATA_M: u32 = 255;
pub const I2C_MDR_DATA_S: u32 = 0;
pub const I2C_MTPR_TPR_7: u32 = 128;
pub const I2C_MTPR_TPR_7_BITN: u32 = 7;
pub const I2C_MTPR_TPR_7_M: u32 = 128;
pub const I2C_MTPR_TPR_7_S: u32 = 7;
pub const I2C_MTPR_TPR_W: u32 = 7;
pub const I2C_MTPR_TPR_M: u32 = 127;
pub const I2C_MTPR_TPR_S: u32 = 0;
pub const I2C_MIMR_IM: u32 = 1;
pub const I2C_MIMR_IM_BITN: u32 = 0;
pub const I2C_MIMR_IM_M: u32 = 1;
pub const I2C_MIMR_IM_S: u32 = 0;
pub const I2C_MIMR_IM_EN: u32 = 1;
pub const I2C_MIMR_IM_DIS: u32 = 0;
pub const I2C_MRIS_RIS: u32 = 1;
pub const I2C_MRIS_RIS_BITN: u32 = 0;
pub const I2C_MRIS_RIS_M: u32 = 1;
pub const I2C_MRIS_RIS_S: u32 = 0;
pub const I2C_MMIS_MIS: u32 = 1;
pub const I2C_MMIS_MIS_BITN: u32 = 0;
pub const I2C_MMIS_MIS_M: u32 = 1;
pub const I2C_MMIS_MIS_S: u32 = 0;
pub const I2C_MICR_IC: u32 = 1;
pub const I2C_MICR_IC_BITN: u32 = 0;
pub const I2C_MICR_IC_M: u32 = 1;
pub const I2C_MICR_IC_S: u32 = 0;
pub const I2C_MCR_SFE: u32 = 32;
pub const I2C_MCR_SFE_BITN: u32 = 5;
pub const I2C_MCR_SFE_M: u32 = 32;
pub const I2C_MCR_SFE_S: u32 = 5;
pub const I2C_MCR_SFE_EN: u32 = 32;
pub const I2C_MCR_SFE_DIS: u32 = 0;
pub const I2C_MCR_MFE: u32 = 16;
pub const I2C_MCR_MFE_BITN: u32 = 4;
pub const I2C_MCR_MFE_M: u32 = 16;
pub const I2C_MCR_MFE_S: u32 = 4;
pub const I2C_MCR_MFE_EN: u32 = 16;
pub const I2C_MCR_MFE_DIS: u32 = 0;
pub const I2C_MCR_LPBK: u32 = 1;
pub const I2C_MCR_LPBK_BITN: u32 = 0;
pub const I2C_MCR_LPBK_M: u32 = 1;
pub const I2C_MCR_LPBK_S: u32 = 0;
pub const I2C_MCR_LPBK_EN: u32 = 1;
pub const I2C_MCR_LPBK_DIS: u32 = 0;
pub const GET_MCU_CLOCK: u32 = 48000000;
pub const I2C_MASTER_CMD_SINGLE_SEND: u32 = 7;
pub const I2C_MASTER_CMD_SINGLE_RECEIVE: u32 = 7;
pub const I2C_MASTER_CMD_BURST_SEND_START: u32 = 3;
pub const I2C_MASTER_CMD_BURST_SEND_CONT: u32 = 1;
pub const I2C_MASTER_CMD_BURST_SEND_FINISH: u32 = 5;
pub const I2C_MASTER_CMD_BURST_SEND_ERROR_STOP: u32 = 4;
pub const I2C_MASTER_CMD_BURST_RECEIVE_START: u32 = 11;
pub const I2C_MASTER_CMD_BURST_RECEIVE_CONT: u32 = 9;
pub const I2C_MASTER_CMD_BURST_RECEIVE_FINISH: u32 = 5;
pub const I2C_MASTER_CMD_BURST_RECEIVE_ERROR_STOP: u32 = 4;
pub const I2C_MASTER_ERR_NONE: u32 = 0;
pub const I2C_MASTER_ERR_ADDR_ACK: u32 = 4;
pub const I2C_MASTER_ERR_DATA_ACK: u32 = 8;
pub const I2C_MASTER_ERR_ARB_LOST: u32 = 16;
pub const I2C_SLAVE_ACT_NONE: u32 = 0;
pub const I2C_SLAVE_ACT_RREQ: u32 = 1;
pub const I2C_SLAVE_ACT_TREQ: u32 = 2;
pub const I2C_SLAVE_ACT_RREQ_FBR: u32 = 5;
pub const I2C_SLAVE_INT_STOP: u32 = 4;
pub const I2C_SLAVE_INT_START: u32 = 2;
pub const I2C_SLAVE_INT_DATA: u32 = 1;
pub const I2S_O_AIFWCLKSRC: u32 = 0;
pub const I2S_O_AIFDMACFG: u32 = 4;
pub const I2S_O_AIFDIRCFG: u32 = 8;
pub const I2S_O_AIFFMTCFG: u32 = 12;
pub const I2S_O_AIFWMASK0: u32 = 16;
pub const I2S_O_AIFWMASK1: u32 = 20;
pub const I2S_O_AIFPWMVALUE: u32 = 28;
pub const I2S_O_AIFINPTRNEXT: u32 = 32;
pub const I2S_O_AIFINPTR: u32 = 36;
pub const I2S_O_AIFOUTPTRNEXT: u32 = 40;
pub const I2S_O_AIFOUTPTR: u32 = 44;
pub const I2S_O_STMPCTL: u32 = 52;
pub const I2S_O_STMPXCNTCAPT0: u32 = 56;
pub const I2S_O_STMPXPER: u32 = 60;
pub const I2S_O_STMPWCNTCAPT0: u32 = 64;
pub const I2S_O_STMPWPER: u32 = 68;
pub const I2S_O_STMPINTRIG: u32 = 72;
pub const I2S_O_STMPOUTTRIG: u32 = 76;
pub const I2S_O_STMPWSET: u32 = 80;
pub const I2S_O_STMPWADD: u32 = 84;
pub const I2S_O_STMPXPERMIN: u32 = 88;
pub const I2S_O_STMPWCNT: u32 = 92;
pub const I2S_O_STMPXCNT: u32 = 96;
pub const I2S_O_STMPXCNTCAPT1: u32 = 100;
pub const I2S_O_STMPWCNTCAPT1: u32 = 104;
pub const I2S_O_IRQMASK: u32 = 112;
pub const I2S_O_IRQFLAGS: u32 = 116;
pub const I2S_O_IRQSET: u32 = 120;
pub const I2S_O_IRQCLR: u32 = 124;
pub const I2S_AIFWCLKSRC_WCLK_INV: u32 = 4;
pub const I2S_AIFWCLKSRC_WCLK_INV_BITN: u32 = 2;
pub const I2S_AIFWCLKSRC_WCLK_INV_M: u32 = 4;
pub const I2S_AIFWCLKSRC_WCLK_INV_S: u32 = 2;
pub const I2S_AIFWCLKSRC_WCLK_SRC_W: u32 = 2;
pub const I2S_AIFWCLKSRC_WCLK_SRC_M: u32 = 3;
pub const I2S_AIFWCLKSRC_WCLK_SRC_S: u32 = 0;
pub const I2S_AIFWCLKSRC_WCLK_SRC_RESERVED: u32 = 3;
pub const I2S_AIFWCLKSRC_WCLK_SRC_INT: u32 = 2;
pub const I2S_AIFWCLKSRC_WCLK_SRC_EXT: u32 = 1;
pub const I2S_AIFWCLKSRC_WCLK_SRC_NONE: u32 = 0;
pub const I2S_AIFDMACFG_END_FRAME_IDX_W: u32 = 8;
pub const I2S_AIFDMACFG_END_FRAME_IDX_M: u32 = 255;
pub const I2S_AIFDMACFG_END_FRAME_IDX_S: u32 = 0;
pub const I2S_AIFDIRCFG_AD2_W: u32 = 2;
pub const I2S_AIFDIRCFG_AD2_M: u32 = 768;
pub const I2S_AIFDIRCFG_AD2_S: u32 = 8;
pub const I2S_AIFDIRCFG_AD2_OUT: u32 = 512;
pub const I2S_AIFDIRCFG_AD2_IN: u32 = 256;
pub const I2S_AIFDIRCFG_AD2_DIS: u32 = 0;
pub const I2S_AIFDIRCFG_AD1_W: u32 = 2;
pub const I2S_AIFDIRCFG_AD1_M: u32 = 48;
pub const I2S_AIFDIRCFG_AD1_S: u32 = 4;
pub const I2S_AIFDIRCFG_AD1_OUT: u32 = 32;
pub const I2S_AIFDIRCFG_AD1_IN: u32 = 16;
pub const I2S_AIFDIRCFG_AD1_DIS: u32 = 0;
pub const I2S_AIFDIRCFG_AD0_W: u32 = 2;
pub const I2S_AIFDIRCFG_AD0_M: u32 = 3;
pub const I2S_AIFDIRCFG_AD0_S: u32 = 0;
pub const I2S_AIFDIRCFG_AD0_OUT: u32 = 2;
pub const I2S_AIFDIRCFG_AD0_IN: u32 = 1;
pub const I2S_AIFDIRCFG_AD0_DIS: u32 = 0;
pub const I2S_AIFFMTCFG_DATA_DELAY_W: u32 = 8;
pub const I2S_AIFFMTCFG_DATA_DELAY_M: u32 = 65280;
pub const I2S_AIFFMTCFG_DATA_DELAY_S: u32 = 8;
pub const I2S_AIFFMTCFG_MEM_LEN_24: u32 = 128;
pub const I2S_AIFFMTCFG_MEM_LEN_24_BITN: u32 = 7;
pub const I2S_AIFFMTCFG_MEM_LEN_24_M: u32 = 128;
pub const I2S_AIFFMTCFG_MEM_LEN_24_S: u32 = 7;
pub const I2S_AIFFMTCFG_MEM_LEN_24_24BIT: u32 = 128;
pub const I2S_AIFFMTCFG_MEM_LEN_24_16BIT: u32 = 0;
pub const I2S_AIFFMTCFG_SMPL_EDGE: u32 = 64;
pub const I2S_AIFFMTCFG_SMPL_EDGE_BITN: u32 = 6;
pub const I2S_AIFFMTCFG_SMPL_EDGE_M: u32 = 64;
pub const I2S_AIFFMTCFG_SMPL_EDGE_S: u32 = 6;
pub const I2S_AIFFMTCFG_SMPL_EDGE_POS: u32 = 64;
pub const I2S_AIFFMTCFG_SMPL_EDGE_NEG: u32 = 0;
pub const I2S_AIFFMTCFG_DUAL_PHASE: u32 = 32;
pub const I2S_AIFFMTCFG_DUAL_PHASE_BITN: u32 = 5;
pub const I2S_AIFFMTCFG_DUAL_PHASE_M: u32 = 32;
pub const I2S_AIFFMTCFG_DUAL_PHASE_S: u32 = 5;
pub const I2S_AIFFMTCFG_WORD_LEN_W: u32 = 5;
pub const I2S_AIFFMTCFG_WORD_LEN_M: u32 = 31;
pub const I2S_AIFFMTCFG_WORD_LEN_S: u32 = 0;
pub const I2S_AIFWMASK0_MASK_W: u32 = 8;
pub const I2S_AIFWMASK0_MASK_M: u32 = 255;
pub const I2S_AIFWMASK0_MASK_S: u32 = 0;
pub const I2S_AIFWMASK1_MASK_W: u32 = 8;
pub const I2S_AIFWMASK1_MASK_M: u32 = 255;
pub const I2S_AIFWMASK1_MASK_S: u32 = 0;
pub const I2S_AIFPWMVALUE_PULSE_WIDTH_W: u32 = 16;
pub const I2S_AIFPWMVALUE_PULSE_WIDTH_M: u32 = 65535;
pub const I2S_AIFPWMVALUE_PULSE_WIDTH_S: u32 = 0;
pub const I2S_AIFINPTRNEXT_PTR_W: u32 = 32;
pub const I2S_AIFINPTRNEXT_PTR_M: u32 = 4294967295;
pub const I2S_AIFINPTRNEXT_PTR_S: u32 = 0;
pub const I2S_AIFINPTR_PTR_W: u32 = 32;
pub const I2S_AIFINPTR_PTR_M: u32 = 4294967295;
pub const I2S_AIFINPTR_PTR_S: u32 = 0;
pub const I2S_AIFOUTPTRNEXT_PTR_W: u32 = 32;
pub const I2S_AIFOUTPTRNEXT_PTR_M: u32 = 4294967295;
pub const I2S_AIFOUTPTRNEXT_PTR_S: u32 = 0;
pub const I2S_AIFOUTPTR_PTR_W: u32 = 32;
pub const I2S_AIFOUTPTR_PTR_M: u32 = 4294967295;
pub const I2S_AIFOUTPTR_PTR_S: u32 = 0;
pub const I2S_STMPCTL_OUT_RDY: u32 = 4;
pub const I2S_STMPCTL_OUT_RDY_BITN: u32 = 2;
pub const I2S_STMPCTL_OUT_RDY_M: u32 = 4;
pub const I2S_STMPCTL_OUT_RDY_S: u32 = 2;
pub const I2S_STMPCTL_IN_RDY: u32 = 2;
pub const I2S_STMPCTL_IN_RDY_BITN: u32 = 1;
pub const I2S_STMPCTL_IN_RDY_M: u32 = 2;
pub const I2S_STMPCTL_IN_RDY_S: u32 = 1;
pub const I2S_STMPCTL_STMP_EN: u32 = 1;
pub const I2S_STMPCTL_STMP_EN_BITN: u32 = 0;
pub const I2S_STMPCTL_STMP_EN_M: u32 = 1;
pub const I2S_STMPCTL_STMP_EN_S: u32 = 0;
pub const I2S_STMPXCNTCAPT0_CAPT_VALUE_W: u32 = 16;
pub const I2S_STMPXCNTCAPT0_CAPT_VALUE_M: u32 = 65535;
pub const I2S_STMPXCNTCAPT0_CAPT_VALUE_S: u32 = 0;
pub const I2S_STMPXPER_VALUE_W: u32 = 16;
pub const I2S_STMPXPER_VALUE_M: u32 = 65535;
pub const I2S_STMPXPER_VALUE_S: u32 = 0;
pub const I2S_STMPWCNTCAPT0_CAPT_VALUE_W: u32 = 16;
pub const I2S_STMPWCNTCAPT0_CAPT_VALUE_M: u32 = 65535;
pub const I2S_STMPWCNTCAPT0_CAPT_VALUE_S: u32 = 0;
pub const I2S_STMPWPER_VALUE_W: u32 = 16;
pub const I2S_STMPWPER_VALUE_M: u32 = 65535;
pub const I2S_STMPWPER_VALUE_S: u32 = 0;
pub const I2S_STMPINTRIG_IN_START_WCNT_W: u32 = 16;
pub const I2S_STMPINTRIG_IN_START_WCNT_M: u32 = 65535;
pub const I2S_STMPINTRIG_IN_START_WCNT_S: u32 = 0;
pub const I2S_STMPOUTTRIG_OUT_START_WCNT_W: u32 = 16;
pub const I2S_STMPOUTTRIG_OUT_START_WCNT_M: u32 = 65535;
pub const I2S_STMPOUTTRIG_OUT_START_WCNT_S: u32 = 0;
pub const I2S_STMPWSET_VALUE_W: u32 = 16;
pub const I2S_STMPWSET_VALUE_M: u32 = 65535;
pub const I2S_STMPWSET_VALUE_S: u32 = 0;
pub const I2S_STMPWADD_VALUE_INC_W: u32 = 16;
pub const I2S_STMPWADD_VALUE_INC_M: u32 = 65535;
pub const I2S_STMPWADD_VALUE_INC_S: u32 = 0;
pub const I2S_STMPXPERMIN_VALUE_W: u32 = 16;
pub const I2S_STMPXPERMIN_VALUE_M: u32 = 65535;
pub const I2S_STMPXPERMIN_VALUE_S: u32 = 0;
pub const I2S_STMPWCNT_CURR_VALUE_W: u32 = 16;
pub const I2S_STMPWCNT_CURR_VALUE_M: u32 = 65535;
pub const I2S_STMPWCNT_CURR_VALUE_S: u32 = 0;
pub const I2S_STMPXCNT_CURR_VALUE_W: u32 = 16;
pub const I2S_STMPXCNT_CURR_VALUE_M: u32 = 65535;
pub const I2S_STMPXCNT_CURR_VALUE_S: u32 = 0;
pub const I2S_STMPXCNTCAPT1_CAPT_VALUE_W: u32 = 16;
pub const I2S_STMPXCNTCAPT1_CAPT_VALUE_M: u32 = 65535;
pub const I2S_STMPXCNTCAPT1_CAPT_VALUE_S: u32 = 0;
pub const I2S_STMPWCNTCAPT1_CAPT_VALUE_W: u32 = 16;
pub const I2S_STMPWCNTCAPT1_CAPT_VALUE_M: u32 = 65535;
pub const I2S_STMPWCNTCAPT1_CAPT_VALUE_S: u32 = 0;
pub const I2S_IRQMASK_AIF_DMA_IN: u32 = 32;
pub const I2S_IRQMASK_AIF_DMA_IN_BITN: u32 = 5;
pub const I2S_IRQMASK_AIF_DMA_IN_M: u32 = 32;
pub const I2S_IRQMASK_AIF_DMA_IN_S: u32 = 5;
pub const I2S_IRQMASK_AIF_DMA_OUT: u32 = 16;
pub const I2S_IRQMASK_AIF_DMA_OUT_BITN: u32 = 4;
pub const I2S_IRQMASK_AIF_DMA_OUT_M: u32 = 16;
pub const I2S_IRQMASK_AIF_DMA_OUT_S: u32 = 4;
pub const I2S_IRQMASK_WCLK_TIMEOUT: u32 = 8;
pub const I2S_IRQMASK_WCLK_TIMEOUT_BITN: u32 = 3;
pub const I2S_IRQMASK_WCLK_TIMEOUT_M: u32 = 8;
pub const I2S_IRQMASK_WCLK_TIMEOUT_S: u32 = 3;
pub const I2S_IRQMASK_BUS_ERR: u32 = 4;
pub const I2S_IRQMASK_BUS_ERR_BITN: u32 = 2;
pub const I2S_IRQMASK_BUS_ERR_M: u32 = 4;
pub const I2S_IRQMASK_BUS_ERR_S: u32 = 2;
pub const I2S_IRQMASK_WCLK_ERR: u32 = 2;
pub const I2S_IRQMASK_WCLK_ERR_BITN: u32 = 1;
pub const I2S_IRQMASK_WCLK_ERR_M: u32 = 2;
pub const I2S_IRQMASK_WCLK_ERR_S: u32 = 1;
pub const I2S_IRQMASK_PTR_ERR: u32 = 1;
pub const I2S_IRQMASK_PTR_ERR_BITN: u32 = 0;
pub const I2S_IRQMASK_PTR_ERR_M: u32 = 1;
pub const I2S_IRQMASK_PTR_ERR_S: u32 = 0;
pub const I2S_IRQFLAGS_AIF_DMA_IN: u32 = 32;
pub const I2S_IRQFLAGS_AIF_DMA_IN_BITN: u32 = 5;
pub const I2S_IRQFLAGS_AIF_DMA_IN_M: u32 = 32;
pub const I2S_IRQFLAGS_AIF_DMA_IN_S: u32 = 5;
pub const I2S_IRQFLAGS_AIF_DMA_OUT: u32 = 16;
pub const I2S_IRQFLAGS_AIF_DMA_OUT_BITN: u32 = 4;
pub const I2S_IRQFLAGS_AIF_DMA_OUT_M: u32 = 16;
pub const I2S_IRQFLAGS_AIF_DMA_OUT_S: u32 = 4;
pub const I2S_IRQFLAGS_WCLK_TIMEOUT: u32 = 8;
pub const I2S_IRQFLAGS_WCLK_TIMEOUT_BITN: u32 = 3;
pub const I2S_IRQFLAGS_WCLK_TIMEOUT_M: u32 = 8;
pub const I2S_IRQFLAGS_WCLK_TIMEOUT_S: u32 = 3;
pub const I2S_IRQFLAGS_BUS_ERR: u32 = 4;
pub const I2S_IRQFLAGS_BUS_ERR_BITN: u32 = 2;
pub const I2S_IRQFLAGS_BUS_ERR_M: u32 = 4;
pub const I2S_IRQFLAGS_BUS_ERR_S: u32 = 2;
pub const I2S_IRQFLAGS_WCLK_ERR: u32 = 2;
pub const I2S_IRQFLAGS_WCLK_ERR_BITN: u32 = 1;
pub const I2S_IRQFLAGS_WCLK_ERR_M: u32 = 2;
pub const I2S_IRQFLAGS_WCLK_ERR_S: u32 = 1;
pub const I2S_IRQFLAGS_PTR_ERR: u32 = 1;
pub const I2S_IRQFLAGS_PTR_ERR_BITN: u32 = 0;
pub const I2S_IRQFLAGS_PTR_ERR_M: u32 = 1;
pub const I2S_IRQFLAGS_PTR_ERR_S: u32 = 0;
pub const I2S_IRQSET_AIF_DMA_IN: u32 = 32;
pub const I2S_IRQSET_AIF_DMA_IN_BITN: u32 = 5;
pub const I2S_IRQSET_AIF_DMA_IN_M: u32 = 32;
pub const I2S_IRQSET_AIF_DMA_IN_S: u32 = 5;
pub const I2S_IRQSET_AIF_DMA_OUT: u32 = 16;
pub const I2S_IRQSET_AIF_DMA_OUT_BITN: u32 = 4;
pub const I2S_IRQSET_AIF_DMA_OUT_M: u32 = 16;
pub const I2S_IRQSET_AIF_DMA_OUT_S: u32 = 4;
pub const I2S_IRQSET_WCLK_TIMEOUT: u32 = 8;
pub const I2S_IRQSET_WCLK_TIMEOUT_BITN: u32 = 3;
pub const I2S_IRQSET_WCLK_TIMEOUT_M: u32 = 8;
pub const I2S_IRQSET_WCLK_TIMEOUT_S: u32 = 3;
pub const I2S_IRQSET_BUS_ERR: u32 = 4;
pub const I2S_IRQSET_BUS_ERR_BITN: u32 = 2;
pub const I2S_IRQSET_BUS_ERR_M: u32 = 4;
pub const I2S_IRQSET_BUS_ERR_S: u32 = 2;
pub const I2S_IRQSET_WCLK_ERR: u32 = 2;
pub const I2S_IRQSET_WCLK_ERR_BITN: u32 = 1;
pub const I2S_IRQSET_WCLK_ERR_M: u32 = 2;
pub const I2S_IRQSET_WCLK_ERR_S: u32 = 1;
pub const I2S_IRQSET_PTR_ERR: u32 = 1;
pub const I2S_IRQSET_PTR_ERR_BITN: u32 = 0;
pub const I2S_IRQSET_PTR_ERR_M: u32 = 1;
pub const I2S_IRQSET_PTR_ERR_S: u32 = 0;
pub const I2S_IRQCLR_AIF_DMA_IN: u32 = 32;
pub const I2S_IRQCLR_AIF_DMA_IN_BITN: u32 = 5;
pub const I2S_IRQCLR_AIF_DMA_IN_M: u32 = 32;
pub const I2S_IRQCLR_AIF_DMA_IN_S: u32 = 5;
pub const I2S_IRQCLR_AIF_DMA_OUT: u32 = 16;
pub const I2S_IRQCLR_AIF_DMA_OUT_BITN: u32 = 4;
pub const I2S_IRQCLR_AIF_DMA_OUT_M: u32 = 16;
pub const I2S_IRQCLR_AIF_DMA_OUT_S: u32 = 4;
pub const I2S_IRQCLR_WCLK_TIMEOUT: u32 = 8;
pub const I2S_IRQCLR_WCLK_TIMEOUT_BITN: u32 = 3;
pub const I2S_IRQCLR_WCLK_TIMEOUT_M: u32 = 8;
pub const I2S_IRQCLR_WCLK_TIMEOUT_S: u32 = 3;
pub const I2S_IRQCLR_BUS_ERR: u32 = 4;
pub const I2S_IRQCLR_BUS_ERR_BITN: u32 = 2;
pub const I2S_IRQCLR_BUS_ERR_M: u32 = 4;
pub const I2S_IRQCLR_BUS_ERR_S: u32 = 2;
pub const I2S_IRQCLR_WCLK_ERR: u32 = 2;
pub const I2S_IRQCLR_WCLK_ERR_BITN: u32 = 1;
pub const I2S_IRQCLR_WCLK_ERR_M: u32 = 2;
pub const I2S_IRQCLR_WCLK_ERR_S: u32 = 1;
pub const I2S_IRQCLR_PTR_ERR: u32 = 1;
pub const I2S_IRQCLR_PTR_ERR_BITN: u32 = 0;
pub const I2S_IRQCLR_PTR_ERR_M: u32 = 1;
pub const I2S_IRQCLR_PTR_ERR_S: u32 = 0;
pub const I2S_DMA_BUF_SIZE_64: u32 = 64;
pub const I2S_DMA_BUF_SIZE_128: u32 = 128;
pub const I2S_DMA_BUF_SIZE_256: u32 = 256;
pub const I2S_EXT_WCLK: u32 = 1;
pub const I2S_INT_WCLK: u32 = 2;
pub const I2S_INVERT_WCLK: u32 = 4;
pub const I2S_NORMAL_WCLK: u32 = 0;
pub const I2S_LINE_UNUSED: u32 = 0;
pub const I2S_LINE_INPUT: u32 = 1;
pub const I2S_LINE_OUTPUT: u32 = 2;
pub const I2S_LINE_MASK: u32 = 3;
pub const I2S_CHAN0_ACT: u32 = 256;
pub const I2S_CHAN1_ACT: u32 = 512;
pub const I2S_CHAN2_ACT: u32 = 1024;
pub const I2S_CHAN3_ACT: u32 = 2048;
pub const I2S_CHAN4_ACT: u32 = 4096;
pub const I2S_CHAN5_ACT: u32 = 8192;
pub const I2S_CHAN6_ACT: u32 = 16384;
pub const I2S_CHAN7_ACT: u32 = 32768;
pub const I2S_MONO_MODE: u32 = 256;
pub const I2S_STEREO_MODE: u32 = 768;
pub const I2S_CHAN_CFG_MASK: u32 = 65280;
pub const I2S_MEM_LENGTH_16: u32 = 0;
pub const I2S_MEM_LENGTH_24: u32 = 128;
pub const I2S_POS_EDGE: u32 = 64;
pub const I2S_NEG_EDGE: u32 = 0;
pub const I2S_DUAL_PHASE_FMT: u32 = 32;
pub const I2S_SINGLE_PHASE_FMT: u32 = 0;
pub const I2S_WORD_LENGTH_8: u32 = 8;
pub const I2S_WORD_LENGTH_16: u32 = 16;
pub const I2S_WORD_LENGTH_24: u32 = 24;
pub const I2S_STMP0: u32 = 1;
pub const I2S_STMP1: u32 = 2;
pub const I2S_STMP_SATURATION: u32 = 65535;
pub const I2S_INT_DMA_IN: u32 = 32;
pub const I2S_INT_DMA_OUT: u32 = 16;
pub const I2S_INT_TIMEOUT: u32 = 8;
pub const I2S_INT_BUS_ERR: u32 = 4;
pub const I2S_INT_WCLK_ERR: u32 = 2;
pub const I2S_INT_PTR_ERR: u32 = 1;
pub const I2S_INT_ALL: u32 = 63;
pub const IOC_O_IOCFG0: u32 = 0;
pub const IOC_O_IOCFG1: u32 = 4;
pub const IOC_O_IOCFG2: u32 = 8;
pub const IOC_O_IOCFG3: u32 = 12;
pub const IOC_O_IOCFG4: u32 = 16;
pub const IOC_O_IOCFG5: u32 = 20;
pub const IOC_O_IOCFG6: u32 = 24;
pub const IOC_O_IOCFG7: u32 = 28;
pub const IOC_O_IOCFG8: u32 = 32;
pub const IOC_O_IOCFG9: u32 = 36;
pub const IOC_O_IOCFG10: u32 = 40;
pub const IOC_O_IOCFG11: u32 = 44;
pub const IOC_O_IOCFG12: u32 = 48;
pub const IOC_O_IOCFG13: u32 = 52;
pub const IOC_O_IOCFG14: u32 = 56;
pub const IOC_O_IOCFG15: u32 = 60;
pub const IOC_O_IOCFG16: u32 = 64;
pub const IOC_O_IOCFG17: u32 = 68;
pub const IOC_O_IOCFG18: u32 = 72;
pub const IOC_O_IOCFG19: u32 = 76;
pub const IOC_O_IOCFG20: u32 = 80;
pub const IOC_O_IOCFG21: u32 = 84;
pub const IOC_O_IOCFG22: u32 = 88;
pub const IOC_O_IOCFG23: u32 = 92;
pub const IOC_O_IOCFG24: u32 = 96;
pub const IOC_O_IOCFG25: u32 = 100;
pub const IOC_O_IOCFG26: u32 = 104;
pub const IOC_O_IOCFG27: u32 = 108;
pub const IOC_O_IOCFG28: u32 = 112;
pub const IOC_O_IOCFG29: u32 = 116;
pub const IOC_O_IOCFG30: u32 = 120;
pub const IOC_O_IOCFG31: u32 = 124;
pub const IOC_IOCFG0_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG0_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG0_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG0_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG0_IE: u32 = 536870912;
pub const IOC_IOCFG0_IE_BITN: u32 = 29;
pub const IOC_IOCFG0_IE_M: u32 = 536870912;
pub const IOC_IOCFG0_IE_S: u32 = 29;
pub const IOC_IOCFG0_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG0_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG0_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG0_IOMODE_W: u32 = 3;
pub const IOC_IOCFG0_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG0_IOMODE_S: u32 = 24;
pub const IOC_IOCFG0_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG0_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG0_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG0_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG0_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG0_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG0_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG0_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG0_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG0_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG0_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG0_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG0_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG0_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG0_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG0_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG0_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG0_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG0_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG0_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG0_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG0_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG0_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG0_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG0_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG0_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG0_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG0_IOCURR_W: u32 = 2;
pub const IOC_IOCFG0_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG0_IOCURR_S: u32 = 10;
pub const IOC_IOCFG0_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG0_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG0_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG0_IOSTR_W: u32 = 2;
pub const IOC_IOCFG0_IOSTR_M: u32 = 768;
pub const IOC_IOCFG0_IOSTR_S: u32 = 8;
pub const IOC_IOCFG0_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG0_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG0_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG0_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG0_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG0_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG0_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG0_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG0_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG0_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG0_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG0_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG0_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG0_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG0_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG0_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG0_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG0_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG0_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG0_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG0_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG0_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG0_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG0_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG0_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG0_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG0_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG0_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG0_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG0_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG0_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG0_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG0_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG0_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG0_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG0_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG0_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG0_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG0_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG0_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG0_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG0_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG0_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG0_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG0_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG0_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG0_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG0_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG0_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG1_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG1_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG1_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG1_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG1_IE: u32 = 536870912;
pub const IOC_IOCFG1_IE_BITN: u32 = 29;
pub const IOC_IOCFG1_IE_M: u32 = 536870912;
pub const IOC_IOCFG1_IE_S: u32 = 29;
pub const IOC_IOCFG1_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG1_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG1_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG1_IOMODE_W: u32 = 3;
pub const IOC_IOCFG1_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG1_IOMODE_S: u32 = 24;
pub const IOC_IOCFG1_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG1_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG1_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG1_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG1_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG1_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG1_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG1_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG1_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG1_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG1_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG1_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG1_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG1_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG1_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG1_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG1_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG1_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG1_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG1_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG1_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG1_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG1_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG1_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG1_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG1_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG1_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG1_IOCURR_W: u32 = 2;
pub const IOC_IOCFG1_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG1_IOCURR_S: u32 = 10;
pub const IOC_IOCFG1_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG1_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG1_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG1_IOSTR_W: u32 = 2;
pub const IOC_IOCFG1_IOSTR_M: u32 = 768;
pub const IOC_IOCFG1_IOSTR_S: u32 = 8;
pub const IOC_IOCFG1_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG1_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG1_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG1_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG1_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG1_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG1_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG1_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG1_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG1_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG1_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG1_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG1_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG1_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG1_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG1_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG1_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG1_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG1_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG1_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG1_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG1_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG1_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG1_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG1_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG1_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG1_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG1_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG1_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG1_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG1_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG1_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG1_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG1_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG1_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG1_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG1_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG1_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG1_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG1_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG1_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG1_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG1_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG1_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG1_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG1_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG1_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG1_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG1_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG2_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG2_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG2_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG2_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG2_IE: u32 = 536870912;
pub const IOC_IOCFG2_IE_BITN: u32 = 29;
pub const IOC_IOCFG2_IE_M: u32 = 536870912;
pub const IOC_IOCFG2_IE_S: u32 = 29;
pub const IOC_IOCFG2_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG2_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG2_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG2_IOMODE_W: u32 = 3;
pub const IOC_IOCFG2_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG2_IOMODE_S: u32 = 24;
pub const IOC_IOCFG2_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG2_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG2_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG2_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG2_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG2_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG2_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG2_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG2_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG2_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG2_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG2_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG2_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG2_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG2_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG2_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG2_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG2_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG2_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG2_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG2_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG2_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG2_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG2_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG2_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG2_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG2_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG2_IOCURR_W: u32 = 2;
pub const IOC_IOCFG2_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG2_IOCURR_S: u32 = 10;
pub const IOC_IOCFG2_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG2_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG2_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG2_IOSTR_W: u32 = 2;
pub const IOC_IOCFG2_IOSTR_M: u32 = 768;
pub const IOC_IOCFG2_IOSTR_S: u32 = 8;
pub const IOC_IOCFG2_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG2_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG2_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG2_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG2_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG2_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG2_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG2_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG2_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG2_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG2_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG2_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG2_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG2_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG2_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG2_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG2_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG2_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG2_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG2_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG2_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG2_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG2_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG2_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG2_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG2_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG2_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG2_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG2_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG2_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG2_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG2_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG2_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG2_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG2_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG2_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG2_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG2_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG2_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG2_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG2_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG2_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG2_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG2_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG2_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG2_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG2_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG2_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG2_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG3_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG3_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG3_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG3_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG3_IE: u32 = 536870912;
pub const IOC_IOCFG3_IE_BITN: u32 = 29;
pub const IOC_IOCFG3_IE_M: u32 = 536870912;
pub const IOC_IOCFG3_IE_S: u32 = 29;
pub const IOC_IOCFG3_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG3_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG3_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG3_IOMODE_W: u32 = 3;
pub const IOC_IOCFG3_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG3_IOMODE_S: u32 = 24;
pub const IOC_IOCFG3_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG3_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG3_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG3_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG3_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG3_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG3_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG3_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG3_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG3_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG3_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG3_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG3_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG3_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG3_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG3_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG3_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG3_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG3_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG3_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG3_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG3_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG3_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG3_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG3_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG3_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG3_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG3_IOCURR_W: u32 = 2;
pub const IOC_IOCFG3_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG3_IOCURR_S: u32 = 10;
pub const IOC_IOCFG3_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG3_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG3_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG3_IOSTR_W: u32 = 2;
pub const IOC_IOCFG3_IOSTR_M: u32 = 768;
pub const IOC_IOCFG3_IOSTR_S: u32 = 8;
pub const IOC_IOCFG3_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG3_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG3_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG3_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG3_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG3_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG3_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG3_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG3_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG3_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG3_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG3_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG3_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG3_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG3_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG3_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG3_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG3_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG3_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG3_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG3_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG3_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG3_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG3_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG3_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG3_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG3_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG3_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG3_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG3_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG3_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG3_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG3_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG3_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG3_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG3_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG3_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG3_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG3_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG3_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG3_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG3_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG3_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG3_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG3_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG3_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG3_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG3_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG3_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG4_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG4_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG4_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG4_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG4_IE: u32 = 536870912;
pub const IOC_IOCFG4_IE_BITN: u32 = 29;
pub const IOC_IOCFG4_IE_M: u32 = 536870912;
pub const IOC_IOCFG4_IE_S: u32 = 29;
pub const IOC_IOCFG4_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG4_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG4_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG4_IOMODE_W: u32 = 3;
pub const IOC_IOCFG4_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG4_IOMODE_S: u32 = 24;
pub const IOC_IOCFG4_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG4_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG4_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG4_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG4_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG4_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG4_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG4_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG4_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG4_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG4_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG4_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG4_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG4_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG4_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG4_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG4_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG4_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG4_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG4_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG4_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG4_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG4_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG4_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG4_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG4_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG4_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG4_IOCURR_W: u32 = 2;
pub const IOC_IOCFG4_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG4_IOCURR_S: u32 = 10;
pub const IOC_IOCFG4_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG4_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG4_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG4_IOSTR_W: u32 = 2;
pub const IOC_IOCFG4_IOSTR_M: u32 = 768;
pub const IOC_IOCFG4_IOSTR_S: u32 = 8;
pub const IOC_IOCFG4_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG4_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG4_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG4_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG4_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG4_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG4_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG4_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG4_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG4_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG4_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG4_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG4_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG4_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG4_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG4_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG4_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG4_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG4_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG4_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG4_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG4_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG4_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG4_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG4_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG4_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG4_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG4_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG4_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG4_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG4_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG4_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG4_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG4_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG4_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG4_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG4_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG4_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG4_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG4_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG4_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG4_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG4_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG4_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG4_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG4_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG4_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG4_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG4_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG5_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG5_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG5_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG5_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG5_IE: u32 = 536870912;
pub const IOC_IOCFG5_IE_BITN: u32 = 29;
pub const IOC_IOCFG5_IE_M: u32 = 536870912;
pub const IOC_IOCFG5_IE_S: u32 = 29;
pub const IOC_IOCFG5_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG5_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG5_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG5_IOMODE_W: u32 = 3;
pub const IOC_IOCFG5_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG5_IOMODE_S: u32 = 24;
pub const IOC_IOCFG5_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG5_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG5_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG5_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG5_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG5_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG5_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG5_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG5_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG5_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG5_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG5_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG5_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG5_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG5_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG5_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG5_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG5_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG5_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG5_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG5_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG5_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG5_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG5_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG5_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG5_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG5_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG5_IOCURR_W: u32 = 2;
pub const IOC_IOCFG5_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG5_IOCURR_S: u32 = 10;
pub const IOC_IOCFG5_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG5_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG5_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG5_IOSTR_W: u32 = 2;
pub const IOC_IOCFG5_IOSTR_M: u32 = 768;
pub const IOC_IOCFG5_IOSTR_S: u32 = 8;
pub const IOC_IOCFG5_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG5_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG5_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG5_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG5_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG5_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG5_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG5_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG5_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG5_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG5_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG5_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG5_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG5_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG5_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG5_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG5_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG5_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG5_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG5_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG5_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG5_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG5_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG5_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG5_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG5_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG5_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG5_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG5_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG5_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG5_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG5_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG5_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG5_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG5_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG5_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG5_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG5_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG5_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG5_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG5_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG5_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG5_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG5_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG5_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG5_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG5_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG5_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG5_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG6_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG6_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG6_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG6_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG6_IE: u32 = 536870912;
pub const IOC_IOCFG6_IE_BITN: u32 = 29;
pub const IOC_IOCFG6_IE_M: u32 = 536870912;
pub const IOC_IOCFG6_IE_S: u32 = 29;
pub const IOC_IOCFG6_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG6_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG6_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG6_IOMODE_W: u32 = 3;
pub const IOC_IOCFG6_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG6_IOMODE_S: u32 = 24;
pub const IOC_IOCFG6_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG6_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG6_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG6_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG6_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG6_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG6_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG6_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG6_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG6_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG6_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG6_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG6_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG6_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG6_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG6_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG6_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG6_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG6_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG6_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG6_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG6_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG6_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG6_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG6_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG6_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG6_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG6_IOCURR_W: u32 = 2;
pub const IOC_IOCFG6_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG6_IOCURR_S: u32 = 10;
pub const IOC_IOCFG6_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG6_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG6_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG6_IOSTR_W: u32 = 2;
pub const IOC_IOCFG6_IOSTR_M: u32 = 768;
pub const IOC_IOCFG6_IOSTR_S: u32 = 8;
pub const IOC_IOCFG6_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG6_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG6_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG6_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG6_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG6_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG6_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG6_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG6_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG6_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG6_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG6_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG6_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG6_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG6_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG6_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG6_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG6_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG6_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG6_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG6_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG6_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG6_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG6_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG6_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG6_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG6_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG6_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG6_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG6_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG6_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG6_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG6_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG6_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG6_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG6_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG6_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG6_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG6_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG6_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG6_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG6_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG6_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG6_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG6_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG6_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG6_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG6_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG6_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG7_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG7_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG7_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG7_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG7_IE: u32 = 536870912;
pub const IOC_IOCFG7_IE_BITN: u32 = 29;
pub const IOC_IOCFG7_IE_M: u32 = 536870912;
pub const IOC_IOCFG7_IE_S: u32 = 29;
pub const IOC_IOCFG7_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG7_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG7_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG7_IOMODE_W: u32 = 3;
pub const IOC_IOCFG7_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG7_IOMODE_S: u32 = 24;
pub const IOC_IOCFG7_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG7_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG7_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG7_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG7_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG7_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG7_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG7_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG7_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG7_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG7_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG7_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG7_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG7_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG7_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG7_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG7_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG7_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG7_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG7_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG7_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG7_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG7_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG7_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG7_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG7_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG7_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG7_IOCURR_W: u32 = 2;
pub const IOC_IOCFG7_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG7_IOCURR_S: u32 = 10;
pub const IOC_IOCFG7_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG7_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG7_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG7_IOSTR_W: u32 = 2;
pub const IOC_IOCFG7_IOSTR_M: u32 = 768;
pub const IOC_IOCFG7_IOSTR_S: u32 = 8;
pub const IOC_IOCFG7_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG7_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG7_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG7_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG7_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG7_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG7_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG7_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG7_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG7_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG7_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG7_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG7_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG7_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG7_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG7_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG7_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG7_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG7_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG7_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG7_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG7_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG7_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG7_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG7_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG7_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG7_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG7_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG7_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG7_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG7_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG7_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG7_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG7_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG7_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG7_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG7_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG7_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG7_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG7_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG7_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG7_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG7_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG7_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG7_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG7_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG7_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG7_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG7_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG8_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG8_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG8_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG8_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG8_IE: u32 = 536870912;
pub const IOC_IOCFG8_IE_BITN: u32 = 29;
pub const IOC_IOCFG8_IE_M: u32 = 536870912;
pub const IOC_IOCFG8_IE_S: u32 = 29;
pub const IOC_IOCFG8_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG8_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG8_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG8_IOMODE_W: u32 = 3;
pub const IOC_IOCFG8_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG8_IOMODE_S: u32 = 24;
pub const IOC_IOCFG8_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG8_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG8_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG8_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG8_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG8_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG8_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG8_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG8_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG8_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG8_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG8_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG8_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG8_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG8_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG8_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG8_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG8_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG8_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG8_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG8_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG8_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG8_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG8_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG8_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG8_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG8_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG8_IOCURR_W: u32 = 2;
pub const IOC_IOCFG8_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG8_IOCURR_S: u32 = 10;
pub const IOC_IOCFG8_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG8_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG8_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG8_IOSTR_W: u32 = 2;
pub const IOC_IOCFG8_IOSTR_M: u32 = 768;
pub const IOC_IOCFG8_IOSTR_S: u32 = 8;
pub const IOC_IOCFG8_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG8_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG8_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG8_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG8_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG8_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG8_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG8_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG8_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG8_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG8_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG8_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG8_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG8_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG8_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG8_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG8_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG8_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG8_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG8_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG8_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG8_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG8_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG8_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG8_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG8_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG8_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG8_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG8_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG8_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG8_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG8_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG8_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG8_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG8_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG8_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG8_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG8_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG8_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG8_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG8_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG8_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG8_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG8_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG8_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG8_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG8_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG8_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG8_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG9_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG9_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG9_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG9_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG9_IE: u32 = 536870912;
pub const IOC_IOCFG9_IE_BITN: u32 = 29;
pub const IOC_IOCFG9_IE_M: u32 = 536870912;
pub const IOC_IOCFG9_IE_S: u32 = 29;
pub const IOC_IOCFG9_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG9_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG9_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG9_IOMODE_W: u32 = 3;
pub const IOC_IOCFG9_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG9_IOMODE_S: u32 = 24;
pub const IOC_IOCFG9_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG9_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG9_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG9_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG9_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG9_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG9_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG9_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG9_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG9_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG9_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG9_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG9_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG9_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG9_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG9_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG9_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG9_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG9_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG9_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG9_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG9_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG9_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG9_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG9_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG9_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG9_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG9_IOCURR_W: u32 = 2;
pub const IOC_IOCFG9_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG9_IOCURR_S: u32 = 10;
pub const IOC_IOCFG9_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG9_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG9_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG9_IOSTR_W: u32 = 2;
pub const IOC_IOCFG9_IOSTR_M: u32 = 768;
pub const IOC_IOCFG9_IOSTR_S: u32 = 8;
pub const IOC_IOCFG9_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG9_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG9_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG9_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG9_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG9_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG9_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG9_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG9_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG9_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG9_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG9_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG9_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG9_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG9_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG9_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG9_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG9_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG9_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG9_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG9_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG9_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG9_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG9_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG9_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG9_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG9_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG9_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG9_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG9_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG9_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG9_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG9_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG9_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG9_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG9_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG9_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG9_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG9_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG9_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG9_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG9_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG9_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG9_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG9_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG9_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG9_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG9_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG9_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG10_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG10_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG10_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG10_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG10_IE: u32 = 536870912;
pub const IOC_IOCFG10_IE_BITN: u32 = 29;
pub const IOC_IOCFG10_IE_M: u32 = 536870912;
pub const IOC_IOCFG10_IE_S: u32 = 29;
pub const IOC_IOCFG10_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG10_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG10_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG10_IOMODE_W: u32 = 3;
pub const IOC_IOCFG10_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG10_IOMODE_S: u32 = 24;
pub const IOC_IOCFG10_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG10_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG10_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG10_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG10_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG10_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG10_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG10_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG10_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG10_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG10_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG10_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG10_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG10_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG10_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG10_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG10_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG10_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG10_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG10_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG10_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG10_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG10_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG10_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG10_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG10_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG10_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG10_IOCURR_W: u32 = 2;
pub const IOC_IOCFG10_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG10_IOCURR_S: u32 = 10;
pub const IOC_IOCFG10_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG10_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG10_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG10_IOSTR_W: u32 = 2;
pub const IOC_IOCFG10_IOSTR_M: u32 = 768;
pub const IOC_IOCFG10_IOSTR_S: u32 = 8;
pub const IOC_IOCFG10_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG10_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG10_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG10_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG10_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG10_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG10_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG10_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG10_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG10_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG10_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG10_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG10_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG10_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG10_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG10_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG10_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG10_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG10_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG10_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG10_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG10_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG10_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG10_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG10_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG10_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG10_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG10_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG10_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG10_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG10_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG10_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG10_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG10_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG10_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG10_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG10_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG10_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG10_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG10_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG10_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG10_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG10_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG10_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG10_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG10_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG10_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG10_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG10_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG11_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG11_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG11_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG11_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG11_IE: u32 = 536870912;
pub const IOC_IOCFG11_IE_BITN: u32 = 29;
pub const IOC_IOCFG11_IE_M: u32 = 536870912;
pub const IOC_IOCFG11_IE_S: u32 = 29;
pub const IOC_IOCFG11_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG11_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG11_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG11_IOMODE_W: u32 = 3;
pub const IOC_IOCFG11_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG11_IOMODE_S: u32 = 24;
pub const IOC_IOCFG11_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG11_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG11_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG11_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG11_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG11_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG11_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG11_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG11_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG11_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG11_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG11_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG11_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG11_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG11_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG11_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG11_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG11_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG11_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG11_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG11_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG11_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG11_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG11_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG11_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG11_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG11_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG11_IOCURR_W: u32 = 2;
pub const IOC_IOCFG11_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG11_IOCURR_S: u32 = 10;
pub const IOC_IOCFG11_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG11_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG11_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG11_IOSTR_W: u32 = 2;
pub const IOC_IOCFG11_IOSTR_M: u32 = 768;
pub const IOC_IOCFG11_IOSTR_S: u32 = 8;
pub const IOC_IOCFG11_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG11_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG11_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG11_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG11_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG11_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG11_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG11_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG11_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG11_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG11_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG11_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG11_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG11_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG11_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG11_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG11_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG11_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG11_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG11_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG11_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG11_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG11_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG11_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG11_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG11_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG11_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG11_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG11_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG11_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG11_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG11_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG11_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG11_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG11_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG11_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG11_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG11_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG11_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG11_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG11_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG11_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG11_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG11_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG11_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG11_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG11_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG11_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG11_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG12_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG12_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG12_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG12_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG12_IE: u32 = 536870912;
pub const IOC_IOCFG12_IE_BITN: u32 = 29;
pub const IOC_IOCFG12_IE_M: u32 = 536870912;
pub const IOC_IOCFG12_IE_S: u32 = 29;
pub const IOC_IOCFG12_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG12_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG12_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG12_IOMODE_W: u32 = 3;
pub const IOC_IOCFG12_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG12_IOMODE_S: u32 = 24;
pub const IOC_IOCFG12_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG12_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG12_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG12_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG12_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG12_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG12_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG12_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG12_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG12_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG12_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG12_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG12_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG12_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG12_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG12_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG12_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG12_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG12_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG12_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG12_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG12_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG12_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG12_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG12_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG12_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG12_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG12_IOCURR_W: u32 = 2;
pub const IOC_IOCFG12_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG12_IOCURR_S: u32 = 10;
pub const IOC_IOCFG12_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG12_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG12_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG12_IOSTR_W: u32 = 2;
pub const IOC_IOCFG12_IOSTR_M: u32 = 768;
pub const IOC_IOCFG12_IOSTR_S: u32 = 8;
pub const IOC_IOCFG12_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG12_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG12_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG12_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG12_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG12_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG12_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG12_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG12_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG12_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG12_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG12_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG12_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG12_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG12_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG12_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG12_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG12_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG12_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG12_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG12_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG12_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG12_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG12_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG12_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG12_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG12_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG12_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG12_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG12_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG12_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG12_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG12_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG12_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG12_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG12_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG12_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG12_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG12_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG12_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG12_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG12_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG12_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG12_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG12_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG12_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG12_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG12_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG12_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG13_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG13_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG13_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG13_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG13_IE: u32 = 536870912;
pub const IOC_IOCFG13_IE_BITN: u32 = 29;
pub const IOC_IOCFG13_IE_M: u32 = 536870912;
pub const IOC_IOCFG13_IE_S: u32 = 29;
pub const IOC_IOCFG13_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG13_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG13_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG13_IOMODE_W: u32 = 3;
pub const IOC_IOCFG13_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG13_IOMODE_S: u32 = 24;
pub const IOC_IOCFG13_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG13_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG13_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG13_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG13_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG13_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG13_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG13_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG13_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG13_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG13_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG13_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG13_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG13_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG13_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG13_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG13_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG13_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG13_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG13_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG13_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG13_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG13_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG13_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG13_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG13_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG13_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG13_IOCURR_W: u32 = 2;
pub const IOC_IOCFG13_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG13_IOCURR_S: u32 = 10;
pub const IOC_IOCFG13_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG13_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG13_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG13_IOSTR_W: u32 = 2;
pub const IOC_IOCFG13_IOSTR_M: u32 = 768;
pub const IOC_IOCFG13_IOSTR_S: u32 = 8;
pub const IOC_IOCFG13_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG13_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG13_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG13_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG13_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG13_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG13_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG13_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG13_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG13_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG13_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG13_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG13_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG13_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG13_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG13_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG13_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG13_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG13_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG13_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG13_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG13_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG13_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG13_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG13_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG13_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG13_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG13_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG13_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG13_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG13_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG13_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG13_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG13_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG13_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG13_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG13_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG13_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG13_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG13_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG13_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG13_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG13_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG13_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG13_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG13_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG13_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG13_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG13_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG14_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG14_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG14_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG14_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG14_IE: u32 = 536870912;
pub const IOC_IOCFG14_IE_BITN: u32 = 29;
pub const IOC_IOCFG14_IE_M: u32 = 536870912;
pub const IOC_IOCFG14_IE_S: u32 = 29;
pub const IOC_IOCFG14_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG14_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG14_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG14_IOMODE_W: u32 = 3;
pub const IOC_IOCFG14_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG14_IOMODE_S: u32 = 24;
pub const IOC_IOCFG14_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG14_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG14_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG14_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG14_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG14_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG14_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG14_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG14_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG14_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG14_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG14_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG14_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG14_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG14_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG14_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG14_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG14_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG14_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG14_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG14_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG14_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG14_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG14_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG14_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG14_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG14_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG14_IOCURR_W: u32 = 2;
pub const IOC_IOCFG14_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG14_IOCURR_S: u32 = 10;
pub const IOC_IOCFG14_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG14_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG14_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG14_IOSTR_W: u32 = 2;
pub const IOC_IOCFG14_IOSTR_M: u32 = 768;
pub const IOC_IOCFG14_IOSTR_S: u32 = 8;
pub const IOC_IOCFG14_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG14_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG14_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG14_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG14_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG14_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG14_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG14_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG14_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG14_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG14_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG14_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG14_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG14_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG14_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG14_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG14_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG14_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG14_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG14_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG14_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG14_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG14_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG14_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG14_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG14_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG14_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG14_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG14_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG14_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG14_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG14_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG14_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG14_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG14_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG14_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG14_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG14_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG14_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG14_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG14_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG14_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG14_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG14_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG14_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG14_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG14_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG14_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG14_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG15_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG15_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG15_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG15_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG15_IE: u32 = 536870912;
pub const IOC_IOCFG15_IE_BITN: u32 = 29;
pub const IOC_IOCFG15_IE_M: u32 = 536870912;
pub const IOC_IOCFG15_IE_S: u32 = 29;
pub const IOC_IOCFG15_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG15_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG15_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG15_IOMODE_W: u32 = 3;
pub const IOC_IOCFG15_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG15_IOMODE_S: u32 = 24;
pub const IOC_IOCFG15_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG15_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG15_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG15_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG15_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG15_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG15_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG15_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG15_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG15_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG15_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG15_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG15_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG15_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG15_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG15_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG15_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG15_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG15_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG15_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG15_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG15_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG15_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG15_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG15_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG15_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG15_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG15_IOCURR_W: u32 = 2;
pub const IOC_IOCFG15_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG15_IOCURR_S: u32 = 10;
pub const IOC_IOCFG15_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG15_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG15_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG15_IOSTR_W: u32 = 2;
pub const IOC_IOCFG15_IOSTR_M: u32 = 768;
pub const IOC_IOCFG15_IOSTR_S: u32 = 8;
pub const IOC_IOCFG15_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG15_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG15_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG15_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG15_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG15_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG15_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG15_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG15_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG15_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG15_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG15_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG15_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG15_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG15_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG15_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG15_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG15_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG15_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG15_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG15_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG15_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG15_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG15_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG15_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG15_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG15_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG15_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG15_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG15_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG15_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG15_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG15_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG15_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG15_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG15_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG15_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG15_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG15_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG15_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG15_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG15_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG15_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG15_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG15_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG15_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG15_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG15_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG15_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG16_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG16_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG16_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG16_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG16_IE: u32 = 536870912;
pub const IOC_IOCFG16_IE_BITN: u32 = 29;
pub const IOC_IOCFG16_IE_M: u32 = 536870912;
pub const IOC_IOCFG16_IE_S: u32 = 29;
pub const IOC_IOCFG16_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG16_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG16_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG16_IOMODE_W: u32 = 3;
pub const IOC_IOCFG16_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG16_IOMODE_S: u32 = 24;
pub const IOC_IOCFG16_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG16_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG16_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG16_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG16_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG16_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG16_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG16_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG16_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG16_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG16_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG16_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG16_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG16_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG16_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG16_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG16_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG16_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG16_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG16_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG16_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG16_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG16_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG16_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG16_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG16_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG16_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG16_IOCURR_W: u32 = 2;
pub const IOC_IOCFG16_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG16_IOCURR_S: u32 = 10;
pub const IOC_IOCFG16_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG16_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG16_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG16_IOSTR_W: u32 = 2;
pub const IOC_IOCFG16_IOSTR_M: u32 = 768;
pub const IOC_IOCFG16_IOSTR_S: u32 = 8;
pub const IOC_IOCFG16_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG16_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG16_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG16_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG16_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG16_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG16_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG16_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG16_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG16_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG16_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG16_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG16_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG16_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG16_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG16_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG16_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG16_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG16_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG16_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG16_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG16_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG16_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG16_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG16_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG16_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG16_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG16_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG16_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG16_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG16_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG16_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG16_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG16_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG16_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG16_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG16_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG16_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG16_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG16_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG16_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG16_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG16_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG16_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG16_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG16_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG16_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG16_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG16_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG17_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG17_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG17_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG17_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG17_IE: u32 = 536870912;
pub const IOC_IOCFG17_IE_BITN: u32 = 29;
pub const IOC_IOCFG17_IE_M: u32 = 536870912;
pub const IOC_IOCFG17_IE_S: u32 = 29;
pub const IOC_IOCFG17_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG17_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG17_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG17_IOMODE_W: u32 = 3;
pub const IOC_IOCFG17_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG17_IOMODE_S: u32 = 24;
pub const IOC_IOCFG17_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG17_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG17_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG17_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG17_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG17_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG17_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG17_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG17_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG17_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG17_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG17_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG17_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG17_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG17_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG17_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG17_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG17_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG17_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG17_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG17_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG17_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG17_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG17_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG17_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG17_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG17_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG17_IOCURR_W: u32 = 2;
pub const IOC_IOCFG17_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG17_IOCURR_S: u32 = 10;
pub const IOC_IOCFG17_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG17_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG17_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG17_IOSTR_W: u32 = 2;
pub const IOC_IOCFG17_IOSTR_M: u32 = 768;
pub const IOC_IOCFG17_IOSTR_S: u32 = 8;
pub const IOC_IOCFG17_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG17_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG17_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG17_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG17_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG17_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG17_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG17_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG17_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG17_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG17_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG17_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG17_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG17_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG17_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG17_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG17_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG17_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG17_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG17_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG17_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG17_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG17_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG17_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG17_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG17_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG17_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG17_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG17_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG17_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG17_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG17_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG17_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG17_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG17_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG17_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG17_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG17_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG17_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG17_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG17_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG17_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG17_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG17_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG17_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG17_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG17_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG17_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG17_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG18_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG18_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG18_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG18_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG18_IE: u32 = 536870912;
pub const IOC_IOCFG18_IE_BITN: u32 = 29;
pub const IOC_IOCFG18_IE_M: u32 = 536870912;
pub const IOC_IOCFG18_IE_S: u32 = 29;
pub const IOC_IOCFG18_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG18_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG18_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG18_IOMODE_W: u32 = 3;
pub const IOC_IOCFG18_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG18_IOMODE_S: u32 = 24;
pub const IOC_IOCFG18_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG18_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG18_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG18_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG18_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG18_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG18_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG18_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG18_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG18_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG18_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG18_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG18_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG18_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG18_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG18_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG18_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG18_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG18_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG18_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG18_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG18_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG18_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG18_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG18_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG18_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG18_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG18_IOCURR_W: u32 = 2;
pub const IOC_IOCFG18_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG18_IOCURR_S: u32 = 10;
pub const IOC_IOCFG18_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG18_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG18_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG18_IOSTR_W: u32 = 2;
pub const IOC_IOCFG18_IOSTR_M: u32 = 768;
pub const IOC_IOCFG18_IOSTR_S: u32 = 8;
pub const IOC_IOCFG18_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG18_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG18_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG18_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG18_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG18_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG18_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG18_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG18_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG18_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG18_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG18_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG18_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG18_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG18_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG18_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG18_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG18_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG18_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG18_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG18_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG18_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG18_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG18_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG18_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG18_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG18_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG18_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG18_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG18_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG18_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG18_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG18_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG18_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG18_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG18_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG18_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG18_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG18_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG18_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG18_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG18_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG18_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG18_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG18_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG18_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG18_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG18_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG18_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG19_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG19_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG19_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG19_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG19_IE: u32 = 536870912;
pub const IOC_IOCFG19_IE_BITN: u32 = 29;
pub const IOC_IOCFG19_IE_M: u32 = 536870912;
pub const IOC_IOCFG19_IE_S: u32 = 29;
pub const IOC_IOCFG19_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG19_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG19_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG19_IOMODE_W: u32 = 3;
pub const IOC_IOCFG19_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG19_IOMODE_S: u32 = 24;
pub const IOC_IOCFG19_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG19_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG19_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG19_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG19_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG19_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG19_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG19_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG19_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG19_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG19_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG19_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG19_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG19_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG19_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG19_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG19_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG19_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG19_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG19_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG19_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG19_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG19_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG19_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG19_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG19_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG19_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG19_IOCURR_W: u32 = 2;
pub const IOC_IOCFG19_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG19_IOCURR_S: u32 = 10;
pub const IOC_IOCFG19_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG19_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG19_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG19_IOSTR_W: u32 = 2;
pub const IOC_IOCFG19_IOSTR_M: u32 = 768;
pub const IOC_IOCFG19_IOSTR_S: u32 = 8;
pub const IOC_IOCFG19_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG19_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG19_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG19_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG19_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG19_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG19_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG19_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG19_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG19_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG19_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG19_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG19_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG19_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG19_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG19_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG19_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG19_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG19_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG19_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG19_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG19_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG19_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG19_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG19_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG19_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG19_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG19_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG19_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG19_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG19_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG19_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG19_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG19_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG19_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG19_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG19_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG19_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG19_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG19_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG19_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG19_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG19_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG19_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG19_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG19_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG19_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG19_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG19_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG20_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG20_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG20_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG20_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG20_IE: u32 = 536870912;
pub const IOC_IOCFG20_IE_BITN: u32 = 29;
pub const IOC_IOCFG20_IE_M: u32 = 536870912;
pub const IOC_IOCFG20_IE_S: u32 = 29;
pub const IOC_IOCFG20_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG20_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG20_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG20_IOMODE_W: u32 = 3;
pub const IOC_IOCFG20_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG20_IOMODE_S: u32 = 24;
pub const IOC_IOCFG20_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG20_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG20_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG20_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG20_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG20_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG20_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG20_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG20_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG20_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG20_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG20_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG20_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG20_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG20_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG20_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG20_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG20_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG20_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG20_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG20_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG20_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG20_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG20_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG20_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG20_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG20_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG20_IOCURR_W: u32 = 2;
pub const IOC_IOCFG20_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG20_IOCURR_S: u32 = 10;
pub const IOC_IOCFG20_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG20_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG20_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG20_IOSTR_W: u32 = 2;
pub const IOC_IOCFG20_IOSTR_M: u32 = 768;
pub const IOC_IOCFG20_IOSTR_S: u32 = 8;
pub const IOC_IOCFG20_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG20_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG20_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG20_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG20_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG20_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG20_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG20_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG20_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG20_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG20_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG20_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG20_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG20_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG20_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG20_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG20_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG20_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG20_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG20_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG20_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG20_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG20_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG20_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG20_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG20_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG20_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG20_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG20_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG20_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG20_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG20_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG20_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG20_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG20_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG20_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG20_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG20_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG20_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG20_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG20_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG20_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG20_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG20_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG20_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG20_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG20_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG20_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG20_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG21_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG21_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG21_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG21_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG21_IE: u32 = 536870912;
pub const IOC_IOCFG21_IE_BITN: u32 = 29;
pub const IOC_IOCFG21_IE_M: u32 = 536870912;
pub const IOC_IOCFG21_IE_S: u32 = 29;
pub const IOC_IOCFG21_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG21_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG21_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG21_IOMODE_W: u32 = 3;
pub const IOC_IOCFG21_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG21_IOMODE_S: u32 = 24;
pub const IOC_IOCFG21_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG21_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG21_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG21_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG21_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG21_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG21_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG21_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG21_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG21_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG21_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG21_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG21_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG21_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG21_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG21_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG21_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG21_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG21_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG21_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG21_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG21_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG21_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG21_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG21_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG21_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG21_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG21_IOCURR_W: u32 = 2;
pub const IOC_IOCFG21_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG21_IOCURR_S: u32 = 10;
pub const IOC_IOCFG21_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG21_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG21_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG21_IOSTR_W: u32 = 2;
pub const IOC_IOCFG21_IOSTR_M: u32 = 768;
pub const IOC_IOCFG21_IOSTR_S: u32 = 8;
pub const IOC_IOCFG21_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG21_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG21_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG21_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG21_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG21_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG21_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG21_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG21_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG21_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG21_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG21_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG21_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG21_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG21_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG21_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG21_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG21_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG21_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG21_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG21_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG21_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG21_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG21_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG21_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG21_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG21_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG21_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG21_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG21_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG21_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG21_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG21_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG21_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG21_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG21_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG21_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG21_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG21_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG21_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG21_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG21_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG21_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG21_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG21_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG21_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG21_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG21_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG21_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG22_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG22_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG22_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG22_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG22_IE: u32 = 536870912;
pub const IOC_IOCFG22_IE_BITN: u32 = 29;
pub const IOC_IOCFG22_IE_M: u32 = 536870912;
pub const IOC_IOCFG22_IE_S: u32 = 29;
pub const IOC_IOCFG22_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG22_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG22_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG22_IOMODE_W: u32 = 3;
pub const IOC_IOCFG22_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG22_IOMODE_S: u32 = 24;
pub const IOC_IOCFG22_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG22_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG22_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG22_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG22_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG22_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG22_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG22_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG22_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG22_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG22_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG22_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG22_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG22_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG22_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG22_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG22_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG22_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG22_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG22_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG22_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG22_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG22_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG22_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG22_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG22_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG22_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG22_IOCURR_W: u32 = 2;
pub const IOC_IOCFG22_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG22_IOCURR_S: u32 = 10;
pub const IOC_IOCFG22_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG22_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG22_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG22_IOSTR_W: u32 = 2;
pub const IOC_IOCFG22_IOSTR_M: u32 = 768;
pub const IOC_IOCFG22_IOSTR_S: u32 = 8;
pub const IOC_IOCFG22_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG22_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG22_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG22_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG22_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG22_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG22_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG22_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG22_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG22_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG22_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG22_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG22_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG22_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG22_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG22_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG22_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG22_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG22_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG22_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG22_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG22_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG22_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG22_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG22_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG22_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG22_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG22_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG22_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG22_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG22_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG22_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG22_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG22_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG22_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG22_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG22_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG22_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG22_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG22_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG22_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG22_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG22_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG22_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG22_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG22_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG22_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG22_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG22_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG23_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG23_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG23_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG23_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG23_IE: u32 = 536870912;
pub const IOC_IOCFG23_IE_BITN: u32 = 29;
pub const IOC_IOCFG23_IE_M: u32 = 536870912;
pub const IOC_IOCFG23_IE_S: u32 = 29;
pub const IOC_IOCFG23_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG23_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG23_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG23_IOMODE_W: u32 = 3;
pub const IOC_IOCFG23_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG23_IOMODE_S: u32 = 24;
pub const IOC_IOCFG23_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG23_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG23_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG23_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG23_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG23_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG23_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG23_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG23_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG23_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG23_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG23_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG23_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG23_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG23_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG23_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG23_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG23_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG23_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG23_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG23_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG23_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG23_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG23_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG23_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG23_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG23_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG23_IOCURR_W: u32 = 2;
pub const IOC_IOCFG23_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG23_IOCURR_S: u32 = 10;
pub const IOC_IOCFG23_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG23_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG23_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG23_IOSTR_W: u32 = 2;
pub const IOC_IOCFG23_IOSTR_M: u32 = 768;
pub const IOC_IOCFG23_IOSTR_S: u32 = 8;
pub const IOC_IOCFG23_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG23_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG23_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG23_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG23_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG23_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG23_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG23_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG23_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG23_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG23_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG23_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG23_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG23_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG23_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG23_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG23_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG23_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG23_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG23_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG23_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG23_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG23_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG23_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG23_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG23_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG23_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG23_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG23_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG23_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG23_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG23_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG23_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG23_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG23_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG23_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG23_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG23_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG23_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG23_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG23_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG23_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG23_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG23_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG23_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG23_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG23_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG23_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG23_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG24_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG24_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG24_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG24_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG24_IE: u32 = 536870912;
pub const IOC_IOCFG24_IE_BITN: u32 = 29;
pub const IOC_IOCFG24_IE_M: u32 = 536870912;
pub const IOC_IOCFG24_IE_S: u32 = 29;
pub const IOC_IOCFG24_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG24_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG24_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG24_IOMODE_W: u32 = 3;
pub const IOC_IOCFG24_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG24_IOMODE_S: u32 = 24;
pub const IOC_IOCFG24_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG24_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG24_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG24_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG24_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG24_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG24_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG24_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG24_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG24_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG24_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG24_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG24_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG24_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG24_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG24_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG24_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG24_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG24_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG24_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG24_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG24_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG24_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG24_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG24_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG24_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG24_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG24_IOCURR_W: u32 = 2;
pub const IOC_IOCFG24_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG24_IOCURR_S: u32 = 10;
pub const IOC_IOCFG24_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG24_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG24_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG24_IOSTR_W: u32 = 2;
pub const IOC_IOCFG24_IOSTR_M: u32 = 768;
pub const IOC_IOCFG24_IOSTR_S: u32 = 8;
pub const IOC_IOCFG24_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG24_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG24_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG24_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG24_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG24_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG24_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG24_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG24_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG24_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG24_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG24_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG24_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG24_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG24_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG24_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG24_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG24_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG24_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG24_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG24_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG24_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG24_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG24_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG24_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG24_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG24_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG24_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG24_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG24_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG24_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG24_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG24_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG24_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG24_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG24_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG24_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG24_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG24_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG24_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG24_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG24_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG24_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG24_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG24_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG24_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG24_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG24_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG24_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG25_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG25_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG25_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG25_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG25_IE: u32 = 536870912;
pub const IOC_IOCFG25_IE_BITN: u32 = 29;
pub const IOC_IOCFG25_IE_M: u32 = 536870912;
pub const IOC_IOCFG25_IE_S: u32 = 29;
pub const IOC_IOCFG25_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG25_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG25_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG25_IOMODE_W: u32 = 3;
pub const IOC_IOCFG25_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG25_IOMODE_S: u32 = 24;
pub const IOC_IOCFG25_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG25_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG25_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG25_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG25_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG25_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG25_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG25_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG25_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG25_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG25_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG25_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG25_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG25_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG25_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG25_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG25_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG25_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG25_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG25_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG25_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG25_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG25_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG25_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG25_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG25_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG25_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG25_IOCURR_W: u32 = 2;
pub const IOC_IOCFG25_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG25_IOCURR_S: u32 = 10;
pub const IOC_IOCFG25_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG25_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG25_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG25_IOSTR_W: u32 = 2;
pub const IOC_IOCFG25_IOSTR_M: u32 = 768;
pub const IOC_IOCFG25_IOSTR_S: u32 = 8;
pub const IOC_IOCFG25_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG25_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG25_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG25_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG25_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG25_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG25_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG25_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG25_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG25_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG25_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG25_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG25_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG25_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG25_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG25_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG25_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG25_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG25_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG25_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG25_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG25_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG25_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG25_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG25_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG25_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG25_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG25_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG25_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG25_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG25_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG25_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG25_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG25_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG25_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG25_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG25_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG25_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG25_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG25_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG25_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG25_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG25_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG25_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG25_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG25_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG25_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG25_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG25_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG26_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG26_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG26_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG26_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG26_IE: u32 = 536870912;
pub const IOC_IOCFG26_IE_BITN: u32 = 29;
pub const IOC_IOCFG26_IE_M: u32 = 536870912;
pub const IOC_IOCFG26_IE_S: u32 = 29;
pub const IOC_IOCFG26_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG26_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG26_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG26_IOMODE_W: u32 = 3;
pub const IOC_IOCFG26_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG26_IOMODE_S: u32 = 24;
pub const IOC_IOCFG26_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG26_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG26_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG26_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG26_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG26_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG26_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG26_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG26_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG26_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG26_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG26_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG26_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG26_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG26_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG26_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG26_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG26_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG26_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG26_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG26_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG26_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG26_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG26_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG26_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG26_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG26_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG26_IOCURR_W: u32 = 2;
pub const IOC_IOCFG26_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG26_IOCURR_S: u32 = 10;
pub const IOC_IOCFG26_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG26_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG26_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG26_IOSTR_W: u32 = 2;
pub const IOC_IOCFG26_IOSTR_M: u32 = 768;
pub const IOC_IOCFG26_IOSTR_S: u32 = 8;
pub const IOC_IOCFG26_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG26_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG26_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG26_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG26_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG26_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG26_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG26_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG26_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG26_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG26_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG26_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG26_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG26_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG26_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG26_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG26_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG26_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG26_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG26_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG26_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG26_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG26_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG26_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG26_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG26_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG26_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG26_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG26_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG26_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG26_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG26_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG26_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG26_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG26_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG26_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG26_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG26_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG26_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG26_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG26_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG26_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG26_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG26_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG26_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG26_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG26_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG26_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG26_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG27_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG27_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG27_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG27_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG27_IE: u32 = 536870912;
pub const IOC_IOCFG27_IE_BITN: u32 = 29;
pub const IOC_IOCFG27_IE_M: u32 = 536870912;
pub const IOC_IOCFG27_IE_S: u32 = 29;
pub const IOC_IOCFG27_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG27_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG27_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG27_IOMODE_W: u32 = 3;
pub const IOC_IOCFG27_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG27_IOMODE_S: u32 = 24;
pub const IOC_IOCFG27_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG27_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG27_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG27_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG27_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG27_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG27_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG27_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG27_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG27_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG27_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG27_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG27_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG27_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG27_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG27_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG27_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG27_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG27_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG27_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG27_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG27_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG27_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG27_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG27_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG27_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG27_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG27_IOCURR_W: u32 = 2;
pub const IOC_IOCFG27_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG27_IOCURR_S: u32 = 10;
pub const IOC_IOCFG27_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG27_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG27_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG27_IOSTR_W: u32 = 2;
pub const IOC_IOCFG27_IOSTR_M: u32 = 768;
pub const IOC_IOCFG27_IOSTR_S: u32 = 8;
pub const IOC_IOCFG27_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG27_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG27_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG27_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG27_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG27_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG27_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG27_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG27_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG27_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG27_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG27_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG27_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG27_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG27_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG27_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG27_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG27_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG27_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG27_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG27_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG27_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG27_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG27_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG27_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG27_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG27_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG27_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG27_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG27_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG27_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG27_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG27_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG27_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG27_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG27_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG27_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG27_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG27_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG27_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG27_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG27_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG27_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG27_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG27_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG27_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG27_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG27_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG27_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG28_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG28_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG28_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG28_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG28_IE: u32 = 536870912;
pub const IOC_IOCFG28_IE_BITN: u32 = 29;
pub const IOC_IOCFG28_IE_M: u32 = 536870912;
pub const IOC_IOCFG28_IE_S: u32 = 29;
pub const IOC_IOCFG28_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG28_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG28_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG28_IOMODE_W: u32 = 3;
pub const IOC_IOCFG28_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG28_IOMODE_S: u32 = 24;
pub const IOC_IOCFG28_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG28_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG28_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG28_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG28_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG28_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG28_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG28_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG28_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG28_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG28_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG28_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG28_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG28_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG28_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG28_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG28_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG28_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG28_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG28_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG28_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG28_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG28_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG28_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG28_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG28_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG28_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG28_IOCURR_W: u32 = 2;
pub const IOC_IOCFG28_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG28_IOCURR_S: u32 = 10;
pub const IOC_IOCFG28_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG28_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG28_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG28_IOSTR_W: u32 = 2;
pub const IOC_IOCFG28_IOSTR_M: u32 = 768;
pub const IOC_IOCFG28_IOSTR_S: u32 = 8;
pub const IOC_IOCFG28_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG28_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG28_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG28_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG28_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG28_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG28_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG28_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG28_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG28_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG28_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG28_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG28_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG28_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG28_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG28_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG28_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG28_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG28_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG28_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG28_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG28_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG28_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG28_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG28_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG28_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG28_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG28_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG28_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG28_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG28_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG28_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG28_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG28_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG28_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG28_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG28_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG28_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG28_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG28_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG28_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG28_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG28_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG28_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG28_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG28_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG28_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG28_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG28_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG29_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG29_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG29_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG29_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG29_IE: u32 = 536870912;
pub const IOC_IOCFG29_IE_BITN: u32 = 29;
pub const IOC_IOCFG29_IE_M: u32 = 536870912;
pub const IOC_IOCFG29_IE_S: u32 = 29;
pub const IOC_IOCFG29_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG29_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG29_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG29_IOMODE_W: u32 = 3;
pub const IOC_IOCFG29_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG29_IOMODE_S: u32 = 24;
pub const IOC_IOCFG29_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG29_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG29_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG29_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG29_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG29_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG29_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG29_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG29_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG29_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG29_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG29_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG29_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG29_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG29_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG29_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG29_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG29_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG29_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG29_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG29_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG29_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG29_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG29_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG29_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG29_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG29_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG29_IOCURR_W: u32 = 2;
pub const IOC_IOCFG29_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG29_IOCURR_S: u32 = 10;
pub const IOC_IOCFG29_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG29_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG29_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG29_IOSTR_W: u32 = 2;
pub const IOC_IOCFG29_IOSTR_M: u32 = 768;
pub const IOC_IOCFG29_IOSTR_S: u32 = 8;
pub const IOC_IOCFG29_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG29_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG29_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG29_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG29_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG29_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG29_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG29_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG29_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG29_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG29_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG29_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG29_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG29_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG29_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG29_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG29_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG29_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG29_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG29_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG29_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG29_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG29_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG29_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG29_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG29_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG29_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG29_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG29_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG29_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG29_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG29_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG29_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG29_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG29_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG29_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG29_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG29_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG29_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG29_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG29_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG29_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG29_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG29_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG29_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG29_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG29_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG29_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG29_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG30_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG30_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG30_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG30_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG30_IE: u32 = 536870912;
pub const IOC_IOCFG30_IE_BITN: u32 = 29;
pub const IOC_IOCFG30_IE_M: u32 = 536870912;
pub const IOC_IOCFG30_IE_S: u32 = 29;
pub const IOC_IOCFG30_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG30_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG30_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG30_IOMODE_W: u32 = 3;
pub const IOC_IOCFG30_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG30_IOMODE_S: u32 = 24;
pub const IOC_IOCFG30_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG30_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG30_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG30_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG30_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG30_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG30_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG30_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG30_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG30_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG30_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG30_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG30_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG30_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG30_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG30_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG30_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG30_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG30_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG30_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG30_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG30_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG30_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG30_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG30_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG30_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG30_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG30_IOCURR_W: u32 = 2;
pub const IOC_IOCFG30_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG30_IOCURR_S: u32 = 10;
pub const IOC_IOCFG30_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG30_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG30_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG30_IOSTR_W: u32 = 2;
pub const IOC_IOCFG30_IOSTR_M: u32 = 768;
pub const IOC_IOCFG30_IOSTR_S: u32 = 8;
pub const IOC_IOCFG30_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG30_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG30_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG30_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG30_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG30_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG30_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG30_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG30_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG30_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG30_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG30_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG30_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG30_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG30_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG30_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG30_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG30_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG30_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG30_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG30_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG30_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG30_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG30_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG30_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG30_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG30_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG30_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG30_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG30_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG30_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG30_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG30_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG30_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG30_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG30_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG30_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG30_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG30_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG30_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG30_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG30_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG30_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG30_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG30_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG30_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG30_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG30_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG30_PORT_ID_GPIO: u32 = 0;
pub const IOC_IOCFG31_HYST_EN: u32 = 1073741824;
pub const IOC_IOCFG31_HYST_EN_BITN: u32 = 30;
pub const IOC_IOCFG31_HYST_EN_M: u32 = 1073741824;
pub const IOC_IOCFG31_HYST_EN_S: u32 = 30;
pub const IOC_IOCFG31_IE: u32 = 536870912;
pub const IOC_IOCFG31_IE_BITN: u32 = 29;
pub const IOC_IOCFG31_IE_M: u32 = 536870912;
pub const IOC_IOCFG31_IE_S: u32 = 29;
pub const IOC_IOCFG31_WU_CFG_W: u32 = 2;
pub const IOC_IOCFG31_WU_CFG_M: u32 = 402653184;
pub const IOC_IOCFG31_WU_CFG_S: u32 = 27;
pub const IOC_IOCFG31_IOMODE_W: u32 = 3;
pub const IOC_IOCFG31_IOMODE_M: u32 = 117440512;
pub const IOC_IOCFG31_IOMODE_S: u32 = 24;
pub const IOC_IOCFG31_IOMODE_OPENSRC_INV: u32 = 117440512;
pub const IOC_IOCFG31_IOMODE_OPENSRC: u32 = 100663296;
pub const IOC_IOCFG31_IOMODE_OPENDR_INV: u32 = 83886080;
pub const IOC_IOCFG31_IOMODE_OPENDR: u32 = 67108864;
pub const IOC_IOCFG31_IOMODE_INV: u32 = 16777216;
pub const IOC_IOCFG31_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOCFG31_EDGE_IRQ_EN: u32 = 262144;
pub const IOC_IOCFG31_EDGE_IRQ_EN_BITN: u32 = 18;
pub const IOC_IOCFG31_EDGE_IRQ_EN_M: u32 = 262144;
pub const IOC_IOCFG31_EDGE_IRQ_EN_S: u32 = 18;
pub const IOC_IOCFG31_EDGE_DET_W: u32 = 2;
pub const IOC_IOCFG31_EDGE_DET_M: u32 = 196608;
pub const IOC_IOCFG31_EDGE_DET_S: u32 = 16;
pub const IOC_IOCFG31_EDGE_DET_BOTH: u32 = 196608;
pub const IOC_IOCFG31_EDGE_DET_POS: u32 = 131072;
pub const IOC_IOCFG31_EDGE_DET_NEG: u32 = 65536;
pub const IOC_IOCFG31_EDGE_DET_NONE: u32 = 0;
pub const IOC_IOCFG31_PULL_CTL_W: u32 = 2;
pub const IOC_IOCFG31_PULL_CTL_M: u32 = 24576;
pub const IOC_IOCFG31_PULL_CTL_S: u32 = 13;
pub const IOC_IOCFG31_PULL_CTL_DIS: u32 = 24576;
pub const IOC_IOCFG31_PULL_CTL_UP: u32 = 16384;
pub const IOC_IOCFG31_PULL_CTL_DWN: u32 = 8192;
pub const IOC_IOCFG31_SLEW_RED: u32 = 4096;
pub const IOC_IOCFG31_SLEW_RED_BITN: u32 = 12;
pub const IOC_IOCFG31_SLEW_RED_M: u32 = 4096;
pub const IOC_IOCFG31_SLEW_RED_S: u32 = 12;
pub const IOC_IOCFG31_IOCURR_W: u32 = 2;
pub const IOC_IOCFG31_IOCURR_M: u32 = 3072;
pub const IOC_IOCFG31_IOCURR_S: u32 = 10;
pub const IOC_IOCFG31_IOCURR_4_8MA: u32 = 2048;
pub const IOC_IOCFG31_IOCURR_4MA: u32 = 1024;
pub const IOC_IOCFG31_IOCURR_2MA: u32 = 0;
pub const IOC_IOCFG31_IOSTR_W: u32 = 2;
pub const IOC_IOCFG31_IOSTR_M: u32 = 768;
pub const IOC_IOCFG31_IOSTR_S: u32 = 8;
pub const IOC_IOCFG31_IOSTR_MAX: u32 = 768;
pub const IOC_IOCFG31_IOSTR_MED: u32 = 512;
pub const IOC_IOCFG31_IOSTR_MIN: u32 = 256;
pub const IOC_IOCFG31_IOSTR_AUTO: u32 = 0;
pub const IOC_IOCFG31_PORT_ID_W: u32 = 6;
pub const IOC_IOCFG31_PORT_ID_M: u32 = 63;
pub const IOC_IOCFG31_PORT_ID_S: u32 = 0;
pub const IOC_IOCFG31_PORT_ID_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_IOCFG31_PORT_ID_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_IOCFG31_PORT_ID_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_IOCFG31_PORT_ID_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_IOCFG31_PORT_ID_RFC_GPI1: u32 = 52;
pub const IOC_IOCFG31_PORT_ID_RFC_GPI0: u32 = 51;
pub const IOC_IOCFG31_PORT_ID_RFC_GPO3: u32 = 50;
pub const IOC_IOCFG31_PORT_ID_RFC_GPO2: u32 = 49;
pub const IOC_IOCFG31_PORT_ID_RFC_GPO1: u32 = 48;
pub const IOC_IOCFG31_PORT_ID_RFC_GPO0: u32 = 47;
pub const IOC_IOCFG31_PORT_ID_RFC_TRC: u32 = 46;
pub const IOC_IOCFG31_PORT_ID_I2S_MCLK: u32 = 41;
pub const IOC_IOCFG31_PORT_ID_I2S_BCLK: u32 = 40;
pub const IOC_IOCFG31_PORT_ID_I2S_WCLK: u32 = 39;
pub const IOC_IOCFG31_PORT_ID_I2S_AD1: u32 = 38;
pub const IOC_IOCFG31_PORT_ID_I2S_AD0: u32 = 37;
pub const IOC_IOCFG31_PORT_ID_SSI1_CLK: u32 = 36;
pub const IOC_IOCFG31_PORT_ID_SSI1_FSS: u32 = 35;
pub const IOC_IOCFG31_PORT_ID_SSI1_TX: u32 = 34;
pub const IOC_IOCFG31_PORT_ID_SSI1_RX: u32 = 33;
pub const IOC_IOCFG31_PORT_ID_CPU_SWV: u32 = 32;
pub const IOC_IOCFG31_PORT_ID_PORT_EVENT7: u32 = 30;
pub const IOC_IOCFG31_PORT_ID_PORT_EVENT6: u32 = 29;
pub const IOC_IOCFG31_PORT_ID_PORT_EVENT5: u32 = 28;
pub const IOC_IOCFG31_PORT_ID_PORT_EVENT4: u32 = 27;
pub const IOC_IOCFG31_PORT_ID_PORT_EVENT3: u32 = 26;
pub const IOC_IOCFG31_PORT_ID_PORT_EVENT2: u32 = 25;
pub const IOC_IOCFG31_PORT_ID_PORT_EVENT1: u32 = 24;
pub const IOC_IOCFG31_PORT_ID_PORT_EVENT0: u32 = 23;
pub const IOC_IOCFG31_PORT_ID_UART0_RTS: u32 = 18;
pub const IOC_IOCFG31_PORT_ID_UART0_CTS: u32 = 17;
pub const IOC_IOCFG31_PORT_ID_UART0_TX: u32 = 16;
pub const IOC_IOCFG31_PORT_ID_UART0_RX: u32 = 15;
pub const IOC_IOCFG31_PORT_ID_I2C_MSSCL: u32 = 14;
pub const IOC_IOCFG31_PORT_ID_I2C_MSSDA: u32 = 13;
pub const IOC_IOCFG31_PORT_ID_SSI0_CLK: u32 = 12;
pub const IOC_IOCFG31_PORT_ID_SSI0_FSS: u32 = 11;
pub const IOC_IOCFG31_PORT_ID_SSI0_TX: u32 = 10;
pub const IOC_IOCFG31_PORT_ID_SSI0_RX: u32 = 9;
pub const IOC_IOCFG31_PORT_ID_AUX_IO: u32 = 8;
pub const IOC_IOCFG31_PORT_ID_AON_CLK32K: u32 = 7;
pub const IOC_IOCFG31_PORT_ID_GPIO: u32 = 0;
pub const NUM_IO_MAX: u32 = 32;
pub const IOID_0: u32 = 0;
pub const IOID_1: u32 = 1;
pub const IOID_2: u32 = 2;
pub const IOID_3: u32 = 3;
pub const IOID_4: u32 = 4;
pub const IOID_5: u32 = 5;
pub const IOID_6: u32 = 6;
pub const IOID_7: u32 = 7;
pub const IOID_8: u32 = 8;
pub const IOID_9: u32 = 9;
pub const IOID_10: u32 = 10;
pub const IOID_11: u32 = 11;
pub const IOID_12: u32 = 12;
pub const IOID_13: u32 = 13;
pub const IOID_14: u32 = 14;
pub const IOID_15: u32 = 15;
pub const IOID_16: u32 = 16;
pub const IOID_17: u32 = 17;
pub const IOID_18: u32 = 18;
pub const IOID_19: u32 = 19;
pub const IOID_20: u32 = 20;
pub const IOID_21: u32 = 21;
pub const IOID_22: u32 = 22;
pub const IOID_23: u32 = 23;
pub const IOID_24: u32 = 24;
pub const IOID_25: u32 = 25;
pub const IOID_26: u32 = 26;
pub const IOID_27: u32 = 27;
pub const IOID_28: u32 = 28;
pub const IOID_29: u32 = 29;
pub const IOID_30: u32 = 30;
pub const IOID_31: u32 = 31;
pub const IOID_UNUSED: u32 = 4294967295;
pub const IOC_IOID_MASK: u32 = 255;
pub const NUM_IO_PORTS: u32 = 56;
pub const IOC_PORT_GPIO: u32 = 0;
pub const IOC_PORT_AON_CLK32K: u32 = 7;
pub const IOC_PORT_AUX_IO: u32 = 8;
pub const IOC_PORT_MCU_SSI0_RX: u32 = 9;
pub const IOC_PORT_MCU_SSI0_TX: u32 = 10;
pub const IOC_PORT_MCU_SSI0_FSS: u32 = 11;
pub const IOC_PORT_MCU_SSI0_CLK: u32 = 12;
pub const IOC_PORT_MCU_I2C_MSSDA: u32 = 13;
pub const IOC_PORT_MCU_I2C_MSSCL: u32 = 14;
pub const IOC_PORT_MCU_UART0_RX: u32 = 15;
pub const IOC_PORT_MCU_UART0_TX: u32 = 16;
pub const IOC_PORT_MCU_UART0_CTS: u32 = 17;
pub const IOC_PORT_MCU_UART0_RTS: u32 = 18;
pub const IOC_PORT_MCU_PORT_EVENT0: u32 = 23;
pub const IOC_PORT_MCU_PORT_EVENT1: u32 = 24;
pub const IOC_PORT_MCU_PORT_EVENT2: u32 = 25;
pub const IOC_PORT_MCU_PORT_EVENT3: u32 = 26;
pub const IOC_PORT_MCU_PORT_EVENT4: u32 = 27;
pub const IOC_PORT_MCU_PORT_EVENT5: u32 = 28;
pub const IOC_PORT_MCU_PORT_EVENT6: u32 = 29;
pub const IOC_PORT_MCU_PORT_EVENT7: u32 = 30;
pub const IOC_PORT_MCU_SWV: u32 = 32;
pub const IOC_PORT_MCU_SSI1_RX: u32 = 33;
pub const IOC_PORT_MCU_SSI1_TX: u32 = 34;
pub const IOC_PORT_MCU_SSI1_FSS: u32 = 35;
pub const IOC_PORT_MCU_SSI1_CLK: u32 = 36;
pub const IOC_PORT_MCU_I2S_AD0: u32 = 37;
pub const IOC_PORT_MCU_I2S_AD1: u32 = 38;
pub const IOC_PORT_MCU_I2S_WCLK: u32 = 39;
pub const IOC_PORT_MCU_I2S_BCLK: u32 = 40;
pub const IOC_PORT_MCU_I2S_MCLK: u32 = 41;
pub const IOC_PORT_RFC_TRC: u32 = 46;
pub const IOC_PORT_RFC_GPO0: u32 = 47;
pub const IOC_PORT_RFC_GPO1: u32 = 48;
pub const IOC_PORT_RFC_GPO2: u32 = 49;
pub const IOC_PORT_RFC_GPO3: u32 = 50;
pub const IOC_PORT_RFC_GPI0: u32 = 51;
pub const IOC_PORT_RFC_GPI1: u32 = 52;
pub const IOC_PORT_RFC_SMI_DL_OUT: u32 = 53;
pub const IOC_PORT_RFC_SMI_DL_IN: u32 = 54;
pub const IOC_PORT_RFC_SMI_CL_OUT: u32 = 55;
pub const IOC_PORT_RFC_SMI_CL_IN: u32 = 56;
pub const IOC_SLEW_ENABLE: u32 = 4096;
pub const IOC_SLEW_DISABLE: u32 = 0;
pub const IOC_INPUT_ENABLE: u32 = 536870912;
pub const IOC_INPUT_DISABLE: u32 = 0;
pub const IOC_HYST_ENABLE: u32 = 1073741824;
pub const IOC_HYST_DISABLE: u32 = 0;
pub const IOC_NO_WAKE_UP: u32 = 0;
pub const IOC_WAKE_ON_LOW: u32 = 268435456;
pub const IOC_WAKE_ON_HIGH: u32 = 402653184;
pub const IOC_IOMODE_NORMAL: u32 = 0;
pub const IOC_IOMODE_INV: u32 = 16777216;
pub const IOC_IOMODE_OPEN_DRAIN_NORMAL: u32 = 67108864;
pub const IOC_IOMODE_OPEN_DRAIN_INV: u32 = 83886080;
pub const IOC_IOMODE_OPEN_SRC_NORMAL: u32 = 100663296;
pub const IOC_IOMODE_OPEN_SRC_INV: u32 = 117440512;
pub const IOC_NO_EDGE: u32 = 0;
pub const IOC_FALLING_EDGE: u32 = 65536;
pub const IOC_RISING_EDGE: u32 = 131072;
pub const IOC_BOTH_EDGES: u32 = 196608;
pub const IOC_INT_ENABLE: u32 = 262144;
pub const IOC_INT_DISABLE: u32 = 0;
pub const IOC_INT_M: u32 = 458752;
pub const IOC_NO_IOPULL: u32 = 24576;
pub const IOC_IOPULL_UP: u32 = 16384;
pub const IOC_IOPULL_DOWN: u32 = 8192;
pub const IOC_IOPULL_M: u32 = 24576;
pub const IOC_CURRENT_2MA: u32 = 0;
pub const IOC_CURRENT_4MA: u32 = 1024;
pub const IOC_CURRENT_8MA: u32 = 2048;
pub const IOC_STRENGTH_AUTO: u32 = 0;
pub const IOC_STRENGTH_MAX: u32 = 768;
pub const IOC_STRENGTH_MED: u32 = 512;
pub const IOC_STRENGTH_MIN: u32 = 256;
pub const IOC_STD_INPUT: u32 = 536895488;
pub const IOC_STD_OUTPUT: u32 = 24576;
pub const DDI_0_OSC_O_CTL0: u32 = 0;
pub const DDI_0_OSC_O_CTL1: u32 = 4;
pub const DDI_0_OSC_O_RADCEXTCFG: u32 = 8;
pub const DDI_0_OSC_O_AMPCOMPCTL: u32 = 12;
pub const DDI_0_OSC_O_AMPCOMPTH1: u32 = 16;
pub const DDI_0_OSC_O_AMPCOMPTH2: u32 = 20;
pub const DDI_0_OSC_O_ANABYPASSVAL1: u32 = 24;
pub const DDI_0_OSC_O_ANABYPASSVAL2: u32 = 28;
pub const DDI_0_OSC_O_ATESTCTL: u32 = 32;
pub const DDI_0_OSC_O_ADCDOUBLERNANOAMPCTL: u32 = 36;
pub const DDI_0_OSC_O_XOSCHFCTL: u32 = 40;
pub const DDI_0_OSC_O_LFOSCCTL: u32 = 44;
pub const DDI_0_OSC_O_RCOSCHFCTL: u32 = 48;
pub const DDI_0_OSC_O_STAT0: u32 = 52;
pub const DDI_0_OSC_O_STAT1: u32 = 56;
pub const DDI_0_OSC_O_STAT2: u32 = 60;
pub const DDI_0_OSC_CTL0_XTAL_IS_24M: u32 = 2147483648;
pub const DDI_0_OSC_CTL0_XTAL_IS_24M_M: u32 = 2147483648;
pub const DDI_0_OSC_CTL0_XTAL_IS_24M_S: u32 = 31;
pub const DDI_0_OSC_CTL0_XTAL_IS_24M_24M: u32 = 2147483648;
pub const DDI_0_OSC_CTL0_XTAL_IS_24M_48M: u32 = 0;
pub const DDI_0_OSC_CTL0_BYPASS_XOSC_LF_CLK_QUAL: u32 = 536870912;
pub const DDI_0_OSC_CTL0_BYPASS_XOSC_LF_CLK_QUAL_M: u32 = 536870912;
pub const DDI_0_OSC_CTL0_BYPASS_XOSC_LF_CLK_QUAL_S: u32 = 29;
pub const DDI_0_OSC_CTL0_BYPASS_RCOSC_LF_CLK_QUAL: u32 = 268435456;
pub const DDI_0_OSC_CTL0_BYPASS_RCOSC_LF_CLK_QUAL_M: u32 = 268435456;
pub const DDI_0_OSC_CTL0_BYPASS_RCOSC_LF_CLK_QUAL_S: u32 = 28;
pub const DDI_0_OSC_CTL0_DOUBLER_START_DURATION_W: u32 = 2;
pub const DDI_0_OSC_CTL0_DOUBLER_START_DURATION_M: u32 = 201326592;
pub const DDI_0_OSC_CTL0_DOUBLER_START_DURATION_S: u32 = 26;
pub const DDI_0_OSC_CTL0_DOUBLER_RESET_DURATION: u32 = 33554432;
pub const DDI_0_OSC_CTL0_DOUBLER_RESET_DURATION_M: u32 = 33554432;
pub const DDI_0_OSC_CTL0_DOUBLER_RESET_DURATION_S: u32 = 25;
pub const DDI_0_OSC_CTL0_FORCE_KICKSTART_EN: u32 = 4194304;
pub const DDI_0_OSC_CTL0_FORCE_KICKSTART_EN_M: u32 = 4194304;
pub const DDI_0_OSC_CTL0_FORCE_KICKSTART_EN_S: u32 = 22;
pub const DDI_0_OSC_CTL0_ALLOW_SCLK_HF_SWITCHING: u32 = 65536;
pub const DDI_0_OSC_CTL0_ALLOW_SCLK_HF_SWITCHING_M: u32 = 65536;
pub const DDI_0_OSC_CTL0_ALLOW_SCLK_HF_SWITCHING_S: u32 = 16;
pub const DDI_0_OSC_CTL0_HPOSC_MODE_EN: u32 = 16384;
pub const DDI_0_OSC_CTL0_HPOSC_MODE_EN_M: u32 = 16384;
pub const DDI_0_OSC_CTL0_HPOSC_MODE_EN_S: u32 = 14;
pub const DDI_0_OSC_CTL0_RCOSC_LF_TRIMMED: u32 = 4096;
pub const DDI_0_OSC_CTL0_RCOSC_LF_TRIMMED_M: u32 = 4096;
pub const DDI_0_OSC_CTL0_RCOSC_LF_TRIMMED_S: u32 = 12;
pub const DDI_0_OSC_CTL0_XOSC_HF_POWER_MODE: u32 = 2048;
pub const DDI_0_OSC_CTL0_XOSC_HF_POWER_MODE_M: u32 = 2048;
pub const DDI_0_OSC_CTL0_XOSC_HF_POWER_MODE_S: u32 = 11;
pub const DDI_0_OSC_CTL0_XOSC_LF_DIG_BYPASS: u32 = 1024;
pub const DDI_0_OSC_CTL0_XOSC_LF_DIG_BYPASS_M: u32 = 1024;
pub const DDI_0_OSC_CTL0_XOSC_LF_DIG_BYPASS_S: u32 = 10;
pub const DDI_0_OSC_CTL0_CLK_LOSS_EN: u32 = 512;
pub const DDI_0_OSC_CTL0_CLK_LOSS_EN_M: u32 = 512;
pub const DDI_0_OSC_CTL0_CLK_LOSS_EN_S: u32 = 9;
pub const DDI_0_OSC_CTL0_ACLK_TDC_SRC_SEL_W: u32 = 2;
pub const DDI_0_OSC_CTL0_ACLK_TDC_SRC_SEL_M: u32 = 384;
pub const DDI_0_OSC_CTL0_ACLK_TDC_SRC_SEL_S: u32 = 7;
pub const DDI_0_OSC_CTL0_ACLK_REF_SRC_SEL_W: u32 = 2;
pub const DDI_0_OSC_CTL0_ACLK_REF_SRC_SEL_M: u32 = 96;
pub const DDI_0_OSC_CTL0_ACLK_REF_SRC_SEL_S: u32 = 5;
pub const DDI_0_OSC_CTL0_SCLK_LF_SRC_SEL_W: u32 = 2;
pub const DDI_0_OSC_CTL0_SCLK_LF_SRC_SEL_M: u32 = 12;
pub const DDI_0_OSC_CTL0_SCLK_LF_SRC_SEL_S: u32 = 2;
pub const DDI_0_OSC_CTL0_SCLK_LF_SRC_SEL_XOSCLF: u32 = 12;
pub const DDI_0_OSC_CTL0_SCLK_LF_SRC_SEL_RCOSCLF: u32 = 8;
pub const DDI_0_OSC_CTL0_SCLK_LF_SRC_SEL_XOSCHFDLF: u32 = 4;
pub const DDI_0_OSC_CTL0_SCLK_LF_SRC_SEL_RCOSCHFDLF: u32 = 0;
pub const DDI_0_OSC_CTL0_SCLK_MF_SRC_SEL: u32 = 2;
pub const DDI_0_OSC_CTL0_SCLK_MF_SRC_SEL_M: u32 = 2;
pub const DDI_0_OSC_CTL0_SCLK_MF_SRC_SEL_S: u32 = 1;
pub const DDI_0_OSC_CTL0_SCLK_MF_SRC_SEL_XCOSCHFDMF: u32 = 2;
pub const DDI_0_OSC_CTL0_SCLK_MF_SRC_SEL_RCOSCHFDMF: u32 = 0;
pub const DDI_0_OSC_CTL0_SCLK_HF_SRC_SEL: u32 = 1;
pub const DDI_0_OSC_CTL0_SCLK_HF_SRC_SEL_M: u32 = 1;
pub const DDI_0_OSC_CTL0_SCLK_HF_SRC_SEL_S: u32 = 0;
pub const DDI_0_OSC_CTL0_SCLK_HF_SRC_SEL_XOSC: u32 = 1;
pub const DDI_0_OSC_CTL0_SCLK_HF_SRC_SEL_RCOSC: u32 = 0;
pub const DDI_0_OSC_CTL1_RCOSCHFCTRIMFRACT_W: u32 = 5;
pub const DDI_0_OSC_CTL1_RCOSCHFCTRIMFRACT_M: u32 = 8126464;
pub const DDI_0_OSC_CTL1_RCOSCHFCTRIMFRACT_S: u32 = 18;
pub const DDI_0_OSC_CTL1_RCOSCHFCTRIMFRACT_EN: u32 = 131072;
pub const DDI_0_OSC_CTL1_RCOSCHFCTRIMFRACT_EN_M: u32 = 131072;
pub const DDI_0_OSC_CTL1_RCOSCHFCTRIMFRACT_EN_S: u32 = 17;
pub const DDI_0_OSC_CTL1_XOSC_HF_FAST_START_W: u32 = 2;
pub const DDI_0_OSC_CTL1_XOSC_HF_FAST_START_M: u32 = 3;
pub const DDI_0_OSC_CTL1_XOSC_HF_FAST_START_S: u32 = 0;
pub const DDI_0_OSC_RADCEXTCFG_HPM_IBIAS_WAIT_CNT_W: u32 = 10;
pub const DDI_0_OSC_RADCEXTCFG_HPM_IBIAS_WAIT_CNT_M: u32 = 4290772992;
pub const DDI_0_OSC_RADCEXTCFG_HPM_IBIAS_WAIT_CNT_S: u32 = 22;
pub const DDI_0_OSC_RADCEXTCFG_LPM_IBIAS_WAIT_CNT_W: u32 = 6;
pub const DDI_0_OSC_RADCEXTCFG_LPM_IBIAS_WAIT_CNT_M: u32 = 4128768;
pub const DDI_0_OSC_RADCEXTCFG_LPM_IBIAS_WAIT_CNT_S: u32 = 16;
pub const DDI_0_OSC_RADCEXTCFG_IDAC_STEP_W: u32 = 4;
pub const DDI_0_OSC_RADCEXTCFG_IDAC_STEP_M: u32 = 61440;
pub const DDI_0_OSC_RADCEXTCFG_IDAC_STEP_S: u32 = 12;
pub const DDI_0_OSC_RADCEXTCFG_RADC_DAC_TH_W: u32 = 6;
pub const DDI_0_OSC_RADCEXTCFG_RADC_DAC_TH_M: u32 = 4032;
pub const DDI_0_OSC_RADCEXTCFG_RADC_DAC_TH_S: u32 = 6;
pub const DDI_0_OSC_RADCEXTCFG_RADC_MODE_IS_SAR: u32 = 32;
pub const DDI_0_OSC_RADCEXTCFG_RADC_MODE_IS_SAR_M: u32 = 32;
pub const DDI_0_OSC_RADCEXTCFG_RADC_MODE_IS_SAR_S: u32 = 5;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_REQ_MODE: u32 = 1073741824;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_REQ_MODE_M: u32 = 1073741824;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_REQ_MODE_S: u32 = 30;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_FSM_UPDATE_RATE_W: u32 = 2;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_FSM_UPDATE_RATE_M: u32 = 805306368;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_FSM_UPDATE_RATE_S: u32 = 28;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_FSM_UPDATE_RATE_250KHZ: u32 = 805306368;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_FSM_UPDATE_RATE_500KHZ: u32 = 536870912;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_FSM_UPDATE_RATE_1MHZ: u32 = 268435456;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_FSM_UPDATE_RATE_2MHZ: u32 = 0;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_SW_CTRL: u32 = 134217728;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_SW_CTRL_M: u32 = 134217728;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_SW_CTRL_S: u32 = 27;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_SW_EN: u32 = 67108864;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_SW_EN_M: u32 = 67108864;
pub const DDI_0_OSC_AMPCOMPCTL_AMPCOMP_SW_EN_S: u32 = 26;
pub const DDI_0_OSC_AMPCOMPCTL_IBIAS_OFFSET_W: u32 = 4;
pub const DDI_0_OSC_AMPCOMPCTL_IBIAS_OFFSET_M: u32 = 15728640;
pub const DDI_0_OSC_AMPCOMPCTL_IBIAS_OFFSET_S: u32 = 20;
pub const DDI_0_OSC_AMPCOMPCTL_IBIAS_INIT_W: u32 = 4;
pub const DDI_0_OSC_AMPCOMPCTL_IBIAS_INIT_M: u32 = 983040;
pub const DDI_0_OSC_AMPCOMPCTL_IBIAS_INIT_S: u32 = 16;
pub const DDI_0_OSC_AMPCOMPCTL_LPM_IBIAS_WAIT_CNT_FINAL_W: u32 = 8;
pub const DDI_0_OSC_AMPCOMPCTL_LPM_IBIAS_WAIT_CNT_FINAL_M: u32 = 65280;
pub const DDI_0_OSC_AMPCOMPCTL_LPM_IBIAS_WAIT_CNT_FINAL_S: u32 = 8;
pub const DDI_0_OSC_AMPCOMPCTL_CAP_STEP_W: u32 = 4;
pub const DDI_0_OSC_AMPCOMPCTL_CAP_STEP_M: u32 = 240;
pub const DDI_0_OSC_AMPCOMPCTL_CAP_STEP_S: u32 = 4;
pub const DDI_0_OSC_AMPCOMPCTL_IBIASCAP_HPTOLP_OL_CNT_W: u32 = 4;
pub const DDI_0_OSC_AMPCOMPCTL_IBIASCAP_HPTOLP_OL_CNT_M: u32 = 15;
pub const DDI_0_OSC_AMPCOMPCTL_IBIASCAP_HPTOLP_OL_CNT_S: u32 = 0;
pub const DDI_0_OSC_AMPCOMPTH1_HPMRAMP3_LTH_W: u32 = 6;
pub const DDI_0_OSC_AMPCOMPTH1_HPMRAMP3_LTH_M: u32 = 16515072;
pub const DDI_0_OSC_AMPCOMPTH1_HPMRAMP3_LTH_S: u32 = 18;
pub const DDI_0_OSC_AMPCOMPTH1_HPMRAMP3_HTH_W: u32 = 6;
pub const DDI_0_OSC_AMPCOMPTH1_HPMRAMP3_HTH_M: u32 = 64512;
pub const DDI_0_OSC_AMPCOMPTH1_HPMRAMP3_HTH_S: u32 = 10;
pub const DDI_0_OSC_AMPCOMPTH1_IBIASCAP_LPTOHP_OL_CNT_W: u32 = 4;
pub const DDI_0_OSC_AMPCOMPTH1_IBIASCAP_LPTOHP_OL_CNT_M: u32 = 960;
pub const DDI_0_OSC_AMPCOMPTH1_IBIASCAP_LPTOHP_OL_CNT_S: u32 = 6;
pub const DDI_0_OSC_AMPCOMPTH1_HPMRAMP1_TH_W: u32 = 6;
pub const DDI_0_OSC_AMPCOMPTH1_HPMRAMP1_TH_M: u32 = 63;
pub const DDI_0_OSC_AMPCOMPTH1_HPMRAMP1_TH_S: u32 = 0;
pub const DDI_0_OSC_AMPCOMPTH2_LPMUPDATE_LTH_W: u32 = 6;
pub const DDI_0_OSC_AMPCOMPTH2_LPMUPDATE_LTH_M: u32 = 4227858432;
pub const DDI_0_OSC_AMPCOMPTH2_LPMUPDATE_LTH_S: u32 = 26;
pub const DDI_0_OSC_AMPCOMPTH2_LPMUPDATE_HTH_W: u32 = 6;
pub const DDI_0_OSC_AMPCOMPTH2_LPMUPDATE_HTH_M: u32 = 16515072;
pub const DDI_0_OSC_AMPCOMPTH2_LPMUPDATE_HTH_S: u32 = 18;
pub const DDI_0_OSC_AMPCOMPTH2_ADC_COMP_AMPTH_LPM_W: u32 = 6;
pub const DDI_0_OSC_AMPCOMPTH2_ADC_COMP_AMPTH_LPM_M: u32 = 64512;
pub const DDI_0_OSC_AMPCOMPTH2_ADC_COMP_AMPTH_LPM_S: u32 = 10;
pub const DDI_0_OSC_AMPCOMPTH2_ADC_COMP_AMPTH_HPM_W: u32 = 6;
pub const DDI_0_OSC_AMPCOMPTH2_ADC_COMP_AMPTH_HPM_M: u32 = 252;
pub const DDI_0_OSC_AMPCOMPTH2_ADC_COMP_AMPTH_HPM_S: u32 = 2;
pub const DDI_0_OSC_ANABYPASSVAL1_XOSC_HF_ROW_Q12_W: u32 = 4;
pub const DDI_0_OSC_ANABYPASSVAL1_XOSC_HF_ROW_Q12_M: u32 = 983040;
pub const DDI_0_OSC_ANABYPASSVAL1_XOSC_HF_ROW_Q12_S: u32 = 16;
pub const DDI_0_OSC_ANABYPASSVAL1_XOSC_HF_COLUMN_Q12_W: u32 = 16;
pub const DDI_0_OSC_ANABYPASSVAL1_XOSC_HF_COLUMN_Q12_M: u32 = 65535;
pub const DDI_0_OSC_ANABYPASSVAL1_XOSC_HF_COLUMN_Q12_S: u32 = 0;
pub const DDI_0_OSC_ANABYPASSVAL2_XOSC_HF_IBIASTHERM_W: u32 = 14;
pub const DDI_0_OSC_ANABYPASSVAL2_XOSC_HF_IBIASTHERM_M: u32 = 16383;
pub const DDI_0_OSC_ANABYPASSVAL2_XOSC_HF_IBIASTHERM_S: u32 = 0;
pub const DDI_0_OSC_ATESTCTL_SCLK_LF_AUX_EN: u32 = 536870912;
pub const DDI_0_OSC_ATESTCTL_SCLK_LF_AUX_EN_M: u32 = 536870912;
pub const DDI_0_OSC_ATESTCTL_SCLK_LF_AUX_EN_S: u32 = 29;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_NANOAMP_BIAS_ENABLE: u32 = 16777216;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_NANOAMP_BIAS_ENABLE_M: u32 = 16777216;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_NANOAMP_BIAS_ENABLE_S: u32 = 24;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_SPARE23: u32 = 8388608;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_SPARE23_M: u32 = 8388608;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_SPARE23_S: u32 = 23;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_ADC_SH_MODE_EN: u32 = 32;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_ADC_SH_MODE_EN_M: u32 = 32;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_ADC_SH_MODE_EN_S: u32 = 5;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_ADC_SH_VBUF_EN: u32 = 16;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_ADC_SH_VBUF_EN_M: u32 = 16;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_ADC_SH_VBUF_EN_S: u32 = 4;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_ADC_IREF_CTRL_W: u32 = 2;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_ADC_IREF_CTRL_M: u32 = 3;
pub const DDI_0_OSC_ADCDOUBLERNANOAMPCTL_ADC_IREF_CTRL_S: u32 = 0;
pub const DDI_0_OSC_XOSCHFCTL_PEAK_DET_ITRIM_W: u32 = 2;
pub const DDI_0_OSC_XOSCHFCTL_PEAK_DET_ITRIM_M: u32 = 768;
pub const DDI_0_OSC_XOSCHFCTL_PEAK_DET_ITRIM_S: u32 = 8;
pub const DDI_0_OSC_XOSCHFCTL_BYPASS: u32 = 64;
pub const DDI_0_OSC_XOSCHFCTL_BYPASS_M: u32 = 64;
pub const DDI_0_OSC_XOSCHFCTL_BYPASS_S: u32 = 6;
pub const DDI_0_OSC_XOSCHFCTL_HP_BUF_ITRIM_W: u32 = 3;
pub const DDI_0_OSC_XOSCHFCTL_HP_BUF_ITRIM_M: u32 = 28;
pub const DDI_0_OSC_XOSCHFCTL_HP_BUF_ITRIM_S: u32 = 2;
pub const DDI_0_OSC_XOSCHFCTL_LP_BUF_ITRIM_W: u32 = 2;
pub const DDI_0_OSC_XOSCHFCTL_LP_BUF_ITRIM_M: u32 = 3;
pub const DDI_0_OSC_XOSCHFCTL_LP_BUF_ITRIM_S: u32 = 0;
pub const DDI_0_OSC_LFOSCCTL_XOSCLF_REGULATOR_TRIM_W: u32 = 2;
pub const DDI_0_OSC_LFOSCCTL_XOSCLF_REGULATOR_TRIM_M: u32 = 12582912;
pub const DDI_0_OSC_LFOSCCTL_XOSCLF_REGULATOR_TRIM_S: u32 = 22;
pub const DDI_0_OSC_LFOSCCTL_XOSCLF_CMIRRWR_RATIO_W: u32 = 4;
pub const DDI_0_OSC_LFOSCCTL_XOSCLF_CMIRRWR_RATIO_M: u32 = 3932160;
pub const DDI_0_OSC_LFOSCCTL_XOSCLF_CMIRRWR_RATIO_S: u32 = 18;
pub const DDI_0_OSC_LFOSCCTL_RCOSCLF_RTUNE_TRIM_W: u32 = 2;
pub const DDI_0_OSC_LFOSCCTL_RCOSCLF_RTUNE_TRIM_M: u32 = 768;
pub const DDI_0_OSC_LFOSCCTL_RCOSCLF_RTUNE_TRIM_S: u32 = 8;
pub const DDI_0_OSC_LFOSCCTL_RCOSCLF_RTUNE_TRIM_6P0MEG: u32 = 768;
pub const DDI_0_OSC_LFOSCCTL_RCOSCLF_RTUNE_TRIM_6P5MEG: u32 = 512;
pub const DDI_0_OSC_LFOSCCTL_RCOSCLF_RTUNE_TRIM_7P0MEG: u32 = 256;
pub const DDI_0_OSC_LFOSCCTL_RCOSCLF_RTUNE_TRIM_7P5MEG: u32 = 0;
pub const DDI_0_OSC_LFOSCCTL_RCOSCLF_CTUNE_TRIM_W: u32 = 8;
pub const DDI_0_OSC_LFOSCCTL_RCOSCLF_CTUNE_TRIM_M: u32 = 255;
pub const DDI_0_OSC_LFOSCCTL_RCOSCLF_CTUNE_TRIM_S: u32 = 0;
pub const DDI_0_OSC_RCOSCHFCTL_RCOSCHF_CTRIM_W: u32 = 8;
pub const DDI_0_OSC_RCOSCHFCTL_RCOSCHF_CTRIM_M: u32 = 65280;
pub const DDI_0_OSC_RCOSCHFCTL_RCOSCHF_CTRIM_S: u32 = 8;
pub const DDI_0_OSC_STAT0_SCLK_LF_SRC_W: u32 = 2;
pub const DDI_0_OSC_STAT0_SCLK_LF_SRC_M: u32 = 1610612736;
pub const DDI_0_OSC_STAT0_SCLK_LF_SRC_S: u32 = 29;
pub const DDI_0_OSC_STAT0_SCLK_LF_SRC_XOSCLF: u32 = 1610612736;
pub const DDI_0_OSC_STAT0_SCLK_LF_SRC_RCOSCLF: u32 = 1073741824;
pub const DDI_0_OSC_STAT0_SCLK_LF_SRC_XOSCHFDLF: u32 = 536870912;
pub const DDI_0_OSC_STAT0_SCLK_LF_SRC_RCOSCHFDLF: u32 = 0;
pub const DDI_0_OSC_STAT0_SCLK_HF_SRC: u32 = 268435456;
pub const DDI_0_OSC_STAT0_SCLK_HF_SRC_M: u32 = 268435456;
pub const DDI_0_OSC_STAT0_SCLK_HF_SRC_S: u32 = 28;
pub const DDI_0_OSC_STAT0_SCLK_HF_SRC_XOSC: u32 = 268435456;
pub const DDI_0_OSC_STAT0_SCLK_HF_SRC_RCOSC: u32 = 0;
pub const DDI_0_OSC_STAT0_RCOSC_HF_EN: u32 = 4194304;
pub const DDI_0_OSC_STAT0_RCOSC_HF_EN_M: u32 = 4194304;
pub const DDI_0_OSC_STAT0_RCOSC_HF_EN_S: u32 = 22;
pub const DDI_0_OSC_STAT0_RCOSC_LF_EN: u32 = 2097152;
pub const DDI_0_OSC_STAT0_RCOSC_LF_EN_M: u32 = 2097152;
pub const DDI_0_OSC_STAT0_RCOSC_LF_EN_S: u32 = 21;
pub const DDI_0_OSC_STAT0_XOSC_LF_EN: u32 = 1048576;
pub const DDI_0_OSC_STAT0_XOSC_LF_EN_M: u32 = 1048576;
pub const DDI_0_OSC_STAT0_XOSC_LF_EN_S: u32 = 20;
pub const DDI_0_OSC_STAT0_CLK_DCDC_RDY: u32 = 524288;
pub const DDI_0_OSC_STAT0_CLK_DCDC_RDY_M: u32 = 524288;
pub const DDI_0_OSC_STAT0_CLK_DCDC_RDY_S: u32 = 19;
pub const DDI_0_OSC_STAT0_CLK_DCDC_RDY_ACK: u32 = 262144;
pub const DDI_0_OSC_STAT0_CLK_DCDC_RDY_ACK_M: u32 = 262144;
pub const DDI_0_OSC_STAT0_CLK_DCDC_RDY_ACK_S: u32 = 18;
pub const DDI_0_OSC_STAT0_SCLK_HF_LOSS: u32 = 131072;
pub const DDI_0_OSC_STAT0_SCLK_HF_LOSS_M: u32 = 131072;
pub const DDI_0_OSC_STAT0_SCLK_HF_LOSS_S: u32 = 17;
pub const DDI_0_OSC_STAT0_SCLK_LF_LOSS: u32 = 65536;
pub const DDI_0_OSC_STAT0_SCLK_LF_LOSS_M: u32 = 65536;
pub const DDI_0_OSC_STAT0_SCLK_LF_LOSS_S: u32 = 16;
pub const DDI_0_OSC_STAT0_XOSC_HF_EN: u32 = 32768;
pub const DDI_0_OSC_STAT0_XOSC_HF_EN_M: u32 = 32768;
pub const DDI_0_OSC_STAT0_XOSC_HF_EN_S: u32 = 15;
pub const DDI_0_OSC_STAT0_XB_48M_CLK_EN: u32 = 8192;
pub const DDI_0_OSC_STAT0_XB_48M_CLK_EN_M: u32 = 8192;
pub const DDI_0_OSC_STAT0_XB_48M_CLK_EN_S: u32 = 13;
pub const DDI_0_OSC_STAT0_XOSC_HF_LP_BUF_EN: u32 = 2048;
pub const DDI_0_OSC_STAT0_XOSC_HF_LP_BUF_EN_M: u32 = 2048;
pub const DDI_0_OSC_STAT0_XOSC_HF_LP_BUF_EN_S: u32 = 11;
pub const DDI_0_OSC_STAT0_XOSC_HF_HP_BUF_EN: u32 = 1024;
pub const DDI_0_OSC_STAT0_XOSC_HF_HP_BUF_EN_M: u32 = 1024;
pub const DDI_0_OSC_STAT0_XOSC_HF_HP_BUF_EN_S: u32 = 10;
pub const DDI_0_OSC_STAT0_ADC_THMET: u32 = 256;
pub const DDI_0_OSC_STAT0_ADC_THMET_M: u32 = 256;
pub const DDI_0_OSC_STAT0_ADC_THMET_S: u32 = 8;
pub const DDI_0_OSC_STAT0_ADC_DATA_READY: u32 = 128;
pub const DDI_0_OSC_STAT0_ADC_DATA_READY_M: u32 = 128;
pub const DDI_0_OSC_STAT0_ADC_DATA_READY_S: u32 = 7;
pub const DDI_0_OSC_STAT0_ADC_DATA_W: u32 = 6;
pub const DDI_0_OSC_STAT0_ADC_DATA_M: u32 = 126;
pub const DDI_0_OSC_STAT0_ADC_DATA_S: u32 = 1;
pub const DDI_0_OSC_STAT0_PENDINGSCLKHFSWITCHING: u32 = 1;
pub const DDI_0_OSC_STAT0_PENDINGSCLKHFSWITCHING_M: u32 = 1;
pub const DDI_0_OSC_STAT0_PENDINGSCLKHFSWITCHING_S: u32 = 0;
pub const DDI_0_OSC_STAT1_RAMPSTATE_W: u32 = 4;
pub const DDI_0_OSC_STAT1_RAMPSTATE_M: u32 = 4026531840;
pub const DDI_0_OSC_STAT1_RAMPSTATE_S: u32 = 28;
pub const DDI_0_OSC_STAT1_RAMPSTATE_FAST_START_SETTLE: u32 = 3758096384;
pub const DDI_0_OSC_STAT1_RAMPSTATE_FAST_START: u32 = 3489660928;
pub const DDI_0_OSC_STAT1_RAMPSTATE_DUMMY_TO_INIT_1: u32 = 3221225472;
pub const DDI_0_OSC_STAT1_RAMPSTATE_IDAC_DEC_W_MEASURE: u32 = 2952790016;
pub const DDI_0_OSC_STAT1_RAMPSTATE_IBIAS_INC: u32 = 2684354560;
pub const DDI_0_OSC_STAT1_RAMPSTATE_LPM_UPDATE: u32 = 2415919104;
pub const DDI_0_OSC_STAT1_RAMPSTATE_IBIAS_DEC_W_MEASURE: u32 = 2147483648;
pub const DDI_0_OSC_STAT1_RAMPSTATE_IBIAS_CAP_UPDATE: u32 = 1879048192;
pub const DDI_0_OSC_STAT1_RAMPSTATE_IDAC_INCREMENT: u32 = 1610612736;
pub const DDI_0_OSC_STAT1_RAMPSTATE_HPM_UPDATE: u32 = 1342177280;
pub const DDI_0_OSC_STAT1_RAMPSTATE_HPM_RAMP3: u32 = 1073741824;
pub const DDI_0_OSC_STAT1_RAMPSTATE_HPM_RAMP2: u32 = 805306368;
pub const DDI_0_OSC_STAT1_RAMPSTATE_HPM_RAMP1: u32 = 536870912;
pub const DDI_0_OSC_STAT1_RAMPSTATE_INITIALIZATION: u32 = 268435456;
pub const DDI_0_OSC_STAT1_RAMPSTATE_RESET: u32 = 0;
pub const DDI_0_OSC_STAT1_HPM_UPDATE_AMP_W: u32 = 6;
pub const DDI_0_OSC_STAT1_HPM_UPDATE_AMP_M: u32 = 264241152;
pub const DDI_0_OSC_STAT1_HPM_UPDATE_AMP_S: u32 = 22;
pub const DDI_0_OSC_STAT1_LPM_UPDATE_AMP_W: u32 = 6;
pub const DDI_0_OSC_STAT1_LPM_UPDATE_AMP_M: u32 = 4128768;
pub const DDI_0_OSC_STAT1_LPM_UPDATE_AMP_S: u32 = 16;
pub const DDI_0_OSC_STAT1_FORCE_RCOSC_HF: u32 = 32768;
pub const DDI_0_OSC_STAT1_FORCE_RCOSC_HF_M: u32 = 32768;
pub const DDI_0_OSC_STAT1_FORCE_RCOSC_HF_S: u32 = 15;
pub const DDI_0_OSC_STAT1_SCLK_HF_EN: u32 = 16384;
pub const DDI_0_OSC_STAT1_SCLK_HF_EN_M: u32 = 16384;
pub const DDI_0_OSC_STAT1_SCLK_HF_EN_S: u32 = 14;
pub const DDI_0_OSC_STAT1_SCLK_MF_EN: u32 = 8192;
pub const DDI_0_OSC_STAT1_SCLK_MF_EN_M: u32 = 8192;
pub const DDI_0_OSC_STAT1_SCLK_MF_EN_S: u32 = 13;
pub const DDI_0_OSC_STAT1_ACLK_ADC_EN: u32 = 4096;
pub const DDI_0_OSC_STAT1_ACLK_ADC_EN_M: u32 = 4096;
pub const DDI_0_OSC_STAT1_ACLK_ADC_EN_S: u32 = 12;
pub const DDI_0_OSC_STAT1_ACLK_TDC_EN: u32 = 2048;
pub const DDI_0_OSC_STAT1_ACLK_TDC_EN_M: u32 = 2048;
pub const DDI_0_OSC_STAT1_ACLK_TDC_EN_S: u32 = 11;
pub const DDI_0_OSC_STAT1_ACLK_REF_EN: u32 = 1024;
pub const DDI_0_OSC_STAT1_ACLK_REF_EN_M: u32 = 1024;
pub const DDI_0_OSC_STAT1_ACLK_REF_EN_S: u32 = 10;
pub const DDI_0_OSC_STAT1_CLK_CHP_EN: u32 = 512;
pub const DDI_0_OSC_STAT1_CLK_CHP_EN_M: u32 = 512;
pub const DDI_0_OSC_STAT1_CLK_CHP_EN_S: u32 = 9;
pub const DDI_0_OSC_STAT1_CLK_DCDC_EN: u32 = 256;
pub const DDI_0_OSC_STAT1_CLK_DCDC_EN_M: u32 = 256;
pub const DDI_0_OSC_STAT1_CLK_DCDC_EN_S: u32 = 8;
pub const DDI_0_OSC_STAT1_SCLK_HF_GOOD: u32 = 128;
pub const DDI_0_OSC_STAT1_SCLK_HF_GOOD_M: u32 = 128;
pub const DDI_0_OSC_STAT1_SCLK_HF_GOOD_S: u32 = 7;
pub const DDI_0_OSC_STAT1_SCLK_MF_GOOD: u32 = 64;
pub const DDI_0_OSC_STAT1_SCLK_MF_GOOD_M: u32 = 64;
pub const DDI_0_OSC_STAT1_SCLK_MF_GOOD_S: u32 = 6;
pub const DDI_0_OSC_STAT1_SCLK_LF_GOOD: u32 = 32;
pub const DDI_0_OSC_STAT1_SCLK_LF_GOOD_M: u32 = 32;
pub const DDI_0_OSC_STAT1_SCLK_LF_GOOD_S: u32 = 5;
pub const DDI_0_OSC_STAT1_ACLK_ADC_GOOD: u32 = 16;
pub const DDI_0_OSC_STAT1_ACLK_ADC_GOOD_M: u32 = 16;
pub const DDI_0_OSC_STAT1_ACLK_ADC_GOOD_S: u32 = 4;
pub const DDI_0_OSC_STAT1_ACLK_TDC_GOOD: u32 = 8;
pub const DDI_0_OSC_STAT1_ACLK_TDC_GOOD_M: u32 = 8;
pub const DDI_0_OSC_STAT1_ACLK_TDC_GOOD_S: u32 = 3;
pub const DDI_0_OSC_STAT1_ACLK_REF_GOOD: u32 = 4;
pub const DDI_0_OSC_STAT1_ACLK_REF_GOOD_M: u32 = 4;
pub const DDI_0_OSC_STAT1_ACLK_REF_GOOD_S: u32 = 2;
pub const DDI_0_OSC_STAT1_CLK_CHP_GOOD: u32 = 2;
pub const DDI_0_OSC_STAT1_CLK_CHP_GOOD_M: u32 = 2;
pub const DDI_0_OSC_STAT1_CLK_CHP_GOOD_S: u32 = 1;
pub const DDI_0_OSC_STAT1_CLK_DCDC_GOOD: u32 = 1;
pub const DDI_0_OSC_STAT1_CLK_DCDC_GOOD_M: u32 = 1;
pub const DDI_0_OSC_STAT1_CLK_DCDC_GOOD_S: u32 = 0;
pub const DDI_0_OSC_STAT2_ADC_DCBIAS_W: u32 = 6;
pub const DDI_0_OSC_STAT2_ADC_DCBIAS_M: u32 = 4227858432;
pub const DDI_0_OSC_STAT2_ADC_DCBIAS_S: u32 = 26;
pub const DDI_0_OSC_STAT2_HPM_RAMP1_THMET: u32 = 33554432;
pub const DDI_0_OSC_STAT2_HPM_RAMP1_THMET_M: u32 = 33554432;
pub const DDI_0_OSC_STAT2_HPM_RAMP1_THMET_S: u32 = 25;
pub const DDI_0_OSC_STAT2_HPM_RAMP2_THMET: u32 = 16777216;
pub const DDI_0_OSC_STAT2_HPM_RAMP2_THMET_M: u32 = 16777216;
pub const DDI_0_OSC_STAT2_HPM_RAMP2_THMET_S: u32 = 24;
pub const DDI_0_OSC_STAT2_HPM_RAMP3_THMET: u32 = 8388608;
pub const DDI_0_OSC_STAT2_HPM_RAMP3_THMET_M: u32 = 8388608;
pub const DDI_0_OSC_STAT2_HPM_RAMP3_THMET_S: u32 = 23;
pub const DDI_0_OSC_STAT2_RAMPSTATE_W: u32 = 4;
pub const DDI_0_OSC_STAT2_RAMPSTATE_M: u32 = 61440;
pub const DDI_0_OSC_STAT2_RAMPSTATE_S: u32 = 12;
pub const DDI_0_OSC_STAT2_AMPCOMP_REQ: u32 = 8;
pub const DDI_0_OSC_STAT2_AMPCOMP_REQ_M: u32 = 8;
pub const DDI_0_OSC_STAT2_AMPCOMP_REQ_S: u32 = 3;
pub const DDI_0_OSC_STAT2_XOSC_HF_AMPGOOD: u32 = 4;
pub const DDI_0_OSC_STAT2_XOSC_HF_AMPGOOD_M: u32 = 4;
pub const DDI_0_OSC_STAT2_XOSC_HF_AMPGOOD_S: u32 = 2;
pub const DDI_0_OSC_STAT2_XOSC_HF_FREQGOOD: u32 = 2;
pub const DDI_0_OSC_STAT2_XOSC_HF_FREQGOOD_M: u32 = 2;
pub const DDI_0_OSC_STAT2_XOSC_HF_FREQGOOD_S: u32 = 1;
pub const DDI_0_OSC_STAT2_XOSC_HF_RF_FREQGOOD: u32 = 1;
pub const DDI_0_OSC_STAT2_XOSC_HF_RF_FREQGOOD_M: u32 = 1;
pub const DDI_0_OSC_STAT2_XOSC_HF_RF_FREQGOOD_S: u32 = 0;
pub const LOW_POWER_XOSC: u32 = 1;
pub const HIGH_POWER_XOSC: u32 = 0;
pub const OSC_SRC_CLK_HF: u32 = 1;
pub const OSC_SRC_CLK_MF: u32 = 2;
pub const OSC_SRC_CLK_LF: u32 = 4;
pub const OSC_RCOSC_HF: u32 = 0;
pub const OSC_XOSC_HF: u32 = 1;
pub const OSC_RCOSC_LF: u32 = 2;
pub const OSC_XOSC_LF: u32 = 3;
pub const SCLK_HF_RCOSC_HF: u32 = 0;
pub const SCLK_HF_XOSC_HF: u32 = 1;
pub const SCLK_MF_RCOSC_HF: u32 = 0;
pub const SCLK_MF_XOSC_HF: u32 = 1;
pub const SCLK_LF_FROM_RCOSC_HF: u32 = 0;
pub const SCLK_LF_FROM_XOSC_HF: u32 = 1;
pub const SCLK_LF_FROM_RCOSC_LF: u32 = 2;
pub const SCLK_LF_FROM_XOSC_LF: u32 = 3;
pub const PRCM_O_INFRCLKDIVR: u32 = 0;
pub const PRCM_O_INFRCLKDIVS: u32 = 4;
pub const PRCM_O_INFRCLKDIVDS: u32 = 8;
pub const PRCM_O_VDCTL: u32 = 12;
pub const PRCM_O_CLKLOADCTL: u32 = 40;
pub const PRCM_O_RFCCLKG: u32 = 44;
pub const PRCM_O_VIMSCLKG: u32 = 48;
pub const PRCM_O_SECDMACLKGR: u32 = 60;
pub const PRCM_O_SECDMACLKGS: u32 = 64;
pub const PRCM_O_SECDMACLKGDS: u32 = 68;
pub const PRCM_O_GPIOCLKGR: u32 = 72;
pub const PRCM_O_GPIOCLKGS: u32 = 76;
pub const PRCM_O_GPIOCLKGDS: u32 = 80;
pub const PRCM_O_GPTCLKGR: u32 = 84;
pub const PRCM_O_GPTCLKGS: u32 = 88;
pub const PRCM_O_GPTCLKGDS: u32 = 92;
pub const PRCM_O_I2CCLKGR: u32 = 96;
pub const PRCM_O_I2CCLKGS: u32 = 100;
pub const PRCM_O_I2CCLKGDS: u32 = 104;
pub const PRCM_O_UARTCLKGR: u32 = 108;
pub const PRCM_O_UARTCLKGS: u32 = 112;
pub const PRCM_O_UARTCLKGDS: u32 = 116;
pub const PRCM_O_SSICLKGR: u32 = 120;
pub const PRCM_O_SSICLKGS: u32 = 124;
pub const PRCM_O_SSICLKGDS: u32 = 128;
pub const PRCM_O_I2SCLKGR: u32 = 132;
pub const PRCM_O_I2SCLKGS: u32 = 136;
pub const PRCM_O_I2SCLKGDS: u32 = 140;
pub const PRCM_O_CPUCLKDIV: u32 = 184;
pub const PRCM_O_I2SBCLKSEL: u32 = 200;
pub const PRCM_O_GPTCLKDIV: u32 = 204;
pub const PRCM_O_I2SCLKCTL: u32 = 208;
pub const PRCM_O_I2SMCLKDIV: u32 = 212;
pub const PRCM_O_I2SBCLKDIV: u32 = 216;
pub const PRCM_O_I2SWCLKDIV: u32 = 220;
pub const PRCM_O_SWRESET: u32 = 268;
pub const PRCM_O_WARMRESET: u32 = 272;
pub const PRCM_O_PDCTL0: u32 = 300;
pub const PRCM_O_PDCTL0RFC: u32 = 304;
pub const PRCM_O_PDCTL0SERIAL: u32 = 308;
pub const PRCM_O_PDCTL0PERIPH: u32 = 312;
pub const PRCM_O_PDSTAT0: u32 = 320;
pub const PRCM_O_PDSTAT0RFC: u32 = 324;
pub const PRCM_O_PDSTAT0SERIAL: u32 = 328;
pub const PRCM_O_PDSTAT0PERIPH: u32 = 332;
pub const PRCM_O_PDCTL1: u32 = 380;
pub const PRCM_O_PDCTL1CPU: u32 = 388;
pub const PRCM_O_PDCTL1RFC: u32 = 392;
pub const PRCM_O_PDCTL1VIMS: u32 = 396;
pub const PRCM_O_PDSTAT1: u32 = 404;
pub const PRCM_O_PDSTAT1BUS: u32 = 408;
pub const PRCM_O_PDSTAT1RFC: u32 = 412;
pub const PRCM_O_PDSTAT1CPU: u32 = 416;
pub const PRCM_O_PDSTAT1VIMS: u32 = 420;
pub const PRCM_O_RFCBITS: u32 = 460;
pub const PRCM_O_RFCMODESEL: u32 = 464;
pub const PRCM_O_RFCMODEHWOPT: u32 = 468;
pub const PRCM_O_PWRPROFSTAT: u32 = 480;
pub const PRCM_O_RAMRETEN: u32 = 548;
pub const PRCM_INFRCLKDIVR_RATIO_W: u32 = 2;
pub const PRCM_INFRCLKDIVR_RATIO_M: u32 = 3;
pub const PRCM_INFRCLKDIVR_RATIO_S: u32 = 0;
pub const PRCM_INFRCLKDIVR_RATIO_DIV32: u32 = 3;
pub const PRCM_INFRCLKDIVR_RATIO_DIV8: u32 = 2;
pub const PRCM_INFRCLKDIVR_RATIO_DIV2: u32 = 1;
pub const PRCM_INFRCLKDIVR_RATIO_DIV1: u32 = 0;
pub const PRCM_INFRCLKDIVS_RATIO_W: u32 = 2;
pub const PRCM_INFRCLKDIVS_RATIO_M: u32 = 3;
pub const PRCM_INFRCLKDIVS_RATIO_S: u32 = 0;
pub const PRCM_INFRCLKDIVS_RATIO_DIV32: u32 = 3;
pub const PRCM_INFRCLKDIVS_RATIO_DIV8: u32 = 2;
pub const PRCM_INFRCLKDIVS_RATIO_DIV2: u32 = 1;
pub const PRCM_INFRCLKDIVS_RATIO_DIV1: u32 = 0;
pub const PRCM_INFRCLKDIVDS_RATIO_W: u32 = 2;
pub const PRCM_INFRCLKDIVDS_RATIO_M: u32 = 3;
pub const PRCM_INFRCLKDIVDS_RATIO_S: u32 = 0;
pub const PRCM_INFRCLKDIVDS_RATIO_DIV32: u32 = 3;
pub const PRCM_INFRCLKDIVDS_RATIO_DIV8: u32 = 2;
pub const PRCM_INFRCLKDIVDS_RATIO_DIV2: u32 = 1;
pub const PRCM_INFRCLKDIVDS_RATIO_DIV1: u32 = 0;
pub const PRCM_VDCTL_MCU_VD: u32 = 4;
pub const PRCM_VDCTL_MCU_VD_BITN: u32 = 2;
pub const PRCM_VDCTL_MCU_VD_M: u32 = 4;
pub const PRCM_VDCTL_MCU_VD_S: u32 = 2;
pub const PRCM_VDCTL_ULDO: u32 = 1;
pub const PRCM_VDCTL_ULDO_BITN: u32 = 0;
pub const PRCM_VDCTL_ULDO_M: u32 = 1;
pub const PRCM_VDCTL_ULDO_S: u32 = 0;
pub const PRCM_CLKLOADCTL_LOAD_DONE: u32 = 2;
pub const PRCM_CLKLOADCTL_LOAD_DONE_BITN: u32 = 1;
pub const PRCM_CLKLOADCTL_LOAD_DONE_M: u32 = 2;
pub const PRCM_CLKLOADCTL_LOAD_DONE_S: u32 = 1;
pub const PRCM_CLKLOADCTL_LOAD: u32 = 1;
pub const PRCM_CLKLOADCTL_LOAD_BITN: u32 = 0;
pub const PRCM_CLKLOADCTL_LOAD_M: u32 = 1;
pub const PRCM_CLKLOADCTL_LOAD_S: u32 = 0;
pub const PRCM_RFCCLKG_CLK_EN: u32 = 1;
pub const PRCM_RFCCLKG_CLK_EN_BITN: u32 = 0;
pub const PRCM_RFCCLKG_CLK_EN_M: u32 = 1;
pub const PRCM_RFCCLKG_CLK_EN_S: u32 = 0;
pub const PRCM_VIMSCLKG_CLK_EN_W: u32 = 2;
pub const PRCM_VIMSCLKG_CLK_EN_M: u32 = 3;
pub const PRCM_VIMSCLKG_CLK_EN_S: u32 = 0;
pub const PRCM_SECDMACLKGR_DMA_CLK_EN: u32 = 256;
pub const PRCM_SECDMACLKGR_DMA_CLK_EN_BITN: u32 = 8;
pub const PRCM_SECDMACLKGR_DMA_CLK_EN_M: u32 = 256;
pub const PRCM_SECDMACLKGR_DMA_CLK_EN_S: u32 = 8;
pub const PRCM_SECDMACLKGR_TRNG_CLK_EN: u32 = 2;
pub const PRCM_SECDMACLKGR_TRNG_CLK_EN_BITN: u32 = 1;
pub const PRCM_SECDMACLKGR_TRNG_CLK_EN_M: u32 = 2;
pub const PRCM_SECDMACLKGR_TRNG_CLK_EN_S: u32 = 1;
pub const PRCM_SECDMACLKGR_CRYPTO_CLK_EN: u32 = 1;
pub const PRCM_SECDMACLKGR_CRYPTO_CLK_EN_BITN: u32 = 0;
pub const PRCM_SECDMACLKGR_CRYPTO_CLK_EN_M: u32 = 1;
pub const PRCM_SECDMACLKGR_CRYPTO_CLK_EN_S: u32 = 0;
pub const PRCM_SECDMACLKGS_DMA_CLK_EN: u32 = 256;
pub const PRCM_SECDMACLKGS_DMA_CLK_EN_BITN: u32 = 8;
pub const PRCM_SECDMACLKGS_DMA_CLK_EN_M: u32 = 256;
pub const PRCM_SECDMACLKGS_DMA_CLK_EN_S: u32 = 8;
pub const PRCM_SECDMACLKGS_TRNG_CLK_EN: u32 = 2;
pub const PRCM_SECDMACLKGS_TRNG_CLK_EN_BITN: u32 = 1;
pub const PRCM_SECDMACLKGS_TRNG_CLK_EN_M: u32 = 2;
pub const PRCM_SECDMACLKGS_TRNG_CLK_EN_S: u32 = 1;
pub const PRCM_SECDMACLKGS_CRYPTO_CLK_EN: u32 = 1;
pub const PRCM_SECDMACLKGS_CRYPTO_CLK_EN_BITN: u32 = 0;
pub const PRCM_SECDMACLKGS_CRYPTO_CLK_EN_M: u32 = 1;
pub const PRCM_SECDMACLKGS_CRYPTO_CLK_EN_S: u32 = 0;
pub const PRCM_SECDMACLKGDS_DMA_CLK_EN: u32 = 256;
pub const PRCM_SECDMACLKGDS_DMA_CLK_EN_BITN: u32 = 8;
pub const PRCM_SECDMACLKGDS_DMA_CLK_EN_M: u32 = 256;
pub const PRCM_SECDMACLKGDS_DMA_CLK_EN_S: u32 = 8;
pub const PRCM_SECDMACLKGDS_TRNG_CLK_EN: u32 = 2;
pub const PRCM_SECDMACLKGDS_TRNG_CLK_EN_BITN: u32 = 1;
pub const PRCM_SECDMACLKGDS_TRNG_CLK_EN_M: u32 = 2;
pub const PRCM_SECDMACLKGDS_TRNG_CLK_EN_S: u32 = 1;
pub const PRCM_SECDMACLKGDS_CRYPTO_CLK_EN: u32 = 1;
pub const PRCM_SECDMACLKGDS_CRYPTO_CLK_EN_BITN: u32 = 0;
pub const PRCM_SECDMACLKGDS_CRYPTO_CLK_EN_M: u32 = 1;
pub const PRCM_SECDMACLKGDS_CRYPTO_CLK_EN_S: u32 = 0;
pub const PRCM_GPIOCLKGR_CLK_EN: u32 = 1;
pub const PRCM_GPIOCLKGR_CLK_EN_BITN: u32 = 0;
pub const PRCM_GPIOCLKGR_CLK_EN_M: u32 = 1;
pub const PRCM_GPIOCLKGR_CLK_EN_S: u32 = 0;
pub const PRCM_GPIOCLKGS_CLK_EN: u32 = 1;
pub const PRCM_GPIOCLKGS_CLK_EN_BITN: u32 = 0;
pub const PRCM_GPIOCLKGS_CLK_EN_M: u32 = 1;
pub const PRCM_GPIOCLKGS_CLK_EN_S: u32 = 0;
pub const PRCM_GPIOCLKGDS_CLK_EN: u32 = 1;
pub const PRCM_GPIOCLKGDS_CLK_EN_BITN: u32 = 0;
pub const PRCM_GPIOCLKGDS_CLK_EN_M: u32 = 1;
pub const PRCM_GPIOCLKGDS_CLK_EN_S: u32 = 0;
pub const PRCM_GPTCLKGR_CLK_EN_W: u32 = 4;
pub const PRCM_GPTCLKGR_CLK_EN_M: u32 = 15;
pub const PRCM_GPTCLKGR_CLK_EN_S: u32 = 0;
pub const PRCM_GPTCLKGR_CLK_EN_GPT3: u32 = 8;
pub const PRCM_GPTCLKGR_CLK_EN_GPT2: u32 = 4;
pub const PRCM_GPTCLKGR_CLK_EN_GPT1: u32 = 2;
pub const PRCM_GPTCLKGR_CLK_EN_GPT0: u32 = 1;
pub const PRCM_GPTCLKGS_CLK_EN_W: u32 = 4;
pub const PRCM_GPTCLKGS_CLK_EN_M: u32 = 15;
pub const PRCM_GPTCLKGS_CLK_EN_S: u32 = 0;
pub const PRCM_GPTCLKGS_CLK_EN_GPT3: u32 = 8;
pub const PRCM_GPTCLKGS_CLK_EN_GPT2: u32 = 4;
pub const PRCM_GPTCLKGS_CLK_EN_GPT1: u32 = 2;
pub const PRCM_GPTCLKGS_CLK_EN_GPT0: u32 = 1;
pub const PRCM_GPTCLKGDS_CLK_EN_W: u32 = 4;
pub const PRCM_GPTCLKGDS_CLK_EN_M: u32 = 15;
pub const PRCM_GPTCLKGDS_CLK_EN_S: u32 = 0;
pub const PRCM_GPTCLKGDS_CLK_EN_GPT3: u32 = 8;
pub const PRCM_GPTCLKGDS_CLK_EN_GPT2: u32 = 4;
pub const PRCM_GPTCLKGDS_CLK_EN_GPT1: u32 = 2;
pub const PRCM_GPTCLKGDS_CLK_EN_GPT0: u32 = 1;
pub const PRCM_I2CCLKGR_CLK_EN: u32 = 1;
pub const PRCM_I2CCLKGR_CLK_EN_BITN: u32 = 0;
pub const PRCM_I2CCLKGR_CLK_EN_M: u32 = 1;
pub const PRCM_I2CCLKGR_CLK_EN_S: u32 = 0;
pub const PRCM_I2CCLKGS_CLK_EN: u32 = 1;
pub const PRCM_I2CCLKGS_CLK_EN_BITN: u32 = 0;
pub const PRCM_I2CCLKGS_CLK_EN_M: u32 = 1;
pub const PRCM_I2CCLKGS_CLK_EN_S: u32 = 0;
pub const PRCM_I2CCLKGDS_CLK_EN: u32 = 1;
pub const PRCM_I2CCLKGDS_CLK_EN_BITN: u32 = 0;
pub const PRCM_I2CCLKGDS_CLK_EN_M: u32 = 1;
pub const PRCM_I2CCLKGDS_CLK_EN_S: u32 = 0;
pub const PRCM_UARTCLKGR_CLK_EN: u32 = 1;
pub const PRCM_UARTCLKGR_CLK_EN_BITN: u32 = 0;
pub const PRCM_UARTCLKGR_CLK_EN_M: u32 = 1;
pub const PRCM_UARTCLKGR_CLK_EN_S: u32 = 0;
pub const PRCM_UARTCLKGS_CLK_EN: u32 = 1;
pub const PRCM_UARTCLKGS_CLK_EN_BITN: u32 = 0;
pub const PRCM_UARTCLKGS_CLK_EN_M: u32 = 1;
pub const PRCM_UARTCLKGS_CLK_EN_S: u32 = 0;
pub const PRCM_UARTCLKGDS_CLK_EN: u32 = 1;
pub const PRCM_UARTCLKGDS_CLK_EN_BITN: u32 = 0;
pub const PRCM_UARTCLKGDS_CLK_EN_M: u32 = 1;
pub const PRCM_UARTCLKGDS_CLK_EN_S: u32 = 0;
pub const PRCM_SSICLKGR_CLK_EN_W: u32 = 2;
pub const PRCM_SSICLKGR_CLK_EN_M: u32 = 3;
pub const PRCM_SSICLKGR_CLK_EN_S: u32 = 0;
pub const PRCM_SSICLKGR_CLK_EN_SSI1: u32 = 2;
pub const PRCM_SSICLKGR_CLK_EN_SSI0: u32 = 1;
pub const PRCM_SSICLKGS_CLK_EN_W: u32 = 2;
pub const PRCM_SSICLKGS_CLK_EN_M: u32 = 3;
pub const PRCM_SSICLKGS_CLK_EN_S: u32 = 0;
pub const PRCM_SSICLKGS_CLK_EN_SSI1: u32 = 2;
pub const PRCM_SSICLKGS_CLK_EN_SSI0: u32 = 1;
pub const PRCM_SSICLKGDS_CLK_EN_W: u32 = 2;
pub const PRCM_SSICLKGDS_CLK_EN_M: u32 = 3;
pub const PRCM_SSICLKGDS_CLK_EN_S: u32 = 0;
pub const PRCM_SSICLKGDS_CLK_EN_SSI1: u32 = 2;
pub const PRCM_SSICLKGDS_CLK_EN_SSI0: u32 = 1;
pub const PRCM_I2SCLKGR_CLK_EN: u32 = 1;
pub const PRCM_I2SCLKGR_CLK_EN_BITN: u32 = 0;
pub const PRCM_I2SCLKGR_CLK_EN_M: u32 = 1;
pub const PRCM_I2SCLKGR_CLK_EN_S: u32 = 0;
pub const PRCM_I2SCLKGS_CLK_EN: u32 = 1;
pub const PRCM_I2SCLKGS_CLK_EN_BITN: u32 = 0;
pub const PRCM_I2SCLKGS_CLK_EN_M: u32 = 1;
pub const PRCM_I2SCLKGS_CLK_EN_S: u32 = 0;
pub const PRCM_I2SCLKGDS_CLK_EN: u32 = 1;
pub const PRCM_I2SCLKGDS_CLK_EN_BITN: u32 = 0;
pub const PRCM_I2SCLKGDS_CLK_EN_M: u32 = 1;
pub const PRCM_I2SCLKGDS_CLK_EN_S: u32 = 0;
pub const PRCM_CPUCLKDIV_RATIO: u32 = 1;
pub const PRCM_CPUCLKDIV_RATIO_BITN: u32 = 0;
pub const PRCM_CPUCLKDIV_RATIO_M: u32 = 1;
pub const PRCM_CPUCLKDIV_RATIO_S: u32 = 0;
pub const PRCM_CPUCLKDIV_RATIO_DIV2: u32 = 1;
pub const PRCM_CPUCLKDIV_RATIO_DIV1: u32 = 0;
pub const PRCM_I2SBCLKSEL_SRC: u32 = 1;
pub const PRCM_I2SBCLKSEL_SRC_BITN: u32 = 0;
pub const PRCM_I2SBCLKSEL_SRC_M: u32 = 1;
pub const PRCM_I2SBCLKSEL_SRC_S: u32 = 0;
pub const PRCM_GPTCLKDIV_RATIO_W: u32 = 4;
pub const PRCM_GPTCLKDIV_RATIO_M: u32 = 15;
pub const PRCM_GPTCLKDIV_RATIO_S: u32 = 0;
pub const PRCM_GPTCLKDIV_RATIO_DIV256: u32 = 8;
pub const PRCM_GPTCLKDIV_RATIO_DIV128: u32 = 7;
pub const PRCM_GPTCLKDIV_RATIO_DIV64: u32 = 6;
pub const PRCM_GPTCLKDIV_RATIO_DIV32: u32 = 5;
pub const PRCM_GPTCLKDIV_RATIO_DIV16: u32 = 4;
pub const PRCM_GPTCLKDIV_RATIO_DIV8: u32 = 3;
pub const PRCM_GPTCLKDIV_RATIO_DIV4: u32 = 2;
pub const PRCM_GPTCLKDIV_RATIO_DIV2: u32 = 1;
pub const PRCM_GPTCLKDIV_RATIO_DIV1: u32 = 0;
pub const PRCM_I2SCLKCTL_SMPL_ON_POSEDGE: u32 = 8;
pub const PRCM_I2SCLKCTL_SMPL_ON_POSEDGE_BITN: u32 = 3;
pub const PRCM_I2SCLKCTL_SMPL_ON_POSEDGE_M: u32 = 8;
pub const PRCM_I2SCLKCTL_SMPL_ON_POSEDGE_S: u32 = 3;
pub const PRCM_I2SCLKCTL_WCLK_PHASE_W: u32 = 2;
pub const PRCM_I2SCLKCTL_WCLK_PHASE_M: u32 = 6;
pub const PRCM_I2SCLKCTL_WCLK_PHASE_S: u32 = 1;
pub const PRCM_I2SCLKCTL_EN: u32 = 1;
pub const PRCM_I2SCLKCTL_EN_BITN: u32 = 0;
pub const PRCM_I2SCLKCTL_EN_M: u32 = 1;
pub const PRCM_I2SCLKCTL_EN_S: u32 = 0;
pub const PRCM_I2SMCLKDIV_MDIV_W: u32 = 10;
pub const PRCM_I2SMCLKDIV_MDIV_M: u32 = 1023;
pub const PRCM_I2SMCLKDIV_MDIV_S: u32 = 0;
pub const PRCM_I2SBCLKDIV_BDIV_W: u32 = 10;
pub const PRCM_I2SBCLKDIV_BDIV_M: u32 = 1023;
pub const PRCM_I2SBCLKDIV_BDIV_S: u32 = 0;
pub const PRCM_I2SWCLKDIV_WDIV_W: u32 = 16;
pub const PRCM_I2SWCLKDIV_WDIV_M: u32 = 65535;
pub const PRCM_I2SWCLKDIV_WDIV_S: u32 = 0;
pub const PRCM_SWRESET_MCU: u32 = 4;
pub const PRCM_SWRESET_MCU_BITN: u32 = 2;
pub const PRCM_SWRESET_MCU_M: u32 = 4;
pub const PRCM_SWRESET_MCU_S: u32 = 2;
pub const PRCM_WARMRESET_WR_TO_PINRESET: u32 = 4;
pub const PRCM_WARMRESET_WR_TO_PINRESET_BITN: u32 = 2;
pub const PRCM_WARMRESET_WR_TO_PINRESET_M: u32 = 4;
pub const PRCM_WARMRESET_WR_TO_PINRESET_S: u32 = 2;
pub const PRCM_WARMRESET_LOCKUP_STAT: u32 = 2;
pub const PRCM_WARMRESET_LOCKUP_STAT_BITN: u32 = 1;
pub const PRCM_WARMRESET_LOCKUP_STAT_M: u32 = 2;
pub const PRCM_WARMRESET_LOCKUP_STAT_S: u32 = 1;
pub const PRCM_WARMRESET_WDT_STAT: u32 = 1;
pub const PRCM_WARMRESET_WDT_STAT_BITN: u32 = 0;
pub const PRCM_WARMRESET_WDT_STAT_M: u32 = 1;
pub const PRCM_WARMRESET_WDT_STAT_S: u32 = 0;
pub const PRCM_PDCTL0_PERIPH_ON: u32 = 4;
pub const PRCM_PDCTL0_PERIPH_ON_BITN: u32 = 2;
pub const PRCM_PDCTL0_PERIPH_ON_M: u32 = 4;
pub const PRCM_PDCTL0_PERIPH_ON_S: u32 = 2;
pub const PRCM_PDCTL0_SERIAL_ON: u32 = 2;
pub const PRCM_PDCTL0_SERIAL_ON_BITN: u32 = 1;
pub const PRCM_PDCTL0_SERIAL_ON_M: u32 = 2;
pub const PRCM_PDCTL0_SERIAL_ON_S: u32 = 1;
pub const PRCM_PDCTL0_RFC_ON: u32 = 1;
pub const PRCM_PDCTL0_RFC_ON_BITN: u32 = 0;
pub const PRCM_PDCTL0_RFC_ON_M: u32 = 1;
pub const PRCM_PDCTL0_RFC_ON_S: u32 = 0;
pub const PRCM_PDCTL0RFC_ON: u32 = 1;
pub const PRCM_PDCTL0RFC_ON_BITN: u32 = 0;
pub const PRCM_PDCTL0RFC_ON_M: u32 = 1;
pub const PRCM_PDCTL0RFC_ON_S: u32 = 0;
pub const PRCM_PDCTL0SERIAL_ON: u32 = 1;
pub const PRCM_PDCTL0SERIAL_ON_BITN: u32 = 0;
pub const PRCM_PDCTL0SERIAL_ON_M: u32 = 1;
pub const PRCM_PDCTL0SERIAL_ON_S: u32 = 0;
pub const PRCM_PDCTL0PERIPH_ON: u32 = 1;
pub const PRCM_PDCTL0PERIPH_ON_BITN: u32 = 0;
pub const PRCM_PDCTL0PERIPH_ON_M: u32 = 1;
pub const PRCM_PDCTL0PERIPH_ON_S: u32 = 0;
pub const PRCM_PDSTAT0_PERIPH_ON: u32 = 4;
pub const PRCM_PDSTAT0_PERIPH_ON_BITN: u32 = 2;
pub const PRCM_PDSTAT0_PERIPH_ON_M: u32 = 4;
pub const PRCM_PDSTAT0_PERIPH_ON_S: u32 = 2;
pub const PRCM_PDSTAT0_SERIAL_ON: u32 = 2;
pub const PRCM_PDSTAT0_SERIAL_ON_BITN: u32 = 1;
pub const PRCM_PDSTAT0_SERIAL_ON_M: u32 = 2;
pub const PRCM_PDSTAT0_SERIAL_ON_S: u32 = 1;
pub const PRCM_PDSTAT0_RFC_ON: u32 = 1;
pub const PRCM_PDSTAT0_RFC_ON_BITN: u32 = 0;
pub const PRCM_PDSTAT0_RFC_ON_M: u32 = 1;
pub const PRCM_PDSTAT0_RFC_ON_S: u32 = 0;
pub const PRCM_PDSTAT0RFC_ON: u32 = 1;
pub const PRCM_PDSTAT0RFC_ON_BITN: u32 = 0;
pub const PRCM_PDSTAT0RFC_ON_M: u32 = 1;
pub const PRCM_PDSTAT0RFC_ON_S: u32 = 0;
pub const PRCM_PDSTAT0SERIAL_ON: u32 = 1;
pub const PRCM_PDSTAT0SERIAL_ON_BITN: u32 = 0;
pub const PRCM_PDSTAT0SERIAL_ON_M: u32 = 1;
pub const PRCM_PDSTAT0SERIAL_ON_S: u32 = 0;
pub const PRCM_PDSTAT0PERIPH_ON: u32 = 1;
pub const PRCM_PDSTAT0PERIPH_ON_BITN: u32 = 0;
pub const PRCM_PDSTAT0PERIPH_ON_M: u32 = 1;
pub const PRCM_PDSTAT0PERIPH_ON_S: u32 = 0;
pub const PRCM_PDCTL1_VIMS_MODE: u32 = 8;
pub const PRCM_PDCTL1_VIMS_MODE_BITN: u32 = 3;
pub const PRCM_PDCTL1_VIMS_MODE_M: u32 = 8;
pub const PRCM_PDCTL1_VIMS_MODE_S: u32 = 3;
pub const PRCM_PDCTL1_RFC_ON: u32 = 4;
pub const PRCM_PDCTL1_RFC_ON_BITN: u32 = 2;
pub const PRCM_PDCTL1_RFC_ON_M: u32 = 4;
pub const PRCM_PDCTL1_RFC_ON_S: u32 = 2;
pub const PRCM_PDCTL1_CPU_ON: u32 = 2;
pub const PRCM_PDCTL1_CPU_ON_BITN: u32 = 1;
pub const PRCM_PDCTL1_CPU_ON_M: u32 = 2;
pub const PRCM_PDCTL1_CPU_ON_S: u32 = 1;
pub const PRCM_PDCTL1CPU_ON: u32 = 1;
pub const PRCM_PDCTL1CPU_ON_BITN: u32 = 0;
pub const PRCM_PDCTL1CPU_ON_M: u32 = 1;
pub const PRCM_PDCTL1CPU_ON_S: u32 = 0;
pub const PRCM_PDCTL1RFC_ON: u32 = 1;
pub const PRCM_PDCTL1RFC_ON_BITN: u32 = 0;
pub const PRCM_PDCTL1RFC_ON_M: u32 = 1;
pub const PRCM_PDCTL1RFC_ON_S: u32 = 0;
pub const PRCM_PDCTL1VIMS_ON: u32 = 1;
pub const PRCM_PDCTL1VIMS_ON_BITN: u32 = 0;
pub const PRCM_PDCTL1VIMS_ON_M: u32 = 1;
pub const PRCM_PDCTL1VIMS_ON_S: u32 = 0;
pub const PRCM_PDSTAT1_BUS_ON: u32 = 16;
pub const PRCM_PDSTAT1_BUS_ON_BITN: u32 = 4;
pub const PRCM_PDSTAT1_BUS_ON_M: u32 = 16;
pub const PRCM_PDSTAT1_BUS_ON_S: u32 = 4;
pub const PRCM_PDSTAT1_VIMS_MODE: u32 = 8;
pub const PRCM_PDSTAT1_VIMS_MODE_BITN: u32 = 3;
pub const PRCM_PDSTAT1_VIMS_MODE_M: u32 = 8;
pub const PRCM_PDSTAT1_VIMS_MODE_S: u32 = 3;
pub const PRCM_PDSTAT1_RFC_ON: u32 = 4;
pub const PRCM_PDSTAT1_RFC_ON_BITN: u32 = 2;
pub const PRCM_PDSTAT1_RFC_ON_M: u32 = 4;
pub const PRCM_PDSTAT1_RFC_ON_S: u32 = 2;
pub const PRCM_PDSTAT1_CPU_ON: u32 = 2;
pub const PRCM_PDSTAT1_CPU_ON_BITN: u32 = 1;
pub const PRCM_PDSTAT1_CPU_ON_M: u32 = 2;
pub const PRCM_PDSTAT1_CPU_ON_S: u32 = 1;
pub const PRCM_PDSTAT1BUS_ON: u32 = 1;
pub const PRCM_PDSTAT1BUS_ON_BITN: u32 = 0;
pub const PRCM_PDSTAT1BUS_ON_M: u32 = 1;
pub const PRCM_PDSTAT1BUS_ON_S: u32 = 0;
pub const PRCM_PDSTAT1RFC_ON: u32 = 1;
pub const PRCM_PDSTAT1RFC_ON_BITN: u32 = 0;
pub const PRCM_PDSTAT1RFC_ON_M: u32 = 1;
pub const PRCM_PDSTAT1RFC_ON_S: u32 = 0;
pub const PRCM_PDSTAT1CPU_ON: u32 = 1;
pub const PRCM_PDSTAT1CPU_ON_BITN: u32 = 0;
pub const PRCM_PDSTAT1CPU_ON_M: u32 = 1;
pub const PRCM_PDSTAT1CPU_ON_S: u32 = 0;
pub const PRCM_PDSTAT1VIMS_ON: u32 = 1;
pub const PRCM_PDSTAT1VIMS_ON_BITN: u32 = 0;
pub const PRCM_PDSTAT1VIMS_ON_M: u32 = 1;
pub const PRCM_PDSTAT1VIMS_ON_S: u32 = 0;
pub const PRCM_RFCBITS_READ_W: u32 = 32;
pub const PRCM_RFCBITS_READ_M: u32 = 4294967295;
pub const PRCM_RFCBITS_READ_S: u32 = 0;
pub const PRCM_RFCMODESEL_CURR_W: u32 = 3;
pub const PRCM_RFCMODESEL_CURR_M: u32 = 7;
pub const PRCM_RFCMODESEL_CURR_S: u32 = 0;
pub const PRCM_RFCMODESEL_CURR_MODE7: u32 = 7;
pub const PRCM_RFCMODESEL_CURR_MODE6: u32 = 6;
pub const PRCM_RFCMODESEL_CURR_MODE5: u32 = 5;
pub const PRCM_RFCMODESEL_CURR_MODE4: u32 = 4;
pub const PRCM_RFCMODESEL_CURR_MODE3: u32 = 3;
pub const PRCM_RFCMODESEL_CURR_MODE2: u32 = 2;
pub const PRCM_RFCMODESEL_CURR_MODE1: u32 = 1;
pub const PRCM_RFCMODESEL_CURR_MODE0: u32 = 0;
pub const PRCM_RFCMODEHWOPT_AVAIL_W: u32 = 8;
pub const PRCM_RFCMODEHWOPT_AVAIL_M: u32 = 255;
pub const PRCM_RFCMODEHWOPT_AVAIL_S: u32 = 0;
pub const PRCM_RFCMODEHWOPT_AVAIL_MODE7: u32 = 128;
pub const PRCM_RFCMODEHWOPT_AVAIL_MODE6: u32 = 64;
pub const PRCM_RFCMODEHWOPT_AVAIL_MODE5: u32 = 32;
pub const PRCM_RFCMODEHWOPT_AVAIL_MODE4: u32 = 16;
pub const PRCM_RFCMODEHWOPT_AVAIL_MODE3: u32 = 8;
pub const PRCM_RFCMODEHWOPT_AVAIL_MODE2: u32 = 4;
pub const PRCM_RFCMODEHWOPT_AVAIL_MODE1: u32 = 2;
pub const PRCM_RFCMODEHWOPT_AVAIL_MODE0: u32 = 1;
pub const PRCM_PWRPROFSTAT_VALUE_W: u32 = 8;
pub const PRCM_PWRPROFSTAT_VALUE_M: u32 = 255;
pub const PRCM_PWRPROFSTAT_VALUE_S: u32 = 0;
pub const PRCM_RAMRETEN_RFC: u32 = 4;
pub const PRCM_RAMRETEN_RFC_BITN: u32 = 2;
pub const PRCM_RAMRETEN_RFC_M: u32 = 4;
pub const PRCM_RAMRETEN_RFC_S: u32 = 2;
pub const PRCM_RAMRETEN_VIMS_W: u32 = 2;
pub const PRCM_RAMRETEN_VIMS_M: u32 = 3;
pub const PRCM_RAMRETEN_VIMS_S: u32 = 0;
pub const PRCM_RUN_MODE: u32 = 1;
pub const PRCM_SLEEP_MODE: u32 = 2;
pub const PRCM_DEEP_SLEEP_MODE: u32 = 4;
pub const PRCM_CLOCK_DIV_1: u32 = 0;
pub const PRCM_CLOCK_DIV_2: u32 = 1;
pub const PRCM_CLOCK_DIV_4: u32 = 2;
pub const PRCM_CLOCK_DIV_8: u32 = 3;
pub const PRCM_CLOCK_DIV_16: u32 = 4;
pub const PRCM_CLOCK_DIV_32: u32 = 5;
pub const PRCM_CLOCK_DIV_64: u32 = 6;
pub const PRCM_CLOCK_DIV_128: u32 = 7;
pub const PRCM_CLOCK_DIV_256: u32 = 8;
pub const PRCM_DOMAIN_RFCORE: u32 = 1;
pub const PRCM_DOMAIN_SERIAL: u32 = 2;
pub const PRCM_DOMAIN_PERIPH: u32 = 4;
pub const PRCM_DOMAIN_SYSBUS: u32 = 8;
pub const PRCM_DOMAIN_VIMS: u32 = 16;
pub const PRCM_DOMAIN_CPU: u32 = 32;
pub const PRCM_DOMAIN_TIMER: u32 = 64;
pub const PRCM_DOMAIN_CLKCTRL: u32 = 128;
pub const PRCM_DOMAIN_MCU: u32 = 256;
pub const PRCM_DOMAIN_POWER_OFF: u32 = 2;
pub const PRCM_DOMAIN_POWER_ON: u32 = 1;
pub const PRCM_DOMAIN_POWER_DOWN_READY: u32 = 0;
pub const PRCM_WCLK_NEG_EDGE: u32 = 8;
pub const PRCM_WCLK_POS_EDGE: u32 = 0;
pub const PRCM_WCLK_SINGLE_PHASE: u32 = 0;
pub const PRCM_WCLK_DUAL_PHASE: u32 = 2;
pub const PRCM_WCLK_USER_DEF: u32 = 4;
pub const I2S_SAMPLE_RATE_16K: u32 = 1;
pub const I2S_SAMPLE_RATE_24K: u32 = 2;
pub const I2S_SAMPLE_RATE_32K: u32 = 4;
pub const I2S_SAMPLE_RATE_48K: u32 = 8;
pub const PRCM_PERIPH_TIMER0: u32 = 0;
pub const PRCM_PERIPH_TIMER1: u32 = 1;
pub const PRCM_PERIPH_TIMER2: u32 = 2;
pub const PRCM_PERIPH_TIMER3: u32 = 3;
pub const PRCM_PERIPH_SSI0: u32 = 256;
pub const PRCM_PERIPH_SSI1: u32 = 257;
pub const PRCM_PERIPH_UART0: u32 = 512;
pub const PRCM_PERIPH_I2C0: u32 = 768;
pub const PRCM_PERIPH_CRYPTO: u32 = 1024;
pub const PRCM_PERIPH_TRNG: u32 = 1025;
pub const PRCM_PERIPH_UDMA: u32 = 1032;
pub const PRCM_PERIPH_GPIO: u32 = 1280;
pub const PRCM_PERIPH_I2S: u32 = 1536;
pub const ADI_2_REFSYS_O_REFSYSCTL0: u32 = 0;
pub const ADI_2_REFSYS_O_SOCLDOCTL0: u32 = 2;
pub const ADI_2_REFSYS_O_SOCLDOCTL1: u32 = 3;
pub const ADI_2_REFSYS_O_SOCLDOCTL2: u32 = 4;
pub const ADI_2_REFSYS_O_SOCLDOCTL3: u32 = 5;
pub const ADI_2_REFSYS_O_SOCLDOCTL4: u32 = 6;
pub const ADI_2_REFSYS_O_SOCLDOCTL5: u32 = 7;
pub const ADI_2_REFSYS_O_HPOSCCTL0: u32 = 10;
pub const ADI_2_REFSYS_O_HPOSCCTL1: u32 = 11;
pub const ADI_2_REFSYS_O_HPOSCCTL2: u32 = 12;
pub const ADI_2_REFSYS_REFSYSCTL0_TRIM_IREF_W: u32 = 5;
pub const ADI_2_REFSYS_REFSYSCTL0_TRIM_IREF_M: u32 = 31;
pub const ADI_2_REFSYS_REFSYSCTL0_TRIM_IREF_S: u32 = 0;
pub const ADI_2_REFSYS_SOCLDOCTL0_VTRIM_UDIG_W: u32 = 4;
pub const ADI_2_REFSYS_SOCLDOCTL0_VTRIM_UDIG_M: u32 = 240;
pub const ADI_2_REFSYS_SOCLDOCTL0_VTRIM_UDIG_S: u32 = 4;
pub const ADI_2_REFSYS_SOCLDOCTL0_VTRIM_BOD_W: u32 = 4;
pub const ADI_2_REFSYS_SOCLDOCTL0_VTRIM_BOD_M: u32 = 15;
pub const ADI_2_REFSYS_SOCLDOCTL0_VTRIM_BOD_S: u32 = 0;
pub const ADI_2_REFSYS_SOCLDOCTL1_VTRIM_COARSE_W: u32 = 4;
pub const ADI_2_REFSYS_SOCLDOCTL1_VTRIM_COARSE_M: u32 = 240;
pub const ADI_2_REFSYS_SOCLDOCTL1_VTRIM_COARSE_S: u32 = 4;
pub const ADI_2_REFSYS_SOCLDOCTL1_VTRIM_DIG_W: u32 = 4;
pub const ADI_2_REFSYS_SOCLDOCTL1_VTRIM_DIG_M: u32 = 15;
pub const ADI_2_REFSYS_SOCLDOCTL1_VTRIM_DIG_S: u32 = 0;
pub const ADI_2_REFSYS_SOCLDOCTL2_VTRIM_DELTA_W: u32 = 3;
pub const ADI_2_REFSYS_SOCLDOCTL2_VTRIM_DELTA_M: u32 = 7;
pub const ADI_2_REFSYS_SOCLDOCTL2_VTRIM_DELTA_S: u32 = 0;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_DIGLDO_LOAD_W: u32 = 2;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_DIGLDO_LOAD_M: u32 = 192;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_DIGLDO_LOAD_S: u32 = 6;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_DIGLDO_W: u32 = 3;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_DIGLDO_M: u32 = 56;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_DIGLDO_S: u32 = 3;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_DIGLDO_BIAS_120P: u32 = 56;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_DIGLDO_BIAS_100P: u32 = 40;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_DIGLDO_BIAS_80P: u32 = 24;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_DIGLDO_BIAS_60P: u32 = 0;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_UDIGLDO_W: u32 = 3;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_UDIGLDO_M: u32 = 7;
pub const ADI_2_REFSYS_SOCLDOCTL3_ITRIM_UDIGLDO_S: u32 = 0;
pub const ADI_2_REFSYS_SOCLDOCTL4_UDIG_ITEST_EN_W: u32 = 2;
pub const ADI_2_REFSYS_SOCLDOCTL4_UDIG_ITEST_EN_M: u32 = 96;
pub const ADI_2_REFSYS_SOCLDOCTL4_UDIG_ITEST_EN_S: u32 = 5;
pub const ADI_2_REFSYS_SOCLDOCTL4_DIG_ITEST_EN_W: u32 = 3;
pub const ADI_2_REFSYS_SOCLDOCTL4_DIG_ITEST_EN_M: u32 = 28;
pub const ADI_2_REFSYS_SOCLDOCTL4_DIG_ITEST_EN_S: u32 = 2;
pub const ADI_2_REFSYS_SOCLDOCTL4_BIAS_DIS: u32 = 2;
pub const ADI_2_REFSYS_SOCLDOCTL4_BIAS_DIS_M: u32 = 2;
pub const ADI_2_REFSYS_SOCLDOCTL4_BIAS_DIS_S: u32 = 1;
pub const ADI_2_REFSYS_SOCLDOCTL4_UDIG_LDO_EN: u32 = 1;
pub const ADI_2_REFSYS_SOCLDOCTL4_UDIG_LDO_EN_M: u32 = 1;
pub const ADI_2_REFSYS_SOCLDOCTL4_UDIG_LDO_EN_S: u32 = 0;
pub const ADI_2_REFSYS_SOCLDOCTL4_UDIG_LDO_EN_EN: u32 = 1;
pub const ADI_2_REFSYS_SOCLDOCTL4_UDIG_LDO_EN_DIS: u32 = 0;
pub const ADI_2_REFSYS_SOCLDOCTL5_IMON_ITEST_EN: u32 = 8;
pub const ADI_2_REFSYS_SOCLDOCTL5_IMON_ITEST_EN_M: u32 = 8;
pub const ADI_2_REFSYS_SOCLDOCTL5_IMON_ITEST_EN_S: u32 = 3;
pub const ADI_2_REFSYS_SOCLDOCTL5_TESTSEL_W: u32 = 3;
pub const ADI_2_REFSYS_SOCLDOCTL5_TESTSEL_M: u32 = 7;
pub const ADI_2_REFSYS_SOCLDOCTL5_TESTSEL_S: u32 = 0;
pub const ADI_2_REFSYS_SOCLDOCTL5_TESTSEL_VDD_AON: u32 = 4;
pub const ADI_2_REFSYS_SOCLDOCTL5_TESTSEL_VREF_AMP: u32 = 2;
pub const ADI_2_REFSYS_SOCLDOCTL5_TESTSEL_ITEST: u32 = 1;
pub const ADI_2_REFSYS_SOCLDOCTL5_TESTSEL_NC: u32 = 0;
pub const ADI_2_REFSYS_HPOSCCTL0_FILTER_EN: u32 = 128;
pub const ADI_2_REFSYS_HPOSCCTL0_FILTER_EN_M: u32 = 128;
pub const ADI_2_REFSYS_HPOSCCTL0_FILTER_EN_S: u32 = 7;
pub const ADI_2_REFSYS_HPOSCCTL0_BIAS_RECHARGE_DLY_W: u32 = 2;
pub const ADI_2_REFSYS_HPOSCCTL0_BIAS_RECHARGE_DLY_M: u32 = 96;
pub const ADI_2_REFSYS_HPOSCCTL0_BIAS_RECHARGE_DLY_S: u32 = 5;
pub const ADI_2_REFSYS_HPOSCCTL0_BIAS_RECHARGE_DLY_MIN_DLY_X8: u32 = 96;
pub const ADI_2_REFSYS_HPOSCCTL0_BIAS_RECHARGE_DLY_MIN_DLY_X4: u32 = 64;
pub const ADI_2_REFSYS_HPOSCCTL0_BIAS_RECHARGE_DLY_MIN_DLY_X2: u32 = 32;
pub const ADI_2_REFSYS_HPOSCCTL0_BIAS_RECHARGE_DLY_MIN_DLY_X1: u32 = 0;
pub const ADI_2_REFSYS_HPOSCCTL0_TUNE_CAP_W: u32 = 2;
pub const ADI_2_REFSYS_HPOSCCTL0_TUNE_CAP_M: u32 = 24;
pub const ADI_2_REFSYS_HPOSCCTL0_TUNE_CAP_S: u32 = 3;
pub const ADI_2_REFSYS_HPOSCCTL0_TUNE_CAP_SHIFT_M108: u32 = 24;
pub const ADI_2_REFSYS_HPOSCCTL0_TUNE_CAP_SHIFT_M70: u32 = 16;
pub const ADI_2_REFSYS_HPOSCCTL0_TUNE_CAP_SHIFT_M35: u32 = 8;
pub const ADI_2_REFSYS_HPOSCCTL0_TUNE_CAP_SHIFT_0: u32 = 0;
pub const ADI_2_REFSYS_HPOSCCTL0_SERIES_CAP_W: u32 = 2;
pub const ADI_2_REFSYS_HPOSCCTL0_SERIES_CAP_M: u32 = 6;
pub const ADI_2_REFSYS_HPOSCCTL0_SERIES_CAP_S: u32 = 1;
pub const ADI_2_REFSYS_HPOSCCTL0_DIV3_BYPASS: u32 = 1;
pub const ADI_2_REFSYS_HPOSCCTL0_DIV3_BYPASS_M: u32 = 1;
pub const ADI_2_REFSYS_HPOSCCTL0_DIV3_BYPASS_S: u32 = 0;
pub const ADI_2_REFSYS_HPOSCCTL0_DIV3_BYPASS_HPOSC_2520MHZ: u32 = 1;
pub const ADI_2_REFSYS_HPOSCCTL0_DIV3_BYPASS_HPOSC_840MHZ: u32 = 0;
pub const ADI_2_REFSYS_HPOSCCTL1_BIAS_DIS: u32 = 32;
pub const ADI_2_REFSYS_HPOSCCTL1_BIAS_DIS_M: u32 = 32;
pub const ADI_2_REFSYS_HPOSCCTL1_BIAS_DIS_S: u32 = 5;
pub const ADI_2_REFSYS_HPOSCCTL1_PWRDET_EN: u32 = 16;
pub const ADI_2_REFSYS_HPOSCCTL1_PWRDET_EN_M: u32 = 16;
pub const ADI_2_REFSYS_HPOSCCTL1_PWRDET_EN_S: u32 = 4;
pub const ADI_2_REFSYS_HPOSCCTL1_BIAS_RES_SET_W: u32 = 4;
pub const ADI_2_REFSYS_HPOSCCTL1_BIAS_RES_SET_M: u32 = 15;
pub const ADI_2_REFSYS_HPOSCCTL1_BIAS_RES_SET_S: u32 = 0;
pub const ADI_2_REFSYS_HPOSCCTL2_BIAS_HOLD_MODE_EN: u32 = 128;
pub const ADI_2_REFSYS_HPOSCCTL2_BIAS_HOLD_MODE_EN_M: u32 = 128;
pub const ADI_2_REFSYS_HPOSCCTL2_BIAS_HOLD_MODE_EN_S: u32 = 7;
pub const ADI_2_REFSYS_HPOSCCTL2_TESTMUX_EN: u32 = 64;
pub const ADI_2_REFSYS_HPOSCCTL2_TESTMUX_EN_M: u32 = 64;
pub const ADI_2_REFSYS_HPOSCCTL2_TESTMUX_EN_S: u32 = 6;
pub const ADI_2_REFSYS_HPOSCCTL2_ATEST_SEL_W: u32 = 2;
pub const ADI_2_REFSYS_HPOSCCTL2_ATEST_SEL_M: u32 = 48;
pub const ADI_2_REFSYS_HPOSCCTL2_ATEST_SEL_S: u32 = 4;
pub const ADI_2_REFSYS_HPOSCCTL2_CURRMIRR_RATIO_W: u32 = 4;
pub const ADI_2_REFSYS_HPOSCCTL2_CURRMIRR_RATIO_M: u32 = 15;
pub const ADI_2_REFSYS_HPOSCCTL2_CURRMIRR_RATIO_S: u32 = 0;
pub const PWRCTRL_ACTIVE: u32 = 1;
pub const PWRCTRL_STANDBY: u32 = 2;
pub const PWRCTRL_POWER_DOWN: u32 = 4;
pub const PWRCTRL_SHUTDOWN: u32 = 8;
pub const PWRCTRL_IOSEG3_ENABLE: u32 = 2048;
pub const PWRCTRL_IOSEG2_ENABLE: u32 = 1024;
pub const PWRCTRL_IOSEG3_DISABLE: u32 = 512;
pub const PWRCTRL_IOSEG2_DISABLE: u32 = 256;
pub const PWRCTRL_PWRSRC_DCDC: u32 = 1;
pub const PWRCTRL_PWRSRC_GLDO: u32 = 0;
pub const PWRCTRL_PWRSRC_ULDO: u32 = 2;
pub const PWRCTRL_RST_POWER_ON: u32 = 0;
pub const PWRCTRL_RST_PIN: u32 = 1;
pub const PWRCTRL_RST_VDDS_BOD: u32 = 2;
pub const PWRCTRL_RST_VDD_BOD: u32 = 3;
pub const PWRCTRL_RST_VDDR_BOD: u32 = 4;
pub const PWRCTRL_RST_CLK_LOSS: u32 = 5;
pub const PWRCTRL_RST_SW_PIN: u32 = 6;
pub const PWRCTRL_RST_WARM: u32 = 7;
pub const __NEWLIB_H__: u32 = 1;
pub const _ATEXIT_DYNAMIC_ALLOC: u32 = 1;
pub const _FSEEK_OPTIMIZATION: u32 = 1;
pub const _FVWRITE_IN_STREAMIO: u32 = 1;
pub const _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL: u32 = 1;
pub const _HAVE_INITFINI_ARRAY: u32 = 1;
pub const _HAVE_LONG_DOUBLE: u32 = 1;
pub const _LDBL_EQ_DBL: u32 = 1;
pub const _MB_LEN_MAX: u32 = 1;
pub const _REENT_CHECK_VERIFY: u32 = 1;
pub const _RETARGETABLE_LOCKING: u32 = 1;
pub const _UNBUF_STREAM_OPT: u32 = 1;
pub const _WANT_IO_C99_FORMATS: u32 = 1;
pub const _WANT_IO_LONG_LONG: u32 = 1;
pub const _WANT_REGISTER_FINI: u32 = 1;
pub const _WANT_USE_GDTOA: u32 = 1;
pub const _WIDE_ORIENT: u32 = 1;
pub const __OBSOLETE_MATH_DEFAULT: u32 = 1;
pub const __OBSOLETE_MATH: u32 = 1;
pub const __RAND_MAX: u32 = 2147483647;
pub const __GNUCLIKE_ASM: u32 = 3;
pub const __GNUCLIKE___TYPEOF: u32 = 1;
pub const __GNUCLIKE___SECTION: u32 = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: u32 = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: u32 = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: u32 = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: u32 = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: u32 = 1;
pub const __CC_SUPPORTS_INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE__: u32 = 1;
pub const __CC_SUPPORTS___FUNC__: u32 = 1;
pub const __CC_SUPPORTS_WARNING: u32 = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: u32 = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: u32 = 1;
pub const _NULL: u32 = 0;
pub const _ATEXIT_SIZE: u32 = 32;
pub const _RAND48_SEED_0: u32 = 13070;
pub const _RAND48_SEED_1: u32 = 43981;
pub const _RAND48_SEED_2: u32 = 4660;
pub const _RAND48_MULT_0: u32 = 58989;
pub const _RAND48_MULT_1: u32 = 57068;
pub const _RAND48_MULT_2: u32 = 5;
pub const _RAND48_ADD: u32 = 11;
pub const _REENT_EMERGENCY_SIZE: u32 = 25;
pub const _REENT_ASCTIME_SIZE: u32 = 26;
pub const _REENT_SIGNAL_SIZE: u32 = 24;
pub const RF_MODE_BLE: u32 = 1;
pub const RF_MODE_IEEE_15_4: u32 = 2;
pub const RF_MODE_PROPRIETARY_2_4: u32 = 3;
pub const RF_MODE_PROPRIETARY: u32 = 3;
pub const RF_MODE_MULTIPLE: u32 = 5;
pub const IRQN_COMMAND_DONE: u32 = 0;
pub const IRQN_LAST_COMMAND_DONE: u32 = 1;
pub const IRQN_FG_COMMAND_DONE: u32 = 2;
pub const IRQN_LAST_FG_COMMAND_DONE: u32 = 3;
pub const IRQN_TX_DONE: u32 = 4;
pub const IRQN_TX_ACK: u32 = 5;
pub const IRQN_TX_CTRL: u32 = 6;
pub const IRQN_TX_CTRL_ACK: u32 = 7;
pub const IRQN_TX_CTRL_ACK_ACK: u32 = 8;
pub const IRQN_TX_RETRANS: u32 = 9;
pub const IRQN_TX_ENTRY_DONE: u32 = 10;
pub const IRQN_TX_BUFFER_CHANGED: u32 = 11;
pub const IRQN_RX_OK: u32 = 16;
pub const IRQN_RX_NOK: u32 = 17;
pub const IRQN_RX_IGNORED: u32 = 18;
pub const IRQN_RX_EMPTY: u32 = 19;
pub const IRQN_RX_CTRL: u32 = 20;
pub const IRQN_RX_CTRL_ACK: u32 = 21;
pub const IRQN_RX_BUF_FULL: u32 = 22;
pub const IRQN_RX_ENTRY_DONE: u32 = 23;
pub const IRQN_RX_DATA_WRITTEN: u32 = 24;
pub const IRQN_RX_N_DATA_WRITTEN: u32 = 25;
pub const IRQN_RX_ABORTED: u32 = 26;
pub const IRQN_RX_COLLISION_DETECTED: u32 = 27;
pub const IRQN_SYNTH_NO_LOCK: u32 = 28;
pub const IRQN_MODULES_UNLOCKED: u32 = 29;
pub const IRQN_BOOT_DONE: u32 = 30;
pub const IRQN_INTERNAL_ERROR: u32 = 31;
pub const IRQ_COMMAND_DONE: u32 = 1;
pub const IRQ_LAST_COMMAND_DONE: u32 = 2;
pub const IRQ_FG_COMMAND_DONE: u32 = 4;
pub const IRQ_LAST_FG_COMMAND_DONE: u32 = 8;
pub const IRQ_TX_DONE: u32 = 16;
pub const IRQ_TX_ACK: u32 = 32;
pub const IRQ_TX_CTRL: u32 = 64;
pub const IRQ_TX_CTRL_ACK: u32 = 128;
pub const IRQ_TX_CTRL_ACK_ACK: u32 = 256;
pub const IRQ_TX_RETRANS: u32 = 512;
pub const IRQ_TX_ENTRY_DONE: u32 = 1024;
pub const IRQ_TX_BUFFER_CHANGED: u32 = 2048;
pub const IRQ_RX_OK: u32 = 65536;
pub const IRQ_RX_NOK: u32 = 131072;
pub const IRQ_RX_IGNORED: u32 = 262144;
pub const IRQ_RX_EMPTY: u32 = 524288;
pub const IRQ_RX_CTRL: u32 = 1048576;
pub const IRQ_RX_CTRL_ACK: u32 = 2097152;
pub const IRQ_RX_BUF_FULL: u32 = 4194304;
pub const IRQ_RX_ENTRY_DONE: u32 = 8388608;
pub const IRQ_RX_DATA_WRITTEN: u32 = 16777216;
pub const IRQ_RX_N_DATA_WRITTEN: u32 = 33554432;
pub const IRQ_RX_ABORTED: u32 = 67108864;
pub const IRQ_RX_COLLISION_DETECTED: u32 = 134217728;
pub const IRQ_SYNTH_NO_LOCK: u32 = 268435456;
pub const IRQ_MODULES_UNLOCKED: u32 = 536870912;
pub const IRQ_BOOT_DONE: u32 = 1073741824;
pub const IRQ_INTERNAL_ERROR: u32 = 2147483648;
pub const CMDSTA_Pending: u32 = 0;
pub const CMDSTA_Done: u32 = 1;
pub const CMDSTA_IllegalPointer: u32 = 129;
pub const CMDSTA_UnknownCommand: u32 = 130;
pub const CMDSTA_UnknownDirCommand: u32 = 131;
pub const CMDSTA_ContextError: u32 = 133;
pub const CMDSTA_SchedulingError: u32 = 134;
pub const CMDSTA_ParError: u32 = 135;
pub const CMDSTA_QueueError: u32 = 136;
pub const CMDSTA_QueueBusy: u32 = 137;
pub const TRIG_NOW: u32 = 0;
pub const TRIG_NEVER: u32 = 1;
pub const TRIG_ABSTIME: u32 = 2;
pub const TRIG_REL_SUBMIT: u32 = 3;
pub const TRIG_REL_START: u32 = 4;
pub const TRIG_REL_PREVSTART: u32 = 5;
pub const TRIG_REL_FIRSTSTART: u32 = 6;
pub const TRIG_REL_PREVEND: u32 = 7;
pub const TRIG_REL_EVT1: u32 = 8;
pub const TRIG_REL_EVT2: u32 = 9;
pub const TRIG_EXTERNAL: u32 = 10;
pub const TRIG_PAST_BM: u32 = 128;
pub const COND_ALWAYS: u32 = 0;
pub const COND_NEVER: u32 = 1;
pub const COND_STOP_ON_FALSE: u32 = 2;
pub const COND_STOP_ON_TRUE: u32 = 3;
pub const COND_SKIP_ON_FALSE: u32 = 4;
pub const COND_SKIP_ON_TRUE: u32 = 5;
pub const IDLE: u32 = 0;
pub const PENDING: u32 = 1;
pub const ACTIVE: u32 = 2;
pub const SKIPPED: u32 = 3;
pub const DONE_OK: u32 = 1024;
pub const DONE_COUNTDOWN: u32 = 1025;
pub const DONE_RXERR: u32 = 1026;
pub const DONE_TIMEOUT: u32 = 1027;
pub const DONE_STOPPED: u32 = 1028;
pub const DONE_ABORT: u32 = 1029;
pub const DONE_FAILED: u32 = 1030;
pub const ERROR_PAST_START: u32 = 2048;
pub const ERROR_START_TRIG: u32 = 2049;
pub const ERROR_CONDITION: u32 = 2050;
pub const ERROR_PAR: u32 = 2051;
pub const ERROR_POINTER: u32 = 2052;
pub const ERROR_CMDID: u32 = 2053;
pub const ERROR_WRONG_BG: u32 = 2054;
pub const ERROR_NO_SETUP: u32 = 2055;
pub const ERROR_NO_FS: u32 = 2056;
pub const ERROR_SYNTH_PROG: u32 = 2057;
pub const ERROR_TXUNF: u32 = 2058;
pub const ERROR_RXOVF: u32 = 2059;
pub const ERROR_NO_RX: u32 = 2060;
pub const ERROR_PENDING: u32 = 2061;
pub const DATA_ENTRY_TYPE_GEN: u32 = 0;
pub const DATA_ENTRY_TYPE_MULTI: u32 = 1;
pub const DATA_ENTRY_TYPE_PTR: u32 = 2;
pub const DATA_ENTRY_TYPE_PARTIAL: u32 = 3;
pub const DATA_ENTRY_PENDING: u32 = 0;
pub const DATA_ENTRY_ACTIVE: u32 = 1;
pub const DATA_ENTRY_BUSY: u32 = 2;
pub const DATA_ENTRY_FINISHED: u32 = 3;
pub const DATA_ENTRY_UNFINISHED: u32 = 4;
pub const END_OVERRIDE: u32 = 4294967295;
pub const CMD_NOP: u32 = 2049;
pub const CMD_RADIO_SETUP: u32 = 2050;
pub const CMD_FS: u32 = 2051;
pub const CMD_FS_OFF: u32 = 2052;
pub const CMD_RX_TEST: u32 = 2055;
pub const CMD_TX_TEST: u32 = 2056;
pub const CMD_SYNC_STOP_RAT: u32 = 2057;
pub const CMD_SYNC_START_RAT: u32 = 2058;
pub const CMD_COUNT: u32 = 2059;
pub const CMD_FS_POWERUP: u32 = 2060;
pub const CMD_FS_POWERDOWN: u32 = 2061;
pub const CMD_SCH_IMM: u32 = 2064;
pub const CMD_COUNT_BRANCH: u32 = 2066;
pub const CMD_PATTERN_CHECK: u32 = 2067;
pub const CMD_ABORT: u32 = 1025;
pub const CMD_STOP: u32 = 1026;
pub const CMD_GET_RSSI: u32 = 1027;
pub const CMD_UPDATE_RADIO_SETUP: u32 = 1;
pub const CMD_TRIGGER: u32 = 1028;
pub const CMD_GET_FW_INFO: u32 = 2;
pub const CMD_START_RAT: u32 = 1029;
pub const CMD_PING: u32 = 1030;
pub const CMD_READ_RFREG: u32 = 1537;
pub const CMD_ADD_DATA_ENTRY: u32 = 5;
pub const CMD_REMOVE_DATA_ENTRY: u32 = 6;
pub const CMD_FLUSH_QUEUE: u32 = 7;
pub const CMD_CLEAR_RX: u32 = 8;
pub const CMD_REMOVE_PENDING_ENTRIES: u32 = 9;
pub const CMD_SET_RAT_CMP: u32 = 10;
pub const CMD_SET_RAT_CPT: u32 = 1539;
pub const CMD_DISABLE_RAT_CH: u32 = 1032;
pub const CMD_SET_RAT_OUTPUT: u32 = 1540;
pub const CMD_ARM_RAT_CH: u32 = 1033;
pub const CMD_DISARM_RAT_CH: u32 = 1034;
pub const CMD_SET_TX_POWER: u32 = 16;
pub const CMD_UPDATE_FS: u32 = 17;
pub const CMD_BUS_REQUEST: u32 = 1038;
pub const CMD_BLE_SLAVE: u32 = 6145;
pub const CMD_BLE_MASTER: u32 = 6146;
pub const CMD_BLE_ADV: u32 = 6147;
pub const CMD_BLE_ADV_DIR: u32 = 6148;
pub const CMD_BLE_ADV_NC: u32 = 6149;
pub const CMD_BLE_ADV_SCAN: u32 = 6150;
pub const CMD_BLE_SCANNER: u32 = 6151;
pub const CMD_BLE_INITIATOR: u32 = 6152;
pub const CMD_BLE_GENERIC_RX: u32 = 6153;
pub const CMD_BLE_TX_TEST: u32 = 6154;
pub const CMD_BLE_ADV_PAYLOAD: u32 = 4097;
pub const CMD_BLE5_RADIO_SETUP: u32 = 6176;
pub const BLE_DONE_OK: u32 = 5120;
pub const BLE_DONE_RXTIMEOUT: u32 = 5121;
pub const BLE_DONE_NOSYNC: u32 = 5122;
pub const BLE_DONE_RXERR: u32 = 5123;
pub const BLE_DONE_CONNECT: u32 = 5124;
pub const BLE_DONE_MAXNACK: u32 = 5125;
pub const BLE_DONE_ENDED: u32 = 5126;
pub const BLE_DONE_ABORT: u32 = 5127;
pub const BLE_DONE_STOPPED: u32 = 5128;
pub const BLE_ERROR_PAR: u32 = 6144;
pub const BLE_ERROR_RXBUF: u32 = 6145;
pub const BLE_ERROR_NO_SETUP: u32 = 6146;
pub const BLE_ERROR_NO_FS: u32 = 6147;
pub const BLE_ERROR_SYNTH_PROG: u32 = 6148;
pub const BLE_ERROR_RXOVF: u32 = 6149;
pub const BLE_ERROR_TXUNF: u32 = 6150;
pub const RFC_PWR_O_PWMCLKEN: u32 = 0;
pub const RFC_PWR_PWMCLKEN_RFCTRC: u32 = 1024;
pub const RFC_PWR_PWMCLKEN_RFCTRC_BITN: u32 = 10;
pub const RFC_PWR_PWMCLKEN_RFCTRC_M: u32 = 1024;
pub const RFC_PWR_PWMCLKEN_RFCTRC_S: u32 = 10;
pub const RFC_PWR_PWMCLKEN_FSCA: u32 = 512;
pub const RFC_PWR_PWMCLKEN_FSCA_BITN: u32 = 9;
pub const RFC_PWR_PWMCLKEN_FSCA_M: u32 = 512;
pub const RFC_PWR_PWMCLKEN_FSCA_S: u32 = 9;
pub const RFC_PWR_PWMCLKEN_PHA: u32 = 256;
pub const RFC_PWR_PWMCLKEN_PHA_BITN: u32 = 8;
pub const RFC_PWR_PWMCLKEN_PHA_M: u32 = 256;
pub const RFC_PWR_PWMCLKEN_PHA_S: u32 = 8;
pub const RFC_PWR_PWMCLKEN_RAT: u32 = 128;
pub const RFC_PWR_PWMCLKEN_RAT_BITN: u32 = 7;
pub const RFC_PWR_PWMCLKEN_RAT_M: u32 = 128;
pub const RFC_PWR_PWMCLKEN_RAT_S: u32 = 7;
pub const RFC_PWR_PWMCLKEN_RFERAM: u32 = 64;
pub const RFC_PWR_PWMCLKEN_RFERAM_BITN: u32 = 6;
pub const RFC_PWR_PWMCLKEN_RFERAM_M: u32 = 64;
pub const RFC_PWR_PWMCLKEN_RFERAM_S: u32 = 6;
pub const RFC_PWR_PWMCLKEN_RFE: u32 = 32;
pub const RFC_PWR_PWMCLKEN_RFE_BITN: u32 = 5;
pub const RFC_PWR_PWMCLKEN_RFE_M: u32 = 32;
pub const RFC_PWR_PWMCLKEN_RFE_S: u32 = 5;
pub const RFC_PWR_PWMCLKEN_MDMRAM: u32 = 16;
pub const RFC_PWR_PWMCLKEN_MDMRAM_BITN: u32 = 4;
pub const RFC_PWR_PWMCLKEN_MDMRAM_M: u32 = 16;
pub const RFC_PWR_PWMCLKEN_MDMRAM_S: u32 = 4;
pub const RFC_PWR_PWMCLKEN_MDM: u32 = 8;
pub const RFC_PWR_PWMCLKEN_MDM_BITN: u32 = 3;
pub const RFC_PWR_PWMCLKEN_MDM_M: u32 = 8;
pub const RFC_PWR_PWMCLKEN_MDM_S: u32 = 3;
pub const RFC_PWR_PWMCLKEN_CPERAM: u32 = 4;
pub const RFC_PWR_PWMCLKEN_CPERAM_BITN: u32 = 2;
pub const RFC_PWR_PWMCLKEN_CPERAM_M: u32 = 4;
pub const RFC_PWR_PWMCLKEN_CPERAM_S: u32 = 2;
pub const RFC_PWR_PWMCLKEN_CPE: u32 = 2;
pub const RFC_PWR_PWMCLKEN_CPE_BITN: u32 = 1;
pub const RFC_PWR_PWMCLKEN_CPE_M: u32 = 2;
pub const RFC_PWR_PWMCLKEN_CPE_S: u32 = 1;
pub const RFC_PWR_PWMCLKEN_RFC: u32 = 1;
pub const RFC_PWR_PWMCLKEN_RFC_BITN: u32 = 0;
pub const RFC_PWR_PWMCLKEN_RFC_M: u32 = 1;
pub const RFC_PWR_PWMCLKEN_RFC_S: u32 = 0;
pub const RFC_DBELL_O_CMDR: u32 = 0;
pub const RFC_DBELL_O_CMDSTA: u32 = 4;
pub const RFC_DBELL_O_RFHWIFG: u32 = 8;
pub const RFC_DBELL_O_RFHWIEN: u32 = 12;
pub const RFC_DBELL_O_RFCPEIFG: u32 = 16;
pub const RFC_DBELL_O_RFCPEIEN: u32 = 20;
pub const RFC_DBELL_O_RFCPEISL: u32 = 24;
pub const RFC_DBELL_O_RFACKIFG: u32 = 28;
pub const RFC_DBELL_O_SYSGPOCTL: u32 = 32;
pub const RFC_DBELL_CMDR_CMD_W: u32 = 32;
pub const RFC_DBELL_CMDR_CMD_M: u32 = 4294967295;
pub const RFC_DBELL_CMDR_CMD_S: u32 = 0;
pub const RFC_DBELL_CMDSTA_STAT_W: u32 = 32;
pub const RFC_DBELL_CMDSTA_STAT_M: u32 = 4294967295;
pub const RFC_DBELL_CMDSTA_STAT_S: u32 = 0;
pub const RFC_DBELL_RFHWIFG_RATCH7: u32 = 524288;
pub const RFC_DBELL_RFHWIFG_RATCH7_BITN: u32 = 19;
pub const RFC_DBELL_RFHWIFG_RATCH7_M: u32 = 524288;
pub const RFC_DBELL_RFHWIFG_RATCH7_S: u32 = 19;
pub const RFC_DBELL_RFHWIFG_RATCH6: u32 = 262144;
pub const RFC_DBELL_RFHWIFG_RATCH6_BITN: u32 = 18;
pub const RFC_DBELL_RFHWIFG_RATCH6_M: u32 = 262144;
pub const RFC_DBELL_RFHWIFG_RATCH6_S: u32 = 18;
pub const RFC_DBELL_RFHWIFG_RATCH5: u32 = 131072;
pub const RFC_DBELL_RFHWIFG_RATCH5_BITN: u32 = 17;
pub const RFC_DBELL_RFHWIFG_RATCH5_M: u32 = 131072;
pub const RFC_DBELL_RFHWIFG_RATCH5_S: u32 = 17;
pub const RFC_DBELL_RFHWIFG_RATCH4: u32 = 65536;
pub const RFC_DBELL_RFHWIFG_RATCH4_BITN: u32 = 16;
pub const RFC_DBELL_RFHWIFG_RATCH4_M: u32 = 65536;
pub const RFC_DBELL_RFHWIFG_RATCH4_S: u32 = 16;
pub const RFC_DBELL_RFHWIFG_RATCH3: u32 = 32768;
pub const RFC_DBELL_RFHWIFG_RATCH3_BITN: u32 = 15;
pub const RFC_DBELL_RFHWIFG_RATCH3_M: u32 = 32768;
pub const RFC_DBELL_RFHWIFG_RATCH3_S: u32 = 15;
pub const RFC_DBELL_RFHWIFG_RATCH2: u32 = 16384;
pub const RFC_DBELL_RFHWIFG_RATCH2_BITN: u32 = 14;
pub const RFC_DBELL_RFHWIFG_RATCH2_M: u32 = 16384;
pub const RFC_DBELL_RFHWIFG_RATCH2_S: u32 = 14;
pub const RFC_DBELL_RFHWIFG_RATCH1: u32 = 8192;
pub const RFC_DBELL_RFHWIFG_RATCH1_BITN: u32 = 13;
pub const RFC_DBELL_RFHWIFG_RATCH1_M: u32 = 8192;
pub const RFC_DBELL_RFHWIFG_RATCH1_S: u32 = 13;
pub const RFC_DBELL_RFHWIFG_RATCH0: u32 = 4096;
pub const RFC_DBELL_RFHWIFG_RATCH0_BITN: u32 = 12;
pub const RFC_DBELL_RFHWIFG_RATCH0_M: u32 = 4096;
pub const RFC_DBELL_RFHWIFG_RATCH0_S: u32 = 12;
pub const RFC_DBELL_RFHWIFG_RFESOFT2: u32 = 2048;
pub const RFC_DBELL_RFHWIFG_RFESOFT2_BITN: u32 = 11;
pub const RFC_DBELL_RFHWIFG_RFESOFT2_M: u32 = 2048;
pub const RFC_DBELL_RFHWIFG_RFESOFT2_S: u32 = 11;
pub const RFC_DBELL_RFHWIFG_RFESOFT1: u32 = 1024;
pub const RFC_DBELL_RFHWIFG_RFESOFT1_BITN: u32 = 10;
pub const RFC_DBELL_RFHWIFG_RFESOFT1_M: u32 = 1024;
pub const RFC_DBELL_RFHWIFG_RFESOFT1_S: u32 = 10;
pub const RFC_DBELL_RFHWIFG_RFESOFT0: u32 = 512;
pub const RFC_DBELL_RFHWIFG_RFESOFT0_BITN: u32 = 9;
pub const RFC_DBELL_RFHWIFG_RFESOFT0_M: u32 = 512;
pub const RFC_DBELL_RFHWIFG_RFESOFT0_S: u32 = 9;
pub const RFC_DBELL_RFHWIFG_RFEDONE: u32 = 256;
pub const RFC_DBELL_RFHWIFG_RFEDONE_BITN: u32 = 8;
pub const RFC_DBELL_RFHWIFG_RFEDONE_M: u32 = 256;
pub const RFC_DBELL_RFHWIFG_RFEDONE_S: u32 = 8;
pub const RFC_DBELL_RFHWIFG_TRCTK: u32 = 64;
pub const RFC_DBELL_RFHWIFG_TRCTK_BITN: u32 = 6;
pub const RFC_DBELL_RFHWIFG_TRCTK_M: u32 = 64;
pub const RFC_DBELL_RFHWIFG_TRCTK_S: u32 = 6;
pub const RFC_DBELL_RFHWIFG_MDMSOFT: u32 = 32;
pub const RFC_DBELL_RFHWIFG_MDMSOFT_BITN: u32 = 5;
pub const RFC_DBELL_RFHWIFG_MDMSOFT_M: u32 = 32;
pub const RFC_DBELL_RFHWIFG_MDMSOFT_S: u32 = 5;
pub const RFC_DBELL_RFHWIFG_MDMOUT: u32 = 16;
pub const RFC_DBELL_RFHWIFG_MDMOUT_BITN: u32 = 4;
pub const RFC_DBELL_RFHWIFG_MDMOUT_M: u32 = 16;
pub const RFC_DBELL_RFHWIFG_MDMOUT_S: u32 = 4;
pub const RFC_DBELL_RFHWIFG_MDMIN: u32 = 8;
pub const RFC_DBELL_RFHWIFG_MDMIN_BITN: u32 = 3;
pub const RFC_DBELL_RFHWIFG_MDMIN_M: u32 = 8;
pub const RFC_DBELL_RFHWIFG_MDMIN_S: u32 = 3;
pub const RFC_DBELL_RFHWIFG_MDMDONE: u32 = 4;
pub const RFC_DBELL_RFHWIFG_MDMDONE_BITN: u32 = 2;
pub const RFC_DBELL_RFHWIFG_MDMDONE_M: u32 = 4;
pub const RFC_DBELL_RFHWIFG_MDMDONE_S: u32 = 2;
pub const RFC_DBELL_RFHWIFG_FSCA: u32 = 2;
pub const RFC_DBELL_RFHWIFG_FSCA_BITN: u32 = 1;
pub const RFC_DBELL_RFHWIFG_FSCA_M: u32 = 2;
pub const RFC_DBELL_RFHWIFG_FSCA_S: u32 = 1;
pub const RFC_DBELL_RFHWIEN_RATCH7: u32 = 524288;
pub const RFC_DBELL_RFHWIEN_RATCH7_BITN: u32 = 19;
pub const RFC_DBELL_RFHWIEN_RATCH7_M: u32 = 524288;
pub const RFC_DBELL_RFHWIEN_RATCH7_S: u32 = 19;
pub const RFC_DBELL_RFHWIEN_RATCH6: u32 = 262144;
pub const RFC_DBELL_RFHWIEN_RATCH6_BITN: u32 = 18;
pub const RFC_DBELL_RFHWIEN_RATCH6_M: u32 = 262144;
pub const RFC_DBELL_RFHWIEN_RATCH6_S: u32 = 18;
pub const RFC_DBELL_RFHWIEN_RATCH5: u32 = 131072;
pub const RFC_DBELL_RFHWIEN_RATCH5_BITN: u32 = 17;
pub const RFC_DBELL_RFHWIEN_RATCH5_M: u32 = 131072;
pub const RFC_DBELL_RFHWIEN_RATCH5_S: u32 = 17;
pub const RFC_DBELL_RFHWIEN_RATCH4: u32 = 65536;
pub const RFC_DBELL_RFHWIEN_RATCH4_BITN: u32 = 16;
pub const RFC_DBELL_RFHWIEN_RATCH4_M: u32 = 65536;
pub const RFC_DBELL_RFHWIEN_RATCH4_S: u32 = 16;
pub const RFC_DBELL_RFHWIEN_RATCH3: u32 = 32768;
pub const RFC_DBELL_RFHWIEN_RATCH3_BITN: u32 = 15;
pub const RFC_DBELL_RFHWIEN_RATCH3_M: u32 = 32768;
pub const RFC_DBELL_RFHWIEN_RATCH3_S: u32 = 15;
pub const RFC_DBELL_RFHWIEN_RATCH2: u32 = 16384;
pub const RFC_DBELL_RFHWIEN_RATCH2_BITN: u32 = 14;
pub const RFC_DBELL_RFHWIEN_RATCH2_M: u32 = 16384;
pub const RFC_DBELL_RFHWIEN_RATCH2_S: u32 = 14;
pub const RFC_DBELL_RFHWIEN_RATCH1: u32 = 8192;
pub const RFC_DBELL_RFHWIEN_RATCH1_BITN: u32 = 13;
pub const RFC_DBELL_RFHWIEN_RATCH1_M: u32 = 8192;
pub const RFC_DBELL_RFHWIEN_RATCH1_S: u32 = 13;
pub const RFC_DBELL_RFHWIEN_RATCH0: u32 = 4096;
pub const RFC_DBELL_RFHWIEN_RATCH0_BITN: u32 = 12;
pub const RFC_DBELL_RFHWIEN_RATCH0_M: u32 = 4096;
pub const RFC_DBELL_RFHWIEN_RATCH0_S: u32 = 12;
pub const RFC_DBELL_RFHWIEN_RFESOFT2: u32 = 2048;
pub const RFC_DBELL_RFHWIEN_RFESOFT2_BITN: u32 = 11;
pub const RFC_DBELL_RFHWIEN_RFESOFT2_M: u32 = 2048;
pub const RFC_DBELL_RFHWIEN_RFESOFT2_S: u32 = 11;
pub const RFC_DBELL_RFHWIEN_RFESOFT1: u32 = 1024;
pub const RFC_DBELL_RFHWIEN_RFESOFT1_BITN: u32 = 10;
pub const RFC_DBELL_RFHWIEN_RFESOFT1_M: u32 = 1024;
pub const RFC_DBELL_RFHWIEN_RFESOFT1_S: u32 = 10;
pub const RFC_DBELL_RFHWIEN_RFESOFT0: u32 = 512;
pub const RFC_DBELL_RFHWIEN_RFESOFT0_BITN: u32 = 9;
pub const RFC_DBELL_RFHWIEN_RFESOFT0_M: u32 = 512;
pub const RFC_DBELL_RFHWIEN_RFESOFT0_S: u32 = 9;
pub const RFC_DBELL_RFHWIEN_RFEDONE: u32 = 256;
pub const RFC_DBELL_RFHWIEN_RFEDONE_BITN: u32 = 8;
pub const RFC_DBELL_RFHWIEN_RFEDONE_M: u32 = 256;
pub const RFC_DBELL_RFHWIEN_RFEDONE_S: u32 = 8;
pub const RFC_DBELL_RFHWIEN_TRCTK: u32 = 64;
pub const RFC_DBELL_RFHWIEN_TRCTK_BITN: u32 = 6;
pub const RFC_DBELL_RFHWIEN_TRCTK_M: u32 = 64;
pub const RFC_DBELL_RFHWIEN_TRCTK_S: u32 = 6;
pub const RFC_DBELL_RFHWIEN_MDMSOFT: u32 = 32;
pub const RFC_DBELL_RFHWIEN_MDMSOFT_BITN: u32 = 5;
pub const RFC_DBELL_RFHWIEN_MDMSOFT_M: u32 = 32;
pub const RFC_DBELL_RFHWIEN_MDMSOFT_S: u32 = 5;
pub const RFC_DBELL_RFHWIEN_MDMOUT: u32 = 16;
pub const RFC_DBELL_RFHWIEN_MDMOUT_BITN: u32 = 4;
pub const RFC_DBELL_RFHWIEN_MDMOUT_M: u32 = 16;
pub const RFC_DBELL_RFHWIEN_MDMOUT_S: u32 = 4;
pub const RFC_DBELL_RFHWIEN_MDMIN: u32 = 8;
pub const RFC_DBELL_RFHWIEN_MDMIN_BITN: u32 = 3;
pub const RFC_DBELL_RFHWIEN_MDMIN_M: u32 = 8;
pub const RFC_DBELL_RFHWIEN_MDMIN_S: u32 = 3;
pub const RFC_DBELL_RFHWIEN_MDMDONE: u32 = 4;
pub const RFC_DBELL_RFHWIEN_MDMDONE_BITN: u32 = 2;
pub const RFC_DBELL_RFHWIEN_MDMDONE_M: u32 = 4;
pub const RFC_DBELL_RFHWIEN_MDMDONE_S: u32 = 2;
pub const RFC_DBELL_RFHWIEN_FSCA: u32 = 2;
pub const RFC_DBELL_RFHWIEN_FSCA_BITN: u32 = 1;
pub const RFC_DBELL_RFHWIEN_FSCA_M: u32 = 2;
pub const RFC_DBELL_RFHWIEN_FSCA_S: u32 = 1;
pub const RFC_DBELL_RFCPEIFG_INTERNAL_ERROR: u32 = 2147483648;
pub const RFC_DBELL_RFCPEIFG_INTERNAL_ERROR_BITN: u32 = 31;
pub const RFC_DBELL_RFCPEIFG_INTERNAL_ERROR_M: u32 = 2147483648;
pub const RFC_DBELL_RFCPEIFG_INTERNAL_ERROR_S: u32 = 31;
pub const RFC_DBELL_RFCPEIFG_BOOT_DONE: u32 = 1073741824;
pub const RFC_DBELL_RFCPEIFG_BOOT_DONE_BITN: u32 = 30;
pub const RFC_DBELL_RFCPEIFG_BOOT_DONE_M: u32 = 1073741824;
pub const RFC_DBELL_RFCPEIFG_BOOT_DONE_S: u32 = 30;
pub const RFC_DBELL_RFCPEIFG_MODULES_UNLOCKED: u32 = 536870912;
pub const RFC_DBELL_RFCPEIFG_MODULES_UNLOCKED_BITN: u32 = 29;
pub const RFC_DBELL_RFCPEIFG_MODULES_UNLOCKED_M: u32 = 536870912;
pub const RFC_DBELL_RFCPEIFG_MODULES_UNLOCKED_S: u32 = 29;
pub const RFC_DBELL_RFCPEIFG_SYNTH_NO_LOCK: u32 = 268435456;
pub const RFC_DBELL_RFCPEIFG_SYNTH_NO_LOCK_BITN: u32 = 28;
pub const RFC_DBELL_RFCPEIFG_SYNTH_NO_LOCK_M: u32 = 268435456;
pub const RFC_DBELL_RFCPEIFG_SYNTH_NO_LOCK_S: u32 = 28;
pub const RFC_DBELL_RFCPEIFG_IRQ27: u32 = 134217728;
pub const RFC_DBELL_RFCPEIFG_IRQ27_BITN: u32 = 27;
pub const RFC_DBELL_RFCPEIFG_IRQ27_M: u32 = 134217728;
pub const RFC_DBELL_RFCPEIFG_IRQ27_S: u32 = 27;
pub const RFC_DBELL_RFCPEIFG_RX_ABORTED: u32 = 67108864;
pub const RFC_DBELL_RFCPEIFG_RX_ABORTED_BITN: u32 = 26;
pub const RFC_DBELL_RFCPEIFG_RX_ABORTED_M: u32 = 67108864;
pub const RFC_DBELL_RFCPEIFG_RX_ABORTED_S: u32 = 26;
pub const RFC_DBELL_RFCPEIFG_RX_N_DATA_WRITTEN: u32 = 33554432;
pub const RFC_DBELL_RFCPEIFG_RX_N_DATA_WRITTEN_BITN: u32 = 25;
pub const RFC_DBELL_RFCPEIFG_RX_N_DATA_WRITTEN_M: u32 = 33554432;
pub const RFC_DBELL_RFCPEIFG_RX_N_DATA_WRITTEN_S: u32 = 25;
pub const RFC_DBELL_RFCPEIFG_RX_DATA_WRITTEN: u32 = 16777216;
pub const RFC_DBELL_RFCPEIFG_RX_DATA_WRITTEN_BITN: u32 = 24;
pub const RFC_DBELL_RFCPEIFG_RX_DATA_WRITTEN_M: u32 = 16777216;
pub const RFC_DBELL_RFCPEIFG_RX_DATA_WRITTEN_S: u32 = 24;
pub const RFC_DBELL_RFCPEIFG_RX_ENTRY_DONE: u32 = 8388608;
pub const RFC_DBELL_RFCPEIFG_RX_ENTRY_DONE_BITN: u32 = 23;
pub const RFC_DBELL_RFCPEIFG_RX_ENTRY_DONE_M: u32 = 8388608;
pub const RFC_DBELL_RFCPEIFG_RX_ENTRY_DONE_S: u32 = 23;
pub const RFC_DBELL_RFCPEIFG_RX_BUF_FULL: u32 = 4194304;
pub const RFC_DBELL_RFCPEIFG_RX_BUF_FULL_BITN: u32 = 22;
pub const RFC_DBELL_RFCPEIFG_RX_BUF_FULL_M: u32 = 4194304;
pub const RFC_DBELL_RFCPEIFG_RX_BUF_FULL_S: u32 = 22;
pub const RFC_DBELL_RFCPEIFG_RX_CTRL_ACK: u32 = 2097152;
pub const RFC_DBELL_RFCPEIFG_RX_CTRL_ACK_BITN: u32 = 21;
pub const RFC_DBELL_RFCPEIFG_RX_CTRL_ACK_M: u32 = 2097152;
pub const RFC_DBELL_RFCPEIFG_RX_CTRL_ACK_S: u32 = 21;
pub const RFC_DBELL_RFCPEIFG_RX_CTRL: u32 = 1048576;
pub const RFC_DBELL_RFCPEIFG_RX_CTRL_BITN: u32 = 20;
pub const RFC_DBELL_RFCPEIFG_RX_CTRL_M: u32 = 1048576;
pub const RFC_DBELL_RFCPEIFG_RX_CTRL_S: u32 = 20;
pub const RFC_DBELL_RFCPEIFG_RX_EMPTY: u32 = 524288;
pub const RFC_DBELL_RFCPEIFG_RX_EMPTY_BITN: u32 = 19;
pub const RFC_DBELL_RFCPEIFG_RX_EMPTY_M: u32 = 524288;
pub const RFC_DBELL_RFCPEIFG_RX_EMPTY_S: u32 = 19;
pub const RFC_DBELL_RFCPEIFG_RX_IGNORED: u32 = 262144;
pub const RFC_DBELL_RFCPEIFG_RX_IGNORED_BITN: u32 = 18;
pub const RFC_DBELL_RFCPEIFG_RX_IGNORED_M: u32 = 262144;
pub const RFC_DBELL_RFCPEIFG_RX_IGNORED_S: u32 = 18;
pub const RFC_DBELL_RFCPEIFG_RX_NOK: u32 = 131072;
pub const RFC_DBELL_RFCPEIFG_RX_NOK_BITN: u32 = 17;
pub const RFC_DBELL_RFCPEIFG_RX_NOK_M: u32 = 131072;
pub const RFC_DBELL_RFCPEIFG_RX_NOK_S: u32 = 17;
pub const RFC_DBELL_RFCPEIFG_RX_OK: u32 = 65536;
pub const RFC_DBELL_RFCPEIFG_RX_OK_BITN: u32 = 16;
pub const RFC_DBELL_RFCPEIFG_RX_OK_M: u32 = 65536;
pub const RFC_DBELL_RFCPEIFG_RX_OK_S: u32 = 16;
pub const RFC_DBELL_RFCPEIFG_IRQ15: u32 = 32768;
pub const RFC_DBELL_RFCPEIFG_IRQ15_BITN: u32 = 15;
pub const RFC_DBELL_RFCPEIFG_IRQ15_M: u32 = 32768;
pub const RFC_DBELL_RFCPEIFG_IRQ15_S: u32 = 15;
pub const RFC_DBELL_RFCPEIFG_IRQ14: u32 = 16384;
pub const RFC_DBELL_RFCPEIFG_IRQ14_BITN: u32 = 14;
pub const RFC_DBELL_RFCPEIFG_IRQ14_M: u32 = 16384;
pub const RFC_DBELL_RFCPEIFG_IRQ14_S: u32 = 14;
pub const RFC_DBELL_RFCPEIFG_IRQ13: u32 = 8192;
pub const RFC_DBELL_RFCPEIFG_IRQ13_BITN: u32 = 13;
pub const RFC_DBELL_RFCPEIFG_IRQ13_M: u32 = 8192;
pub const RFC_DBELL_RFCPEIFG_IRQ13_S: u32 = 13;
pub const RFC_DBELL_RFCPEIFG_IRQ12: u32 = 4096;
pub const RFC_DBELL_RFCPEIFG_IRQ12_BITN: u32 = 12;
pub const RFC_DBELL_RFCPEIFG_IRQ12_M: u32 = 4096;
pub const RFC_DBELL_RFCPEIFG_IRQ12_S: u32 = 12;
pub const RFC_DBELL_RFCPEIFG_TX_BUFFER_CHANGED: u32 = 2048;
pub const RFC_DBELL_RFCPEIFG_TX_BUFFER_CHANGED_BITN: u32 = 11;
pub const RFC_DBELL_RFCPEIFG_TX_BUFFER_CHANGED_M: u32 = 2048;
pub const RFC_DBELL_RFCPEIFG_TX_BUFFER_CHANGED_S: u32 = 11;
pub const RFC_DBELL_RFCPEIFG_TX_ENTRY_DONE: u32 = 1024;
pub const RFC_DBELL_RFCPEIFG_TX_ENTRY_DONE_BITN: u32 = 10;
pub const RFC_DBELL_RFCPEIFG_TX_ENTRY_DONE_M: u32 = 1024;
pub const RFC_DBELL_RFCPEIFG_TX_ENTRY_DONE_S: u32 = 10;
pub const RFC_DBELL_RFCPEIFG_TX_RETRANS: u32 = 512;
pub const RFC_DBELL_RFCPEIFG_TX_RETRANS_BITN: u32 = 9;
pub const RFC_DBELL_RFCPEIFG_TX_RETRANS_M: u32 = 512;
pub const RFC_DBELL_RFCPEIFG_TX_RETRANS_S: u32 = 9;
pub const RFC_DBELL_RFCPEIFG_TX_CTRL_ACK_ACK: u32 = 256;
pub const RFC_DBELL_RFCPEIFG_TX_CTRL_ACK_ACK_BITN: u32 = 8;
pub const RFC_DBELL_RFCPEIFG_TX_CTRL_ACK_ACK_M: u32 = 256;
pub const RFC_DBELL_RFCPEIFG_TX_CTRL_ACK_ACK_S: u32 = 8;
pub const RFC_DBELL_RFCPEIFG_TX_CTRL_ACK: u32 = 128;
pub const RFC_DBELL_RFCPEIFG_TX_CTRL_ACK_BITN: u32 = 7;
pub const RFC_DBELL_RFCPEIFG_TX_CTRL_ACK_M: u32 = 128;
pub const RFC_DBELL_RFCPEIFG_TX_CTRL_ACK_S: u32 = 7;
pub const RFC_DBELL_RFCPEIFG_TX_CTRL: u32 = 64;
pub const RFC_DBELL_RFCPEIFG_TX_CTRL_BITN: u32 = 6;
pub const RFC_DBELL_RFCPEIFG_TX_CTRL_M: u32 = 64;
pub const RFC_DBELL_RFCPEIFG_TX_CTRL_S: u32 = 6;
pub const RFC_DBELL_RFCPEIFG_TX_ACK: u32 = 32;
pub const RFC_DBELL_RFCPEIFG_TX_ACK_BITN: u32 = 5;
pub const RFC_DBELL_RFCPEIFG_TX_ACK_M: u32 = 32;
pub const RFC_DBELL_RFCPEIFG_TX_ACK_S: u32 = 5;
pub const RFC_DBELL_RFCPEIFG_TX_DONE: u32 = 16;
pub const RFC_DBELL_RFCPEIFG_TX_DONE_BITN: u32 = 4;
pub const RFC_DBELL_RFCPEIFG_TX_DONE_M: u32 = 16;
pub const RFC_DBELL_RFCPEIFG_TX_DONE_S: u32 = 4;
pub const RFC_DBELL_RFCPEIFG_LAST_FG_COMMAND_DONE: u32 = 8;
pub const RFC_DBELL_RFCPEIFG_LAST_FG_COMMAND_DONE_BITN: u32 = 3;
pub const RFC_DBELL_RFCPEIFG_LAST_FG_COMMAND_DONE_M: u32 = 8;
pub const RFC_DBELL_RFCPEIFG_LAST_FG_COMMAND_DONE_S: u32 = 3;
pub const RFC_DBELL_RFCPEIFG_FG_COMMAND_DONE: u32 = 4;
pub const RFC_DBELL_RFCPEIFG_FG_COMMAND_DONE_BITN: u32 = 2;
pub const RFC_DBELL_RFCPEIFG_FG_COMMAND_DONE_M: u32 = 4;
pub const RFC_DBELL_RFCPEIFG_FG_COMMAND_DONE_S: u32 = 2;
pub const RFC_DBELL_RFCPEIFG_LAST_COMMAND_DONE: u32 = 2;
pub const RFC_DBELL_RFCPEIFG_LAST_COMMAND_DONE_BITN: u32 = 1;
pub const RFC_DBELL_RFCPEIFG_LAST_COMMAND_DONE_M: u32 = 2;
pub const RFC_DBELL_RFCPEIFG_LAST_COMMAND_DONE_S: u32 = 1;
pub const RFC_DBELL_RFCPEIFG_COMMAND_DONE: u32 = 1;
pub const RFC_DBELL_RFCPEIFG_COMMAND_DONE_BITN: u32 = 0;
pub const RFC_DBELL_RFCPEIFG_COMMAND_DONE_M: u32 = 1;
pub const RFC_DBELL_RFCPEIFG_COMMAND_DONE_S: u32 = 0;
pub const RFC_DBELL_RFCPEIEN_INTERNAL_ERROR: u32 = 2147483648;
pub const RFC_DBELL_RFCPEIEN_INTERNAL_ERROR_BITN: u32 = 31;
pub const RFC_DBELL_RFCPEIEN_INTERNAL_ERROR_M: u32 = 2147483648;
pub const RFC_DBELL_RFCPEIEN_INTERNAL_ERROR_S: u32 = 31;
pub const RFC_DBELL_RFCPEIEN_BOOT_DONE: u32 = 1073741824;
pub const RFC_DBELL_RFCPEIEN_BOOT_DONE_BITN: u32 = 30;
pub const RFC_DBELL_RFCPEIEN_BOOT_DONE_M: u32 = 1073741824;
pub const RFC_DBELL_RFCPEIEN_BOOT_DONE_S: u32 = 30;
pub const RFC_DBELL_RFCPEIEN_MODULES_UNLOCKED: u32 = 536870912;
pub const RFC_DBELL_RFCPEIEN_MODULES_UNLOCKED_BITN: u32 = 29;
pub const RFC_DBELL_RFCPEIEN_MODULES_UNLOCKED_M: u32 = 536870912;
pub const RFC_DBELL_RFCPEIEN_MODULES_UNLOCKED_S: u32 = 29;
pub const RFC_DBELL_RFCPEIEN_SYNTH_NO_LOCK: u32 = 268435456;
pub const RFC_DBELL_RFCPEIEN_SYNTH_NO_LOCK_BITN: u32 = 28;
pub const RFC_DBELL_RFCPEIEN_SYNTH_NO_LOCK_M: u32 = 268435456;
pub const RFC_DBELL_RFCPEIEN_SYNTH_NO_LOCK_S: u32 = 28;
pub const RFC_DBELL_RFCPEIEN_IRQ27: u32 = 134217728;
pub const RFC_DBELL_RFCPEIEN_IRQ27_BITN: u32 = 27;
pub const RFC_DBELL_RFCPEIEN_IRQ27_M: u32 = 134217728;
pub const RFC_DBELL_RFCPEIEN_IRQ27_S: u32 = 27;
pub const RFC_DBELL_RFCPEIEN_RX_ABORTED: u32 = 67108864;
pub const RFC_DBELL_RFCPEIEN_RX_ABORTED_BITN: u32 = 26;
pub const RFC_DBELL_RFCPEIEN_RX_ABORTED_M: u32 = 67108864;
pub const RFC_DBELL_RFCPEIEN_RX_ABORTED_S: u32 = 26;
pub const RFC_DBELL_RFCPEIEN_RX_N_DATA_WRITTEN: u32 = 33554432;
pub const RFC_DBELL_RFCPEIEN_RX_N_DATA_WRITTEN_BITN: u32 = 25;
pub const RFC_DBELL_RFCPEIEN_RX_N_DATA_WRITTEN_M: u32 = 33554432;
pub const RFC_DBELL_RFCPEIEN_RX_N_DATA_WRITTEN_S: u32 = 25;
pub const RFC_DBELL_RFCPEIEN_RX_DATA_WRITTEN: u32 = 16777216;
pub const RFC_DBELL_RFCPEIEN_RX_DATA_WRITTEN_BITN: u32 = 24;
pub const RFC_DBELL_RFCPEIEN_RX_DATA_WRITTEN_M: u32 = 16777216;
pub const RFC_DBELL_RFCPEIEN_RX_DATA_WRITTEN_S: u32 = 24;
pub const RFC_DBELL_RFCPEIEN_RX_ENTRY_DONE: u32 = 8388608;
pub const RFC_DBELL_RFCPEIEN_RX_ENTRY_DONE_BITN: u32 = 23;
pub const RFC_DBELL_RFCPEIEN_RX_ENTRY_DONE_M: u32 = 8388608;
pub const RFC_DBELL_RFCPEIEN_RX_ENTRY_DONE_S: u32 = 23;
pub const RFC_DBELL_RFCPEIEN_RX_BUF_FULL: u32 = 4194304;
pub const RFC_DBELL_RFCPEIEN_RX_BUF_FULL_BITN: u32 = 22;
pub const RFC_DBELL_RFCPEIEN_RX_BUF_FULL_M: u32 = 4194304;
pub const RFC_DBELL_RFCPEIEN_RX_BUF_FULL_S: u32 = 22;
pub const RFC_DBELL_RFCPEIEN_RX_CTRL_ACK: u32 = 2097152;
pub const RFC_DBELL_RFCPEIEN_RX_CTRL_ACK_BITN: u32 = 21;
pub const RFC_DBELL_RFCPEIEN_RX_CTRL_ACK_M: u32 = 2097152;
pub const RFC_DBELL_RFCPEIEN_RX_CTRL_ACK_S: u32 = 21;
pub const RFC_DBELL_RFCPEIEN_RX_CTRL: u32 = 1048576;
pub const RFC_DBELL_RFCPEIEN_RX_CTRL_BITN: u32 = 20;
pub const RFC_DBELL_RFCPEIEN_RX_CTRL_M: u32 = 1048576;
pub const RFC_DBELL_RFCPEIEN_RX_CTRL_S: u32 = 20;
pub const RFC_DBELL_RFCPEIEN_RX_EMPTY: u32 = 524288;
pub const RFC_DBELL_RFCPEIEN_RX_EMPTY_BITN: u32 = 19;
pub const RFC_DBELL_RFCPEIEN_RX_EMPTY_M: u32 = 524288;
pub const RFC_DBELL_RFCPEIEN_RX_EMPTY_S: u32 = 19;
pub const RFC_DBELL_RFCPEIEN_RX_IGNORED: u32 = 262144;
pub const RFC_DBELL_RFCPEIEN_RX_IGNORED_BITN: u32 = 18;
pub const RFC_DBELL_RFCPEIEN_RX_IGNORED_M: u32 = 262144;
pub const RFC_DBELL_RFCPEIEN_RX_IGNORED_S: u32 = 18;
pub const RFC_DBELL_RFCPEIEN_RX_NOK: u32 = 131072;
pub const RFC_DBELL_RFCPEIEN_RX_NOK_BITN: u32 = 17;
pub const RFC_DBELL_RFCPEIEN_RX_NOK_M: u32 = 131072;
pub const RFC_DBELL_RFCPEIEN_RX_NOK_S: u32 = 17;
pub const RFC_DBELL_RFCPEIEN_RX_OK: u32 = 65536;
pub const RFC_DBELL_RFCPEIEN_RX_OK_BITN: u32 = 16;
pub const RFC_DBELL_RFCPEIEN_RX_OK_M: u32 = 65536;
pub const RFC_DBELL_RFCPEIEN_RX_OK_S: u32 = 16;
pub const RFC_DBELL_RFCPEIEN_IRQ15: u32 = 32768;
pub const RFC_DBELL_RFCPEIEN_IRQ15_BITN: u32 = 15;
pub const RFC_DBELL_RFCPEIEN_IRQ15_M: u32 = 32768;
pub const RFC_DBELL_RFCPEIEN_IRQ15_S: u32 = 15;
pub const RFC_DBELL_RFCPEIEN_IRQ14: u32 = 16384;
pub const RFC_DBELL_RFCPEIEN_IRQ14_BITN: u32 = 14;
pub const RFC_DBELL_RFCPEIEN_IRQ14_M: u32 = 16384;
pub const RFC_DBELL_RFCPEIEN_IRQ14_S: u32 = 14;
pub const RFC_DBELL_RFCPEIEN_IRQ13: u32 = 8192;
pub const RFC_DBELL_RFCPEIEN_IRQ13_BITN: u32 = 13;
pub const RFC_DBELL_RFCPEIEN_IRQ13_M: u32 = 8192;
pub const RFC_DBELL_RFCPEIEN_IRQ13_S: u32 = 13;
pub const RFC_DBELL_RFCPEIEN_IRQ12: u32 = 4096;
pub const RFC_DBELL_RFCPEIEN_IRQ12_BITN: u32 = 12;
pub const RFC_DBELL_RFCPEIEN_IRQ12_M: u32 = 4096;
pub const RFC_DBELL_RFCPEIEN_IRQ12_S: u32 = 12;
pub const RFC_DBELL_RFCPEIEN_TX_BUFFER_CHANGED: u32 = 2048;
pub const RFC_DBELL_RFCPEIEN_TX_BUFFER_CHANGED_BITN: u32 = 11;
pub const RFC_DBELL_RFCPEIEN_TX_BUFFER_CHANGED_M: u32 = 2048;
pub const RFC_DBELL_RFCPEIEN_TX_BUFFER_CHANGED_S: u32 = 11;
pub const RFC_DBELL_RFCPEIEN_TX_ENTRY_DONE: u32 = 1024;
pub const RFC_DBELL_RFCPEIEN_TX_ENTRY_DONE_BITN: u32 = 10;
pub const RFC_DBELL_RFCPEIEN_TX_ENTRY_DONE_M: u32 = 1024;
pub const RFC_DBELL_RFCPEIEN_TX_ENTRY_DONE_S: u32 = 10;
pub const RFC_DBELL_RFCPEIEN_TX_RETRANS: u32 = 512;
pub const RFC_DBELL_RFCPEIEN_TX_RETRANS_BITN: u32 = 9;
pub const RFC_DBELL_RFCPEIEN_TX_RETRANS_M: u32 = 512;
pub const RFC_DBELL_RFCPEIEN_TX_RETRANS_S: u32 = 9;
pub const RFC_DBELL_RFCPEIEN_TX_CTRL_ACK_ACK: u32 = 256;
pub const RFC_DBELL_RFCPEIEN_TX_CTRL_ACK_ACK_BITN: u32 = 8;
pub const RFC_DBELL_RFCPEIEN_TX_CTRL_ACK_ACK_M: u32 = 256;
pub const RFC_DBELL_RFCPEIEN_TX_CTRL_ACK_ACK_S: u32 = 8;
pub const RFC_DBELL_RFCPEIEN_TX_CTRL_ACK: u32 = 128;
pub const RFC_DBELL_RFCPEIEN_TX_CTRL_ACK_BITN: u32 = 7;
pub const RFC_DBELL_RFCPEIEN_TX_CTRL_ACK_M: u32 = 128;
pub const RFC_DBELL_RFCPEIEN_TX_CTRL_ACK_S: u32 = 7;
pub const RFC_DBELL_RFCPEIEN_TX_CTRL: u32 = 64;
pub const RFC_DBELL_RFCPEIEN_TX_CTRL_BITN: u32 = 6;
pub const RFC_DBELL_RFCPEIEN_TX_CTRL_M: u32 = 64;
pub const RFC_DBELL_RFCPEIEN_TX_CTRL_S: u32 = 6;
pub const RFC_DBELL_RFCPEIEN_TX_ACK: u32 = 32;
pub const RFC_DBELL_RFCPEIEN_TX_ACK_BITN: u32 = 5;
pub const RFC_DBELL_RFCPEIEN_TX_ACK_M: u32 = 32;
pub const RFC_DBELL_RFCPEIEN_TX_ACK_S: u32 = 5;
pub const RFC_DBELL_RFCPEIEN_TX_DONE: u32 = 16;
pub const RFC_DBELL_RFCPEIEN_TX_DONE_BITN: u32 = 4;
pub const RFC_DBELL_RFCPEIEN_TX_DONE_M: u32 = 16;
pub const RFC_DBELL_RFCPEIEN_TX_DONE_S: u32 = 4;
pub const RFC_DBELL_RFCPEIEN_LAST_FG_COMMAND_DONE: u32 = 8;
pub const RFC_DBELL_RFCPEIEN_LAST_FG_COMMAND_DONE_BITN: u32 = 3;
pub const RFC_DBELL_RFCPEIEN_LAST_FG_COMMAND_DONE_M: u32 = 8;
pub const RFC_DBELL_RFCPEIEN_LAST_FG_COMMAND_DONE_S: u32 = 3;
pub const RFC_DBELL_RFCPEIEN_FG_COMMAND_DONE: u32 = 4;
pub const RFC_DBELL_RFCPEIEN_FG_COMMAND_DONE_BITN: u32 = 2;
pub const RFC_DBELL_RFCPEIEN_FG_COMMAND_DONE_M: u32 = 4;
pub const RFC_DBELL_RFCPEIEN_FG_COMMAND_DONE_S: u32 = 2;
pub const RFC_DBELL_RFCPEIEN_LAST_COMMAND_DONE: u32 = 2;
pub const RFC_DBELL_RFCPEIEN_LAST_COMMAND_DONE_BITN: u32 = 1;
pub const RFC_DBELL_RFCPEIEN_LAST_COMMAND_DONE_M: u32 = 2;
pub const RFC_DBELL_RFCPEIEN_LAST_COMMAND_DONE_S: u32 = 1;
pub const RFC_DBELL_RFCPEIEN_COMMAND_DONE: u32 = 1;
pub const RFC_DBELL_RFCPEIEN_COMMAND_DONE_BITN: u32 = 0;
pub const RFC_DBELL_RFCPEIEN_COMMAND_DONE_M: u32 = 1;
pub const RFC_DBELL_RFCPEIEN_COMMAND_DONE_S: u32 = 0;
pub const RFC_DBELL_RFCPEISL_INTERNAL_ERROR: u32 = 2147483648;
pub const RFC_DBELL_RFCPEISL_INTERNAL_ERROR_BITN: u32 = 31;
pub const RFC_DBELL_RFCPEISL_INTERNAL_ERROR_M: u32 = 2147483648;
pub const RFC_DBELL_RFCPEISL_INTERNAL_ERROR_S: u32 = 31;
pub const RFC_DBELL_RFCPEISL_INTERNAL_ERROR_CPE1: u32 = 2147483648;
pub const RFC_DBELL_RFCPEISL_INTERNAL_ERROR_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_BOOT_DONE: u32 = 1073741824;
pub const RFC_DBELL_RFCPEISL_BOOT_DONE_BITN: u32 = 30;
pub const RFC_DBELL_RFCPEISL_BOOT_DONE_M: u32 = 1073741824;
pub const RFC_DBELL_RFCPEISL_BOOT_DONE_S: u32 = 30;
pub const RFC_DBELL_RFCPEISL_BOOT_DONE_CPE1: u32 = 1073741824;
pub const RFC_DBELL_RFCPEISL_BOOT_DONE_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_MODULES_UNLOCKED: u32 = 536870912;
pub const RFC_DBELL_RFCPEISL_MODULES_UNLOCKED_BITN: u32 = 29;
pub const RFC_DBELL_RFCPEISL_MODULES_UNLOCKED_M: u32 = 536870912;
pub const RFC_DBELL_RFCPEISL_MODULES_UNLOCKED_S: u32 = 29;
pub const RFC_DBELL_RFCPEISL_MODULES_UNLOCKED_CPE1: u32 = 536870912;
pub const RFC_DBELL_RFCPEISL_MODULES_UNLOCKED_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_SYNTH_NO_LOCK: u32 = 268435456;
pub const RFC_DBELL_RFCPEISL_SYNTH_NO_LOCK_BITN: u32 = 28;
pub const RFC_DBELL_RFCPEISL_SYNTH_NO_LOCK_M: u32 = 268435456;
pub const RFC_DBELL_RFCPEISL_SYNTH_NO_LOCK_S: u32 = 28;
pub const RFC_DBELL_RFCPEISL_SYNTH_NO_LOCK_CPE1: u32 = 268435456;
pub const RFC_DBELL_RFCPEISL_SYNTH_NO_LOCK_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_IRQ27: u32 = 134217728;
pub const RFC_DBELL_RFCPEISL_IRQ27_BITN: u32 = 27;
pub const RFC_DBELL_RFCPEISL_IRQ27_M: u32 = 134217728;
pub const RFC_DBELL_RFCPEISL_IRQ27_S: u32 = 27;
pub const RFC_DBELL_RFCPEISL_IRQ27_CPE1: u32 = 134217728;
pub const RFC_DBELL_RFCPEISL_IRQ27_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_RX_ABORTED: u32 = 67108864;
pub const RFC_DBELL_RFCPEISL_RX_ABORTED_BITN: u32 = 26;
pub const RFC_DBELL_RFCPEISL_RX_ABORTED_M: u32 = 67108864;
pub const RFC_DBELL_RFCPEISL_RX_ABORTED_S: u32 = 26;
pub const RFC_DBELL_RFCPEISL_RX_ABORTED_CPE1: u32 = 67108864;
pub const RFC_DBELL_RFCPEISL_RX_ABORTED_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_RX_N_DATA_WRITTEN: u32 = 33554432;
pub const RFC_DBELL_RFCPEISL_RX_N_DATA_WRITTEN_BITN: u32 = 25;
pub const RFC_DBELL_RFCPEISL_RX_N_DATA_WRITTEN_M: u32 = 33554432;
pub const RFC_DBELL_RFCPEISL_RX_N_DATA_WRITTEN_S: u32 = 25;
pub const RFC_DBELL_RFCPEISL_RX_N_DATA_WRITTEN_CPE1: u32 = 33554432;
pub const RFC_DBELL_RFCPEISL_RX_N_DATA_WRITTEN_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_RX_DATA_WRITTEN: u32 = 16777216;
pub const RFC_DBELL_RFCPEISL_RX_DATA_WRITTEN_BITN: u32 = 24;
pub const RFC_DBELL_RFCPEISL_RX_DATA_WRITTEN_M: u32 = 16777216;
pub const RFC_DBELL_RFCPEISL_RX_DATA_WRITTEN_S: u32 = 24;
pub const RFC_DBELL_RFCPEISL_RX_DATA_WRITTEN_CPE1: u32 = 16777216;
pub const RFC_DBELL_RFCPEISL_RX_DATA_WRITTEN_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_RX_ENTRY_DONE: u32 = 8388608;
pub const RFC_DBELL_RFCPEISL_RX_ENTRY_DONE_BITN: u32 = 23;
pub const RFC_DBELL_RFCPEISL_RX_ENTRY_DONE_M: u32 = 8388608;
pub const RFC_DBELL_RFCPEISL_RX_ENTRY_DONE_S: u32 = 23;
pub const RFC_DBELL_RFCPEISL_RX_ENTRY_DONE_CPE1: u32 = 8388608;
pub const RFC_DBELL_RFCPEISL_RX_ENTRY_DONE_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_RX_BUF_FULL: u32 = 4194304;
pub const RFC_DBELL_RFCPEISL_RX_BUF_FULL_BITN: u32 = 22;
pub const RFC_DBELL_RFCPEISL_RX_BUF_FULL_M: u32 = 4194304;
pub const RFC_DBELL_RFCPEISL_RX_BUF_FULL_S: u32 = 22;
pub const RFC_DBELL_RFCPEISL_RX_BUF_FULL_CPE1: u32 = 4194304;
pub const RFC_DBELL_RFCPEISL_RX_BUF_FULL_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_RX_CTRL_ACK: u32 = 2097152;
pub const RFC_DBELL_RFCPEISL_RX_CTRL_ACK_BITN: u32 = 21;
pub const RFC_DBELL_RFCPEISL_RX_CTRL_ACK_M: u32 = 2097152;
pub const RFC_DBELL_RFCPEISL_RX_CTRL_ACK_S: u32 = 21;
pub const RFC_DBELL_RFCPEISL_RX_CTRL_ACK_CPE1: u32 = 2097152;
pub const RFC_DBELL_RFCPEISL_RX_CTRL_ACK_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_RX_CTRL: u32 = 1048576;
pub const RFC_DBELL_RFCPEISL_RX_CTRL_BITN: u32 = 20;
pub const RFC_DBELL_RFCPEISL_RX_CTRL_M: u32 = 1048576;
pub const RFC_DBELL_RFCPEISL_RX_CTRL_S: u32 = 20;
pub const RFC_DBELL_RFCPEISL_RX_CTRL_CPE1: u32 = 1048576;
pub const RFC_DBELL_RFCPEISL_RX_CTRL_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_RX_EMPTY: u32 = 524288;
pub const RFC_DBELL_RFCPEISL_RX_EMPTY_BITN: u32 = 19;
pub const RFC_DBELL_RFCPEISL_RX_EMPTY_M: u32 = 524288;
pub const RFC_DBELL_RFCPEISL_RX_EMPTY_S: u32 = 19;
pub const RFC_DBELL_RFCPEISL_RX_EMPTY_CPE1: u32 = 524288;
pub const RFC_DBELL_RFCPEISL_RX_EMPTY_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_RX_IGNORED: u32 = 262144;
pub const RFC_DBELL_RFCPEISL_RX_IGNORED_BITN: u32 = 18;
pub const RFC_DBELL_RFCPEISL_RX_IGNORED_M: u32 = 262144;
pub const RFC_DBELL_RFCPEISL_RX_IGNORED_S: u32 = 18;
pub const RFC_DBELL_RFCPEISL_RX_IGNORED_CPE1: u32 = 262144;
pub const RFC_DBELL_RFCPEISL_RX_IGNORED_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_RX_NOK: u32 = 131072;
pub const RFC_DBELL_RFCPEISL_RX_NOK_BITN: u32 = 17;
pub const RFC_DBELL_RFCPEISL_RX_NOK_M: u32 = 131072;
pub const RFC_DBELL_RFCPEISL_RX_NOK_S: u32 = 17;
pub const RFC_DBELL_RFCPEISL_RX_NOK_CPE1: u32 = 131072;
pub const RFC_DBELL_RFCPEISL_RX_NOK_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_RX_OK: u32 = 65536;
pub const RFC_DBELL_RFCPEISL_RX_OK_BITN: u32 = 16;
pub const RFC_DBELL_RFCPEISL_RX_OK_M: u32 = 65536;
pub const RFC_DBELL_RFCPEISL_RX_OK_S: u32 = 16;
pub const RFC_DBELL_RFCPEISL_RX_OK_CPE1: u32 = 65536;
pub const RFC_DBELL_RFCPEISL_RX_OK_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_IRQ15: u32 = 32768;
pub const RFC_DBELL_RFCPEISL_IRQ15_BITN: u32 = 15;
pub const RFC_DBELL_RFCPEISL_IRQ15_M: u32 = 32768;
pub const RFC_DBELL_RFCPEISL_IRQ15_S: u32 = 15;
pub const RFC_DBELL_RFCPEISL_IRQ15_CPE1: u32 = 32768;
pub const RFC_DBELL_RFCPEISL_IRQ15_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_IRQ14: u32 = 16384;
pub const RFC_DBELL_RFCPEISL_IRQ14_BITN: u32 = 14;
pub const RFC_DBELL_RFCPEISL_IRQ14_M: u32 = 16384;
pub const RFC_DBELL_RFCPEISL_IRQ14_S: u32 = 14;
pub const RFC_DBELL_RFCPEISL_IRQ14_CPE1: u32 = 16384;
pub const RFC_DBELL_RFCPEISL_IRQ14_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_IRQ13: u32 = 8192;
pub const RFC_DBELL_RFCPEISL_IRQ13_BITN: u32 = 13;
pub const RFC_DBELL_RFCPEISL_IRQ13_M: u32 = 8192;
pub const RFC_DBELL_RFCPEISL_IRQ13_S: u32 = 13;
pub const RFC_DBELL_RFCPEISL_IRQ13_CPE1: u32 = 8192;
pub const RFC_DBELL_RFCPEISL_IRQ13_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_IRQ12: u32 = 4096;
pub const RFC_DBELL_RFCPEISL_IRQ12_BITN: u32 = 12;
pub const RFC_DBELL_RFCPEISL_IRQ12_M: u32 = 4096;
pub const RFC_DBELL_RFCPEISL_IRQ12_S: u32 = 12;
pub const RFC_DBELL_RFCPEISL_IRQ12_CPE1: u32 = 4096;
pub const RFC_DBELL_RFCPEISL_IRQ12_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_TX_BUFFER_CHANGED: u32 = 2048;
pub const RFC_DBELL_RFCPEISL_TX_BUFFER_CHANGED_BITN: u32 = 11;
pub const RFC_DBELL_RFCPEISL_TX_BUFFER_CHANGED_M: u32 = 2048;
pub const RFC_DBELL_RFCPEISL_TX_BUFFER_CHANGED_S: u32 = 11;
pub const RFC_DBELL_RFCPEISL_TX_BUFFER_CHANGED_CPE1: u32 = 2048;
pub const RFC_DBELL_RFCPEISL_TX_BUFFER_CHANGED_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_TX_ENTRY_DONE: u32 = 1024;
pub const RFC_DBELL_RFCPEISL_TX_ENTRY_DONE_BITN: u32 = 10;
pub const RFC_DBELL_RFCPEISL_TX_ENTRY_DONE_M: u32 = 1024;
pub const RFC_DBELL_RFCPEISL_TX_ENTRY_DONE_S: u32 = 10;
pub const RFC_DBELL_RFCPEISL_TX_ENTRY_DONE_CPE1: u32 = 1024;
pub const RFC_DBELL_RFCPEISL_TX_ENTRY_DONE_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_TX_RETRANS: u32 = 512;
pub const RFC_DBELL_RFCPEISL_TX_RETRANS_BITN: u32 = 9;
pub const RFC_DBELL_RFCPEISL_TX_RETRANS_M: u32 = 512;
pub const RFC_DBELL_RFCPEISL_TX_RETRANS_S: u32 = 9;
pub const RFC_DBELL_RFCPEISL_TX_RETRANS_CPE1: u32 = 512;
pub const RFC_DBELL_RFCPEISL_TX_RETRANS_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_ACK_ACK: u32 = 256;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_ACK_ACK_BITN: u32 = 8;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_ACK_ACK_M: u32 = 256;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_ACK_ACK_S: u32 = 8;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_ACK_ACK_CPE1: u32 = 256;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_ACK_ACK_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_ACK: u32 = 128;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_ACK_BITN: u32 = 7;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_ACK_M: u32 = 128;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_ACK_S: u32 = 7;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_ACK_CPE1: u32 = 128;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_ACK_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_TX_CTRL: u32 = 64;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_BITN: u32 = 6;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_M: u32 = 64;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_S: u32 = 6;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_CPE1: u32 = 64;
pub const RFC_DBELL_RFCPEISL_TX_CTRL_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_TX_ACK: u32 = 32;
pub const RFC_DBELL_RFCPEISL_TX_ACK_BITN: u32 = 5;
pub const RFC_DBELL_RFCPEISL_TX_ACK_M: u32 = 32;
pub const RFC_DBELL_RFCPEISL_TX_ACK_S: u32 = 5;
pub const RFC_DBELL_RFCPEISL_TX_ACK_CPE1: u32 = 32;
pub const RFC_DBELL_RFCPEISL_TX_ACK_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_TX_DONE: u32 = 16;
pub const RFC_DBELL_RFCPEISL_TX_DONE_BITN: u32 = 4;
pub const RFC_DBELL_RFCPEISL_TX_DONE_M: u32 = 16;
pub const RFC_DBELL_RFCPEISL_TX_DONE_S: u32 = 4;
pub const RFC_DBELL_RFCPEISL_TX_DONE_CPE1: u32 = 16;
pub const RFC_DBELL_RFCPEISL_TX_DONE_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_LAST_FG_COMMAND_DONE: u32 = 8;
pub const RFC_DBELL_RFCPEISL_LAST_FG_COMMAND_DONE_BITN: u32 = 3;
pub const RFC_DBELL_RFCPEISL_LAST_FG_COMMAND_DONE_M: u32 = 8;
pub const RFC_DBELL_RFCPEISL_LAST_FG_COMMAND_DONE_S: u32 = 3;
pub const RFC_DBELL_RFCPEISL_LAST_FG_COMMAND_DONE_CPE1: u32 = 8;
pub const RFC_DBELL_RFCPEISL_LAST_FG_COMMAND_DONE_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_FG_COMMAND_DONE: u32 = 4;
pub const RFC_DBELL_RFCPEISL_FG_COMMAND_DONE_BITN: u32 = 2;
pub const RFC_DBELL_RFCPEISL_FG_COMMAND_DONE_M: u32 = 4;
pub const RFC_DBELL_RFCPEISL_FG_COMMAND_DONE_S: u32 = 2;
pub const RFC_DBELL_RFCPEISL_FG_COMMAND_DONE_CPE1: u32 = 4;
pub const RFC_DBELL_RFCPEISL_FG_COMMAND_DONE_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_LAST_COMMAND_DONE: u32 = 2;
pub const RFC_DBELL_RFCPEISL_LAST_COMMAND_DONE_BITN: u32 = 1;
pub const RFC_DBELL_RFCPEISL_LAST_COMMAND_DONE_M: u32 = 2;
pub const RFC_DBELL_RFCPEISL_LAST_COMMAND_DONE_S: u32 = 1;
pub const RFC_DBELL_RFCPEISL_LAST_COMMAND_DONE_CPE1: u32 = 2;
pub const RFC_DBELL_RFCPEISL_LAST_COMMAND_DONE_CPE0: u32 = 0;
pub const RFC_DBELL_RFCPEISL_COMMAND_DONE: u32 = 1;
pub const RFC_DBELL_RFCPEISL_COMMAND_DONE_BITN: u32 = 0;
pub const RFC_DBELL_RFCPEISL_COMMAND_DONE_M: u32 = 1;
pub const RFC_DBELL_RFCPEISL_COMMAND_DONE_S: u32 = 0;
pub const RFC_DBELL_RFCPEISL_COMMAND_DONE_CPE1: u32 = 1;
pub const RFC_DBELL_RFCPEISL_COMMAND_DONE_CPE0: u32 = 0;
pub const RFC_DBELL_RFACKIFG_ACKFLAG: u32 = 1;
pub const RFC_DBELL_RFACKIFG_ACKFLAG_BITN: u32 = 0;
pub const RFC_DBELL_RFACKIFG_ACKFLAG_M: u32 = 1;
pub const RFC_DBELL_RFACKIFG_ACKFLAG_S: u32 = 0;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_W: u32 = 4;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_M: u32 = 61440;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_S: u32 = 12;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_RATGPO3: u32 = 61440;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_RATGPO2: u32 = 57344;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_RATGPO1: u32 = 53248;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_RATGPO0: u32 = 49152;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_RFEGPO3: u32 = 45056;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_RFEGPO2: u32 = 40960;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_RFEGPO1: u32 = 36864;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_RFEGPO0: u32 = 32768;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_MCEGPO3: u32 = 28672;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_MCEGPO2: u32 = 24576;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_MCEGPO1: u32 = 20480;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_MCEGPO0: u32 = 16384;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_CPEGPO3: u32 = 12288;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_CPEGPO2: u32 = 8192;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_CPEGPO1: u32 = 4096;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL3_CPEGPO0: u32 = 0;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_W: u32 = 4;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_M: u32 = 3840;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_S: u32 = 8;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_RATGPO3: u32 = 3840;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_RATGPO2: u32 = 3584;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_RATGPO1: u32 = 3328;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_RATGPO0: u32 = 3072;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_RFEGPO3: u32 = 2816;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_RFEGPO2: u32 = 2560;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_RFEGPO1: u32 = 2304;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_RFEGPO0: u32 = 2048;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_MCEGPO3: u32 = 1792;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_MCEGPO2: u32 = 1536;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_MCEGPO1: u32 = 1280;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_MCEGPO0: u32 = 1024;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_CPEGPO3: u32 = 768;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_CPEGPO2: u32 = 512;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_CPEGPO1: u32 = 256;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL2_CPEGPO0: u32 = 0;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_W: u32 = 4;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_M: u32 = 240;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_S: u32 = 4;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_RATGPO3: u32 = 240;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_RATGPO2: u32 = 224;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_RATGPO1: u32 = 208;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_RATGPO0: u32 = 192;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_RFEGPO3: u32 = 176;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_RFEGPO2: u32 = 160;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_RFEGPO1: u32 = 144;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_RFEGPO0: u32 = 128;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_MCEGPO3: u32 = 112;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_MCEGPO2: u32 = 96;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_MCEGPO1: u32 = 80;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_MCEGPO0: u32 = 64;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_CPEGPO3: u32 = 48;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_CPEGPO2: u32 = 32;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_CPEGPO1: u32 = 16;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL1_CPEGPO0: u32 = 0;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_W: u32 = 4;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_M: u32 = 15;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_S: u32 = 0;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_RATGPO3: u32 = 15;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_RATGPO2: u32 = 14;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_RATGPO1: u32 = 13;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_RATGPO0: u32 = 12;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_RFEGPO3: u32 = 11;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_RFEGPO2: u32 = 10;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_RFEGPO1: u32 = 9;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_RFEGPO0: u32 = 8;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_MCEGPO3: u32 = 7;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_MCEGPO2: u32 = 6;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_MCEGPO1: u32 = 5;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_MCEGPO0: u32 = 4;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_CPEGPO3: u32 = 3;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_CPEGPO2: u32 = 2;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_CPEGPO1: u32 = 1;
pub const RFC_DBELL_SYSGPOCTL_GPOCTL0_CPEGPO0: u32 = 0;
pub const CMD_PROP_TX: u32 = 14337;
pub const CMD_PROP_RX: u32 = 14338;
pub const CMD_PROP_TX_ADV: u32 = 14339;
pub const CMD_PROP_RX_ADV: u32 = 14340;
pub const CMD_PROP_RADIO_SETUP: u32 = 14342;
pub const CMD_PROP_RADIO_DIV_SETUP: u32 = 14343;
pub const CMD_PROP_SET_LEN: u32 = 13313;
pub const CMD_PROP_RESTART_RX: u32 = 13314;
pub const ADI_3_REFSYS_O_SPARE0: u32 = 1;
pub const ADI_3_REFSYS_O_REFSYSCTL0: u32 = 2;
pub const ADI_3_REFSYS_O_REFSYSCTL1: u32 = 3;
pub const ADI_3_REFSYS_O_REFSYSCTL2: u32 = 4;
pub const ADI_3_REFSYS_O_REFSYSCTL3: u32 = 5;
pub const ADI_3_REFSYS_O_DCDCCTL0: u32 = 6;
pub const ADI_3_REFSYS_O_DCDCCTL1: u32 = 7;
pub const ADI_3_REFSYS_O_DCDCCTL2: u32 = 8;
pub const ADI_3_REFSYS_O_DCDCCTL3: u32 = 9;
pub const ADI_3_REFSYS_O_DCDCCTL4: u32 = 10;
pub const ADI_3_REFSYS_O_DCDCCTL5: u32 = 11;
pub const ADI_3_REFSYS_SPARE0_SPARE0_W: u32 = 8;
pub const ADI_3_REFSYS_SPARE0_SPARE0_M: u32 = 255;
pub const ADI_3_REFSYS_SPARE0_SPARE0_S: u32 = 0;
pub const ADI_3_REFSYS_REFSYSCTL0_TESTCTL_W: u32 = 8;
pub const ADI_3_REFSYS_REFSYSCTL0_TESTCTL_M: u32 = 255;
pub const ADI_3_REFSYS_REFSYSCTL0_TESTCTL_S: u32 = 0;
pub const ADI_3_REFSYS_REFSYSCTL0_TESTCTL_BMCOMPOUT: u32 = 128;
pub const ADI_3_REFSYS_REFSYSCTL0_TESTCTL_VTEMP: u32 = 64;
pub const ADI_3_REFSYS_REFSYSCTL0_TESTCTL_VREF0P8V: u32 = 32;
pub const ADI_3_REFSYS_REFSYSCTL0_TESTCTL_VBGUNBUFF: u32 = 16;
pub const ADI_3_REFSYS_REFSYSCTL0_TESTCTL_VBG: u32 = 8;
pub const ADI_3_REFSYS_REFSYSCTL0_TESTCTL_IREF4U: u32 = 4;
pub const ADI_3_REFSYS_REFSYSCTL0_TESTCTL_IVREF4U: u32 = 2;
pub const ADI_3_REFSYS_REFSYSCTL0_TESTCTL_IPTAT2U: u32 = 1;
pub const ADI_3_REFSYS_REFSYSCTL0_TESTCTL_NC: u32 = 0;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_W: u32 = 5;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_M: u32 = 248;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_S: u32 = 3;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_27: u32 = 248;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_26: u32 = 240;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_25: u32 = 232;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_24: u32 = 224;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_31: u32 = 216;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_30: u32 = 208;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_29: u32 = 200;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_28: u32 = 192;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_19: u32 = 184;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_18: u32 = 176;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_17: u32 = 168;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_16: u32 = 160;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_23: u32 = 152;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_22: u32 = 144;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_21: u32 = 136;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_20: u32 = 128;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_11: u32 = 120;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_10: u32 = 112;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_9: u32 = 104;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_8: u32 = 96;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_15: u32 = 88;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_14: u32 = 80;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_13: u32 = 72;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_12: u32 = 64;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_3: u32 = 56;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_2: u32 = 48;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_1: u32 = 40;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_0: u32 = 32;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_7: u32 = 24;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_6: u32 = 16;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_5: u32 = 8;
pub const ADI_3_REFSYS_REFSYSCTL1_TRIM_VDDS_BOD_POS_4: u32 = 0;
pub const ADI_3_REFSYS_REFSYSCTL1_BATMON_COMP_TEST_EN: u32 = 4;
pub const ADI_3_REFSYS_REFSYSCTL1_BATMON_COMP_TEST_EN_M: u32 = 4;
pub const ADI_3_REFSYS_REFSYSCTL1_BATMON_COMP_TEST_EN_S: u32 = 2;
pub const ADI_3_REFSYS_REFSYSCTL1_BATMON_COMP_TEST_EN_EN: u32 = 4;
pub const ADI_3_REFSYS_REFSYSCTL1_BATMON_COMP_TEST_EN_DIS: u32 = 0;
pub const ADI_3_REFSYS_REFSYSCTL1_TESTCTL_W: u32 = 2;
pub const ADI_3_REFSYS_REFSYSCTL1_TESTCTL_M: u32 = 3;
pub const ADI_3_REFSYS_REFSYSCTL1_TESTCTL_S: u32 = 0;
pub const ADI_3_REFSYS_REFSYSCTL1_TESTCTL_IPTAT1U: u32 = 2;
pub const ADI_3_REFSYS_REFSYSCTL1_TESTCTL_BMCOMPIN: u32 = 1;
pub const ADI_3_REFSYS_REFSYSCTL1_TESTCTL_NC: u32 = 0;
pub const ADI_3_REFSYS_REFSYSCTL2_TRIM_VREF_W: u32 = 4;
pub const ADI_3_REFSYS_REFSYSCTL2_TRIM_VREF_M: u32 = 240;
pub const ADI_3_REFSYS_REFSYSCTL2_TRIM_VREF_S: u32 = 4;
pub const ADI_3_REFSYS_REFSYSCTL2_TRIM_TSENSE_W: u32 = 2;
pub const ADI_3_REFSYS_REFSYSCTL2_TRIM_TSENSE_M: u32 = 3;
pub const ADI_3_REFSYS_REFSYSCTL2_TRIM_TSENSE_S: u32 = 0;
pub const ADI_3_REFSYS_REFSYSCTL3_BOD_BG_TRIM_EN: u32 = 128;
pub const ADI_3_REFSYS_REFSYSCTL3_BOD_BG_TRIM_EN_M: u32 = 128;
pub const ADI_3_REFSYS_REFSYSCTL3_BOD_BG_TRIM_EN_S: u32 = 7;
pub const ADI_3_REFSYS_REFSYSCTL3_VTEMP_EN: u32 = 64;
pub const ADI_3_REFSYS_REFSYSCTL3_VTEMP_EN_M: u32 = 64;
pub const ADI_3_REFSYS_REFSYSCTL3_VTEMP_EN_S: u32 = 6;
pub const ADI_3_REFSYS_REFSYSCTL3_VTEMP_EN_EN: u32 = 64;
pub const ADI_3_REFSYS_REFSYSCTL3_VTEMP_EN_DIS: u32 = 0;
pub const ADI_3_REFSYS_REFSYSCTL3_TRIM_VBG_W: u32 = 6;
pub const ADI_3_REFSYS_REFSYSCTL3_TRIM_VBG_M: u32 = 63;
pub const ADI_3_REFSYS_REFSYSCTL3_TRIM_VBG_S: u32 = 0;
pub const ADI_3_REFSYS_DCDCCTL0_GLDO_ISRC_W: u32 = 3;
pub const ADI_3_REFSYS_DCDCCTL0_GLDO_ISRC_M: u32 = 224;
pub const ADI_3_REFSYS_DCDCCTL0_GLDO_ISRC_S: u32 = 5;
pub const ADI_3_REFSYS_DCDCCTL0_VDDR_TRIM_W: u32 = 5;
pub const ADI_3_REFSYS_DCDCCTL0_VDDR_TRIM_M: u32 = 31;
pub const ADI_3_REFSYS_DCDCCTL0_VDDR_TRIM_S: u32 = 0;
pub const ADI_3_REFSYS_DCDCCTL1_IPTAT_TRIM_W: u32 = 2;
pub const ADI_3_REFSYS_DCDCCTL1_IPTAT_TRIM_M: u32 = 192;
pub const ADI_3_REFSYS_DCDCCTL1_IPTAT_TRIM_S: u32 = 6;
pub const ADI_3_REFSYS_DCDCCTL1_VDDR_OK_HYST: u32 = 32;
pub const ADI_3_REFSYS_DCDCCTL1_VDDR_OK_HYST_M: u32 = 32;
pub const ADI_3_REFSYS_DCDCCTL1_VDDR_OK_HYST_S: u32 = 5;
pub const ADI_3_REFSYS_DCDCCTL1_VDDR_TRIM_SLEEP_W: u32 = 5;
pub const ADI_3_REFSYS_DCDCCTL1_VDDR_TRIM_SLEEP_M: u32 = 31;
pub const ADI_3_REFSYS_DCDCCTL1_VDDR_TRIM_SLEEP_S: u32 = 0;
pub const ADI_3_REFSYS_DCDCCTL2_TURNON_EA_SW: u32 = 64;
pub const ADI_3_REFSYS_DCDCCTL2_TURNON_EA_SW_M: u32 = 64;
pub const ADI_3_REFSYS_DCDCCTL2_TURNON_EA_SW_S: u32 = 6;
pub const ADI_3_REFSYS_DCDCCTL2_TEST_VDDR: u32 = 32;
pub const ADI_3_REFSYS_DCDCCTL2_TEST_VDDR_M: u32 = 32;
pub const ADI_3_REFSYS_DCDCCTL2_TEST_VDDR_S: u32 = 5;
pub const ADI_3_REFSYS_DCDCCTL2_BIAS_DIS: u32 = 16;
pub const ADI_3_REFSYS_DCDCCTL2_BIAS_DIS_M: u32 = 16;
pub const ADI_3_REFSYS_DCDCCTL2_BIAS_DIS_S: u32 = 4;
pub const ADI_3_REFSYS_DCDCCTL2_TESTSEL_W: u32 = 4;
pub const ADI_3_REFSYS_DCDCCTL2_TESTSEL_M: u32 = 15;
pub const ADI_3_REFSYS_DCDCCTL2_TESTSEL_S: u32 = 0;
pub const ADI_3_REFSYS_DCDCCTL2_TESTSEL_VDDROK: u32 = 8;
pub const ADI_3_REFSYS_DCDCCTL2_TESTSEL_IB1U: u32 = 4;
pub const ADI_3_REFSYS_DCDCCTL2_TESTSEL_PASSGATE: u32 = 2;
pub const ADI_3_REFSYS_DCDCCTL2_TESTSEL_ERRAMP_OUT: u32 = 1;
pub const ADI_3_REFSYS_DCDCCTL2_TESTSEL_NC: u32 = 0;
pub const ADI_3_REFSYS_DCDCCTL4_DEADTIME_TRIM_W: u32 = 2;
pub const ADI_3_REFSYS_DCDCCTL4_DEADTIME_TRIM_M: u32 = 192;
pub const ADI_3_REFSYS_DCDCCTL4_DEADTIME_TRIM_S: u32 = 6;
pub const ADI_3_REFSYS_DCDCCTL4_LOW_EN_SEL_W: u32 = 3;
pub const ADI_3_REFSYS_DCDCCTL4_LOW_EN_SEL_M: u32 = 56;
pub const ADI_3_REFSYS_DCDCCTL4_LOW_EN_SEL_S: u32 = 3;
pub const ADI_3_REFSYS_DCDCCTL4_HIGH_EN_SEL_W: u32 = 3;
pub const ADI_3_REFSYS_DCDCCTL4_HIGH_EN_SEL_M: u32 = 7;
pub const ADI_3_REFSYS_DCDCCTL4_HIGH_EN_SEL_S: u32 = 0;
pub const ADI_3_REFSYS_DCDCCTL5_TESTN: u32 = 32;
pub const ADI_3_REFSYS_DCDCCTL5_TESTN_M: u32 = 32;
pub const ADI_3_REFSYS_DCDCCTL5_TESTN_S: u32 = 5;
pub const ADI_3_REFSYS_DCDCCTL5_TESTP: u32 = 16;
pub const ADI_3_REFSYS_DCDCCTL5_TESTP_M: u32 = 16;
pub const ADI_3_REFSYS_DCDCCTL5_TESTP_S: u32 = 4;
pub const ADI_3_REFSYS_DCDCCTL5_DITHER_EN: u32 = 8;
pub const ADI_3_REFSYS_DCDCCTL5_DITHER_EN_M: u32 = 8;
pub const ADI_3_REFSYS_DCDCCTL5_DITHER_EN_S: u32 = 3;
pub const ADI_3_REFSYS_DCDCCTL5_DITHER_EN_EN: u32 = 8;
pub const ADI_3_REFSYS_DCDCCTL5_DITHER_EN_DIS: u32 = 0;
pub const ADI_3_REFSYS_DCDCCTL5_IPEAK_W: u32 = 3;
pub const ADI_3_REFSYS_DCDCCTL5_IPEAK_M: u32 = 7;
pub const ADI_3_REFSYS_DCDCCTL5_IPEAK_S: u32 = 0;
pub const RFC_MAX_SEARCH_DEPTH: u32 = 5;
pub const CMD_IEEE_RX: u32 = 10241;
pub const CMD_IEEE_ED_SCAN: u32 = 10242;
pub const CMD_IEEE_TX: u32 = 11265;
pub const CMD_IEEE_CSMA: u32 = 11266;
pub const CMD_IEEE_RX_ACK: u32 = 11267;
pub const CMD_IEEE_ABORT_BG: u32 = 11268;
pub const CMD_IEEE_MOD_CCA: u32 = 8193;
pub const CMD_IEEE_MOD_FILT: u32 = 8194;
pub const CMD_IEEE_MOD_SRC_MATCH: u32 = 8195;
pub const CMD_IEEE_ABORT_FG: u32 = 9217;
pub const CMD_IEEE_STOP_FG: u32 = 9218;
pub const CMD_IEEE_CCA_REQ: u32 = 9219;
pub const IEEE_SUSPENDED: u32 = 8193;
pub const IEEE_DONE_OK: u32 = 9216;
pub const IEEE_DONE_BUSY: u32 = 9217;
pub const IEEE_DONE_STOPPED: u32 = 9218;
pub const IEEE_DONE_ACK: u32 = 9219;
pub const IEEE_DONE_ACKPEND: u32 = 9220;
pub const IEEE_DONE_TIMEOUT: u32 = 9221;
pub const IEEE_DONE_BGEND: u32 = 9222;
pub const IEEE_DONE_ABORT: u32 = 9223;
pub const IEEE_ERROR_PAR: u32 = 10240;
pub const IEEE_ERROR_NO_SETUP: u32 = 10241;
pub const IEEE_ERROR_NO_FS: u32 = 10242;
pub const IEEE_ERROR_SYNTH_PROG: u32 = 10243;
pub const IEEE_ERROR_RXOVF: u32 = 10244;
pub const IEEE_ERROR_TXUNF: u32 = 10245;
pub const PROP_DONE_OK: u32 = 13312;
pub const PROP_DONE_RXTIMEOUT: u32 = 13313;
pub const PROP_DONE_BREAK: u32 = 13314;
pub const PROP_DONE_ENDED: u32 = 13315;
pub const PROP_DONE_STOPPED: u32 = 13316;
pub const PROP_DONE_ABORT: u32 = 13317;
pub const PROP_DONE_RXERR: u32 = 13318;
pub const PROP_DONE_IDLE: u32 = 13319;
pub const PROP_DONE_BUSY: u32 = 13320;
pub const PROP_DONE_IDLETIMEOUT: u32 = 13321;
pub const PROP_DONE_BUSYTIMEOUT: u32 = 13322;
pub const PROP_ERROR_PAR: u32 = 14336;
pub const PROP_ERROR_RXBUF: u32 = 14337;
pub const PROP_ERROR_RXFULL: u32 = 14338;
pub const PROP_ERROR_NO_SETUP: u32 = 14339;
pub const PROP_ERROR_NO_FS: u32 = 14340;
pub const PROP_ERROR_RXOVF: u32 = 14341;
pub const PROP_ERROR_TXUNF: u32 = 14342;
pub const ECC_WINDOW_SIZE: u32 = 3;
pub const ECC_MODULUS_EVEN: u32 = 220;
pub const ECC_MODULUS_LARGER_THAN_255_WORDS: u32 = 210;
pub const ECC_MODULUS_LENGTH_ZERO: u32 = 8;
pub const ECC_MODULUS_MSW_IS_ZERO: u32 = 48;
pub const ECC_SCALAR_TOO_LONG: u32 = 53;
pub const ECC_SCALAR_LENGTH_ZERO: u32 = 83;
pub const ECC_ORDER_TOO_LONG: u32 = 198;
pub const ECC_ORDER_LENGTH_ZERO: u32 = 108;
pub const ECC_X_COORD_TOO_LONG: u32 = 60;
pub const ECC_X_COORD_LENGTH_ZERO: u32 = 195;
pub const ECC_Y_COORD_TOO_LONG: u32 = 101;
pub const ECC_Y_COORD_LENGTH_ZERO: u32 = 86;
pub const ECC_A_COEF_TOO_LONG: u32 = 92;
pub const ECC_A_COEF_LENGTH_ZERO: u32 = 197;
pub const ECC_BAD_WINDOW_SIZE: u32 = 102;
pub const ECC_SCALAR_MUL_OK: u32 = 153;
pub const ECC_ORDER_LARGER_THAN_255_WORDS: u32 = 40;
pub const ECC_ORDER_EVEN: u32 = 130;
pub const ECC_ORDER_MSW_IS_ZERO: u32 = 35;
pub const ECC_ECC_KEY_TOO_LONG: u32 = 37;
pub const ECC_ECC_KEY_LENGTH_ZERO: u32 = 82;
pub const ECC_DIGEST_TOO_LONG: u32 = 39;
pub const ECC_DIGEST_LENGTH_ZERO: u32 = 114;
pub const ECC_ECDSA_SIGN_OK: u32 = 50;
pub const ECC_ECDSA_INVALID_SIGNATURE: u32 = 90;
pub const ECC_ECDSA_VALID_SIGNATURE: u32 = 165;
pub const ECC_SIG_P1_TOO_LONG: u32 = 17;
pub const ECC_SIG_P1_LENGTH_ZERO: u32 = 18;
pub const ECC_SIG_P2_TOO_LONG: u32 = 34;
pub const ECC_SIG_P2_LENGTH_ZERO: u32 = 33;
pub const ECC_ECDSA_KEYGEN_OK: u32 = 153;
pub const ECC_ECDH_KEYGEN_OK: u32 = 153;
pub const ECC_ECDH_COMMON_KEY_OK: u32 = 153;
pub const SMPH_O_SMPH0: u32 = 0;
pub const SMPH_O_SMPH1: u32 = 4;
pub const SMPH_O_SMPH2: u32 = 8;
pub const SMPH_O_SMPH3: u32 = 12;
pub const SMPH_O_SMPH4: u32 = 16;
pub const SMPH_O_SMPH5: u32 = 20;
pub const SMPH_O_SMPH6: u32 = 24;
pub const SMPH_O_SMPH7: u32 = 28;
pub const SMPH_O_SMPH8: u32 = 32;
pub const SMPH_O_SMPH9: u32 = 36;
pub const SMPH_O_SMPH10: u32 = 40;
pub const SMPH_O_SMPH11: u32 = 44;
pub const SMPH_O_SMPH12: u32 = 48;
pub const SMPH_O_SMPH13: u32 = 52;
pub const SMPH_O_SMPH14: u32 = 56;
pub const SMPH_O_SMPH15: u32 = 60;
pub const SMPH_O_SMPH16: u32 = 64;
pub const SMPH_O_SMPH17: u32 = 68;
pub const SMPH_O_SMPH18: u32 = 72;
pub const SMPH_O_SMPH19: u32 = 76;
pub const SMPH_O_SMPH20: u32 = 80;
pub const SMPH_O_SMPH21: u32 = 84;
pub const SMPH_O_SMPH22: u32 = 88;
pub const SMPH_O_SMPH23: u32 = 92;
pub const SMPH_O_SMPH24: u32 = 96;
pub const SMPH_O_SMPH25: u32 = 100;
pub const SMPH_O_SMPH26: u32 = 104;
pub const SMPH_O_SMPH27: u32 = 108;
pub const SMPH_O_SMPH28: u32 = 112;
pub const SMPH_O_SMPH29: u32 = 116;
pub const SMPH_O_SMPH30: u32 = 120;
pub const SMPH_O_SMPH31: u32 = 124;
pub const SMPH_O_PEEK0: u32 = 2048;
pub const SMPH_O_PEEK1: u32 = 2052;
pub const SMPH_O_PEEK2: u32 = 2056;
pub const SMPH_O_PEEK3: u32 = 2060;
pub const SMPH_O_PEEK4: u32 = 2064;
pub const SMPH_O_PEEK5: u32 = 2068;
pub const SMPH_O_PEEK6: u32 = 2072;
pub const SMPH_O_PEEK7: u32 = 2076;
pub const SMPH_O_PEEK8: u32 = 2080;
pub const SMPH_O_PEEK9: u32 = 2084;
pub const SMPH_O_PEEK10: u32 = 2088;
pub const SMPH_O_PEEK11: u32 = 2092;
pub const SMPH_O_PEEK12: u32 = 2096;
pub const SMPH_O_PEEK13: u32 = 2100;
pub const SMPH_O_PEEK14: u32 = 2104;
pub const SMPH_O_PEEK15: u32 = 2108;
pub const SMPH_O_PEEK16: u32 = 2112;
pub const SMPH_O_PEEK17: u32 = 2116;
pub const SMPH_O_PEEK18: u32 = 2120;
pub const SMPH_O_PEEK19: u32 = 2124;
pub const SMPH_O_PEEK20: u32 = 2128;
pub const SMPH_O_PEEK21: u32 = 2132;
pub const SMPH_O_PEEK22: u32 = 2136;
pub const SMPH_O_PEEK23: u32 = 2140;
pub const SMPH_O_PEEK24: u32 = 2144;
pub const SMPH_O_PEEK25: u32 = 2148;
pub const SMPH_O_PEEK26: u32 = 2152;
pub const SMPH_O_PEEK27: u32 = 2156;
pub const SMPH_O_PEEK28: u32 = 2160;
pub const SMPH_O_PEEK29: u32 = 2164;
pub const SMPH_O_PEEK30: u32 = 2168;
pub const SMPH_O_PEEK31: u32 = 2172;
pub const SMPH_SMPH0_STAT: u32 = 1;
pub const SMPH_SMPH0_STAT_BITN: u32 = 0;
pub const SMPH_SMPH0_STAT_M: u32 = 1;
pub const SMPH_SMPH0_STAT_S: u32 = 0;
pub const SMPH_SMPH1_STAT: u32 = 1;
pub const SMPH_SMPH1_STAT_BITN: u32 = 0;
pub const SMPH_SMPH1_STAT_M: u32 = 1;
pub const SMPH_SMPH1_STAT_S: u32 = 0;
pub const SMPH_SMPH2_STAT: u32 = 1;
pub const SMPH_SMPH2_STAT_BITN: u32 = 0;
pub const SMPH_SMPH2_STAT_M: u32 = 1;
pub const SMPH_SMPH2_STAT_S: u32 = 0;
pub const SMPH_SMPH3_STAT: u32 = 1;
pub const SMPH_SMPH3_STAT_BITN: u32 = 0;
pub const SMPH_SMPH3_STAT_M: u32 = 1;
pub const SMPH_SMPH3_STAT_S: u32 = 0;
pub const SMPH_SMPH4_STAT: u32 = 1;
pub const SMPH_SMPH4_STAT_BITN: u32 = 0;
pub const SMPH_SMPH4_STAT_M: u32 = 1;
pub const SMPH_SMPH4_STAT_S: u32 = 0;
pub const SMPH_SMPH5_STAT: u32 = 1;
pub const SMPH_SMPH5_STAT_BITN: u32 = 0;
pub const SMPH_SMPH5_STAT_M: u32 = 1;
pub const SMPH_SMPH5_STAT_S: u32 = 0;
pub const SMPH_SMPH6_STAT: u32 = 1;
pub const SMPH_SMPH6_STAT_BITN: u32 = 0;
pub const SMPH_SMPH6_STAT_M: u32 = 1;
pub const SMPH_SMPH6_STAT_S: u32 = 0;
pub const SMPH_SMPH7_STAT: u32 = 1;
pub const SMPH_SMPH7_STAT_BITN: u32 = 0;
pub const SMPH_SMPH7_STAT_M: u32 = 1;
pub const SMPH_SMPH7_STAT_S: u32 = 0;
pub const SMPH_SMPH8_STAT: u32 = 1;
pub const SMPH_SMPH8_STAT_BITN: u32 = 0;
pub const SMPH_SMPH8_STAT_M: u32 = 1;
pub const SMPH_SMPH8_STAT_S: u32 = 0;
pub const SMPH_SMPH9_STAT: u32 = 1;
pub const SMPH_SMPH9_STAT_BITN: u32 = 0;
pub const SMPH_SMPH9_STAT_M: u32 = 1;
pub const SMPH_SMPH9_STAT_S: u32 = 0;
pub const SMPH_SMPH10_STAT: u32 = 1;
pub const SMPH_SMPH10_STAT_BITN: u32 = 0;
pub const SMPH_SMPH10_STAT_M: u32 = 1;
pub const SMPH_SMPH10_STAT_S: u32 = 0;
pub const SMPH_SMPH11_STAT: u32 = 1;
pub const SMPH_SMPH11_STAT_BITN: u32 = 0;
pub const SMPH_SMPH11_STAT_M: u32 = 1;
pub const SMPH_SMPH11_STAT_S: u32 = 0;
pub const SMPH_SMPH12_STAT: u32 = 1;
pub const SMPH_SMPH12_STAT_BITN: u32 = 0;
pub const SMPH_SMPH12_STAT_M: u32 = 1;
pub const SMPH_SMPH12_STAT_S: u32 = 0;
pub const SMPH_SMPH13_STAT: u32 = 1;
pub const SMPH_SMPH13_STAT_BITN: u32 = 0;
pub const SMPH_SMPH13_STAT_M: u32 = 1;
pub const SMPH_SMPH13_STAT_S: u32 = 0;
pub const SMPH_SMPH14_STAT: u32 = 1;
pub const SMPH_SMPH14_STAT_BITN: u32 = 0;
pub const SMPH_SMPH14_STAT_M: u32 = 1;
pub const SMPH_SMPH14_STAT_S: u32 = 0;
pub const SMPH_SMPH15_STAT: u32 = 1;
pub const SMPH_SMPH15_STAT_BITN: u32 = 0;
pub const SMPH_SMPH15_STAT_M: u32 = 1;
pub const SMPH_SMPH15_STAT_S: u32 = 0;
pub const SMPH_SMPH16_STAT: u32 = 1;
pub const SMPH_SMPH16_STAT_BITN: u32 = 0;
pub const SMPH_SMPH16_STAT_M: u32 = 1;
pub const SMPH_SMPH16_STAT_S: u32 = 0;
pub const SMPH_SMPH17_STAT: u32 = 1;
pub const SMPH_SMPH17_STAT_BITN: u32 = 0;
pub const SMPH_SMPH17_STAT_M: u32 = 1;
pub const SMPH_SMPH17_STAT_S: u32 = 0;
pub const SMPH_SMPH18_STAT: u32 = 1;
pub const SMPH_SMPH18_STAT_BITN: u32 = 0;
pub const SMPH_SMPH18_STAT_M: u32 = 1;
pub const SMPH_SMPH18_STAT_S: u32 = 0;
pub const SMPH_SMPH19_STAT: u32 = 1;
pub const SMPH_SMPH19_STAT_BITN: u32 = 0;
pub const SMPH_SMPH19_STAT_M: u32 = 1;
pub const SMPH_SMPH19_STAT_S: u32 = 0;
pub const SMPH_SMPH20_STAT: u32 = 1;
pub const SMPH_SMPH20_STAT_BITN: u32 = 0;
pub const SMPH_SMPH20_STAT_M: u32 = 1;
pub const SMPH_SMPH20_STAT_S: u32 = 0;
pub const SMPH_SMPH21_STAT: u32 = 1;
pub const SMPH_SMPH21_STAT_BITN: u32 = 0;
pub const SMPH_SMPH21_STAT_M: u32 = 1;
pub const SMPH_SMPH21_STAT_S: u32 = 0;
pub const SMPH_SMPH22_STAT: u32 = 1;
pub const SMPH_SMPH22_STAT_BITN: u32 = 0;
pub const SMPH_SMPH22_STAT_M: u32 = 1;
pub const SMPH_SMPH22_STAT_S: u32 = 0;
pub const SMPH_SMPH23_STAT: u32 = 1;
pub const SMPH_SMPH23_STAT_BITN: u32 = 0;
pub const SMPH_SMPH23_STAT_M: u32 = 1;
pub const SMPH_SMPH23_STAT_S: u32 = 0;
pub const SMPH_SMPH24_STAT: u32 = 1;
pub const SMPH_SMPH24_STAT_BITN: u32 = 0;
pub const SMPH_SMPH24_STAT_M: u32 = 1;
pub const SMPH_SMPH24_STAT_S: u32 = 0;
pub const SMPH_SMPH25_STAT: u32 = 1;
pub const SMPH_SMPH25_STAT_BITN: u32 = 0;
pub const SMPH_SMPH25_STAT_M: u32 = 1;
pub const SMPH_SMPH25_STAT_S: u32 = 0;
pub const SMPH_SMPH26_STAT: u32 = 1;
pub const SMPH_SMPH26_STAT_BITN: u32 = 0;
pub const SMPH_SMPH26_STAT_M: u32 = 1;
pub const SMPH_SMPH26_STAT_S: u32 = 0;
pub const SMPH_SMPH27_STAT: u32 = 1;
pub const SMPH_SMPH27_STAT_BITN: u32 = 0;
pub const SMPH_SMPH27_STAT_M: u32 = 1;
pub const SMPH_SMPH27_STAT_S: u32 = 0;
pub const SMPH_SMPH28_STAT: u32 = 1;
pub const SMPH_SMPH28_STAT_BITN: u32 = 0;
pub const SMPH_SMPH28_STAT_M: u32 = 1;
pub const SMPH_SMPH28_STAT_S: u32 = 0;
pub const SMPH_SMPH29_STAT: u32 = 1;
pub const SMPH_SMPH29_STAT_BITN: u32 = 0;
pub const SMPH_SMPH29_STAT_M: u32 = 1;
pub const SMPH_SMPH29_STAT_S: u32 = 0;
pub const SMPH_SMPH30_STAT: u32 = 1;
pub const SMPH_SMPH30_STAT_BITN: u32 = 0;
pub const SMPH_SMPH30_STAT_M: u32 = 1;
pub const SMPH_SMPH30_STAT_S: u32 = 0;
pub const SMPH_SMPH31_STAT: u32 = 1;
pub const SMPH_SMPH31_STAT_BITN: u32 = 0;
pub const SMPH_SMPH31_STAT_M: u32 = 1;
pub const SMPH_SMPH31_STAT_S: u32 = 0;
pub const SMPH_PEEK0_STAT: u32 = 1;
pub const SMPH_PEEK0_STAT_BITN: u32 = 0;
pub const SMPH_PEEK0_STAT_M: u32 = 1;
pub const SMPH_PEEK0_STAT_S: u32 = 0;
pub const SMPH_PEEK1_STAT: u32 = 1;
pub const SMPH_PEEK1_STAT_BITN: u32 = 0;
pub const SMPH_PEEK1_STAT_M: u32 = 1;
pub const SMPH_PEEK1_STAT_S: u32 = 0;
pub const SMPH_PEEK2_STAT: u32 = 1;
pub const SMPH_PEEK2_STAT_BITN: u32 = 0;
pub const SMPH_PEEK2_STAT_M: u32 = 1;
pub const SMPH_PEEK2_STAT_S: u32 = 0;
pub const SMPH_PEEK3_STAT: u32 = 1;
pub const SMPH_PEEK3_STAT_BITN: u32 = 0;
pub const SMPH_PEEK3_STAT_M: u32 = 1;
pub const SMPH_PEEK3_STAT_S: u32 = 0;
pub const SMPH_PEEK4_STAT: u32 = 1;
pub const SMPH_PEEK4_STAT_BITN: u32 = 0;
pub const SMPH_PEEK4_STAT_M: u32 = 1;
pub const SMPH_PEEK4_STAT_S: u32 = 0;
pub const SMPH_PEEK5_STAT: u32 = 1;
pub const SMPH_PEEK5_STAT_BITN: u32 = 0;
pub const SMPH_PEEK5_STAT_M: u32 = 1;
pub const SMPH_PEEK5_STAT_S: u32 = 0;
pub const SMPH_PEEK6_STAT: u32 = 1;
pub const SMPH_PEEK6_STAT_BITN: u32 = 0;
pub const SMPH_PEEK6_STAT_M: u32 = 1;
pub const SMPH_PEEK6_STAT_S: u32 = 0;
pub const SMPH_PEEK7_STAT: u32 = 1;
pub const SMPH_PEEK7_STAT_BITN: u32 = 0;
pub const SMPH_PEEK7_STAT_M: u32 = 1;
pub const SMPH_PEEK7_STAT_S: u32 = 0;
pub const SMPH_PEEK8_STAT: u32 = 1;
pub const SMPH_PEEK8_STAT_BITN: u32 = 0;
pub const SMPH_PEEK8_STAT_M: u32 = 1;
pub const SMPH_PEEK8_STAT_S: u32 = 0;
pub const SMPH_PEEK9_STAT: u32 = 1;
pub const SMPH_PEEK9_STAT_BITN: u32 = 0;
pub const SMPH_PEEK9_STAT_M: u32 = 1;
pub const SMPH_PEEK9_STAT_S: u32 = 0;
pub const SMPH_PEEK10_STAT: u32 = 1;
pub const SMPH_PEEK10_STAT_BITN: u32 = 0;
pub const SMPH_PEEK10_STAT_M: u32 = 1;
pub const SMPH_PEEK10_STAT_S: u32 = 0;
pub const SMPH_PEEK11_STAT: u32 = 1;
pub const SMPH_PEEK11_STAT_BITN: u32 = 0;
pub const SMPH_PEEK11_STAT_M: u32 = 1;
pub const SMPH_PEEK11_STAT_S: u32 = 0;
pub const SMPH_PEEK12_STAT: u32 = 1;
pub const SMPH_PEEK12_STAT_BITN: u32 = 0;
pub const SMPH_PEEK12_STAT_M: u32 = 1;
pub const SMPH_PEEK12_STAT_S: u32 = 0;
pub const SMPH_PEEK13_STAT: u32 = 1;
pub const SMPH_PEEK13_STAT_BITN: u32 = 0;
pub const SMPH_PEEK13_STAT_M: u32 = 1;
pub const SMPH_PEEK13_STAT_S: u32 = 0;
pub const SMPH_PEEK14_STAT: u32 = 1;
pub const SMPH_PEEK14_STAT_BITN: u32 = 0;
pub const SMPH_PEEK14_STAT_M: u32 = 1;
pub const SMPH_PEEK14_STAT_S: u32 = 0;
pub const SMPH_PEEK15_STAT: u32 = 1;
pub const SMPH_PEEK15_STAT_BITN: u32 = 0;
pub const SMPH_PEEK15_STAT_M: u32 = 1;
pub const SMPH_PEEK15_STAT_S: u32 = 0;
pub const SMPH_PEEK16_STAT: u32 = 1;
pub const SMPH_PEEK16_STAT_BITN: u32 = 0;
pub const SMPH_PEEK16_STAT_M: u32 = 1;
pub const SMPH_PEEK16_STAT_S: u32 = 0;
pub const SMPH_PEEK17_STAT: u32 = 1;
pub const SMPH_PEEK17_STAT_BITN: u32 = 0;
pub const SMPH_PEEK17_STAT_M: u32 = 1;
pub const SMPH_PEEK17_STAT_S: u32 = 0;
pub const SMPH_PEEK18_STAT: u32 = 1;
pub const SMPH_PEEK18_STAT_BITN: u32 = 0;
pub const SMPH_PEEK18_STAT_M: u32 = 1;
pub const SMPH_PEEK18_STAT_S: u32 = 0;
pub const SMPH_PEEK19_STAT: u32 = 1;
pub const SMPH_PEEK19_STAT_BITN: u32 = 0;
pub const SMPH_PEEK19_STAT_M: u32 = 1;
pub const SMPH_PEEK19_STAT_S: u32 = 0;
pub const SMPH_PEEK20_STAT: u32 = 1;
pub const SMPH_PEEK20_STAT_BITN: u32 = 0;
pub const SMPH_PEEK20_STAT_M: u32 = 1;
pub const SMPH_PEEK20_STAT_S: u32 = 0;
pub const SMPH_PEEK21_STAT: u32 = 1;
pub const SMPH_PEEK21_STAT_BITN: u32 = 0;
pub const SMPH_PEEK21_STAT_M: u32 = 1;
pub const SMPH_PEEK21_STAT_S: u32 = 0;
pub const SMPH_PEEK22_STAT: u32 = 1;
pub const SMPH_PEEK22_STAT_BITN: u32 = 0;
pub const SMPH_PEEK22_STAT_M: u32 = 1;
pub const SMPH_PEEK22_STAT_S: u32 = 0;
pub const SMPH_PEEK23_STAT: u32 = 1;
pub const SMPH_PEEK23_STAT_BITN: u32 = 0;
pub const SMPH_PEEK23_STAT_M: u32 = 1;
pub const SMPH_PEEK23_STAT_S: u32 = 0;
pub const SMPH_PEEK24_STAT: u32 = 1;
pub const SMPH_PEEK24_STAT_BITN: u32 = 0;
pub const SMPH_PEEK24_STAT_M: u32 = 1;
pub const SMPH_PEEK24_STAT_S: u32 = 0;
pub const SMPH_PEEK25_STAT: u32 = 1;
pub const SMPH_PEEK25_STAT_BITN: u32 = 0;
pub const SMPH_PEEK25_STAT_M: u32 = 1;
pub const SMPH_PEEK25_STAT_S: u32 = 0;
pub const SMPH_PEEK26_STAT: u32 = 1;
pub const SMPH_PEEK26_STAT_BITN: u32 = 0;
pub const SMPH_PEEK26_STAT_M: u32 = 1;
pub const SMPH_PEEK26_STAT_S: u32 = 0;
pub const SMPH_PEEK27_STAT: u32 = 1;
pub const SMPH_PEEK27_STAT_BITN: u32 = 0;
pub const SMPH_PEEK27_STAT_M: u32 = 1;
pub const SMPH_PEEK27_STAT_S: u32 = 0;
pub const SMPH_PEEK28_STAT: u32 = 1;
pub const SMPH_PEEK28_STAT_BITN: u32 = 0;
pub const SMPH_PEEK28_STAT_M: u32 = 1;
pub const SMPH_PEEK28_STAT_S: u32 = 0;
pub const SMPH_PEEK29_STAT: u32 = 1;
pub const SMPH_PEEK29_STAT_BITN: u32 = 0;
pub const SMPH_PEEK29_STAT_M: u32 = 1;
pub const SMPH_PEEK29_STAT_S: u32 = 0;
pub const SMPH_PEEK30_STAT: u32 = 1;
pub const SMPH_PEEK30_STAT_BITN: u32 = 0;
pub const SMPH_PEEK30_STAT_M: u32 = 1;
pub const SMPH_PEEK30_STAT_S: u32 = 0;
pub const SMPH_PEEK31_STAT: u32 = 1;
pub const SMPH_PEEK31_STAT_BITN: u32 = 0;
pub const SMPH_PEEK31_STAT_M: u32 = 1;
pub const SMPH_PEEK31_STAT_S: u32 = 0;
pub const SMPH_FREE: u32 = 1;
pub const SMPH_CLAIMED: u32 = 0;
pub const SMPH_0: u32 = 0;
pub const SMPH_1: u32 = 1;
pub const SMPH_2: u32 = 2;
pub const SMPH_3: u32 = 3;
pub const SMPH_4: u32 = 4;
pub const SMPH_5: u32 = 5;
pub const SMPH_6: u32 = 6;
pub const SMPH_7: u32 = 7;
pub const SMPH_8: u32 = 8;
pub const SMPH_9: u32 = 9;
pub const SMPH_10: u32 = 10;
pub const SMPH_11: u32 = 11;
pub const SMPH_12: u32 = 12;
pub const SMPH_13: u32 = 13;
pub const SMPH_14: u32 = 14;
pub const SMPH_15: u32 = 15;
pub const SMPH_16: u32 = 16;
pub const SMPH_17: u32 = 17;
pub const SMPH_18: u32 = 18;
pub const SMPH_19: u32 = 19;
pub const SMPH_20: u32 = 20;
pub const SMPH_21: u32 = 21;
pub const SMPH_22: u32 = 22;
pub const SMPH_23: u32 = 23;
pub const SMPH_24: u32 = 24;
pub const SMPH_25: u32 = 25;
pub const SMPH_26: u32 = 26;
pub const SMPH_27: u32 = 27;
pub const SMPH_28: u32 = 28;
pub const SMPH_29: u32 = 29;
pub const SMPH_30: u32 = 30;
pub const SMPH_31: u32 = 31;
pub const SSI_O_CR0: u32 = 0;
pub const SSI_O_CR1: u32 = 4;
pub const SSI_O_DR: u32 = 8;
pub const SSI_O_SR: u32 = 12;
pub const SSI_O_CPSR: u32 = 16;
pub const SSI_O_IMSC: u32 = 20;
pub const SSI_O_RIS: u32 = 24;
pub const SSI_O_MIS: u32 = 28;
pub const SSI_O_ICR: u32 = 32;
pub const SSI_O_DMACR: u32 = 36;
pub const SSI_CR0_SCR_W: u32 = 8;
pub const SSI_CR0_SCR_M: u32 = 65280;
pub const SSI_CR0_SCR_S: u32 = 8;
pub const SSI_CR0_SPH: u32 = 128;
pub const SSI_CR0_SPH_BITN: u32 = 7;
pub const SSI_CR0_SPH_M: u32 = 128;
pub const SSI_CR0_SPH_S: u32 = 7;
pub const SSI_CR0_SPH_2ND_CLK_EDGE: u32 = 128;
pub const SSI_CR0_SPH_1ST_CLK_EDGE: u32 = 0;
pub const SSI_CR0_SPO: u32 = 64;
pub const SSI_CR0_SPO_BITN: u32 = 6;
pub const SSI_CR0_SPO_M: u32 = 64;
pub const SSI_CR0_SPO_S: u32 = 6;
pub const SSI_CR0_SPO_HIGH: u32 = 64;
pub const SSI_CR0_SPO_LOW: u32 = 0;
pub const SSI_CR0_FRF_W: u32 = 2;
pub const SSI_CR0_FRF_M: u32 = 48;
pub const SSI_CR0_FRF_S: u32 = 4;
pub const SSI_CR0_FRF_NATIONAL_MICROWIRE: u32 = 32;
pub const SSI_CR0_FRF_TI_SYNC_SERIAL: u32 = 16;
pub const SSI_CR0_FRF_MOTOROLA_SPI: u32 = 0;
pub const SSI_CR0_DSS_W: u32 = 4;
pub const SSI_CR0_DSS_M: u32 = 15;
pub const SSI_CR0_DSS_S: u32 = 0;
pub const SSI_CR0_DSS_16_BIT: u32 = 15;
pub const SSI_CR0_DSS_15_BIT: u32 = 14;
pub const SSI_CR0_DSS_14_BIT: u32 = 13;
pub const SSI_CR0_DSS_13_BIT: u32 = 12;
pub const SSI_CR0_DSS_12_BIT: u32 = 11;
pub const SSI_CR0_DSS_11_BIT: u32 = 10;
pub const SSI_CR0_DSS_10_BIT: u32 = 9;
pub const SSI_CR0_DSS_9_BIT: u32 = 8;
pub const SSI_CR0_DSS_8_BIT: u32 = 7;
pub const SSI_CR0_DSS_7_BIT: u32 = 6;
pub const SSI_CR0_DSS_6_BIT: u32 = 5;
pub const SSI_CR0_DSS_5_BIT: u32 = 4;
pub const SSI_CR0_DSS_4_BIT: u32 = 3;
pub const SSI_CR1_SOD: u32 = 8;
pub const SSI_CR1_SOD_BITN: u32 = 3;
pub const SSI_CR1_SOD_M: u32 = 8;
pub const SSI_CR1_SOD_S: u32 = 3;
pub const SSI_CR1_MS: u32 = 4;
pub const SSI_CR1_MS_BITN: u32 = 2;
pub const SSI_CR1_MS_M: u32 = 4;
pub const SSI_CR1_MS_S: u32 = 2;
pub const SSI_CR1_MS_SLAVE: u32 = 4;
pub const SSI_CR1_MS_MASTER: u32 = 0;
pub const SSI_CR1_SSE: u32 = 2;
pub const SSI_CR1_SSE_BITN: u32 = 1;
pub const SSI_CR1_SSE_M: u32 = 2;
pub const SSI_CR1_SSE_S: u32 = 1;
pub const SSI_CR1_SSE_SSI_ENABLED: u32 = 2;
pub const SSI_CR1_SSE_SSI_DISABLED: u32 = 0;
pub const SSI_CR1_LBM: u32 = 1;
pub const SSI_CR1_LBM_BITN: u32 = 0;
pub const SSI_CR1_LBM_M: u32 = 1;
pub const SSI_CR1_LBM_S: u32 = 0;
pub const SSI_DR_DATA_W: u32 = 16;
pub const SSI_DR_DATA_M: u32 = 65535;
pub const SSI_DR_DATA_S: u32 = 0;
pub const SSI_SR_BSY: u32 = 16;
pub const SSI_SR_BSY_BITN: u32 = 4;
pub const SSI_SR_BSY_M: u32 = 16;
pub const SSI_SR_BSY_S: u32 = 4;
pub const SSI_SR_RFF: u32 = 8;
pub const SSI_SR_RFF_BITN: u32 = 3;
pub const SSI_SR_RFF_M: u32 = 8;
pub const SSI_SR_RFF_S: u32 = 3;
pub const SSI_SR_RNE: u32 = 4;
pub const SSI_SR_RNE_BITN: u32 = 2;
pub const SSI_SR_RNE_M: u32 = 4;
pub const SSI_SR_RNE_S: u32 = 2;
pub const SSI_SR_TNF: u32 = 2;
pub const SSI_SR_TNF_BITN: u32 = 1;
pub const SSI_SR_TNF_M: u32 = 2;
pub const SSI_SR_TNF_S: u32 = 1;
pub const SSI_SR_TFE: u32 = 1;
pub const SSI_SR_TFE_BITN: u32 = 0;
pub const SSI_SR_TFE_M: u32 = 1;
pub const SSI_SR_TFE_S: u32 = 0;
pub const SSI_CPSR_CPSDVSR_W: u32 = 8;
pub const SSI_CPSR_CPSDVSR_M: u32 = 255;
pub const SSI_CPSR_CPSDVSR_S: u32 = 0;
pub const SSI_IMSC_TXIM: u32 = 8;
pub const SSI_IMSC_TXIM_BITN: u32 = 3;
pub const SSI_IMSC_TXIM_M: u32 = 8;
pub const SSI_IMSC_TXIM_S: u32 = 3;
pub const SSI_IMSC_RXIM: u32 = 4;
pub const SSI_IMSC_RXIM_BITN: u32 = 2;
pub const SSI_IMSC_RXIM_M: u32 = 4;
pub const SSI_IMSC_RXIM_S: u32 = 2;
pub const SSI_IMSC_RTIM: u32 = 2;
pub const SSI_IMSC_RTIM_BITN: u32 = 1;
pub const SSI_IMSC_RTIM_M: u32 = 2;
pub const SSI_IMSC_RTIM_S: u32 = 1;
pub const SSI_IMSC_RORIM: u32 = 1;
pub const SSI_IMSC_RORIM_BITN: u32 = 0;
pub const SSI_IMSC_RORIM_M: u32 = 1;
pub const SSI_IMSC_RORIM_S: u32 = 0;
pub const SSI_RIS_TXRIS: u32 = 8;
pub const SSI_RIS_TXRIS_BITN: u32 = 3;
pub const SSI_RIS_TXRIS_M: u32 = 8;
pub const SSI_RIS_TXRIS_S: u32 = 3;
pub const SSI_RIS_RXRIS: u32 = 4;
pub const SSI_RIS_RXRIS_BITN: u32 = 2;
pub const SSI_RIS_RXRIS_M: u32 = 4;
pub const SSI_RIS_RXRIS_S: u32 = 2;
pub const SSI_RIS_RTRIS: u32 = 2;
pub const SSI_RIS_RTRIS_BITN: u32 = 1;
pub const SSI_RIS_RTRIS_M: u32 = 2;
pub const SSI_RIS_RTRIS_S: u32 = 1;
pub const SSI_RIS_RORRIS: u32 = 1;
pub const SSI_RIS_RORRIS_BITN: u32 = 0;
pub const SSI_RIS_RORRIS_M: u32 = 1;
pub const SSI_RIS_RORRIS_S: u32 = 0;
pub const SSI_MIS_TXMIS: u32 = 8;
pub const SSI_MIS_TXMIS_BITN: u32 = 3;
pub const SSI_MIS_TXMIS_M: u32 = 8;
pub const SSI_MIS_TXMIS_S: u32 = 3;
pub const SSI_MIS_RXMIS: u32 = 4;
pub const SSI_MIS_RXMIS_BITN: u32 = 2;
pub const SSI_MIS_RXMIS_M: u32 = 4;
pub const SSI_MIS_RXMIS_S: u32 = 2;
pub const SSI_MIS_RTMIS: u32 = 2;
pub const SSI_MIS_RTMIS_BITN: u32 = 1;
pub const SSI_MIS_RTMIS_M: u32 = 2;
pub const SSI_MIS_RTMIS_S: u32 = 1;
pub const SSI_MIS_RORMIS: u32 = 1;
pub const SSI_MIS_RORMIS_BITN: u32 = 0;
pub const SSI_MIS_RORMIS_M: u32 = 1;
pub const SSI_MIS_RORMIS_S: u32 = 0;
pub const SSI_ICR_RTIC: u32 = 2;
pub const SSI_ICR_RTIC_BITN: u32 = 1;
pub const SSI_ICR_RTIC_M: u32 = 2;
pub const SSI_ICR_RTIC_S: u32 = 1;
pub const SSI_ICR_RORIC: u32 = 1;
pub const SSI_ICR_RORIC_BITN: u32 = 0;
pub const SSI_ICR_RORIC_M: u32 = 1;
pub const SSI_ICR_RORIC_S: u32 = 0;
pub const SSI_DMACR_TXDMAE: u32 = 2;
pub const SSI_DMACR_TXDMAE_BITN: u32 = 1;
pub const SSI_DMACR_TXDMAE_M: u32 = 2;
pub const SSI_DMACR_TXDMAE_S: u32 = 1;
pub const SSI_DMACR_RXDMAE: u32 = 1;
pub const SSI_DMACR_RXDMAE_BITN: u32 = 0;
pub const SSI_DMACR_RXDMAE_M: u32 = 1;
pub const SSI_DMACR_RXDMAE_S: u32 = 0;
pub const SSI_TXFF: u32 = 8;
pub const SSI_RXFF: u32 = 4;
pub const SSI_RXTO: u32 = 2;
pub const SSI_RXOR: u32 = 1;
pub const SSI_RX_FULL: u32 = 8;
pub const SSI_RX_NOT_EMPTY: u32 = 4;
pub const SSI_TX_NOT_FULL: u32 = 2;
pub const SSI_TX_EMPTY: u32 = 1;
pub const SSI_STATUS_MASK: u32 = 15;
pub const SSI_FRF_MOTO_MODE_0: u32 = 0;
pub const SSI_FRF_MOTO_MODE_1: u32 = 2;
pub const SSI_FRF_MOTO_MODE_2: u32 = 1;
pub const SSI_FRF_MOTO_MODE_3: u32 = 3;
pub const SSI_FRF_TI: u32 = 16;
pub const SSI_FRF_NMW: u32 = 32;
pub const SSI_MODE_MASTER: u32 = 0;
pub const SSI_MODE_SLAVE: u32 = 1;
pub const SSI_MODE_SLAVE_OD: u32 = 2;
pub const SSI_DMA_TX: u32 = 2;
pub const SSI_DMA_RX: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const ARG_MAX: u32 = 65536;
pub const CHILD_MAX: u32 = 40;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const OPEN_MAX: u32 = 64;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const IOV_MAX: u32 = 1024;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 0;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const MB_LEN_MAX: u32 = 1;
pub const NL_ARGMAX: u32 = 32;
pub const CHAR_MIN: u32 = 0;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const ECRYPT_NAME: &[u8; 8] = b"ChaCha8\0";
pub const ECRYPT_PROFILE: &[u8; 6] = b"_____\0";
pub const ECRYPT_MAXKEYSIZE: u32 = 256;
pub const ECRYPT_MAXIVSIZE: u32 = 64;
pub const ECRYPT_BLOCKLENGTH: u32 = 64;
pub const ECRYPT_MAXVARIANT: u32 = 1;
pub const ECRYPT_VARIANT: u32 = 1;
pub const poly1305_block_size: u32 = 16;
pub const VIMS_O_STAT: u32 = 0;
pub const VIMS_O_CTL: u32 = 4;
pub const VIMS_STAT_IDCODE_LB_DIS: u32 = 32;
pub const VIMS_STAT_IDCODE_LB_DIS_BITN: u32 = 5;
pub const VIMS_STAT_IDCODE_LB_DIS_M: u32 = 32;
pub const VIMS_STAT_IDCODE_LB_DIS_S: u32 = 5;
pub const VIMS_STAT_SYSBUS_LB_DIS: u32 = 16;
pub const VIMS_STAT_SYSBUS_LB_DIS_BITN: u32 = 4;
pub const VIMS_STAT_SYSBUS_LB_DIS_M: u32 = 16;
pub const VIMS_STAT_SYSBUS_LB_DIS_S: u32 = 4;
pub const VIMS_STAT_MODE_CHANGING: u32 = 8;
pub const VIMS_STAT_MODE_CHANGING_BITN: u32 = 3;
pub const VIMS_STAT_MODE_CHANGING_M: u32 = 8;
pub const VIMS_STAT_MODE_CHANGING_S: u32 = 3;
pub const VIMS_STAT_INV: u32 = 4;
pub const VIMS_STAT_INV_BITN: u32 = 2;
pub const VIMS_STAT_INV_M: u32 = 4;
pub const VIMS_STAT_INV_S: u32 = 2;
pub const VIMS_STAT_MODE_W: u32 = 2;
pub const VIMS_STAT_MODE_M: u32 = 3;
pub const VIMS_STAT_MODE_S: u32 = 0;
pub const VIMS_STAT_MODE_OFF: u32 = 3;
pub const VIMS_STAT_MODE_CACHE: u32 = 1;
pub const VIMS_STAT_MODE_GPRAM: u32 = 0;
pub const VIMS_CTL_STATS_CLR: u32 = 2147483648;
pub const VIMS_CTL_STATS_CLR_BITN: u32 = 31;
pub const VIMS_CTL_STATS_CLR_M: u32 = 2147483648;
pub const VIMS_CTL_STATS_CLR_S: u32 = 31;
pub const VIMS_CTL_STATS_EN: u32 = 1073741824;
pub const VIMS_CTL_STATS_EN_BITN: u32 = 30;
pub const VIMS_CTL_STATS_EN_M: u32 = 1073741824;
pub const VIMS_CTL_STATS_EN_S: u32 = 30;
pub const VIMS_CTL_DYN_CG_EN: u32 = 536870912;
pub const VIMS_CTL_DYN_CG_EN_BITN: u32 = 29;
pub const VIMS_CTL_DYN_CG_EN_M: u32 = 536870912;
pub const VIMS_CTL_DYN_CG_EN_S: u32 = 29;
pub const VIMS_CTL_IDCODE_LB_DIS: u32 = 32;
pub const VIMS_CTL_IDCODE_LB_DIS_BITN: u32 = 5;
pub const VIMS_CTL_IDCODE_LB_DIS_M: u32 = 32;
pub const VIMS_CTL_IDCODE_LB_DIS_S: u32 = 5;
pub const VIMS_CTL_SYSBUS_LB_DIS: u32 = 16;
pub const VIMS_CTL_SYSBUS_LB_DIS_BITN: u32 = 4;
pub const VIMS_CTL_SYSBUS_LB_DIS_M: u32 = 16;
pub const VIMS_CTL_SYSBUS_LB_DIS_S: u32 = 4;
pub const VIMS_CTL_ARB_CFG: u32 = 8;
pub const VIMS_CTL_ARB_CFG_BITN: u32 = 3;
pub const VIMS_CTL_ARB_CFG_M: u32 = 8;
pub const VIMS_CTL_ARB_CFG_S: u32 = 3;
pub const VIMS_CTL_PREF_EN: u32 = 4;
pub const VIMS_CTL_PREF_EN_BITN: u32 = 2;
pub const VIMS_CTL_PREF_EN_M: u32 = 4;
pub const VIMS_CTL_PREF_EN_S: u32 = 2;
pub const VIMS_CTL_MODE_W: u32 = 2;
pub const VIMS_CTL_MODE_M: u32 = 3;
pub const VIMS_CTL_MODE_S: u32 = 0;
pub const VIMS_CTL_MODE_OFF: u32 = 3;
pub const VIMS_CTL_MODE_CACHE: u32 = 1;
pub const VIMS_CTL_MODE_GPRAM: u32 = 0;
pub const VIMS_MODE_CHANGING: u32 = 4;
pub const VIMS_MODE_DISABLED: u32 = 0;
pub const VIMS_MODE_ENABLED: u32 = 1;
pub const VIMS_MODE_OFF: u32 = 3;
pub const SYSCTRL_SYSBUS_ON: u32 = 1;
pub const SYSCTRL_SYSBUS_OFF: u32 = 0;
pub const CPU_RUN: u32 = 0;
pub const CPU_SLEEP: u32 = 1;
pub const CPU_DEEP_SLEEP: u32 = 2;
pub const XOSC_IN_HIGH_POWER_MODE: u32 = 0;
pub const XOSC_IN_LOW_POWER_MODE: u32 = 1;
pub const RSTSRC_PWR_ON: u32 = 0;
pub const RSTSRC_PIN_RESET: u32 = 1;
pub const RSTSRC_VDDS_LOSS: u32 = 2;
pub const RSTSRC_VDDR_LOSS: u32 = 4;
pub const RSTSRC_CLK_LOSS: u32 = 5;
pub const RSTSRC_SYSRESET: u32 = 6;
pub const RSTSRC_WARMRESET: u32 = 7;
pub const RSTSRC_WAKEUP_FROM_SHUTDOWN: u32 = 8;
pub const GPT_O_CFG: u32 = 0;
pub const GPT_O_TAMR: u32 = 4;
pub const GPT_O_TBMR: u32 = 8;
pub const GPT_O_CTL: u32 = 12;
pub const GPT_O_SYNC: u32 = 16;
pub const GPT_O_IMR: u32 = 24;
pub const GPT_O_RIS: u32 = 28;
pub const GPT_O_MIS: u32 = 32;
pub const GPT_O_ICLR: u32 = 36;
pub const GPT_O_TAILR: u32 = 40;
pub const GPT_O_TBILR: u32 = 44;
pub const GPT_O_TAMATCHR: u32 = 48;
pub const GPT_O_TBMATCHR: u32 = 52;
pub const GPT_O_TAPR: u32 = 56;
pub const GPT_O_TBPR: u32 = 60;
pub const GPT_O_TAPMR: u32 = 64;
pub const GPT_O_TBPMR: u32 = 68;
pub const GPT_O_TAR: u32 = 72;
pub const GPT_O_TBR: u32 = 76;
pub const GPT_O_TAV: u32 = 80;
pub const GPT_O_TBV: u32 = 84;
pub const GPT_O_TAPS: u32 = 92;
pub const GPT_O_TBPS: u32 = 96;
pub const GPT_O_TAPV: u32 = 100;
pub const GPT_O_TBPV: u32 = 104;
pub const GPT_O_DMAEV: u32 = 108;
pub const GPT_O_VERSION: u32 = 4016;
pub const GPT_O_ANDCCP: u32 = 4020;
pub const GPT_CFG_CFG_W: u32 = 3;
pub const GPT_CFG_CFG_M: u32 = 7;
pub const GPT_CFG_CFG_S: u32 = 0;
pub const GPT_CFG_CFG_16BIT_TIMER: u32 = 4;
pub const GPT_CFG_CFG_32BIT_TIMER: u32 = 0;
pub const GPT_TAMR_TCACT_W: u32 = 3;
pub const GPT_TAMR_TCACT_M: u32 = 57344;
pub const GPT_TAMR_TCACT_S: u32 = 13;
pub const GPT_TAMR_TCACT_CLRSET_ON_TO: u32 = 57344;
pub const GPT_TAMR_TCACT_SETCLR_ON_TO: u32 = 49152;
pub const GPT_TAMR_TCACT_CLRTOG_ON_TO: u32 = 40960;
pub const GPT_TAMR_TCACT_SETTOG_ON_TO: u32 = 32768;
pub const GPT_TAMR_TCACT_SET_ON_TO: u32 = 24576;
pub const GPT_TAMR_TCACT_CLR_ON_TO: u32 = 16384;
pub const GPT_TAMR_TCACT_TOG_ON_TO: u32 = 8192;
pub const GPT_TAMR_TCACT_DIS_CMP: u32 = 0;
pub const GPT_TAMR_TACINTD: u32 = 4096;
pub const GPT_TAMR_TACINTD_BITN: u32 = 12;
pub const GPT_TAMR_TACINTD_M: u32 = 4096;
pub const GPT_TAMR_TACINTD_S: u32 = 12;
pub const GPT_TAMR_TACINTD_DIS_TO_INTR: u32 = 4096;
pub const GPT_TAMR_TACINTD_EN_TO_INTR: u32 = 0;
pub const GPT_TAMR_TAPLO: u32 = 2048;
pub const GPT_TAMR_TAPLO_BITN: u32 = 11;
pub const GPT_TAMR_TAPLO_M: u32 = 2048;
pub const GPT_TAMR_TAPLO_S: u32 = 11;
pub const GPT_TAMR_TAPLO_CCP_ON_TO: u32 = 2048;
pub const GPT_TAMR_TAPLO_LEGACY: u32 = 0;
pub const GPT_TAMR_TAMRSU: u32 = 1024;
pub const GPT_TAMR_TAMRSU_BITN: u32 = 10;
pub const GPT_TAMR_TAMRSU_M: u32 = 1024;
pub const GPT_TAMR_TAMRSU_S: u32 = 10;
pub const GPT_TAMR_TAMRSU_TOUPDATE: u32 = 1024;
pub const GPT_TAMR_TAMRSU_CYCLEUPDATE: u32 = 0;
pub const GPT_TAMR_TAPWMIE: u32 = 512;
pub const GPT_TAMR_TAPWMIE_BITN: u32 = 9;
pub const GPT_TAMR_TAPWMIE_M: u32 = 512;
pub const GPT_TAMR_TAPWMIE_S: u32 = 9;
pub const GPT_TAMR_TAPWMIE_EN: u32 = 512;
pub const GPT_TAMR_TAPWMIE_DIS: u32 = 0;
pub const GPT_TAMR_TAILD: u32 = 256;
pub const GPT_TAMR_TAILD_BITN: u32 = 8;
pub const GPT_TAMR_TAILD_M: u32 = 256;
pub const GPT_TAMR_TAILD_S: u32 = 8;
pub const GPT_TAMR_TAILD_TOUPDATE: u32 = 256;
pub const GPT_TAMR_TAILD_CYCLEUPDATE: u32 = 0;
pub const GPT_TAMR_TASNAPS: u32 = 128;
pub const GPT_TAMR_TASNAPS_BITN: u32 = 7;
pub const GPT_TAMR_TASNAPS_M: u32 = 128;
pub const GPT_TAMR_TASNAPS_S: u32 = 7;
pub const GPT_TAMR_TASNAPS_EN: u32 = 128;
pub const GPT_TAMR_TASNAPS_DIS: u32 = 0;
pub const GPT_TAMR_TAWOT: u32 = 64;
pub const GPT_TAMR_TAWOT_BITN: u32 = 6;
pub const GPT_TAMR_TAWOT_M: u32 = 64;
pub const GPT_TAMR_TAWOT_S: u32 = 6;
pub const GPT_TAMR_TAWOT_WAIT: u32 = 64;
pub const GPT_TAMR_TAWOT_NOWAIT: u32 = 0;
pub const GPT_TAMR_TAMIE: u32 = 32;
pub const GPT_TAMR_TAMIE_BITN: u32 = 5;
pub const GPT_TAMR_TAMIE_M: u32 = 32;
pub const GPT_TAMR_TAMIE_S: u32 = 5;
pub const GPT_TAMR_TAMIE_EN: u32 = 32;
pub const GPT_TAMR_TAMIE_DIS: u32 = 0;
pub const GPT_TAMR_TACDIR: u32 = 16;
pub const GPT_TAMR_TACDIR_BITN: u32 = 4;
pub const GPT_TAMR_TACDIR_M: u32 = 16;
pub const GPT_TAMR_TACDIR_S: u32 = 4;
pub const GPT_TAMR_TACDIR_UP: u32 = 16;
pub const GPT_TAMR_TACDIR_DOWN: u32 = 0;
pub const GPT_TAMR_TAAMS: u32 = 8;
pub const GPT_TAMR_TAAMS_BITN: u32 = 3;
pub const GPT_TAMR_TAAMS_M: u32 = 8;
pub const GPT_TAMR_TAAMS_S: u32 = 3;
pub const GPT_TAMR_TAAMS_PWM: u32 = 8;
pub const GPT_TAMR_TAAMS_CAP_COMP: u32 = 0;
pub const GPT_TAMR_TACM: u32 = 4;
pub const GPT_TAMR_TACM_BITN: u32 = 2;
pub const GPT_TAMR_TACM_M: u32 = 4;
pub const GPT_TAMR_TACM_S: u32 = 2;
pub const GPT_TAMR_TACM_EDGTIME: u32 = 4;
pub const GPT_TAMR_TACM_EDGCNT: u32 = 0;
pub const GPT_TAMR_TAMR_W: u32 = 2;
pub const GPT_TAMR_TAMR_M: u32 = 3;
pub const GPT_TAMR_TAMR_S: u32 = 0;
pub const GPT_TAMR_TAMR_CAPTURE: u32 = 3;
pub const GPT_TAMR_TAMR_PERIODIC: u32 = 2;
pub const GPT_TAMR_TAMR_ONE_SHOT: u32 = 1;
pub const GPT_TBMR_TCACT_W: u32 = 3;
pub const GPT_TBMR_TCACT_M: u32 = 57344;
pub const GPT_TBMR_TCACT_S: u32 = 13;
pub const GPT_TBMR_TCACT_CLRSET_ON_TO: u32 = 57344;
pub const GPT_TBMR_TCACT_SETCLR_ON_TO: u32 = 49152;
pub const GPT_TBMR_TCACT_CLRTOG_ON_TO: u32 = 40960;
pub const GPT_TBMR_TCACT_SETTOG_ON_TO: u32 = 32768;
pub const GPT_TBMR_TCACT_SET_ON_TO: u32 = 24576;
pub const GPT_TBMR_TCACT_CLR_ON_TO: u32 = 16384;
pub const GPT_TBMR_TCACT_TOG_ON_TO: u32 = 8192;
pub const GPT_TBMR_TCACT_DIS_CMP: u32 = 0;
pub const GPT_TBMR_TBCINTD: u32 = 4096;
pub const GPT_TBMR_TBCINTD_BITN: u32 = 12;
pub const GPT_TBMR_TBCINTD_M: u32 = 4096;
pub const GPT_TBMR_TBCINTD_S: u32 = 12;
pub const GPT_TBMR_TBCINTD_DIS_TO_INTR: u32 = 4096;
pub const GPT_TBMR_TBCINTD_EN_TO_INTR: u32 = 0;
pub const GPT_TBMR_TBPLO: u32 = 2048;
pub const GPT_TBMR_TBPLO_BITN: u32 = 11;
pub const GPT_TBMR_TBPLO_M: u32 = 2048;
pub const GPT_TBMR_TBPLO_S: u32 = 11;
pub const GPT_TBMR_TBPLO_CCP_ON_TO: u32 = 2048;
pub const GPT_TBMR_TBPLO_LEGACY: u32 = 0;
pub const GPT_TBMR_TBMRSU: u32 = 1024;
pub const GPT_TBMR_TBMRSU_BITN: u32 = 10;
pub const GPT_TBMR_TBMRSU_M: u32 = 1024;
pub const GPT_TBMR_TBMRSU_S: u32 = 10;
pub const GPT_TBMR_TBMRSU_TOUPDATE: u32 = 1024;
pub const GPT_TBMR_TBMRSU_CYCLEUPDATE: u32 = 0;
pub const GPT_TBMR_TBPWMIE: u32 = 512;
pub const GPT_TBMR_TBPWMIE_BITN: u32 = 9;
pub const GPT_TBMR_TBPWMIE_M: u32 = 512;
pub const GPT_TBMR_TBPWMIE_S: u32 = 9;
pub const GPT_TBMR_TBPWMIE_EN: u32 = 512;
pub const GPT_TBMR_TBPWMIE_DIS: u32 = 0;
pub const GPT_TBMR_TBILD: u32 = 256;
pub const GPT_TBMR_TBILD_BITN: u32 = 8;
pub const GPT_TBMR_TBILD_M: u32 = 256;
pub const GPT_TBMR_TBILD_S: u32 = 8;
pub const GPT_TBMR_TBILD_TOUPDATE: u32 = 256;
pub const GPT_TBMR_TBILD_CYCLEUPDATE: u32 = 0;
pub const GPT_TBMR_TBSNAPS: u32 = 128;
pub const GPT_TBMR_TBSNAPS_BITN: u32 = 7;
pub const GPT_TBMR_TBSNAPS_M: u32 = 128;
pub const GPT_TBMR_TBSNAPS_S: u32 = 7;
pub const GPT_TBMR_TBSNAPS_EN: u32 = 128;
pub const GPT_TBMR_TBSNAPS_DIS: u32 = 0;
pub const GPT_TBMR_TBWOT: u32 = 64;
pub const GPT_TBMR_TBWOT_BITN: u32 = 6;
pub const GPT_TBMR_TBWOT_M: u32 = 64;
pub const GPT_TBMR_TBWOT_S: u32 = 6;
pub const GPT_TBMR_TBWOT_WAIT: u32 = 64;
pub const GPT_TBMR_TBWOT_NOWAIT: u32 = 0;
pub const GPT_TBMR_TBMIE: u32 = 32;
pub const GPT_TBMR_TBMIE_BITN: u32 = 5;
pub const GPT_TBMR_TBMIE_M: u32 = 32;
pub const GPT_TBMR_TBMIE_S: u32 = 5;
pub const GPT_TBMR_TBMIE_EN: u32 = 32;
pub const GPT_TBMR_TBMIE_DIS: u32 = 0;
pub const GPT_TBMR_TBCDIR: u32 = 16;
pub const GPT_TBMR_TBCDIR_BITN: u32 = 4;
pub const GPT_TBMR_TBCDIR_M: u32 = 16;
pub const GPT_TBMR_TBCDIR_S: u32 = 4;
pub const GPT_TBMR_TBCDIR_UP: u32 = 16;
pub const GPT_TBMR_TBCDIR_DOWN: u32 = 0;
pub const GPT_TBMR_TBAMS: u32 = 8;
pub const GPT_TBMR_TBAMS_BITN: u32 = 3;
pub const GPT_TBMR_TBAMS_M: u32 = 8;
pub const GPT_TBMR_TBAMS_S: u32 = 3;
pub const GPT_TBMR_TBAMS_PWM: u32 = 8;
pub const GPT_TBMR_TBAMS_CAP_COMP: u32 = 0;
pub const GPT_TBMR_TBCM: u32 = 4;
pub const GPT_TBMR_TBCM_BITN: u32 = 2;
pub const GPT_TBMR_TBCM_M: u32 = 4;
pub const GPT_TBMR_TBCM_S: u32 = 2;
pub const GPT_TBMR_TBCM_EDGTIME: u32 = 4;
pub const GPT_TBMR_TBCM_EDGCNT: u32 = 0;
pub const GPT_TBMR_TBMR_W: u32 = 2;
pub const GPT_TBMR_TBMR_M: u32 = 3;
pub const GPT_TBMR_TBMR_S: u32 = 0;
pub const GPT_TBMR_TBMR_CAPTURE: u32 = 3;
pub const GPT_TBMR_TBMR_PERIODIC: u32 = 2;
pub const GPT_TBMR_TBMR_ONE_SHOT: u32 = 1;
pub const GPT_CTL_TBPWML: u32 = 16384;
pub const GPT_CTL_TBPWML_BITN: u32 = 14;
pub const GPT_CTL_TBPWML_M: u32 = 16384;
pub const GPT_CTL_TBPWML_S: u32 = 14;
pub const GPT_CTL_TBPWML_INVERTED: u32 = 16384;
pub const GPT_CTL_TBPWML_NORMAL: u32 = 0;
pub const GPT_CTL_TBEVENT_W: u32 = 2;
pub const GPT_CTL_TBEVENT_M: u32 = 3072;
pub const GPT_CTL_TBEVENT_S: u32 = 10;
pub const GPT_CTL_TBEVENT_BOTH: u32 = 3072;
pub const GPT_CTL_TBEVENT_NEG: u32 = 1024;
pub const GPT_CTL_TBEVENT_POS: u32 = 0;
pub const GPT_CTL_TBSTALL: u32 = 512;
pub const GPT_CTL_TBSTALL_BITN: u32 = 9;
pub const GPT_CTL_TBSTALL_M: u32 = 512;
pub const GPT_CTL_TBSTALL_S: u32 = 9;
pub const GPT_CTL_TBSTALL_EN: u32 = 512;
pub const GPT_CTL_TBSTALL_DIS: u32 = 0;
pub const GPT_CTL_TBEN: u32 = 256;
pub const GPT_CTL_TBEN_BITN: u32 = 8;
pub const GPT_CTL_TBEN_M: u32 = 256;
pub const GPT_CTL_TBEN_S: u32 = 8;
pub const GPT_CTL_TBEN_EN: u32 = 256;
pub const GPT_CTL_TBEN_DIS: u32 = 0;
pub const GPT_CTL_TAPWML: u32 = 64;
pub const GPT_CTL_TAPWML_BITN: u32 = 6;
pub const GPT_CTL_TAPWML_M: u32 = 64;
pub const GPT_CTL_TAPWML_S: u32 = 6;
pub const GPT_CTL_TAPWML_INVERTED: u32 = 64;
pub const GPT_CTL_TAPWML_NORMAL: u32 = 0;
pub const GPT_CTL_TAEVENT_W: u32 = 2;
pub const GPT_CTL_TAEVENT_M: u32 = 12;
pub const GPT_CTL_TAEVENT_S: u32 = 2;
pub const GPT_CTL_TAEVENT_BOTH: u32 = 12;
pub const GPT_CTL_TAEVENT_NEG: u32 = 4;
pub const GPT_CTL_TAEVENT_POS: u32 = 0;
pub const GPT_CTL_TASTALL: u32 = 2;
pub const GPT_CTL_TASTALL_BITN: u32 = 1;
pub const GPT_CTL_TASTALL_M: u32 = 2;
pub const GPT_CTL_TASTALL_S: u32 = 1;
pub const GPT_CTL_TASTALL_EN: u32 = 2;
pub const GPT_CTL_TASTALL_DIS: u32 = 0;
pub const GPT_CTL_TAEN: u32 = 1;
pub const GPT_CTL_TAEN_BITN: u32 = 0;
pub const GPT_CTL_TAEN_M: u32 = 1;
pub const GPT_CTL_TAEN_S: u32 = 0;
pub const GPT_CTL_TAEN_EN: u32 = 1;
pub const GPT_CTL_TAEN_DIS: u32 = 0;
pub const GPT_SYNC_SYNC3_W: u32 = 2;
pub const GPT_SYNC_SYNC3_M: u32 = 192;
pub const GPT_SYNC_SYNC3_S: u32 = 6;
pub const GPT_SYNC_SYNC3_BOTH: u32 = 192;
pub const GPT_SYNC_SYNC3_TIMERB: u32 = 128;
pub const GPT_SYNC_SYNC3_TIMERA: u32 = 64;
pub const GPT_SYNC_SYNC3_NOSYNC: u32 = 0;
pub const GPT_SYNC_SYNC2_W: u32 = 2;
pub const GPT_SYNC_SYNC2_M: u32 = 48;
pub const GPT_SYNC_SYNC2_S: u32 = 4;
pub const GPT_SYNC_SYNC2_BOTH: u32 = 48;
pub const GPT_SYNC_SYNC2_TIMERB: u32 = 32;
pub const GPT_SYNC_SYNC2_TIMERA: u32 = 16;
pub const GPT_SYNC_SYNC2_NOSYNC: u32 = 0;
pub const GPT_SYNC_SYNC1_W: u32 = 2;
pub const GPT_SYNC_SYNC1_M: u32 = 12;
pub const GPT_SYNC_SYNC1_S: u32 = 2;
pub const GPT_SYNC_SYNC1_BOTH: u32 = 12;
pub const GPT_SYNC_SYNC1_TIMERB: u32 = 8;
pub const GPT_SYNC_SYNC1_TIMERA: u32 = 4;
pub const GPT_SYNC_SYNC1_NOSYNC: u32 = 0;
pub const GPT_SYNC_SYNC0_W: u32 = 2;
pub const GPT_SYNC_SYNC0_M: u32 = 3;
pub const GPT_SYNC_SYNC0_S: u32 = 0;
pub const GPT_SYNC_SYNC0_BOTH: u32 = 3;
pub const GPT_SYNC_SYNC0_TIMERB: u32 = 2;
pub const GPT_SYNC_SYNC0_TIMERA: u32 = 1;
pub const GPT_SYNC_SYNC0_NOSYNC: u32 = 0;
pub const GPT_IMR_DMABIM: u32 = 8192;
pub const GPT_IMR_DMABIM_BITN: u32 = 13;
pub const GPT_IMR_DMABIM_M: u32 = 8192;
pub const GPT_IMR_DMABIM_S: u32 = 13;
pub const GPT_IMR_DMABIM_EN: u32 = 8192;
pub const GPT_IMR_DMABIM_DIS: u32 = 0;
pub const GPT_IMR_TBMIM: u32 = 2048;
pub const GPT_IMR_TBMIM_BITN: u32 = 11;
pub const GPT_IMR_TBMIM_M: u32 = 2048;
pub const GPT_IMR_TBMIM_S: u32 = 11;
pub const GPT_IMR_TBMIM_EN: u32 = 2048;
pub const GPT_IMR_TBMIM_DIS: u32 = 0;
pub const GPT_IMR_CBEIM: u32 = 1024;
pub const GPT_IMR_CBEIM_BITN: u32 = 10;
pub const GPT_IMR_CBEIM_M: u32 = 1024;
pub const GPT_IMR_CBEIM_S: u32 = 10;
pub const GPT_IMR_CBEIM_EN: u32 = 1024;
pub const GPT_IMR_CBEIM_DIS: u32 = 0;
pub const GPT_IMR_CBMIM: u32 = 512;
pub const GPT_IMR_CBMIM_BITN: u32 = 9;
pub const GPT_IMR_CBMIM_M: u32 = 512;
pub const GPT_IMR_CBMIM_S: u32 = 9;
pub const GPT_IMR_CBMIM_EN: u32 = 512;
pub const GPT_IMR_CBMIM_DIS: u32 = 0;
pub const GPT_IMR_TBTOIM: u32 = 256;
pub const GPT_IMR_TBTOIM_BITN: u32 = 8;
pub const GPT_IMR_TBTOIM_M: u32 = 256;
pub const GPT_IMR_TBTOIM_S: u32 = 8;
pub const GPT_IMR_TBTOIM_EN: u32 = 256;
pub const GPT_IMR_TBTOIM_DIS: u32 = 0;
pub const GPT_IMR_DMAAIM: u32 = 32;
pub const GPT_IMR_DMAAIM_BITN: u32 = 5;
pub const GPT_IMR_DMAAIM_M: u32 = 32;
pub const GPT_IMR_DMAAIM_S: u32 = 5;
pub const GPT_IMR_DMAAIM_EN: u32 = 32;
pub const GPT_IMR_DMAAIM_DIS: u32 = 0;
pub const GPT_IMR_TAMIM: u32 = 16;
pub const GPT_IMR_TAMIM_BITN: u32 = 4;
pub const GPT_IMR_TAMIM_M: u32 = 16;
pub const GPT_IMR_TAMIM_S: u32 = 4;
pub const GPT_IMR_TAMIM_EN: u32 = 16;
pub const GPT_IMR_TAMIM_DIS: u32 = 0;
pub const GPT_IMR_CAEIM: u32 = 4;
pub const GPT_IMR_CAEIM_BITN: u32 = 2;
pub const GPT_IMR_CAEIM_M: u32 = 4;
pub const GPT_IMR_CAEIM_S: u32 = 2;
pub const GPT_IMR_CAEIM_EN: u32 = 4;
pub const GPT_IMR_CAEIM_DIS: u32 = 0;
pub const GPT_IMR_CAMIM: u32 = 2;
pub const GPT_IMR_CAMIM_BITN: u32 = 1;
pub const GPT_IMR_CAMIM_M: u32 = 2;
pub const GPT_IMR_CAMIM_S: u32 = 1;
pub const GPT_IMR_CAMIM_EN: u32 = 2;
pub const GPT_IMR_CAMIM_DIS: u32 = 0;
pub const GPT_IMR_TATOIM: u32 = 1;
pub const GPT_IMR_TATOIM_BITN: u32 = 0;
pub const GPT_IMR_TATOIM_M: u32 = 1;
pub const GPT_IMR_TATOIM_S: u32 = 0;
pub const GPT_IMR_TATOIM_EN: u32 = 1;
pub const GPT_IMR_TATOIM_DIS: u32 = 0;
pub const GPT_RIS_DMABRIS: u32 = 8192;
pub const GPT_RIS_DMABRIS_BITN: u32 = 13;
pub const GPT_RIS_DMABRIS_M: u32 = 8192;
pub const GPT_RIS_DMABRIS_S: u32 = 13;
pub const GPT_RIS_TBMRIS: u32 = 2048;
pub const GPT_RIS_TBMRIS_BITN: u32 = 11;
pub const GPT_RIS_TBMRIS_M: u32 = 2048;
pub const GPT_RIS_TBMRIS_S: u32 = 11;
pub const GPT_RIS_CBERIS: u32 = 1024;
pub const GPT_RIS_CBERIS_BITN: u32 = 10;
pub const GPT_RIS_CBERIS_M: u32 = 1024;
pub const GPT_RIS_CBERIS_S: u32 = 10;
pub const GPT_RIS_CBMRIS: u32 = 512;
pub const GPT_RIS_CBMRIS_BITN: u32 = 9;
pub const GPT_RIS_CBMRIS_M: u32 = 512;
pub const GPT_RIS_CBMRIS_S: u32 = 9;
pub const GPT_RIS_TBTORIS: u32 = 256;
pub const GPT_RIS_TBTORIS_BITN: u32 = 8;
pub const GPT_RIS_TBTORIS_M: u32 = 256;
pub const GPT_RIS_TBTORIS_S: u32 = 8;
pub const GPT_RIS_DMAARIS: u32 = 32;
pub const GPT_RIS_DMAARIS_BITN: u32 = 5;
pub const GPT_RIS_DMAARIS_M: u32 = 32;
pub const GPT_RIS_DMAARIS_S: u32 = 5;
pub const GPT_RIS_TAMRIS: u32 = 16;
pub const GPT_RIS_TAMRIS_BITN: u32 = 4;
pub const GPT_RIS_TAMRIS_M: u32 = 16;
pub const GPT_RIS_TAMRIS_S: u32 = 4;
pub const GPT_RIS_CAERIS: u32 = 4;
pub const GPT_RIS_CAERIS_BITN: u32 = 2;
pub const GPT_RIS_CAERIS_M: u32 = 4;
pub const GPT_RIS_CAERIS_S: u32 = 2;
pub const GPT_RIS_CAMRIS: u32 = 2;
pub const GPT_RIS_CAMRIS_BITN: u32 = 1;
pub const GPT_RIS_CAMRIS_M: u32 = 2;
pub const GPT_RIS_CAMRIS_S: u32 = 1;
pub const GPT_RIS_TATORIS: u32 = 1;
pub const GPT_RIS_TATORIS_BITN: u32 = 0;
pub const GPT_RIS_TATORIS_M: u32 = 1;
pub const GPT_RIS_TATORIS_S: u32 = 0;
pub const GPT_MIS_DMABMIS: u32 = 8192;
pub const GPT_MIS_DMABMIS_BITN: u32 = 13;
pub const GPT_MIS_DMABMIS_M: u32 = 8192;
pub const GPT_MIS_DMABMIS_S: u32 = 13;
pub const GPT_MIS_TBMMIS: u32 = 2048;
pub const GPT_MIS_TBMMIS_BITN: u32 = 11;
pub const GPT_MIS_TBMMIS_M: u32 = 2048;
pub const GPT_MIS_TBMMIS_S: u32 = 11;
pub const GPT_MIS_CBEMIS: u32 = 1024;
pub const GPT_MIS_CBEMIS_BITN: u32 = 10;
pub const GPT_MIS_CBEMIS_M: u32 = 1024;
pub const GPT_MIS_CBEMIS_S: u32 = 10;
pub const GPT_MIS_CBMMIS: u32 = 512;
pub const GPT_MIS_CBMMIS_BITN: u32 = 9;
pub const GPT_MIS_CBMMIS_M: u32 = 512;
pub const GPT_MIS_CBMMIS_S: u32 = 9;
pub const GPT_MIS_TBTOMIS: u32 = 256;
pub const GPT_MIS_TBTOMIS_BITN: u32 = 8;
pub const GPT_MIS_TBTOMIS_M: u32 = 256;
pub const GPT_MIS_TBTOMIS_S: u32 = 8;
pub const GPT_MIS_DMAAMIS: u32 = 32;
pub const GPT_MIS_DMAAMIS_BITN: u32 = 5;
pub const GPT_MIS_DMAAMIS_M: u32 = 32;
pub const GPT_MIS_DMAAMIS_S: u32 = 5;
pub const GPT_MIS_TAMMIS: u32 = 16;
pub const GPT_MIS_TAMMIS_BITN: u32 = 4;
pub const GPT_MIS_TAMMIS_M: u32 = 16;
pub const GPT_MIS_TAMMIS_S: u32 = 4;
pub const GPT_MIS_CAEMIS: u32 = 4;
pub const GPT_MIS_CAEMIS_BITN: u32 = 2;
pub const GPT_MIS_CAEMIS_M: u32 = 4;
pub const GPT_MIS_CAEMIS_S: u32 = 2;
pub const GPT_MIS_CAMMIS: u32 = 2;
pub const GPT_MIS_CAMMIS_BITN: u32 = 1;
pub const GPT_MIS_CAMMIS_M: u32 = 2;
pub const GPT_MIS_CAMMIS_S: u32 = 1;
pub const GPT_MIS_TATOMIS: u32 = 1;
pub const GPT_MIS_TATOMIS_BITN: u32 = 0;
pub const GPT_MIS_TATOMIS_M: u32 = 1;
pub const GPT_MIS_TATOMIS_S: u32 = 0;
pub const GPT_ICLR_DMABINT: u32 = 8192;
pub const GPT_ICLR_DMABINT_BITN: u32 = 13;
pub const GPT_ICLR_DMABINT_M: u32 = 8192;
pub const GPT_ICLR_DMABINT_S: u32 = 13;
pub const GPT_ICLR_TBMCINT: u32 = 2048;
pub const GPT_ICLR_TBMCINT_BITN: u32 = 11;
pub const GPT_ICLR_TBMCINT_M: u32 = 2048;
pub const GPT_ICLR_TBMCINT_S: u32 = 11;
pub const GPT_ICLR_CBECINT: u32 = 1024;
pub const GPT_ICLR_CBECINT_BITN: u32 = 10;
pub const GPT_ICLR_CBECINT_M: u32 = 1024;
pub const GPT_ICLR_CBECINT_S: u32 = 10;
pub const GPT_ICLR_CBMCINT: u32 = 512;
pub const GPT_ICLR_CBMCINT_BITN: u32 = 9;
pub const GPT_ICLR_CBMCINT_M: u32 = 512;
pub const GPT_ICLR_CBMCINT_S: u32 = 9;
pub const GPT_ICLR_TBTOCINT: u32 = 256;
pub const GPT_ICLR_TBTOCINT_BITN: u32 = 8;
pub const GPT_ICLR_TBTOCINT_M: u32 = 256;
pub const GPT_ICLR_TBTOCINT_S: u32 = 8;
pub const GPT_ICLR_DMAAINT: u32 = 32;
pub const GPT_ICLR_DMAAINT_BITN: u32 = 5;
pub const GPT_ICLR_DMAAINT_M: u32 = 32;
pub const GPT_ICLR_DMAAINT_S: u32 = 5;
pub const GPT_ICLR_TAMCINT: u32 = 16;
pub const GPT_ICLR_TAMCINT_BITN: u32 = 4;
pub const GPT_ICLR_TAMCINT_M: u32 = 16;
pub const GPT_ICLR_TAMCINT_S: u32 = 4;
pub const GPT_ICLR_CAECINT: u32 = 4;
pub const GPT_ICLR_CAECINT_BITN: u32 = 2;
pub const GPT_ICLR_CAECINT_M: u32 = 4;
pub const GPT_ICLR_CAECINT_S: u32 = 2;
pub const GPT_ICLR_CAMCINT: u32 = 2;
pub const GPT_ICLR_CAMCINT_BITN: u32 = 1;
pub const GPT_ICLR_CAMCINT_M: u32 = 2;
pub const GPT_ICLR_CAMCINT_S: u32 = 1;
pub const GPT_ICLR_TATOCINT: u32 = 1;
pub const GPT_ICLR_TATOCINT_BITN: u32 = 0;
pub const GPT_ICLR_TATOCINT_M: u32 = 1;
pub const GPT_ICLR_TATOCINT_S: u32 = 0;
pub const GPT_TAILR_TAILR_W: u32 = 32;
pub const GPT_TAILR_TAILR_M: u32 = 4294967295;
pub const GPT_TAILR_TAILR_S: u32 = 0;
pub const GPT_TBILR_TBILR_W: u32 = 32;
pub const GPT_TBILR_TBILR_M: u32 = 4294967295;
pub const GPT_TBILR_TBILR_S: u32 = 0;
pub const GPT_TAMATCHR_TAMATCHR_W: u32 = 32;
pub const GPT_TAMATCHR_TAMATCHR_M: u32 = 4294967295;
pub const GPT_TAMATCHR_TAMATCHR_S: u32 = 0;
pub const GPT_TBMATCHR_TBMATCHR_W: u32 = 16;
pub const GPT_TBMATCHR_TBMATCHR_M: u32 = 65535;
pub const GPT_TBMATCHR_TBMATCHR_S: u32 = 0;
pub const GPT_TAPR_TAPSR_W: u32 = 8;
pub const GPT_TAPR_TAPSR_M: u32 = 255;
pub const GPT_TAPR_TAPSR_S: u32 = 0;
pub const GPT_TBPR_TBPSR_W: u32 = 8;
pub const GPT_TBPR_TBPSR_M: u32 = 255;
pub const GPT_TBPR_TBPSR_S: u32 = 0;
pub const GPT_TAPMR_TAPSMR_W: u32 = 8;
pub const GPT_TAPMR_TAPSMR_M: u32 = 255;
pub const GPT_TAPMR_TAPSMR_S: u32 = 0;
pub const GPT_TBPMR_TBPSMR_W: u32 = 8;
pub const GPT_TBPMR_TBPSMR_M: u32 = 255;
pub const GPT_TBPMR_TBPSMR_S: u32 = 0;
pub const GPT_TAR_TAR_W: u32 = 32;
pub const GPT_TAR_TAR_M: u32 = 4294967295;
pub const GPT_TAR_TAR_S: u32 = 0;
pub const GPT_TBR_TBR_W: u32 = 32;
pub const GPT_TBR_TBR_M: u32 = 4294967295;
pub const GPT_TBR_TBR_S: u32 = 0;
pub const GPT_TAV_TAV_W: u32 = 32;
pub const GPT_TAV_TAV_M: u32 = 4294967295;
pub const GPT_TAV_TAV_S: u32 = 0;
pub const GPT_TBV_TBV_W: u32 = 32;
pub const GPT_TBV_TBV_M: u32 = 4294967295;
pub const GPT_TBV_TBV_S: u32 = 0;
pub const GPT_TAPS_PSS_W: u32 = 8;
pub const GPT_TAPS_PSS_M: u32 = 255;
pub const GPT_TAPS_PSS_S: u32 = 0;
pub const GPT_TBPS_PSS_W: u32 = 8;
pub const GPT_TBPS_PSS_M: u32 = 255;
pub const GPT_TBPS_PSS_S: u32 = 0;
pub const GPT_TAPV_PSV_W: u32 = 8;
pub const GPT_TAPV_PSV_M: u32 = 255;
pub const GPT_TAPV_PSV_S: u32 = 0;
pub const GPT_TBPV_PSV_W: u32 = 8;
pub const GPT_TBPV_PSV_M: u32 = 255;
pub const GPT_TBPV_PSV_S: u32 = 0;
pub const GPT_DMAEV_TBMDMAEN: u32 = 2048;
pub const GPT_DMAEV_TBMDMAEN_BITN: u32 = 11;
pub const GPT_DMAEV_TBMDMAEN_M: u32 = 2048;
pub const GPT_DMAEV_TBMDMAEN_S: u32 = 11;
pub const GPT_DMAEV_CBEDMAEN: u32 = 1024;
pub const GPT_DMAEV_CBEDMAEN_BITN: u32 = 10;
pub const GPT_DMAEV_CBEDMAEN_M: u32 = 1024;
pub const GPT_DMAEV_CBEDMAEN_S: u32 = 10;
pub const GPT_DMAEV_CBMDMAEN: u32 = 512;
pub const GPT_DMAEV_CBMDMAEN_BITN: u32 = 9;
pub const GPT_DMAEV_CBMDMAEN_M: u32 = 512;
pub const GPT_DMAEV_CBMDMAEN_S: u32 = 9;
pub const GPT_DMAEV_TBTODMAEN: u32 = 256;
pub const GPT_DMAEV_TBTODMAEN_BITN: u32 = 8;
pub const GPT_DMAEV_TBTODMAEN_M: u32 = 256;
pub const GPT_DMAEV_TBTODMAEN_S: u32 = 8;
pub const GPT_DMAEV_TAMDMAEN: u32 = 16;
pub const GPT_DMAEV_TAMDMAEN_BITN: u32 = 4;
pub const GPT_DMAEV_TAMDMAEN_M: u32 = 16;
pub const GPT_DMAEV_TAMDMAEN_S: u32 = 4;
pub const GPT_DMAEV_CAEDMAEN: u32 = 4;
pub const GPT_DMAEV_CAEDMAEN_BITN: u32 = 2;
pub const GPT_DMAEV_CAEDMAEN_M: u32 = 4;
pub const GPT_DMAEV_CAEDMAEN_S: u32 = 2;
pub const GPT_DMAEV_CAMDMAEN: u32 = 2;
pub const GPT_DMAEV_CAMDMAEN_BITN: u32 = 1;
pub const GPT_DMAEV_CAMDMAEN_M: u32 = 2;
pub const GPT_DMAEV_CAMDMAEN_S: u32 = 1;
pub const GPT_DMAEV_TATODMAEN: u32 = 1;
pub const GPT_DMAEV_TATODMAEN_BITN: u32 = 0;
pub const GPT_DMAEV_TATODMAEN_M: u32 = 1;
pub const GPT_DMAEV_TATODMAEN_S: u32 = 0;
pub const GPT_VERSION_VERSION_W: u32 = 32;
pub const GPT_VERSION_VERSION_M: u32 = 4294967295;
pub const GPT_VERSION_VERSION_S: u32 = 0;
pub const GPT_ANDCCP_CCP_AND_EN: u32 = 1;
pub const GPT_ANDCCP_CCP_AND_EN_BITN: u32 = 0;
pub const GPT_ANDCCP_CCP_AND_EN_M: u32 = 1;
pub const GPT_ANDCCP_CCP_AND_EN_S: u32 = 0;
pub const TIMER_CFG_ONE_SHOT: u32 = 33;
pub const TIMER_CFG_ONE_SHOT_UP: u32 = 49;
pub const TIMER_CFG_PERIODIC: u32 = 34;
pub const TIMER_CFG_PERIODIC_UP: u32 = 50;
pub const TIMER_CFG_SPLIT_PAIR: u32 = 67108864;
pub const TIMER_CFG_A_ONE_SHOT: u32 = 33;
pub const TIMER_CFG_A_ONE_SHOT_UP: u32 = 49;
pub const TIMER_CFG_A_PERIODIC: u32 = 34;
pub const TIMER_CFG_A_PERIODIC_UP: u32 = 50;
pub const TIMER_CFG_A_CAP_COUNT: u32 = 3;
pub const TIMER_CFG_A_CAP_COUNT_UP: u32 = 19;
pub const TIMER_CFG_A_CAP_TIME: u32 = 7;
pub const TIMER_CFG_A_CAP_TIME_UP: u32 = 23;
pub const TIMER_CFG_A_PWM: u32 = 10;
pub const TIMER_CFG_B_ONE_SHOT: u32 = 8448;
pub const TIMER_CFG_B_ONE_SHOT_UP: u32 = 12544;
pub const TIMER_CFG_B_PERIODIC: u32 = 8704;
pub const TIMER_CFG_B_PERIODIC_UP: u32 = 12800;
pub const TIMER_CFG_B_CAP_COUNT: u32 = 768;
pub const TIMER_CFG_B_CAP_COUNT_UP: u32 = 4864;
pub const TIMER_CFG_B_CAP_TIME: u32 = 1792;
pub const TIMER_CFG_B_CAP_TIME_UP: u32 = 5888;
pub const TIMER_CFG_B_PWM: u32 = 2560;
pub const TIMER_TIMB_DMA: u32 = 8192;
pub const TIMER_TIMB_MATCH: u32 = 2048;
pub const TIMER_CAPB_EVENT: u32 = 1024;
pub const TIMER_CAPB_MATCH: u32 = 512;
pub const TIMER_TIMB_TIMEOUT: u32 = 256;
pub const TIMER_TIMA_DMA: u32 = 32;
pub const TIMER_TIMA_MATCH: u32 = 16;
pub const TIMER_CAPA_EVENT: u32 = 4;
pub const TIMER_CAPA_MATCH: u32 = 2;
pub const TIMER_TIMA_TIMEOUT: u32 = 1;
pub const TIMER_EVENT_POS_EDGE: u32 = 0;
pub const TIMER_EVENT_NEG_EDGE: u32 = 1028;
pub const TIMER_EVENT_BOTH_EDGES: u32 = 3084;
pub const TIMER_A: u32 = 255;
pub const TIMER_B: u32 = 65280;
pub const TIMER_BOTH: u32 = 65535;
pub const TIMER_0A_SYNC: u32 = 1;
pub const TIMER_0B_SYNC: u32 = 2;
pub const TIMER_1A_SYNC: u32 = 4;
pub const TIMER_1B_SYNC: u32 = 8;
pub const TIMER_2A_SYNC: u32 = 16;
pub const TIMER_2B_SYNC: u32 = 32;
pub const TIMER_3A_SYNC: u32 = 64;
pub const TIMER_3B_SYNC: u32 = 128;
pub const TIMER_MATCHUPDATE_NEXTCYCLE: u32 = 0;
pub const TIMER_MATCHUPDATE_TIMEOUT: u32 = 1;
pub const TIMER_INTERVALLOAD_NEXTCYCLE: u32 = 0;
pub const TIMER_INTERVALLOAD_TIMEOUT: u32 = 1;
pub const TRNG_O_OUT0: u32 = 0;
pub const TRNG_O_OUT1: u32 = 4;
pub const TRNG_O_IRQFLAGSTAT: u32 = 8;
pub const TRNG_O_IRQFLAGMASK: u32 = 12;
pub const TRNG_O_IRQFLAGCLR: u32 = 16;
pub const TRNG_O_CTL: u32 = 20;
pub const TRNG_O_CFG0: u32 = 24;
pub const TRNG_O_ALARMCNT: u32 = 28;
pub const TRNG_O_FROEN: u32 = 32;
pub const TRNG_O_FRODETUNE: u32 = 36;
pub const TRNG_O_ALARMMASK: u32 = 40;
pub const TRNG_O_ALARMSTOP: u32 = 44;
pub const TRNG_O_LFSR0: u32 = 48;
pub const TRNG_O_LFSR1: u32 = 52;
pub const TRNG_O_LFSR2: u32 = 56;
pub const TRNG_O_HWOPT: u32 = 120;
pub const TRNG_O_HWVER0: u32 = 124;
pub const TRNG_O_IRQSTATMASK: u32 = 8152;
pub const TRNG_O_HWVER1: u32 = 8160;
pub const TRNG_O_IRQSET: u32 = 8172;
pub const TRNG_O_SWRESET: u32 = 8176;
pub const TRNG_O_IRQSTAT: u32 = 8184;
pub const TRNG_OUT0_VALUE_31_0_W: u32 = 32;
pub const TRNG_OUT0_VALUE_31_0_M: u32 = 4294967295;
pub const TRNG_OUT0_VALUE_31_0_S: u32 = 0;
pub const TRNG_OUT1_VALUE_63_32_W: u32 = 32;
pub const TRNG_OUT1_VALUE_63_32_M: u32 = 4294967295;
pub const TRNG_OUT1_VALUE_63_32_S: u32 = 0;
pub const TRNG_IRQFLAGSTAT_NEED_CLOCK: u32 = 2147483648;
pub const TRNG_IRQFLAGSTAT_NEED_CLOCK_BITN: u32 = 31;
pub const TRNG_IRQFLAGSTAT_NEED_CLOCK_M: u32 = 2147483648;
pub const TRNG_IRQFLAGSTAT_NEED_CLOCK_S: u32 = 31;
pub const TRNG_IRQFLAGSTAT_SHUTDOWN_OVF: u32 = 2;
pub const TRNG_IRQFLAGSTAT_SHUTDOWN_OVF_BITN: u32 = 1;
pub const TRNG_IRQFLAGSTAT_SHUTDOWN_OVF_M: u32 = 2;
pub const TRNG_IRQFLAGSTAT_SHUTDOWN_OVF_S: u32 = 1;
pub const TRNG_IRQFLAGSTAT_RDY: u32 = 1;
pub const TRNG_IRQFLAGSTAT_RDY_BITN: u32 = 0;
pub const TRNG_IRQFLAGSTAT_RDY_M: u32 = 1;
pub const TRNG_IRQFLAGSTAT_RDY_S: u32 = 0;
pub const TRNG_IRQFLAGMASK_SHUTDOWN_OVF: u32 = 2;
pub const TRNG_IRQFLAGMASK_SHUTDOWN_OVF_BITN: u32 = 1;
pub const TRNG_IRQFLAGMASK_SHUTDOWN_OVF_M: u32 = 2;
pub const TRNG_IRQFLAGMASK_SHUTDOWN_OVF_S: u32 = 1;
pub const TRNG_IRQFLAGMASK_RDY: u32 = 1;
pub const TRNG_IRQFLAGMASK_RDY_BITN: u32 = 0;
pub const TRNG_IRQFLAGMASK_RDY_M: u32 = 1;
pub const TRNG_IRQFLAGMASK_RDY_S: u32 = 0;
pub const TRNG_IRQFLAGCLR_SHUTDOWN_OVF: u32 = 2;
pub const TRNG_IRQFLAGCLR_SHUTDOWN_OVF_BITN: u32 = 1;
pub const TRNG_IRQFLAGCLR_SHUTDOWN_OVF_M: u32 = 2;
pub const TRNG_IRQFLAGCLR_SHUTDOWN_OVF_S: u32 = 1;
pub const TRNG_IRQFLAGCLR_RDY: u32 = 1;
pub const TRNG_IRQFLAGCLR_RDY_BITN: u32 = 0;
pub const TRNG_IRQFLAGCLR_RDY_M: u32 = 1;
pub const TRNG_IRQFLAGCLR_RDY_S: u32 = 0;
pub const TRNG_CTL_STARTUP_CYCLES_W: u32 = 16;
pub const TRNG_CTL_STARTUP_CYCLES_M: u32 = 4294901760;
pub const TRNG_CTL_STARTUP_CYCLES_S: u32 = 16;
pub const TRNG_CTL_TRNG_EN: u32 = 1024;
pub const TRNG_CTL_TRNG_EN_BITN: u32 = 10;
pub const TRNG_CTL_TRNG_EN_M: u32 = 1024;
pub const TRNG_CTL_TRNG_EN_S: u32 = 10;
pub const TRNG_CTL_NO_LFSR_FB: u32 = 4;
pub const TRNG_CTL_NO_LFSR_FB_BITN: u32 = 2;
pub const TRNG_CTL_NO_LFSR_FB_M: u32 = 4;
pub const TRNG_CTL_NO_LFSR_FB_S: u32 = 2;
pub const TRNG_CTL_TEST_MODE: u32 = 2;
pub const TRNG_CTL_TEST_MODE_BITN: u32 = 1;
pub const TRNG_CTL_TEST_MODE_M: u32 = 2;
pub const TRNG_CTL_TEST_MODE_S: u32 = 1;
pub const TRNG_CFG0_MAX_REFILL_CYCLES_W: u32 = 16;
pub const TRNG_CFG0_MAX_REFILL_CYCLES_M: u32 = 4294901760;
pub const TRNG_CFG0_MAX_REFILL_CYCLES_S: u32 = 16;
pub const TRNG_CFG0_SMPL_DIV_W: u32 = 4;
pub const TRNG_CFG0_SMPL_DIV_M: u32 = 3840;
pub const TRNG_CFG0_SMPL_DIV_S: u32 = 8;
pub const TRNG_CFG0_MIN_REFILL_CYCLES_W: u32 = 8;
pub const TRNG_CFG0_MIN_REFILL_CYCLES_M: u32 = 255;
pub const TRNG_CFG0_MIN_REFILL_CYCLES_S: u32 = 0;
pub const TRNG_ALARMCNT_SHUTDOWN_CNT_W: u32 = 6;
pub const TRNG_ALARMCNT_SHUTDOWN_CNT_M: u32 = 1056964608;
pub const TRNG_ALARMCNT_SHUTDOWN_CNT_S: u32 = 24;
pub const TRNG_ALARMCNT_SHUTDOWN_THR_W: u32 = 5;
pub const TRNG_ALARMCNT_SHUTDOWN_THR_M: u32 = 2031616;
pub const TRNG_ALARMCNT_SHUTDOWN_THR_S: u32 = 16;
pub const TRNG_ALARMCNT_ALARM_THR_W: u32 = 8;
pub const TRNG_ALARMCNT_ALARM_THR_M: u32 = 255;
pub const TRNG_ALARMCNT_ALARM_THR_S: u32 = 0;
pub const TRNG_FROEN_FRO_MASK_W: u32 = 24;
pub const TRNG_FROEN_FRO_MASK_M: u32 = 16777215;
pub const TRNG_FROEN_FRO_MASK_S: u32 = 0;
pub const TRNG_FRODETUNE_FRO_MASK_W: u32 = 24;
pub const TRNG_FRODETUNE_FRO_MASK_M: u32 = 16777215;
pub const TRNG_FRODETUNE_FRO_MASK_S: u32 = 0;
pub const TRNG_ALARMMASK_FRO_MASK_W: u32 = 24;
pub const TRNG_ALARMMASK_FRO_MASK_M: u32 = 16777215;
pub const TRNG_ALARMMASK_FRO_MASK_S: u32 = 0;
pub const TRNG_ALARMSTOP_FRO_FLAGS_W: u32 = 24;
pub const TRNG_ALARMSTOP_FRO_FLAGS_M: u32 = 16777215;
pub const TRNG_ALARMSTOP_FRO_FLAGS_S: u32 = 0;
pub const TRNG_LFSR0_LFSR_31_0_W: u32 = 32;
pub const TRNG_LFSR0_LFSR_31_0_M: u32 = 4294967295;
pub const TRNG_LFSR0_LFSR_31_0_S: u32 = 0;
pub const TRNG_LFSR1_LFSR_63_32_W: u32 = 32;
pub const TRNG_LFSR1_LFSR_63_32_M: u32 = 4294967295;
pub const TRNG_LFSR1_LFSR_63_32_S: u32 = 0;
pub const TRNG_LFSR2_LFSR_80_64_W: u32 = 17;
pub const TRNG_LFSR2_LFSR_80_64_M: u32 = 131071;
pub const TRNG_LFSR2_LFSR_80_64_S: u32 = 0;
pub const TRNG_HWOPT_NR_OF_FROS_W: u32 = 6;
pub const TRNG_HWOPT_NR_OF_FROS_M: u32 = 4032;
pub const TRNG_HWOPT_NR_OF_FROS_S: u32 = 6;
pub const TRNG_HWVER0_HW_MAJOR_VER_W: u32 = 4;
pub const TRNG_HWVER0_HW_MAJOR_VER_M: u32 = 251658240;
pub const TRNG_HWVER0_HW_MAJOR_VER_S: u32 = 24;
pub const TRNG_HWVER0_HW_MINOR_VER_W: u32 = 4;
pub const TRNG_HWVER0_HW_MINOR_VER_M: u32 = 15728640;
pub const TRNG_HWVER0_HW_MINOR_VER_S: u32 = 20;
pub const TRNG_HWVER0_HW_PATCH_LVL_W: u32 = 4;
pub const TRNG_HWVER0_HW_PATCH_LVL_M: u32 = 983040;
pub const TRNG_HWVER0_HW_PATCH_LVL_S: u32 = 16;
pub const TRNG_HWVER0_EIP_NUM_COMPL_W: u32 = 8;
pub const TRNG_HWVER0_EIP_NUM_COMPL_M: u32 = 65280;
pub const TRNG_HWVER0_EIP_NUM_COMPL_S: u32 = 8;
pub const TRNG_HWVER0_EIP_NUM_W: u32 = 8;
pub const TRNG_HWVER0_EIP_NUM_M: u32 = 255;
pub const TRNG_HWVER0_EIP_NUM_S: u32 = 0;
pub const TRNG_IRQSTATMASK_SHUTDOWN_OVF: u32 = 2;
pub const TRNG_IRQSTATMASK_SHUTDOWN_OVF_BITN: u32 = 1;
pub const TRNG_IRQSTATMASK_SHUTDOWN_OVF_M: u32 = 2;
pub const TRNG_IRQSTATMASK_SHUTDOWN_OVF_S: u32 = 1;
pub const TRNG_IRQSTATMASK_RDY: u32 = 1;
pub const TRNG_IRQSTATMASK_RDY_BITN: u32 = 0;
pub const TRNG_IRQSTATMASK_RDY_M: u32 = 1;
pub const TRNG_IRQSTATMASK_RDY_S: u32 = 0;
pub const TRNG_HWVER1_REV_W: u32 = 8;
pub const TRNG_HWVER1_REV_M: u32 = 255;
pub const TRNG_HWVER1_REV_S: u32 = 0;
pub const TRNG_SWRESET_RESET: u32 = 1;
pub const TRNG_SWRESET_RESET_BITN: u32 = 0;
pub const TRNG_SWRESET_RESET_M: u32 = 1;
pub const TRNG_SWRESET_RESET_S: u32 = 0;
pub const TRNG_IRQSTAT_STAT: u32 = 1;
pub const TRNG_IRQSTAT_STAT_BITN: u32 = 0;
pub const TRNG_IRQSTAT_STAT_M: u32 = 1;
pub const TRNG_IRQSTAT_STAT_S: u32 = 0;
pub const TRNG_NUMBER_READY: u32 = 1;
pub const TRNG_FRO_SHUTDOWN: u32 = 2;
pub const TRNG_NEED_CLOCK: u32 = 2147483648;
pub const TRNG_HI_WORD: u32 = 1;
pub const TRNG_LOW_WORD: u32 = 2;
pub const UART_INT_OE: u32 = 1024;
pub const UART_INT_BE: u32 = 512;
pub const UART_INT_PE: u32 = 256;
pub const UART_INT_FE: u32 = 128;
pub const UART_INT_RT: u32 = 64;
pub const UART_INT_TX: u32 = 32;
pub const UART_INT_RX: u32 = 16;
pub const UART_INT_CTS: u32 = 2;
pub const UART_CONFIG_WLEN_MASK: u32 = 96;
pub const UART_CONFIG_WLEN_8: u32 = 96;
pub const UART_CONFIG_WLEN_7: u32 = 64;
pub const UART_CONFIG_WLEN_6: u32 = 32;
pub const UART_CONFIG_WLEN_5: u32 = 0;
pub const UART_CONFIG_STOP_MASK: u32 = 8;
pub const UART_CONFIG_STOP_ONE: u32 = 0;
pub const UART_CONFIG_STOP_TWO: u32 = 8;
pub const UART_CONFIG_PAR_MASK: u32 = 134;
pub const UART_CONFIG_PAR_NONE: u32 = 0;
pub const UART_CONFIG_PAR_EVEN: u32 = 6;
pub const UART_CONFIG_PAR_ODD: u32 = 2;
pub const UART_CONFIG_PAR_ONE: u32 = 130;
pub const UART_CONFIG_PAR_ZERO: u32 = 134;
pub const UART_FIFO_TX1_8: u32 = 0;
pub const UART_FIFO_TX2_8: u32 = 1;
pub const UART_FIFO_TX4_8: u32 = 2;
pub const UART_FIFO_TX6_8: u32 = 3;
pub const UART_FIFO_TX7_8: u32 = 4;
pub const UART_FIFO_RX1_8: u32 = 0;
pub const UART_FIFO_RX2_8: u32 = 8;
pub const UART_FIFO_RX4_8: u32 = 16;
pub const UART_FIFO_RX6_8: u32 = 24;
pub const UART_FIFO_RX7_8: u32 = 32;
pub const UART_DMA_ERR_RXSTOP: u32 = 4;
pub const UART_DMA_TX: u32 = 2;
pub const UART_DMA_RX: u32 = 1;
pub const UART_RXERROR_OVERRUN: u32 = 8;
pub const UART_RXERROR_BREAK: u32 = 4;
pub const UART_RXERROR_PARITY: u32 = 2;
pub const UART_RXERROR_FRAMING: u32 = 1;
pub const UART_BUSY: u32 = 1;
pub const UART_IDLE: u32 = 0;
pub const UDMA_O_STATUS: u32 = 0;
pub const UDMA_O_CFG: u32 = 4;
pub const UDMA_O_CTRL: u32 = 8;
pub const UDMA_O_ALTCTRL: u32 = 12;
pub const UDMA_O_WAITONREQ: u32 = 16;
pub const UDMA_O_SOFTREQ: u32 = 20;
pub const UDMA_O_SETBURST: u32 = 24;
pub const UDMA_O_CLEARBURST: u32 = 28;
pub const UDMA_O_SETREQMASK: u32 = 32;
pub const UDMA_O_CLEARREQMASK: u32 = 36;
pub const UDMA_O_SETCHANNELEN: u32 = 40;
pub const UDMA_O_CLEARCHANNELEN: u32 = 44;
pub const UDMA_O_SETCHNLPRIALT: u32 = 48;
pub const UDMA_O_CLEARCHNLPRIALT: u32 = 52;
pub const UDMA_O_SETCHNLPRIORITY: u32 = 56;
pub const UDMA_O_CLEARCHNLPRIORITY: u32 = 60;
pub const UDMA_O_ERROR: u32 = 76;
pub const UDMA_O_REQDONE: u32 = 1284;
pub const UDMA_O_DONEMASK: u32 = 1312;
pub const UDMA_STATUS_TEST_W: u32 = 4;
pub const UDMA_STATUS_TEST_M: u32 = 4026531840;
pub const UDMA_STATUS_TEST_S: u32 = 28;
pub const UDMA_STATUS_TOTALCHANNELS_W: u32 = 5;
pub const UDMA_STATUS_TOTALCHANNELS_M: u32 = 2031616;
pub const UDMA_STATUS_TOTALCHANNELS_S: u32 = 16;
pub const UDMA_STATUS_STATE_W: u32 = 4;
pub const UDMA_STATUS_STATE_M: u32 = 240;
pub const UDMA_STATUS_STATE_S: u32 = 4;
pub const UDMA_STATUS_MASTERENABLE: u32 = 1;
pub const UDMA_STATUS_MASTERENABLE_BITN: u32 = 0;
pub const UDMA_STATUS_MASTERENABLE_M: u32 = 1;
pub const UDMA_STATUS_MASTERENABLE_S: u32 = 0;
pub const UDMA_CFG_PRTOCTRL_W: u32 = 3;
pub const UDMA_CFG_PRTOCTRL_M: u32 = 224;
pub const UDMA_CFG_PRTOCTRL_S: u32 = 5;
pub const UDMA_CFG_MASTERENABLE: u32 = 1;
pub const UDMA_CFG_MASTERENABLE_BITN: u32 = 0;
pub const UDMA_CFG_MASTERENABLE_M: u32 = 1;
pub const UDMA_CFG_MASTERENABLE_S: u32 = 0;
pub const UDMA_CTRL_BASEPTR_W: u32 = 22;
pub const UDMA_CTRL_BASEPTR_M: u32 = 4294966272;
pub const UDMA_CTRL_BASEPTR_S: u32 = 10;
pub const UDMA_ALTCTRL_BASEPTR_W: u32 = 32;
pub const UDMA_ALTCTRL_BASEPTR_M: u32 = 4294967295;
pub const UDMA_ALTCTRL_BASEPTR_S: u32 = 0;
pub const UDMA_WAITONREQ_CHNLSTATUS_W: u32 = 32;
pub const UDMA_WAITONREQ_CHNLSTATUS_M: u32 = 4294967295;
pub const UDMA_WAITONREQ_CHNLSTATUS_S: u32 = 0;
pub const UDMA_SOFTREQ_CHNLS_W: u32 = 32;
pub const UDMA_SOFTREQ_CHNLS_M: u32 = 4294967295;
pub const UDMA_SOFTREQ_CHNLS_S: u32 = 0;
pub const UDMA_SETBURST_CHNLS_W: u32 = 32;
pub const UDMA_SETBURST_CHNLS_M: u32 = 4294967295;
pub const UDMA_SETBURST_CHNLS_S: u32 = 0;
pub const UDMA_CLEARBURST_CHNLS_W: u32 = 32;
pub const UDMA_CLEARBURST_CHNLS_M: u32 = 4294967295;
pub const UDMA_CLEARBURST_CHNLS_S: u32 = 0;
pub const UDMA_SETREQMASK_CHNLS_W: u32 = 32;
pub const UDMA_SETREQMASK_CHNLS_M: u32 = 4294967295;
pub const UDMA_SETREQMASK_CHNLS_S: u32 = 0;
pub const UDMA_CLEARREQMASK_CHNLS_W: u32 = 32;
pub const UDMA_CLEARREQMASK_CHNLS_M: u32 = 4294967295;
pub const UDMA_CLEARREQMASK_CHNLS_S: u32 = 0;
pub const UDMA_SETCHANNELEN_CHNLS_W: u32 = 32;
pub const UDMA_SETCHANNELEN_CHNLS_M: u32 = 4294967295;
pub const UDMA_SETCHANNELEN_CHNLS_S: u32 = 0;
pub const UDMA_CLEARCHANNELEN_CHNLS_W: u32 = 32;
pub const UDMA_CLEARCHANNELEN_CHNLS_M: u32 = 4294967295;
pub const UDMA_CLEARCHANNELEN_CHNLS_S: u32 = 0;
pub const UDMA_SETCHNLPRIALT_CHNLS_W: u32 = 32;
pub const UDMA_SETCHNLPRIALT_CHNLS_M: u32 = 4294967295;
pub const UDMA_SETCHNLPRIALT_CHNLS_S: u32 = 0;
pub const UDMA_CLEARCHNLPRIALT_CHNLS_W: u32 = 32;
pub const UDMA_CLEARCHNLPRIALT_CHNLS_M: u32 = 4294967295;
pub const UDMA_CLEARCHNLPRIALT_CHNLS_S: u32 = 0;
pub const UDMA_SETCHNLPRIORITY_CHNLS_W: u32 = 32;
pub const UDMA_SETCHNLPRIORITY_CHNLS_M: u32 = 4294967295;
pub const UDMA_SETCHNLPRIORITY_CHNLS_S: u32 = 0;
pub const UDMA_CLEARCHNLPRIORITY_CHNLS_W: u32 = 32;
pub const UDMA_CLEARCHNLPRIORITY_CHNLS_M: u32 = 4294967295;
pub const UDMA_CLEARCHNLPRIORITY_CHNLS_S: u32 = 0;
pub const UDMA_ERROR_STATUS: u32 = 1;
pub const UDMA_ERROR_STATUS_BITN: u32 = 0;
pub const UDMA_ERROR_STATUS_M: u32 = 1;
pub const UDMA_ERROR_STATUS_S: u32 = 0;
pub const UDMA_REQDONE_CHNLS_W: u32 = 32;
pub const UDMA_REQDONE_CHNLS_M: u32 = 4294967295;
pub const UDMA_REQDONE_CHNLS_S: u32 = 0;
pub const UDMA_DONEMASK_CHNLS_W: u32 = 32;
pub const UDMA_DONEMASK_CHNLS_M: u32 = 4294967295;
pub const UDMA_DONEMASK_CHNLS_S: u32 = 0;
pub const UDMA_NUM_CHANNELS: u32 = 21;
pub const UDMA_PRIORITY_LOW: u32 = 0;
pub const UDMA_PRIORITY_HIGH: u32 = 1;
pub const UDMA_ATTR_USEBURST: u32 = 1;
pub const UDMA_ATTR_ALTSELECT: u32 = 2;
pub const UDMA_ATTR_HIGH_PRIORITY: u32 = 4;
pub const UDMA_ATTR_REQMASK: u32 = 8;
pub const UDMA_ATTR_ALL: u32 = 15;
pub const UDMA_MODE_STOP: u32 = 0;
pub const UDMA_MODE_BASIC: u32 = 1;
pub const UDMA_MODE_AUTO: u32 = 2;
pub const UDMA_MODE_PINGPONG: u32 = 3;
pub const UDMA_MODE_MEM_SCATTER_GATHER: u32 = 4;
pub const UDMA_MODE_PER_SCATTER_GATHER: u32 = 6;
pub const UDMA_MODE_M: u32 = 7;
pub const UDMA_MODE_ALT_SELECT: u32 = 1;
pub const UDMA_DST_INC_8: u32 = 0;
pub const UDMA_DST_INC_16: u32 = 1073741824;
pub const UDMA_DST_INC_32: u32 = 2147483648;
pub const UDMA_DST_INC_NONE: u32 = 3221225472;
pub const UDMA_DST_INC_M: u32 = 3221225472;
pub const UDMA_DST_INC_S: u32 = 30;
pub const UDMA_SRC_INC_8: u32 = 0;
pub const UDMA_SRC_INC_16: u32 = 67108864;
pub const UDMA_SRC_INC_32: u32 = 134217728;
pub const UDMA_SRC_INC_NONE: u32 = 201326592;
pub const UDMA_SRC_INC_M: u32 = 201326592;
pub const UDMA_SRC_INC_S: u32 = 26;
pub const UDMA_SIZE_8: u32 = 0;
pub const UDMA_SIZE_16: u32 = 285212672;
pub const UDMA_SIZE_32: u32 = 570425344;
pub const UDMA_SIZE_M: u32 = 855638016;
pub const UDMA_SIZE_S: u32 = 24;
pub const UDMA_ARB_1: u32 = 0;
pub const UDMA_ARB_2: u32 = 16384;
pub const UDMA_ARB_4: u32 = 32768;
pub const UDMA_ARB_8: u32 = 49152;
pub const UDMA_ARB_16: u32 = 65536;
pub const UDMA_ARB_32: u32 = 81920;
pub const UDMA_ARB_64: u32 = 98304;
pub const UDMA_ARB_128: u32 = 114688;
pub const UDMA_ARB_256: u32 = 131072;
pub const UDMA_ARB_512: u32 = 147456;
pub const UDMA_ARB_1024: u32 = 163840;
pub const UDMA_ARB_M: u32 = 245760;
pub const UDMA_ARB_S: u32 = 14;
pub const UDMA_NEXT_USEBURST: u32 = 8;
pub const UDMA_XFER_SIZE_MAX: u32 = 1024;
pub const UDMA_XFER_SIZE_M: u32 = 16368;
pub const UDMA_XFER_SIZE_S: u32 = 4;
pub const UDMA_CHAN_SW_EVT0: u32 = 0;
pub const UDMA_CHAN_UART0_RX: u32 = 1;
pub const UDMA_CHAN_UART0_TX: u32 = 2;
pub const UDMA_CHAN_SSI0_RX: u32 = 3;
pub const UDMA_CHAN_SSI0_TX: u32 = 4;
pub const UDMA_CHAN_AUX_ADC: u32 = 7;
pub const UDMA_CHAN_AUX_SW: u32 = 8;
pub const UDMA_CHAN_TIMER0_A: u32 = 9;
pub const UDMA_CHAN_TIMER0_B: u32 = 10;
pub const UDMA_CHAN_TIMER1_A: u32 = 11;
pub const UDMA_CHAN_TIMER1_B: u32 = 12;
pub const UDMA_CHAN_AON_PROG2: u32 = 13;
pub const UDMA_CHAN_DMA_PROG: u32 = 14;
pub const UDMA_CHAN_AON_RTC: u32 = 15;
pub const UDMA_CHAN_SSI1_RX: u32 = 16;
pub const UDMA_CHAN_SSI1_TX: u32 = 17;
pub const UDMA_CHAN_SW_EVT1: u32 = 18;
pub const UDMA_CHAN_SW_EVT2: u32 = 19;
pub const UDMA_CHAN_SW_EVT3: u32 = 20;
pub const UDMA_PRI_SELECT: u32 = 0;
pub const UDMA_ALT_SELECT: u32 = 32;
pub const WDT_O_LOAD: u32 = 0;
pub const WDT_O_VALUE: u32 = 4;
pub const WDT_O_CTL: u32 = 8;
pub const WDT_O_ICR: u32 = 12;
pub const WDT_O_RIS: u32 = 16;
pub const WDT_O_MIS: u32 = 20;
pub const WDT_O_TEST: u32 = 1048;
pub const WDT_O_INT_CAUS: u32 = 1052;
pub const WDT_O_LOCK: u32 = 3072;
pub const WDT_LOAD_WDTLOAD_W: u32 = 32;
pub const WDT_LOAD_WDTLOAD_M: u32 = 4294967295;
pub const WDT_LOAD_WDTLOAD_S: u32 = 0;
pub const WDT_VALUE_WDTVALUE_W: u32 = 32;
pub const WDT_VALUE_WDTVALUE_M: u32 = 4294967295;
pub const WDT_VALUE_WDTVALUE_S: u32 = 0;
pub const WDT_CTL_INTTYPE: u32 = 4;
pub const WDT_CTL_INTTYPE_BITN: u32 = 2;
pub const WDT_CTL_INTTYPE_M: u32 = 4;
pub const WDT_CTL_INTTYPE_S: u32 = 2;
pub const WDT_CTL_INTTYPE_NONMASKABLE: u32 = 4;
pub const WDT_CTL_INTTYPE_MASKABLE: u32 = 0;
pub const WDT_CTL_RESEN: u32 = 2;
pub const WDT_CTL_RESEN_BITN: u32 = 1;
pub const WDT_CTL_RESEN_M: u32 = 2;
pub const WDT_CTL_RESEN_S: u32 = 1;
pub const WDT_CTL_RESEN_EN: u32 = 2;
pub const WDT_CTL_RESEN_DIS: u32 = 0;
pub const WDT_CTL_INTEN: u32 = 1;
pub const WDT_CTL_INTEN_BITN: u32 = 0;
pub const WDT_CTL_INTEN_M: u32 = 1;
pub const WDT_CTL_INTEN_S: u32 = 0;
pub const WDT_CTL_INTEN_EN: u32 = 1;
pub const WDT_CTL_INTEN_DIS: u32 = 0;
pub const WDT_ICR_WDTICR_W: u32 = 32;
pub const WDT_ICR_WDTICR_M: u32 = 4294967295;
pub const WDT_ICR_WDTICR_S: u32 = 0;
pub const WDT_RIS_WDTRIS: u32 = 1;
pub const WDT_RIS_WDTRIS_BITN: u32 = 0;
pub const WDT_RIS_WDTRIS_M: u32 = 1;
pub const WDT_RIS_WDTRIS_S: u32 = 0;
pub const WDT_MIS_WDTMIS: u32 = 1;
pub const WDT_MIS_WDTMIS_BITN: u32 = 0;
pub const WDT_MIS_WDTMIS_M: u32 = 1;
pub const WDT_MIS_WDTMIS_S: u32 = 0;
pub const WDT_TEST_STALL: u32 = 256;
pub const WDT_TEST_STALL_BITN: u32 = 8;
pub const WDT_TEST_STALL_M: u32 = 256;
pub const WDT_TEST_STALL_S: u32 = 8;
pub const WDT_TEST_STALL_EN: u32 = 256;
pub const WDT_TEST_STALL_DIS: u32 = 0;
pub const WDT_TEST_TEST_EN: u32 = 1;
pub const WDT_TEST_TEST_EN_BITN: u32 = 0;
pub const WDT_TEST_TEST_EN_M: u32 = 1;
pub const WDT_TEST_TEST_EN_S: u32 = 0;
pub const WDT_TEST_TEST_EN_EN: u32 = 1;
pub const WDT_TEST_TEST_EN_DIS: u32 = 0;
pub const WDT_INT_CAUS_CAUSE_RESET: u32 = 2;
pub const WDT_INT_CAUS_CAUSE_RESET_BITN: u32 = 1;
pub const WDT_INT_CAUS_CAUSE_RESET_M: u32 = 2;
pub const WDT_INT_CAUS_CAUSE_RESET_S: u32 = 1;
pub const WDT_INT_CAUS_CAUSE_INTR: u32 = 1;
pub const WDT_INT_CAUS_CAUSE_INTR_BITN: u32 = 0;
pub const WDT_INT_CAUS_CAUSE_INTR_M: u32 = 1;
pub const WDT_INT_CAUS_CAUSE_INTR_S: u32 = 0;
pub const WDT_LOCK_WDTLOCK_W: u32 = 32;
pub const WDT_LOCK_WDTLOCK_M: u32 = 4294967295;
pub const WDT_LOCK_WDTLOCK_S: u32 = 0;
pub const WATCHDOG_LOCK_UNLOCKED: u32 = 0;
pub const WATCHDOG_LOCK_LOCKED: u32 = 1;
pub const WATCHDOG_LOCK_UNLOCK: u32 = 449635665;
pub const WATCHDOG_INT_TIMEOUT: u32 = 1;
pub const WATCHDOG_INT_TYPE_INT: u32 = 0;
pub const WATCHDOG_INT_TYPE_NMI: u32 = 4;
pub type __int8_t = cty::c_schar;
pub type __uint8_t = cty::c_uchar;
pub type __int16_t = cty::c_short;
pub type __uint16_t = cty::c_ushort;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_longlong;
pub type __uint64_t = cty::c_ulonglong;
pub type __int_least8_t = cty::c_schar;
pub type __uint_least8_t = cty::c_uchar;
pub type __int_least16_t = cty::c_short;
pub type __uint_least16_t = cty::c_ushort;
pub type __int_least32_t = cty::c_int;
pub type __uint_least32_t = cty::c_uint;
pub type __int_least64_t = cty::c_longlong;
pub type __uint_least64_t = cty::c_ulonglong;
pub type __intmax_t = cty::c_longlong;
pub type __uintmax_t = cty::c_ulonglong;
pub type __intptr_t = cty::c_int;
pub type __uintptr_t = cty::c_uint;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = cty::c_schar;
pub type uint_fast8_t = cty::c_uchar;
pub type int_fast16_t = cty::c_short;
pub type uint_fast16_t = cty::c_ushort;
pub type int_fast32_t = cty::c_int;
pub type uint_fast32_t = cty::c_uint;
pub type int_fast64_t = cty::c_longlong;
pub type uint_fast64_t = cty::c_ulonglong;
pub type FPTR_VOID_VOID_T = ::core::option::Option<unsafe extern "C" fn()>;
pub type FPTR_VOID_UINT8_T = ::core::option::Option<unsafe extern "C" fn(arg1: u8)>;
pub type __UINT32 = cty::c_uint;
extern "C" {
    pub fn __error__(pcFilename: *mut cty::c_char, ui32Line: u32);
}
extern "C" {
    pub fn CPUcpsid() -> u32;
}
extern "C" {
    pub fn CPUprimask() -> u32;
}
extern "C" {
    pub fn CPUcpsie() -> u32;
}
extern "C" {
    pub fn CPUbasepriGet() -> u32;
}
extern "C" {
    pub fn CPUdelay(ui32Count: u32);
}
extern "C" {
    #[link_name = "CPUwfi__extern"]
    pub fn CPUwfi();
}
extern "C" {
    #[link_name = "CPUwfe__extern"]
    pub fn CPUwfe();
}
extern "C" {
    #[link_name = "CPUsev__extern"]
    pub fn CPUsev();
}
extern "C" {
    #[link_name = "CPUbasepriSet__extern"]
    pub fn CPUbasepriSet(ui32NewBasepri: u32);
}
extern "C" {
    #[link_name = "CPU_WriteBufferDisable__extern"]
    pub fn CPU_WriteBufferDisable();
}
extern "C" {
    #[link_name = "CPU_WriteBufferEnable__extern"]
    pub fn CPU_WriteBufferEnable();
}
extern "C" {
    #[link_name = "AuxAdiDdiSafeWrite__extern"]
    pub fn AuxAdiDdiSafeWrite(nAddr: u32, nData: u32, nSize: u32);
}
extern "C" {
    #[link_name = "AuxAdiDdiSafeRead__extern"]
    pub fn AuxAdiDdiSafeRead(nAddr: u32, nSize: u32) -> u32;
}
extern "C" {
    #[link_name = "DDI32RegRead__extern"]
    pub fn DDI32RegRead(ui32Base: u32, ui32Reg: u32) -> u32;
}
extern "C" {
    #[link_name = "DDI32BitsSet__extern"]
    pub fn DDI32BitsSet(ui32Base: u32, ui32Reg: u32, ui32Val: u32);
}
extern "C" {
    #[link_name = "DDI32BitsClear__extern"]
    pub fn DDI32BitsClear(ui32Base: u32, ui32Reg: u32, ui32Val: u32);
}
extern "C" {
    #[link_name = "DDI8SetValBit__extern"]
    pub fn DDI8SetValBit(ui32Base: u32, ui32Reg: u32, ui32Byte: u32, ui16Mask: u16, ui16Val: u16);
}
extern "C" {
    #[link_name = "DDI16SetValBit__extern"]
    pub fn DDI16SetValBit(
        ui32Base: u32,
        ui32Reg: u32,
        bWriteHigh: bool,
        ui32Mask: u32,
        ui32Val: u32,
    );
}
extern "C" {
    pub fn DDI32RegWrite(ui32Base: u32, ui32Reg: u32, ui32Val: u32);
}
extern "C" {
    pub fn DDI16BitWrite(ui32Base: u32, ui32Reg: u32, ui32Mask: u32, ui32WrData: u32);
}
extern "C" {
    pub fn DDI16BitfieldWrite(
        ui32Base: u32,
        ui32Reg: u32,
        ui32Mask: u32,
        ui32Shift: u32,
        ui32Data: u16,
    );
}
extern "C" {
    pub fn DDI16BitRead(ui32Base: u32, ui32Reg: u32, ui32Mask: u32) -> u16;
}
extern "C" {
    pub fn DDI16BitfieldRead(ui32Base: u32, ui32Reg: u32, ui32Mask: u32, ui32Shift: u32) -> u16;
}
extern "C" {
    #[link_name = "ADI8RegWrite__extern"]
    pub fn ADI8RegWrite(ui32Base: u32, ui32Reg: u32, ui8Val: u8);
}
extern "C" {
    #[link_name = "ADI16RegWrite__extern"]
    pub fn ADI16RegWrite(ui32Base: u32, ui32Reg: u32, ui16Val: u16);
}
extern "C" {
    #[link_name = "ADI32RegWrite__extern"]
    pub fn ADI32RegWrite(ui32Base: u32, ui32Reg: u32, ui32Val: u32);
}
extern "C" {
    #[link_name = "ADI8RegRead__extern"]
    pub fn ADI8RegRead(ui32Base: u32, ui32Reg: u32) -> u32;
}
extern "C" {
    #[link_name = "ADI16RegRead__extern"]
    pub fn ADI16RegRead(ui32Base: u32, ui32Reg: u32) -> u32;
}
extern "C" {
    #[link_name = "ADI32RegRead__extern"]
    pub fn ADI32RegRead(ui32Base: u32, ui32Reg: u32) -> u32;
}
extern "C" {
    #[link_name = "ADI8BitsSet__extern"]
    pub fn ADI8BitsSet(ui32Base: u32, ui32Reg: u32, ui8Val: u8);
}
extern "C" {
    #[link_name = "ADI16BitsSet__extern"]
    pub fn ADI16BitsSet(ui32Base: u32, ui32Reg: u32, ui16Val: u16);
}
extern "C" {
    #[link_name = "ADI32BitsSet__extern"]
    pub fn ADI32BitsSet(ui32Base: u32, ui32Reg: u32, ui32Val: u32);
}
extern "C" {
    #[link_name = "ADI8BitsClear__extern"]
    pub fn ADI8BitsClear(ui32Base: u32, ui32Reg: u32, ui8Val: u8);
}
extern "C" {
    #[link_name = "ADI16BitsClear__extern"]
    pub fn ADI16BitsClear(ui32Base: u32, ui32Reg: u32, ui16Val: u16);
}
extern "C" {
    #[link_name = "ADI32BitsClear__extern"]
    pub fn ADI32BitsClear(ui32Base: u32, ui32Reg: u32, ui32Val: u32);
}
extern "C" {
    #[link_name = "ADI4SetValBit__extern"]
    pub fn ADI4SetValBit(ui32Base: u32, ui32Reg: u32, bWriteHigh: bool, ui8Mask: u8, ui8Val: u8);
}
extern "C" {
    #[link_name = "ADI8SetValBit__extern"]
    pub fn ADI8SetValBit(ui32Base: u32, ui32Reg: u32, ui16Mask: u16, ui16Val: u16);
}
extern "C" {
    #[link_name = "ADI16SetValBit__extern"]
    pub fn ADI16SetValBit(ui32Base: u32, ui32Reg: u32, ui32Mask: u32, ui32Val: u32);
}
extern "C" {
    pub fn SafeHapiVoid(fPtr: FPTR_VOID_VOID_T);
}
extern "C" {
    pub fn SafeHapiAuxAdiSelect(fPtr: FPTR_VOID_UINT8_T, ut8Signal: u8);
}
extern "C" {
    #[link_name = "AONBatMonEnable__extern"]
    pub fn AONBatMonEnable();
}
extern "C" {
    #[link_name = "AONBatMonDisable__extern"]
    pub fn AONBatMonDisable();
}
extern "C" {
    pub fn AONBatMonTemperatureGetDegC() -> i32;
}
extern "C" {
    #[link_name = "AONBatMonBatteryVoltageGet__extern"]
    pub fn AONBatMonBatteryVoltageGet() -> u32;
}
extern "C" {
    #[link_name = "AONBatMonNewBatteryMeasureReady__extern"]
    pub fn AONBatMonNewBatteryMeasureReady() -> bool;
}
extern "C" {
    #[link_name = "AONBatMonNewTempMeasureReady__extern"]
    pub fn AONBatMonNewTempMeasureReady() -> bool;
}
extern "C" {
    pub fn AONEventMcuWakeUpSet(ui32MCUWUEvent: u32, ui32EventSrc: u32);
}
extern "C" {
    pub fn AONEventMcuWakeUpGet(ui32MCUWUEvent: u32) -> u32;
}
extern "C" {
    pub fn AONEventAuxWakeUpSet(ui32AUXWUEvent: u32, ui32EventSrc: u32);
}
extern "C" {
    pub fn AONEventAuxWakeUpGet(ui32AUXWUEvent: u32) -> u32;
}
extern "C" {
    pub fn AONEventMcuSet(ui32MCUEvent: u32, ui32EventSrc: u32);
}
extern "C" {
    pub fn AONEventMcuGet(ui32MCUEvent: u32) -> u32;
}
extern "C" {
    #[link_name = "AONEventRtcSet__extern"]
    pub fn AONEventRtcSet(ui32EventSrc: u32);
}
extern "C" {
    #[link_name = "AONEventRtcGet__extern"]
    pub fn AONEventRtcGet() -> u32;
}
extern "C" {
    #[link_name = "AONIOCDriveStrengthSet__extern"]
    pub fn AONIOCDriveStrengthSet(ui32DriveLevel: u32, ui32DriveStrength: u32);
}
extern "C" {
    #[link_name = "AONIOCDriveStrengthGet__extern"]
    pub fn AONIOCDriveStrengthGet(ui32DriveLevel: u32) -> u32;
}
extern "C" {
    #[link_name = "AONIOCFreezeEnable__extern"]
    pub fn AONIOCFreezeEnable();
}
extern "C" {
    #[link_name = "AONIOCFreezeDisable__extern"]
    pub fn AONIOCFreezeDisable();
}
extern "C" {
    #[link_name = "AONIOC32kHzOutputDisable__extern"]
    pub fn AONIOC32kHzOutputDisable();
}
extern "C" {
    #[link_name = "AONIOC32kHzOutputEnable__extern"]
    pub fn AONIOC32kHzOutputEnable();
}
extern "C" {
    #[link_name = "AONRTCEnable__extern"]
    pub fn AONRTCEnable();
}
extern "C" {
    #[link_name = "AONRTCDisable__extern"]
    pub fn AONRTCDisable();
}
extern "C" {
    #[link_name = "AONRTCReset__extern"]
    pub fn AONRTCReset();
}
extern "C" {
    #[link_name = "AONRTCActive__extern"]
    pub fn AONRTCActive() -> bool;
}
extern "C" {
    #[link_name = "AONRTCChannelActive__extern"]
    pub fn AONRTCChannelActive(ui32Channel: u32) -> bool;
}
extern "C" {
    #[link_name = "AONRTCDelayConfig__extern"]
    pub fn AONRTCDelayConfig(ui32Delay: u32);
}
extern "C" {
    #[link_name = "AONRTCCombinedEventConfig__extern"]
    pub fn AONRTCCombinedEventConfig(ui32Channels: u32);
}
extern "C" {
    #[link_name = "AONRTCEventClear__extern"]
    pub fn AONRTCEventClear(ui32Channel: u32);
}
extern "C" {
    #[link_name = "AONRTCEventGet__extern"]
    pub fn AONRTCEventGet(ui32Channel: u32) -> bool;
}
extern "C" {
    #[link_name = "AONRTCSecGet__extern"]
    pub fn AONRTCSecGet() -> u32;
}
extern "C" {
    #[link_name = "AONRTCFractionGet__extern"]
    pub fn AONRTCFractionGet() -> u32;
}
extern "C" {
    #[link_name = "AONRTCSubSecIncrGet__extern"]
    pub fn AONRTCSubSecIncrGet() -> u32;
}
extern "C" {
    #[link_name = "AONRTCModeCh1Set__extern"]
    pub fn AONRTCModeCh1Set(ui32Mode: u32);
}
extern "C" {
    #[link_name = "AONRTCModeCh1Get__extern"]
    pub fn AONRTCModeCh1Get() -> u32;
}
extern "C" {
    #[link_name = "AONRTCModeCh2Set__extern"]
    pub fn AONRTCModeCh2Set(ui32Mode: u32);
}
extern "C" {
    #[link_name = "AONRTCModeCh2Get__extern"]
    pub fn AONRTCModeCh2Get() -> u32;
}
extern "C" {
    #[link_name = "AONRTCChannelEnable__extern"]
    pub fn AONRTCChannelEnable(ui32Channel: u32);
}
extern "C" {
    #[link_name = "AONRTCChannelDisable__extern"]
    pub fn AONRTCChannelDisable(ui32Channel: u32);
}
extern "C" {
    #[link_name = "AONRTCCompareValueSet__extern"]
    pub fn AONRTCCompareValueSet(ui32Channel: u32, ui32CompValue: u32);
}
extern "C" {
    #[link_name = "AONRTCCompareValueGet__extern"]
    pub fn AONRTCCompareValueGet(ui32Channel: u32) -> u32;
}
extern "C" {
    pub fn AONRTCCurrentCompareValueGet() -> u32;
}
extern "C" {
    pub fn AONRTCCurrent64BitValueGet() -> u64;
}
extern "C" {
    #[link_name = "AONRTCIncValueCh2Set__extern"]
    pub fn AONRTCIncValueCh2Set(ui32IncValue: u32);
}
extern "C" {
    #[link_name = "AONRTCIncValueCh2Get__extern"]
    pub fn AONRTCIncValueCh2Get() -> u32;
}
extern "C" {
    #[link_name = "AONRTCCaptureValueCh1Get__extern"]
    pub fn AONRTCCaptureValueCh1Get() -> u32;
}
extern "C" {
    pub fn IntRegister(
        ui32Interrupt: u32,
        pfnHandler: ::core::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn IntUnregister(ui32Interrupt: u32);
}
extern "C" {
    pub fn IntPriorityGroupingSet(ui32Bits: u32);
}
extern "C" {
    pub fn IntPriorityGroupingGet() -> u32;
}
extern "C" {
    pub fn IntPrioritySet(ui32Interrupt: u32, ui8Priority: u8);
}
extern "C" {
    pub fn IntPriorityGet(ui32Interrupt: u32) -> i32;
}
extern "C" {
    pub fn IntEnable(ui32Interrupt: u32);
}
extern "C" {
    pub fn IntDisable(ui32Interrupt: u32);
}
extern "C" {
    pub fn IntPendSet(ui32Interrupt: u32);
}
extern "C" {
    pub fn IntPendGet(ui32Interrupt: u32) -> bool;
}
extern "C" {
    pub fn IntPendClear(ui32Interrupt: u32);
}
extern "C" {
    #[link_name = "IntMasterEnable__extern"]
    pub fn IntMasterEnable() -> bool;
}
extern "C" {
    #[link_name = "IntMasterDisable__extern"]
    pub fn IntMasterDisable() -> bool;
}
extern "C" {
    #[link_name = "IntPriorityMaskSet__extern"]
    pub fn IntPriorityMaskSet(ui32PriorityMask: u32);
}
extern "C" {
    #[link_name = "IntPriorityMaskGet__extern"]
    pub fn IntPriorityMaskGet() -> u32;
}
extern "C" {
    #[link_name = "AONWUCMcuPowerDownConfig__extern"]
    pub fn AONWUCMcuPowerDownConfig(ui32ClkSrc: u32);
}
extern "C" {
    #[link_name = "AONWUCMcuPowerOffConfig__extern"]
    pub fn AONWUCMcuPowerOffConfig(ui32Mode: u32);
}
extern "C" {
    #[link_name = "AONWUCMcuWakeUpConfig__extern"]
    pub fn AONWUCMcuWakeUpConfig(ui32WakeUp: u32);
}
extern "C" {
    #[link_name = "AONWUCMcuSRamConfig__extern"]
    pub fn AONWUCMcuSRamConfig(ui32Retention: u32);
}
extern "C" {
    #[link_name = "AONWUCAuxClockConfigGet__extern"]
    pub fn AONWUCAuxClockConfigGet() -> u32;
}
extern "C" {
    #[link_name = "AONWUCAuxPowerDownConfig__extern"]
    pub fn AONWUCAuxPowerDownConfig(ui32ClkSrc: u32);
}
extern "C" {
    #[link_name = "AONWUCAuxSRamConfig__extern"]
    pub fn AONWUCAuxSRamConfig(ui32Retention: u32);
}
extern "C" {
    #[link_name = "AONWUCAuxWakeupEvent__extern"]
    pub fn AONWUCAuxWakeupEvent(ui32Mode: u32);
}
extern "C" {
    pub fn AONWUCAuxReset();
}
extern "C" {
    #[link_name = "AONWUCAuxImageValid__extern"]
    pub fn AONWUCAuxImageValid();
}
extern "C" {
    #[link_name = "AONWUCAuxImageInvalid__extern"]
    pub fn AONWUCAuxImageInvalid();
}
extern "C" {
    #[link_name = "AONWUCPowerStatusGet__extern"]
    pub fn AONWUCPowerStatusGet() -> u32;
}
extern "C" {
    #[link_name = "AONWUCShutDownEnable__extern"]
    pub fn AONWUCShutDownEnable();
}
extern "C" {
    #[link_name = "AONWUCDomainPowerDownEnable__extern"]
    pub fn AONWUCDomainPowerDownEnable();
}
extern "C" {
    #[link_name = "AONWUCDomainPowerDownDisable__extern"]
    pub fn AONWUCDomainPowerDownDisable();
}
extern "C" {
    #[link_name = "AONWUCMcuResetClear__extern"]
    pub fn AONWUCMcuResetClear(ui32Status: u32);
}
extern "C" {
    #[link_name = "AONWUCMcuResetStatusGet__extern"]
    pub fn AONWUCMcuResetStatusGet() -> u32;
}
extern "C" {
    pub fn AONWUCRechargeCtrlConfigSet(
        bAdaptEnable: bool,
        ui32AdaptRate: u32,
        ui32Period: u32,
        ui32MaxPeriod: u32,
    );
}
extern "C" {
    #[link_name = "AONWUCRechargeCtrlConfigGet__extern"]
    pub fn AONWUCRechargeCtrlConfigGet() -> u32;
}
extern "C" {
    pub fn AONWUCOscConfig(ui32Period: u32);
}
extern "C" {
    #[link_name = "AONWUCJtagPowerOff__extern"]
    pub fn AONWUCJtagPowerOff();
}
pub type FPTR_CRC32_T =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut u8, arg2: u32, arg3: u32) -> u32>;
pub type FPTR_GETFLSIZE_T = ::core::option::Option<unsafe extern "C" fn() -> u32>;
pub type FPTR_GETCHIPID_T = ::core::option::Option<unsafe extern "C" fn() -> u32>;
pub type FPTR_RESERVED1_T = ::core::option::Option<unsafe extern "C" fn(arg1: u32) -> u32>;
pub type FPTR_RESERVED2_T = ::core::option::Option<unsafe extern "C" fn() -> u32>;
pub type FPTR_RESERVED3_T =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut u8, arg2: u32, arg3: u32) -> u32>;
pub type FPTR_RESETDEV_T = ::core::option::Option<unsafe extern "C" fn()>;
pub type FPTR_FLETCHER32_T =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut u16, arg2: u16, arg3: u16) -> u32>;
pub type FPTR_MINVAL_T =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut u32, arg2: u32) -> u32>;
pub type FPTR_MAXVAL_T =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut u32, arg2: u32) -> u32>;
pub type FPTR_MEANVAL_T =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut u32, arg2: u32) -> u32>;
pub type FPTR_STDDVAL_T =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut u32, arg2: u32) -> u32>;
pub type FPTR_HFSOURCESAFESWITCH_T = ::core::option::Option<unsafe extern "C" fn()>;
pub type FPTR_RESERVED4_T = ::core::option::Option<unsafe extern "C" fn(arg1: u32)>;
pub type FPTR_RESERVED5_T = ::core::option::Option<unsafe extern "C" fn(arg1: u32)>;
pub type FPTR_COMPAIN_T = ::core::option::Option<unsafe extern "C" fn(arg1: u8)>;
pub type FPTR_COMPAREF_T = ::core::option::Option<unsafe extern "C" fn(arg1: u8)>;
pub type FPTR_ADCCOMPBIN_T = ::core::option::Option<unsafe extern "C" fn(arg1: u8)>;
pub type FPTR_COMPBREF_T = ::core::option::Option<unsafe extern "C" fn(arg1: u8)>;
extern "C" {
    pub fn MemBusWrkAroundHapiProgramFlash(
        pui8DataBuffer: *mut u8,
        ui32Address: u32,
        ui32Count: u32,
    ) -> u32;
}
extern "C" {
    pub fn MemBusWrkAroundHapiEraseSector(ui32Address: u32) -> u32;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct HARD_API_T {
    pub Crc32: FPTR_CRC32_T,
    pub FlashGetSize: FPTR_GETFLSIZE_T,
    pub GetChipId: FPTR_GETCHIPID_T,
    pub ReservedLocation1: FPTR_RESERVED1_T,
    pub ReservedLocation2: FPTR_RESERVED2_T,
    pub ReservedLocation3: FPTR_RESERVED3_T,
    pub ResetDevice: FPTR_RESETDEV_T,
    pub Fletcher32: FPTR_FLETCHER32_T,
    pub MinValue: FPTR_MINVAL_T,
    pub MaxValue: FPTR_MAXVAL_T,
    pub MeanValue: FPTR_MEANVAL_T,
    pub StandDeviationValue: FPTR_STDDVAL_T,
    pub ReservedLocation4: FPTR_RESERVED4_T,
    pub ReservedLocation5: FPTR_RESERVED5_T,
    pub HFSourceSafeSwitch: FPTR_HFSOURCESAFESWITCH_T,
    pub SelectCompAInput: FPTR_COMPAIN_T,
    pub SelectCompARef: FPTR_COMPAREF_T,
    pub SelectADCCompBInput: FPTR_ADCCOMPBIN_T,
    pub SelectCompBRef: FPTR_COMPBREF_T,
}
extern "C" {
    pub fn AUXADCDisable();
}
extern "C" {
    pub fn AUXADCEnableAsync(refSource: u32, trigger: u32);
}
extern "C" {
    pub fn AUXADCEnableSync(refSource: u32, sampleTime: u32, trigger: u32);
}
extern "C" {
    pub fn AUXADCDisableInputScaling();
}
extern "C" {
    pub fn AUXADCFlushFifo();
}
extern "C" {
    #[link_name = "AUXADCGenManualTrigger__extern"]
    pub fn AUXADCGenManualTrigger();
}
extern "C" {
    #[link_name = "AUXADCGetFifoStatus__extern"]
    pub fn AUXADCGetFifoStatus() -> u32;
}
extern "C" {
    pub fn AUXADCReadFifo() -> u32;
}
extern "C" {
    pub fn AUXADCPopFifo() -> u32;
}
extern "C" {
    #[link_name = "AUXADCSelectInput__extern"]
    pub fn AUXADCSelectInput(input: u32);
}
extern "C" {
    pub fn AUXADCGetAdjustmentGain(refSource: u32) -> i32;
}
extern "C" {
    pub fn AUXADCGetAdjustmentOffset(refSource: u32) -> i32;
}
extern "C" {
    pub fn AUXADCValueToMicrovolts(fixedRefVoltage: i32, adcValue: i32) -> i32;
}
extern "C" {
    pub fn AUXADCMicrovoltsToValue(fixedRefVoltage: i32, microvolts: i32) -> i32;
}
extern "C" {
    pub fn AUXADCAdjustValueForGainAndOffset(adcValue: i32, gain: i32, offset: i32) -> i32;
}
extern "C" {
    pub fn AUXADCUnadjustValueForGainAndOffset(adcValue: i32, gain: i32, offset: i32) -> i32;
}
extern "C" {
    #[link_name = "AUXSMPHAcquire__extern"]
    pub fn AUXSMPHAcquire(ui32Semaphore: u32);
}
extern "C" {
    #[link_name = "AUXSMPHTryAcquire__extern"]
    pub fn AUXSMPHTryAcquire(ui32Semaphore: u32) -> bool;
}
extern "C" {
    #[link_name = "AUXSMPHRelease__extern"]
    pub fn AUXSMPHRelease(ui32Semaphore: u32);
}
extern "C" {
    #[link_name = "AUXTDCStatusGet__extern"]
    pub fn AUXTDCStatusGet(ui32Base: u32) -> u32;
}
extern "C" {
    pub fn AUXTDCConfigSet(ui32Base: u32, ui32StartCondition: u32, ui32StopCondition: u32);
}
extern "C" {
    #[link_name = "AUXTDCIdle__extern"]
    pub fn AUXTDCIdle(ui32Base: u32) -> bool;
}
extern "C" {
    #[link_name = "AUXTDCEnable__extern"]
    pub fn AUXTDCEnable(ui32Base: u32, ui32RunMode: u32);
}
extern "C" {
    #[link_name = "AUXTDCIdleForce__extern"]
    pub fn AUXTDCIdleForce(ui32Base: u32);
}
extern "C" {
    pub fn AUXTDCMeasurementDone(ui32Base: u32) -> u32;
}
extern "C" {
    #[link_name = "AUXTDCMeasurementGet__extern"]
    pub fn AUXTDCMeasurementGet(ui32Base: u32) -> u32;
}
extern "C" {
    #[link_name = "AUXTDCLimitSet__extern"]
    pub fn AUXTDCLimitSet(ui32Base: u32, ui32Limit: u32);
}
extern "C" {
    #[link_name = "AUXTDCLimitGet__extern"]
    pub fn AUXTDCLimitGet(ui32Base: u32) -> u32;
}
extern "C" {
    #[link_name = "AUXTDCCounterEnable__extern"]
    pub fn AUXTDCCounterEnable(ui32Base: u32) -> bool;
}
extern "C" {
    #[link_name = "AUXTDCCounterDisable__extern"]
    pub fn AUXTDCCounterDisable(ui32Base: u32) -> bool;
}
extern "C" {
    #[link_name = "AUXTDCCounterSet__extern"]
    pub fn AUXTDCCounterSet(ui32Base: u32, ui32Events: u32) -> bool;
}
extern "C" {
    #[link_name = "AUXTDCCounterGet__extern"]
    pub fn AUXTDCCounterGet(ui32Base: u32) -> u32;
}
extern "C" {
    pub fn AUXTimerConfigure(ui32Timer: u32, ui32Config: u32);
}
extern "C" {
    pub fn AUXTimerStart(ui32Timer: u32);
}
extern "C" {
    pub fn AUXTimerStop(ui32Timer: u32);
}
extern "C" {
    #[link_name = "AUXTimerTargetValSet__extern"]
    pub fn AUXTimerTargetValSet(ui32Timer: u32, ui32Target: u32);
}
extern "C" {
    #[link_name = "AUXTimerTargetValGet__extern"]
    pub fn AUXTimerTargetValGet(ui32Timer: u32) -> u32;
}
extern "C" {
    pub fn AUXTimerPrescaleSet(ui32Timer: u32, ui32PrescaleDiv: u32);
}
extern "C" {
    pub fn AUXTimerPrescaleGet(ui32Timer: u32) -> u32;
}
extern "C" {
    pub fn AUXWUCClockEnable(ui32Clocks: u32);
}
extern "C" {
    pub fn AUXWUCClockDisable(ui32Clocks: u32);
}
extern "C" {
    pub fn AUXWUCClockStatus(ui32Clocks: u32) -> u32;
}
extern "C" {
    #[link_name = "AUXWUCClockFreqReq__extern"]
    pub fn AUXWUCClockFreqReq(ui32ClockFreq: u32);
}
extern "C" {
    pub fn AUXWUCPowerCtrl(ui32PowerMode: u32);
}
extern "C" {
    #[link_name = "AUXWUCFreezeEnable__extern"]
    pub fn AUXWUCFreezeEnable();
}
extern "C" {
    #[link_name = "AUXWUCFreezeDisable__extern"]
    pub fn AUXWUCFreezeDisable();
}
extern "C" {
    #[link_name = "CCFGRead_DIS_GPRAM__extern"]
    pub fn CCFGRead_DIS_GPRAM() -> bool;
}
extern "C" {
    #[link_name = "CCFGRead_EXT_LF_CLK_DIO__extern"]
    pub fn CCFGRead_EXT_LF_CLK_DIO() -> bool;
}
extern "C" {
    #[link_name = "CCFGRead_SCLK_LF_OPTION__extern"]
    pub fn CCFGRead_SCLK_LF_OPTION() -> u32;
}
extern "C" {
    #[link_name = "CCFGRead_XOSC_FREQ__extern"]
    pub fn CCFGRead_XOSC_FREQ() -> u32;
}
pub const ProtocolBitVector_t_PROTOCOL_Unknown: ProtocolBitVector_t = 0;
pub const ProtocolBitVector_t_PROTOCOLBIT_BLE: ProtocolBitVector_t = 2;
pub const ProtocolBitVector_t_PROTOCOLBIT_IEEE_802_15_4: ProtocolBitVector_t = 4;
pub const ProtocolBitVector_t_PROTOCOLBIT_Proprietary: ProtocolBitVector_t = 8;
pub type ProtocolBitVector_t = cty::c_uint;
extern "C" {
    pub fn ChipInfo_GetSupportedProtocol_BV() -> ProtocolBitVector_t;
}
extern "C" {
    #[link_name = "ChipInfo_SupportsBLE__extern"]
    pub fn ChipInfo_SupportsBLE() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_SupportsIEEE_802_15_4__extern"]
    pub fn ChipInfo_SupportsIEEE_802_15_4() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_SupportsPROPRIETARY__extern"]
    pub fn ChipInfo_SupportsPROPRIETARY() -> bool;
}
pub const PackageType_t_PACKAGE_Unknown: PackageType_t = -1;
pub const PackageType_t_PACKAGE_4x4: PackageType_t = 0;
pub const PackageType_t_PACKAGE_5x5: PackageType_t = 1;
pub const PackageType_t_PACKAGE_7x7: PackageType_t = 2;
pub const PackageType_t_PACKAGE_WAFER: PackageType_t = 3;
pub const PackageType_t_PACKAGE_WCSP: PackageType_t = 4;
pub const PackageType_t_PACKAGE_7x7_Q1: PackageType_t = 5;
pub type PackageType_t = cty::c_int;
extern "C" {
    pub fn ChipInfo_GetPackageType() -> PackageType_t;
}
extern "C" {
    #[link_name = "ChipInfo_PackageTypeIs4x4__extern"]
    pub fn ChipInfo_PackageTypeIs4x4() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_PackageTypeIs5x5__extern"]
    pub fn ChipInfo_PackageTypeIs5x5() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_PackageTypeIs7x7__extern"]
    pub fn ChipInfo_PackageTypeIs7x7() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_PackageTypeIsWAFER__extern"]
    pub fn ChipInfo_PackageTypeIsWAFER() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_PackageTypeIsWCSP__extern"]
    pub fn ChipInfo_PackageTypeIsWCSP() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_PackageTypeIs7x7Q1__extern"]
    pub fn ChipInfo_PackageTypeIs7x7Q1() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_GetDeviceIdHwRevCode__extern"]
    pub fn ChipInfo_GetDeviceIdHwRevCode() -> u32;
}
extern "C" {
    #[link_name = "ChipInfo_GetMinorHwRev__extern"]
    pub fn ChipInfo_GetMinorHwRev() -> u32;
}
extern "C" {
    #[link_name = "ChipInfo_GetUserId__extern"]
    pub fn ChipInfo_GetUserId() -> u32;
}
pub const ChipType_t_CHIP_TYPE_Unknown: ChipType_t = -1;
pub const ChipType_t_CHIP_TYPE_CC1310: ChipType_t = 0;
pub const ChipType_t_CHIP_TYPE_CC1350: ChipType_t = 1;
pub const ChipType_t_CHIP_TYPE_CC2620: ChipType_t = 2;
pub const ChipType_t_CHIP_TYPE_CC2630: ChipType_t = 3;
pub const ChipType_t_CHIP_TYPE_CC2640: ChipType_t = 4;
pub const ChipType_t_CHIP_TYPE_CC2650: ChipType_t = 5;
pub const ChipType_t_CHIP_TYPE_CUSTOM_0: ChipType_t = 6;
pub const ChipType_t_CHIP_TYPE_CUSTOM_1: ChipType_t = 7;
pub const ChipType_t_CHIP_TYPE_CC2640R2: ChipType_t = 8;
pub const ChipType_t_CHIP_TYPE_CC2642: ChipType_t = 9;
pub const ChipType_t_CHIP_TYPE_CC2644: ChipType_t = 10;
pub const ChipType_t_CHIP_TYPE_CC2652: ChipType_t = 11;
pub const ChipType_t_CHIP_TYPE_CC1312: ChipType_t = 12;
pub const ChipType_t_CHIP_TYPE_CC1352: ChipType_t = 13;
pub const ChipType_t_CHIP_TYPE_CC1354: ChipType_t = 14;
pub type ChipType_t = cty::c_int;
extern "C" {
    pub fn ChipInfo_GetChipType() -> ChipType_t;
}
pub const ChipFamily_t_FAMILY_Unknown: ChipFamily_t = -1;
pub const ChipFamily_t_FAMILY_CC26x0: ChipFamily_t = 0;
pub const ChipFamily_t_FAMILY_CC13x0: ChipFamily_t = 1;
pub const ChipFamily_t_FAMILY_CC26x1: ChipFamily_t = 2;
pub const ChipFamily_t_FAMILY_CC26x0R2: ChipFamily_t = 3;
pub const ChipFamily_t_FAMILY_CC13x2_CC26x2: ChipFamily_t = 4;
pub type ChipFamily_t = cty::c_int;
extern "C" {
    pub fn ChipInfo_GetChipFamily() -> ChipFamily_t;
}
extern "C" {
    #[link_name = "ChipInfo_ChipFamilyIs_CC13x0__extern"]
    pub fn ChipInfo_ChipFamilyIs_CC13x0() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_ChipFamilyIs_CC26x0__extern"]
    pub fn ChipInfo_ChipFamilyIs_CC26x0() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_ChipFamilyIs_CC26x0R2__extern"]
    pub fn ChipInfo_ChipFamilyIs_CC26x0R2() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_ChipFamilyIs_CC26x1__extern"]
    pub fn ChipInfo_ChipFamilyIs_CC26x1() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_ChipFamilyIs_CC13x2_CC26x2__extern"]
    pub fn ChipInfo_ChipFamilyIs_CC13x2_CC26x2() -> bool;
}
pub const HwRevision_t_HWREV_Unknown: HwRevision_t = -1;
pub const HwRevision_t_HWREV_1_0: HwRevision_t = 10;
pub const HwRevision_t_HWREV_1_1: HwRevision_t = 11;
pub const HwRevision_t_HWREV_2_0: HwRevision_t = 20;
pub const HwRevision_t_HWREV_2_1: HwRevision_t = 21;
pub const HwRevision_t_HWREV_2_2: HwRevision_t = 22;
pub const HwRevision_t_HWREV_2_3: HwRevision_t = 23;
pub const HwRevision_t_HWREV_2_4: HwRevision_t = 24;
pub type HwRevision_t = cty::c_int;
extern "C" {
    pub fn ChipInfo_GetHwRevision() -> HwRevision_t;
}
extern "C" {
    #[link_name = "ChipInfo_HwRevisionIs_1_0__extern"]
    pub fn ChipInfo_HwRevisionIs_1_0() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_HwRevisionIs_2_0__extern"]
    pub fn ChipInfo_HwRevisionIs_2_0() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_HwRevisionIs_GTEQ_2_0__extern"]
    pub fn ChipInfo_HwRevisionIs_GTEQ_2_0() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_HwRevisionIs_2_1__extern"]
    pub fn ChipInfo_HwRevisionIs_2_1() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_HwRevisionIs_GTEQ_2_1__extern"]
    pub fn ChipInfo_HwRevisionIs_GTEQ_2_1() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_HwRevisionIs_2_2__extern"]
    pub fn ChipInfo_HwRevisionIs_2_2() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_HwRevisionIs_GTEQ_2_2__extern"]
    pub fn ChipInfo_HwRevisionIs_GTEQ_2_2() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_HwRevisionIs_GTEQ_2_3__extern"]
    pub fn ChipInfo_HwRevisionIs_GTEQ_2_3() -> bool;
}
extern "C" {
    #[link_name = "ChipInfo_HwRevisionIs_GTEQ_2_4__extern"]
    pub fn ChipInfo_HwRevisionIs_GTEQ_2_4() -> bool;
}
extern "C" {
    pub fn ThisLibraryIsFor_CC26x0_HwRev22AndLater_HaltIfViolated();
}
extern "C" {
    pub fn CRYPTOAesLoadKey(pui32AesKey: *mut u32, ui32KeyLocation: u32) -> u32;
}
extern "C" {
    pub fn CRYPTOAesCbc(
        pui32MsgIn: *mut u32,
        pui32MsgOut: *mut u32,
        ui32MsgLength: u32,
        pui32Nonce: *mut u32,
        ui32KeyLocation: u32,
        bEncrypt: bool,
        bIntEnable: bool,
    ) -> u32;
}
extern "C" {
    pub fn CRYPTOAesCbcStatus() -> u32;
}
extern "C" {
    pub fn CRYPTOAesEcb(
        pui32MsgIn: *mut u32,
        pui32MsgOut: *mut u32,
        ui32KeyLocation: u32,
        bEncrypt: bool,
        bIntEnable: bool,
    ) -> u32;
}
extern "C" {
    pub fn CRYPTOAesEcbStatus() -> u32;
}
extern "C" {
    #[link_name = "CRYPTOAesEcbFinish__extern"]
    pub fn CRYPTOAesEcbFinish();
}
extern "C" {
    #[link_name = "CRYPTOAesCbcFinish__extern"]
    pub fn CRYPTOAesCbcFinish();
}
extern "C" {
    pub fn CRYPTOCcmAuthEncrypt(
        bEncrypt: bool,
        ui32AuthLength: u32,
        pui32Nonce: *mut u32,
        pui32PlainText: *mut u32,
        ui32PlainTextLength: u32,
        pui32Header: *mut u32,
        ui32HeaderLength: u32,
        ui32KeyLocation: u32,
        ui32FieldLength: u32,
        bIntEnable: bool,
    ) -> u32;
}
extern "C" {
    pub fn CRYPTOCcmAuthEncryptStatus() -> u32;
}
extern "C" {
    pub fn CRYPTOCcmAuthEncryptResultGet(ui32TagLength: u32, pui32CcmTag: *mut u32) -> u32;
}
extern "C" {
    pub fn CRYPTOCcmInvAuthDecrypt(
        bDecrypt: bool,
        ui32AuthLength: u32,
        pui32Nonce: *mut u32,
        pui32CipherText: *mut u32,
        ui32CipherTextLength: u32,
        pui32Header: *mut u32,
        ui32HeaderLength: u32,
        ui32KeyLocation: u32,
        ui32FieldLength: u32,
        bIntEnable: bool,
    ) -> u32;
}
extern "C" {
    pub fn CRYPTOCcmInvAuthDecryptStatus() -> u32;
}
extern "C" {
    pub fn CRYPTOCcmInvAuthDecryptResultGet(
        ui32AuthLength: u32,
        pui32CipherText: *mut u32,
        ui32CipherTextLength: u32,
        pui32CcmTag: *mut u32,
    ) -> u32;
}
extern "C" {
    #[link_name = "CRYPTODmaStatus__extern"]
    pub fn CRYPTODmaStatus() -> u32;
}
extern "C" {
    pub fn CRYPTODmaEnable(ui32Channels: u32);
}
extern "C" {
    pub fn CRYPTODmaDisable(ui32Channels: u32);
}
extern "C" {
    #[link_name = "CRYPTOIntEnable__extern"]
    pub fn CRYPTOIntEnable(ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "CRYPTOIntDisable__extern"]
    pub fn CRYPTOIntDisable(ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "CRYPTOIntStatus__extern"]
    pub fn CRYPTOIntStatus(bMasked: bool) -> u32;
}
extern "C" {
    #[link_name = "CRYPTOIntClear__extern"]
    pub fn CRYPTOIntClear(ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "CRYPTOIntRegister__extern"]
    pub fn CRYPTOIntRegister(pfnHandler: ::core::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    #[link_name = "CRYPTOIntUnregister__extern"]
    pub fn CRYPTOIntUnregister();
}
extern "C" {
    pub static driverlib_release_0_49664: u8;
}
extern "C" {
    #[link_name = "EventRegister__extern"]
    pub fn EventRegister(ui32EventSubscriber: u32, ui32EventSource: u32);
}
extern "C" {
    #[link_name = "EventSwEventSet__extern"]
    pub fn EventSwEventSet(ui32SwEvent: u32);
}
extern "C" {
    #[link_name = "EventSwEventClear__extern"]
    pub fn EventSwEventClear(ui32SwEvent: u32);
}
extern "C" {
    #[link_name = "EventSwEventGet__extern"]
    pub fn EventSwEventGet(ui32SwEvent: u32) -> u32;
}
pub const tFlashStateCommandsType_FAPI_PROGRAM_DATA: tFlashStateCommandsType = 2;
pub const tFlashStateCommandsType_FAPI_ERASE_SECTOR: tFlashStateCommandsType = 6;
pub const tFlashStateCommandsType_FAPI_ERASE_BANK: tFlashStateCommandsType = 8;
pub const tFlashStateCommandsType_FAPI_VALIDATE_SECTOR: tFlashStateCommandsType = 14;
pub const tFlashStateCommandsType_FAPI_CLEAR_STATUS: tFlashStateCommandsType = 16;
pub const tFlashStateCommandsType_FAPI_PROGRAM_RESUME: tFlashStateCommandsType = 20;
pub const tFlashStateCommandsType_FAPI_ERASE_RESUME: tFlashStateCommandsType = 22;
pub const tFlashStateCommandsType_FAPI_CLEAR_MORE: tFlashStateCommandsType = 24;
pub const tFlashStateCommandsType_FAPI_PROGRAM_SECTOR: tFlashStateCommandsType = 32;
pub const tFlashStateCommandsType_FAPI_ERASE_OTP: tFlashStateCommandsType = 48;
pub type tFlashStateCommandsType = cty::c_uint;
pub type tFwpWriteByte = u8;
extern "C" {
    #[link_name = "FlashSectorSizeGet__extern"]
    pub fn FlashSectorSizeGet() -> u32;
}
extern "C" {
    #[link_name = "FlashSizeGet__extern"]
    pub fn FlashSizeGet() -> u32;
}
extern "C" {
    pub fn FlashPowerModeSet(
        ui32PowerMode: u32,
        ui32BankGracePeriod: u32,
        ui32PumpGracePeriod: u32,
    );
}
extern "C" {
    pub fn FlashPowerModeGet() -> u32;
}
extern "C" {
    pub fn FlashProtectionSet(ui32SectorAddress: u32, ui32ProtectMode: u32);
}
extern "C" {
    pub fn FlashProtectionGet(ui32SectorAddress: u32) -> u32;
}
extern "C" {
    pub fn FlashProtectionSave(ui32SectorAddress: u32) -> u32;
}
extern "C" {
    #[link_name = "FlashCheckFsmForError__extern"]
    pub fn FlashCheckFsmForError() -> u32;
}
extern "C" {
    #[link_name = "FlashCheckFsmForReady__extern"]
    pub fn FlashCheckFsmForReady() -> u32;
}
extern "C" {
    #[link_name = "FlashIntRegister__extern"]
    pub fn FlashIntRegister(pfnHandler: ::core::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    #[link_name = "FlashIntUnregister__extern"]
    pub fn FlashIntUnregister();
}
extern "C" {
    #[link_name = "FlashIntEnable__extern"]
    pub fn FlashIntEnable(ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "FlashIntDisable__extern"]
    pub fn FlashIntDisable(ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "FlashIntStatus__extern"]
    pub fn FlashIntStatus() -> u32;
}
extern "C" {
    #[link_name = "FlashIntClear__extern"]
    pub fn FlashIntClear(ui32IntFlags: u32);
}
extern "C" {
    pub fn FlashSectorErase(ui32SectorAddress: u32) -> u32;
}
extern "C" {
    pub fn FlashProgram(pui8DataBuffer: *mut u8, ui32Address: u32, ui32Count: u32) -> u32;
}
extern "C" {
    pub fn FlashEfuseReadRow(pui32EfuseData: *mut u32, ui32RowAddress: u32) -> bool;
}
extern "C" {
    pub fn FlashDisableSectorsForWrite();
}
extern "C" {
    #[link_name = "GPIO_readDio__extern"]
    pub fn GPIO_readDio(dioNumber: u32) -> u32;
}
extern "C" {
    #[link_name = "GPIO_readMultiDio__extern"]
    pub fn GPIO_readMultiDio(dioMask: u32) -> u32;
}
extern "C" {
    #[link_name = "GPIO_writeDio__extern"]
    pub fn GPIO_writeDio(dioNumber: u32, value: u32);
}
extern "C" {
    #[link_name = "GPIO_writeMultiDio__extern"]
    pub fn GPIO_writeMultiDio(dioMask: u32, bitVectoredValue: u32);
}
extern "C" {
    #[link_name = "GPIO_setDio__extern"]
    pub fn GPIO_setDio(dioNumber: u32);
}
extern "C" {
    #[link_name = "GPIO_setMultiDio__extern"]
    pub fn GPIO_setMultiDio(dioMask: u32);
}
extern "C" {
    #[link_name = "GPIO_clearDio__extern"]
    pub fn GPIO_clearDio(dioNumber: u32);
}
extern "C" {
    #[link_name = "GPIO_clearMultiDio__extern"]
    pub fn GPIO_clearMultiDio(dioMask: u32);
}
extern "C" {
    #[link_name = "GPIO_toggleDio__extern"]
    pub fn GPIO_toggleDio(dioNumber: u32);
}
extern "C" {
    #[link_name = "GPIO_toggleMultiDio__extern"]
    pub fn GPIO_toggleMultiDio(dioMask: u32);
}
extern "C" {
    #[link_name = "GPIO_getOutputEnableDio__extern"]
    pub fn GPIO_getOutputEnableDio(dioNumber: u32) -> u32;
}
extern "C" {
    #[link_name = "GPIO_getOutputEnableMultiDio__extern"]
    pub fn GPIO_getOutputEnableMultiDio(dioMask: u32) -> u32;
}
extern "C" {
    #[link_name = "GPIO_setOutputEnableDio__extern"]
    pub fn GPIO_setOutputEnableDio(dioNumber: u32, outputEnableValue: u32);
}
extern "C" {
    #[link_name = "GPIO_setOutputEnableMultiDio__extern"]
    pub fn GPIO_setOutputEnableMultiDio(dioMask: u32, bitVectoredOutputEnable: u32);
}
extern "C" {
    #[link_name = "GPIO_getEventDio__extern"]
    pub fn GPIO_getEventDio(dioNumber: u32) -> u32;
}
extern "C" {
    #[link_name = "GPIO_getEventMultiDio__extern"]
    pub fn GPIO_getEventMultiDio(dioMask: u32) -> u32;
}
extern "C" {
    #[link_name = "GPIO_clearEventDio__extern"]
    pub fn GPIO_clearEventDio(dioNumber: u32);
}
extern "C" {
    #[link_name = "GPIO_clearEventMultiDio__extern"]
    pub fn GPIO_clearEventMultiDio(dioMask: u32);
}
extern "C" {
    pub fn I2CMasterInitExpClk(ui32Base: u32, ui32I2CClk: u32, bFast: bool);
}
extern "C" {
    #[link_name = "I2CMasterControl__extern"]
    pub fn I2CMasterControl(ui32Base: u32, ui32Cmd: u32);
}
extern "C" {
    #[link_name = "I2CMasterSlaveAddrSet__extern"]
    pub fn I2CMasterSlaveAddrSet(ui32Base: u32, ui8SlaveAddr: u8, bReceive: bool);
}
extern "C" {
    #[link_name = "I2CMasterEnable__extern"]
    pub fn I2CMasterEnable(ui32Base: u32);
}
extern "C" {
    #[link_name = "I2CMasterDisable__extern"]
    pub fn I2CMasterDisable(ui32Base: u32);
}
extern "C" {
    #[link_name = "I2CMasterBusy__extern"]
    pub fn I2CMasterBusy(ui32Base: u32) -> bool;
}
extern "C" {
    #[link_name = "I2CMasterBusBusy__extern"]
    pub fn I2CMasterBusBusy(ui32Base: u32) -> bool;
}
extern "C" {
    #[link_name = "I2CMasterDataGet__extern"]
    pub fn I2CMasterDataGet(ui32Base: u32) -> u32;
}
extern "C" {
    #[link_name = "I2CMasterDataPut__extern"]
    pub fn I2CMasterDataPut(ui32Base: u32, ui8Data: u8);
}
extern "C" {
    pub fn I2CMasterErr(ui32Base: u32) -> u32;
}
extern "C" {
    #[link_name = "I2CMasterIntEnable__extern"]
    pub fn I2CMasterIntEnable(ui32Base: u32);
}
extern "C" {
    #[link_name = "I2CMasterIntDisable__extern"]
    pub fn I2CMasterIntDisable(ui32Base: u32);
}
extern "C" {
    #[link_name = "I2CMasterIntClear__extern"]
    pub fn I2CMasterIntClear(ui32Base: u32);
}
extern "C" {
    #[link_name = "I2CMasterIntStatus__extern"]
    pub fn I2CMasterIntStatus(ui32Base: u32, bMasked: bool) -> bool;
}
extern "C" {
    #[link_name = "I2CSlaveEnable__extern"]
    pub fn I2CSlaveEnable(ui32Base: u32);
}
extern "C" {
    #[link_name = "I2CSlaveInit__extern"]
    pub fn I2CSlaveInit(ui32Base: u32, ui8SlaveAddr: u8);
}
extern "C" {
    #[link_name = "I2CSlaveAddressSet__extern"]
    pub fn I2CSlaveAddressSet(ui32Base: u32, ui8SlaveAddr: u8);
}
extern "C" {
    #[link_name = "I2CSlaveDisable__extern"]
    pub fn I2CSlaveDisable(ui32Base: u32);
}
extern "C" {
    #[link_name = "I2CSlaveStatus__extern"]
    pub fn I2CSlaveStatus(ui32Base: u32) -> u32;
}
extern "C" {
    #[link_name = "I2CSlaveDataGet__extern"]
    pub fn I2CSlaveDataGet(ui32Base: u32) -> u32;
}
extern "C" {
    #[link_name = "I2CSlaveDataPut__extern"]
    pub fn I2CSlaveDataPut(ui32Base: u32, ui8Data: u8);
}
extern "C" {
    #[link_name = "I2CSlaveIntEnable__extern"]
    pub fn I2CSlaveIntEnable(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "I2CSlaveIntDisable__extern"]
    pub fn I2CSlaveIntDisable(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "I2CSlaveIntClear__extern"]
    pub fn I2CSlaveIntClear(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "I2CSlaveIntStatus__extern"]
    pub fn I2CSlaveIntStatus(ui32Base: u32, bMasked: bool) -> u32;
}
extern "C" {
    pub fn I2CIntRegister(
        ui32Base: u32,
        pfnHandler: ::core::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn I2CIntUnregister(ui32Base: u32);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct I2SControlTable {
    pub ui16DMABufSize: u16,
    pub ui16ChBufSize: u16,
    pub ui8InChan: u8,
    pub ui8OutChan: u8,
    pub ui16MemLen: u16,
    pub ui32InBase: u32,
    pub ui32InOffset: u32,
    pub ui32OutBase: u32,
    pub ui32OutOffset: u32,
}
extern "C" {
    pub static mut g_pControlTable: *mut I2SControlTable;
}
extern "C" {
    pub fn I2SEnable(ui32Base: u32);
}
extern "C" {
    #[link_name = "I2SDisable__extern"]
    pub fn I2SDisable(ui32Base: u32);
}
extern "C" {
    pub fn I2SAudioFormatConfigure(ui32Base: u32, ui32FmtCfg: u32, ui32BitClkDelay: u32);
}
extern "C" {
    pub fn I2SChannelConfigure(ui32Base: u32, ui32Chan0Cfg: u32, ui32Chan1Cfg: u32);
}
extern "C" {
    #[link_name = "I2SClockConfigure__extern"]
    pub fn I2SClockConfigure(ui32Base: u32, ui32ClkConfig: u32);
}
extern "C" {
    pub fn I2SBufferConfig(
        ui32Base: u32,
        ui32InBufBase: u32,
        ui32OutBufBase: u32,
        ui16DMABufSize: u16,
        ui16ChanBufSize: u16,
    );
}
extern "C" {
    pub fn I2SPointerUpdate(ui32Base: u32, bInput: bool);
}
extern "C" {
    pub fn I2SPointerSet(ui32Base: u32, bInput: bool, pNextPointer: *mut cty::c_void);
}
extern "C" {
    #[link_name = "I2SIntRegister__extern"]
    pub fn I2SIntRegister(
        ui32Base: u32,
        pfnHandler: ::core::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    #[link_name = "I2SIntUnregister__extern"]
    pub fn I2SIntUnregister(ui32Base: u32);
}
extern "C" {
    #[link_name = "I2SIntEnable__extern"]
    pub fn I2SIntEnable(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "I2SIntDisable__extern"]
    pub fn I2SIntDisable(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "I2SIntStatus__extern"]
    pub fn I2SIntStatus(ui32Base: u32, bMasked: bool) -> u32;
}
extern "C" {
    #[link_name = "I2SIntClear__extern"]
    pub fn I2SIntClear(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "I2SSampleStampEnable__extern"]
    pub fn I2SSampleStampEnable(ui32Base: u32);
}
extern "C" {
    #[link_name = "I2SSampleStampDisable__extern"]
    pub fn I2SSampleStampDisable(ui32Base: u32);
}
extern "C" {
    pub fn I2SSampleStampConfigure(ui32Base: u32, bInput: bool, bOutput: bool);
}
extern "C" {
    pub fn I2SSampleStampGet(ui32Base: u32, ui32Channel: u32) -> u32;
}
extern "C" {
    pub fn IOCPortConfigureSet(ui32IOId: u32, ui32PortId: u32, ui32IOConfig: u32);
}
extern "C" {
    pub fn IOCPortConfigureGet(ui32IOId: u32) -> u32;
}
extern "C" {
    pub fn IOCIOShutdownSet(ui32IOId: u32, ui32IOShutdown: u32);
}
extern "C" {
    pub fn IOCIOModeSet(ui32IOId: u32, ui32IOMode: u32);
}
extern "C" {
    pub fn IOCIOIntSet(ui32IOId: u32, ui32Int: u32, ui32EdgeDet: u32);
}
extern "C" {
    pub fn IOCIOPortPullSet(ui32IOId: u32, ui32Pull: u32);
}
extern "C" {
    pub fn IOCIOHystSet(ui32IOId: u32, ui32Hysteresis: u32);
}
extern "C" {
    pub fn IOCIOInputSet(ui32IOId: u32, ui32Input: u32);
}
extern "C" {
    pub fn IOCIOSlewCtrlSet(ui32IOId: u32, ui32SlewEnable: u32);
}
extern "C" {
    pub fn IOCIODrvStrengthSet(ui32IOId: u32, ui32IOCurrent: u32, ui32DrvStrength: u32);
}
extern "C" {
    pub fn IOCIOPortIdSet(ui32IOId: u32, ui32PortId: u32);
}
extern "C" {
    #[link_name = "IOCIntRegister__extern"]
    pub fn IOCIntRegister(pfnHandler: ::core::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    #[link_name = "IOCIntUnregister__extern"]
    pub fn IOCIntUnregister();
}
extern "C" {
    pub fn IOCIntEnable(ui32IOId: u32);
}
extern "C" {
    pub fn IOCIntDisable(ui32IOId: u32);
}
extern "C" {
    #[link_name = "IOCIntClear__extern"]
    pub fn IOCIntClear(ui32IOId: u32);
}
extern "C" {
    #[link_name = "IOCIntStatus__extern"]
    pub fn IOCIntStatus(ui32IOId: u32) -> u32;
}
extern "C" {
    pub fn IOCPinTypeGpioInput(ui32IOId: u32);
}
extern "C" {
    pub fn IOCPinTypeGpioOutput(ui32IOId: u32);
}
extern "C" {
    pub fn IOCPinTypeUart(ui32Base: u32, ui32Rx: u32, ui32Tx: u32, ui32Cts: u32, ui32Rts: u32);
}
extern "C" {
    pub fn IOCPinTypeSsiMaster(ui32Base: u32, ui32Rx: u32, ui32Tx: u32, ui32Fss: u32, ui32Clk: u32);
}
extern "C" {
    pub fn IOCPinTypeSsiSlave(ui32Base: u32, ui32Rx: u32, ui32Tx: u32, ui32Fss: u32, ui32Clk: u32);
}
extern "C" {
    pub fn IOCPinTypeI2c(ui32Base: u32, ui32Data: u32, ui32Clk: u32);
}
extern "C" {
    pub fn IOCPinTypeAux(ui32IOId: u32);
}
extern "C" {
    #[link_name = "OSCXHfPowerModeSet__extern"]
    pub fn OSCXHfPowerModeSet(ui32Mode: u32);
}
extern "C" {
    #[link_name = "OSCClockLossEventEnable__extern"]
    pub fn OSCClockLossEventEnable();
}
extern "C" {
    #[link_name = "OSCClockLossEventDisable__extern"]
    pub fn OSCClockLossEventDisable();
}
extern "C" {
    pub fn OSCClockSourceSet(ui32SrcClk: u32, ui32Osc: u32);
}
extern "C" {
    pub fn OSCClockSourceGet(ui32SrcClk: u32) -> u32;
}
extern "C" {
    #[link_name = "OSCHfSourceReady__extern"]
    pub fn OSCHfSourceReady() -> bool;
}
extern "C" {
    #[link_name = "OSCHfSourceSwitch__extern"]
    pub fn OSCHfSourceSwitch();
}
extern "C" {
    pub fn OSCHF_GetStartupTime(timeUntilWakeupInMs: u32) -> u32;
}
extern "C" {
    pub fn OSCHF_TurnOnXosc();
}
extern "C" {
    pub fn OSCHF_AttemptToSwitchToXosc() -> bool;
}
extern "C" {
    pub fn OSCHF_SwitchToRcOscTurnOffXosc();
}
extern "C" {
    pub fn OSCHF_DebugGetCrystalAmplitude() -> u32;
}
extern "C" {
    pub fn OSCHF_DebugGetExpectedAverageCrystalAmplitude() -> u32;
}
extern "C" {
    pub fn OSC_HPOSCRelativeFrequencyOffsetGet(tempDegC: i32) -> i32;
}
extern "C" {
    pub fn OSC_HPOSCRelativeFrequencyOffsetToRFCoreFormatConvert(HPOSC_RelFreqOffset: i32) -> i16;
}
extern "C" {
    pub fn PRCMInfClockConfigureSet(ui32ClkDiv: u32, ui32PowerMode: u32);
}
extern "C" {
    pub fn PRCMInfClockConfigureGet(ui32PowerMode: u32) -> u32;
}
extern "C" {
    #[link_name = "PRCMMcuPowerOff__extern"]
    pub fn PRCMMcuPowerOff();
}
extern "C" {
    #[link_name = "PRCMMcuPowerOffCancel__extern"]
    pub fn PRCMMcuPowerOffCancel();
}
extern "C" {
    #[link_name = "PRCMMcuUldoConfigure__extern"]
    pub fn PRCMMcuUldoConfigure(ui32Enable: u32);
}
extern "C" {
    #[link_name = "PRCMGPTimerClockDivisionSet__extern"]
    pub fn PRCMGPTimerClockDivisionSet(clkDiv: u32);
}
extern "C" {
    #[link_name = "PRCMGPTimerClockDivisionGet__extern"]
    pub fn PRCMGPTimerClockDivisionGet() -> u32;
}
extern "C" {
    #[link_name = "PRCMAudioClockEnable__extern"]
    pub fn PRCMAudioClockEnable();
}
extern "C" {
    #[link_name = "PRCMAudioClockDisable__extern"]
    pub fn PRCMAudioClockDisable();
}
extern "C" {
    pub fn PRCMAudioClockConfigSet(ui32ClkConfig: u32, ui32SampleRate: u32);
}
extern "C" {
    pub fn PRCMAudioClockConfigSetOverride(
        ui32ClkConfig: u32,
        ui32MstDiv: u32,
        ui32BitDiv: u32,
        ui32WordDiv: u32,
    );
}
extern "C" {
    #[link_name = "PRCMLoadSet__extern"]
    pub fn PRCMLoadSet();
}
extern "C" {
    #[link_name = "PRCMLoadGet__extern"]
    pub fn PRCMLoadGet() -> bool;
}
extern "C" {
    #[link_name = "PRCMDomainEnable__extern"]
    pub fn PRCMDomainEnable(ui32Domains: u32);
}
extern "C" {
    #[link_name = "PRCMDomainDisable__extern"]
    pub fn PRCMDomainDisable(ui32Domains: u32);
}
extern "C" {
    pub fn PRCMPowerDomainOn(ui32Domains: u32);
}
extern "C" {
    pub fn PRCMPowerDomainOff(ui32Domains: u32);
}
extern "C" {
    #[link_name = "PRCMRfPowerDownWhenIdle__extern"]
    pub fn PRCMRfPowerDownWhenIdle();
}
extern "C" {
    pub fn PRCMPeripheralRunEnable(ui32Peripheral: u32);
}
extern "C" {
    pub fn PRCMPeripheralRunDisable(ui32Peripheral: u32);
}
extern "C" {
    pub fn PRCMPeripheralSleepEnable(ui32Peripheral: u32);
}
extern "C" {
    pub fn PRCMPeripheralSleepDisable(ui32Peripheral: u32);
}
extern "C" {
    pub fn PRCMPeripheralDeepSleepEnable(ui32Peripheral: u32);
}
extern "C" {
    pub fn PRCMPeripheralDeepSleepDisable(ui32Peripheral: u32);
}
extern "C" {
    pub fn PRCMPowerDomainStatus(ui32Domains: u32) -> u32;
}
extern "C" {
    #[link_name = "PRCMRfReady__extern"]
    pub fn PRCMRfReady() -> bool;
}
extern "C" {
    #[link_name = "PRCMSleep__extern"]
    pub fn PRCMSleep();
}
extern "C" {
    pub fn PRCMDeepSleep();
}
extern "C" {
    #[link_name = "PRCMCacheRetentionEnable__extern"]
    pub fn PRCMCacheRetentionEnable();
}
extern "C" {
    #[link_name = "PRCMCacheRetentionDisable__extern"]
    pub fn PRCMCacheRetentionDisable();
}
extern "C" {
    pub fn PowerCtrlSourceSet(ui32PowerConfig: u32);
}
extern "C" {
    #[link_name = "PowerCtrlSourceGet__extern"]
    pub fn PowerCtrlSourceGet() -> u32;
}
extern "C" {
    #[link_name = "PowerCtrlResetSourceGet__extern"]
    pub fn PowerCtrlResetSourceGet() -> u32;
}
extern "C" {
    #[link_name = "PowerCtrlIOFreezeEnable__extern"]
    pub fn PowerCtrlIOFreezeEnable();
}
extern "C" {
    #[link_name = "PowerCtrlIOFreezeDisable__extern"]
    pub fn PowerCtrlIOFreezeDisable();
}
pub type wchar_t = cty::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: cty::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
pub type wint_t = cty::c_int;
pub type __blkcnt_t = cty::c_long;
pub type __blksize_t = cty::c_long;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint32_t;
pub type _off_t = cty::c_long;
pub type __pid_t = cty::c_int;
pub type __dev_t = cty::c_short;
pub type __uid_t = cty::c_ushort;
pub type __gid_t = cty::c_ushort;
pub type __id_t = __uint32_t;
pub type __ino_t = cty::c_ushort;
pub type __mode_t = __uint32_t;
pub type _off64_t = cty::c_longlong;
pub type __off_t = _off_t;
pub type __loff_t = _off64_t;
pub type __key_t = cty::c_long;
pub type _fpos_t = cty::c_long;
pub type __size_t = cty::c_uint;
pub type _ssize_t = cty::c_int;
pub type __ssize_t = _ssize_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbstate_t {
    pub __count: cty::c_int,
    pub __value: _mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _mbstate_t__bindgen_ty_1 {
    pub __wch: wint_t,
    pub __wchb: [cty::c_uchar; 4usize],
}
impl Default for _mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _mbstate_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type _iconv_t = *mut cty::c_void;
pub type __clock_t = cty::c_ulong;
pub type __time_t = __int_least64_t;
pub type __clockid_t = cty::c_ulong;
pub type __daddr_t = cty::c_long;
pub type __timer_t = cty::c_ulong;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __nl_item = cty::c_int;
pub type __nlink_t = cty::c_ushort;
pub type __suseconds_t = cty::c_long;
pub type __useconds_t = cty::c_ulong;
pub type __va_list = u32;
pub type __ULong = cty::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lock {
    _unused: [u8; 0],
}
pub type _LOCK_T = *mut __lock;
extern "C" {
    pub fn __retarget_lock_init(lock: *mut _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_init_recursive(lock: *mut _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_close(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_close_recursive(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_acquire(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_acquire_recursive(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_try_acquire(lock: _LOCK_T) -> cty::c_int;
}
extern "C" {
    pub fn __retarget_lock_try_acquire_recursive(lock: _LOCK_T) -> cty::c_int;
}
extern "C" {
    pub fn __retarget_lock_release(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_release_recursive(lock: _LOCK_T);
}
pub type _flock_t = _LOCK_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Bigint {
    pub _next: *mut _Bigint,
    pub _k: cty::c_int,
    pub _maxwds: cty::c_int,
    pub _sign: cty::c_int,
    pub _wds: cty::c_int,
    pub _x: [__ULong; 1usize],
}
impl Default for _Bigint {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __tm {
    pub __tm_sec: cty::c_int,
    pub __tm_min: cty::c_int,
    pub __tm_hour: cty::c_int,
    pub __tm_mday: cty::c_int,
    pub __tm_mon: cty::c_int,
    pub __tm_year: cty::c_int,
    pub __tm_wday: cty::c_int,
    pub __tm_yday: cty::c_int,
    pub __tm_isdst: cty::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _on_exit_args {
    pub _fnargs: [*mut cty::c_void; 32usize],
    pub _dso_handle: [*mut cty::c_void; 32usize],
    pub _fntypes: __ULong,
    pub _is_cxa: __ULong,
}
impl Default for _on_exit_args {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _atexit {
    pub _next: *mut _atexit,
    pub _ind: cty::c_int,
    pub _fns: [::core::option::Option<unsafe extern "C" fn()>; 32usize],
    pub _on_exit_args: _on_exit_args,
}
impl Default for _atexit {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut cty::c_uchar,
    pub _size: cty::c_int,
}
impl Default for __sbuf {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut cty::c_uchar,
    pub _r: cty::c_int,
    pub _w: cty::c_int,
    pub _flags: cty::c_short,
    pub _file: cty::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: cty::c_int,
    pub _cookie: *mut cty::c_void,
    pub _read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut cty::c_void,
            arg3: *mut cty::c_char,
            arg4: cty::c_int,
        ) -> cty::c_int,
    >,
    pub _write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut cty::c_void,
            arg3: *const cty::c_char,
            arg4: cty::c_int,
        ) -> cty::c_int,
    >,
    pub _seek: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut cty::c_void,
            arg3: _fpos_t,
            arg4: cty::c_int,
        ) -> _fpos_t,
    >,
    pub _close: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut _reent, arg2: *mut cty::c_void) -> cty::c_int,
    >,
    pub _ub: __sbuf,
    pub _up: *mut cty::c_uchar,
    pub _ur: cty::c_int,
    pub _ubuf: [cty::c_uchar; 3usize],
    pub _nbuf: [cty::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: cty::c_int,
    pub _offset: _off_t,
    pub _data: *mut _reent,
    pub _lock: _flock_t,
    pub _mbstate: _mbstate_t,
    pub _flags2: cty::c_int,
}
impl Default for __sFILE {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __FILE = __sFILE;
extern "C" {
    pub static mut __sf: [__FILE; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _glue {
    pub _next: *mut _glue,
    pub _niobs: cty::c_int,
    pub _iobs: *mut __FILE,
}
impl Default for _glue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut __sglue: _glue;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _rand48 {
    pub _seed: [cty::c_ushort; 3usize],
    pub _mult: [cty::c_ushort; 3usize],
    pub _add: cty::c_ushort,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _reent {
    pub _errno: cty::c_int,
    pub _stdin: *mut __FILE,
    pub _stdout: *mut __FILE,
    pub _stderr: *mut __FILE,
    pub _inc: cty::c_int,
    pub _emergency: [cty::c_char; 25usize],
    pub _locale: *mut __locale_t,
    pub __cleanup: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent)>,
    pub _result: *mut _Bigint,
    pub _result_k: cty::c_int,
    pub _p5s: *mut _Bigint,
    pub _freelist: *mut *mut _Bigint,
    pub _cvtlen: cty::c_int,
    pub _cvtbuf: *mut cty::c_char,
    pub _new: _reent__bindgen_ty_1,
    pub _sig_func: *mut ::core::option::Option<unsafe extern "C" fn(arg1: cty::c_int)>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _reent__bindgen_ty_1 {
    pub _reent: _reent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _reent__bindgen_ty_1__bindgen_ty_1 {
    pub _strtok_last: *mut cty::c_char,
    pub _asctime_buf: [cty::c_char; 26usize],
    pub _localtime_buf: __tm,
    pub _gamma_signgam: cty::c_int,
    pub _rand_next: cty::c_ulonglong,
    pub _r48: _rand48,
    pub _mblen_state: _mbstate_t,
    pub _mbtowc_state: _mbstate_t,
    pub _wctomb_state: _mbstate_t,
    pub _l64a_buf: [cty::c_char; 8usize],
    pub _signal_buf: [cty::c_char; 24usize],
    pub _getdate_err: cty::c_int,
    pub _mbrlen_state: _mbstate_t,
    pub _mbrtowc_state: _mbstate_t,
    pub _mbsrtowcs_state: _mbstate_t,
    pub _wcrtomb_state: _mbstate_t,
    pub _wcsrtombs_state: _mbstate_t,
    pub _h_errno: cty::c_int,
}
impl Default for _reent__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _reent__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _reent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut _impure_ptr: *mut _reent;
}
extern "C" {
    pub static mut _impure_data: _reent;
}
extern "C" {
    pub static mut __atexit: *mut _atexit;
}
extern "C" {
    pub static mut __atexit0: _atexit;
}
extern "C" {
    pub static mut __stdio_exit_handler: ::core::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub fn _reclaim_reent(arg1: *mut _reent);
}
extern "C" {
    pub fn _fwalk_sglue(
        arg1: *mut _reent,
        arg2: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut _reent, arg2: *mut __FILE) -> cty::c_int,
        >,
        arg3: *mut _glue,
    ) -> cty::c_int;
}
pub type locale_t = *mut __locale_t;
extern "C" {
    pub fn bcmp(
        arg1: *const cty::c_void,
        arg2: *const cty::c_void,
        arg3: cty::c_uint,
    ) -> cty::c_int;
}
extern "C" {
    pub fn bcopy(arg1: *const cty::c_void, arg2: *mut cty::c_void, arg3: usize);
}
extern "C" {
    pub fn bzero(arg1: *mut cty::c_void, arg2: cty::c_uint);
}
extern "C" {
    pub fn explicit_bzero(arg1: *mut cty::c_void, arg2: usize);
}
extern "C" {
    pub fn ffs(arg1: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn ffsl(arg1: cty::c_long) -> cty::c_int;
}
extern "C" {
    pub fn ffsll(arg1: cty::c_longlong) -> cty::c_int;
}
extern "C" {
    pub fn fls(arg1: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn flsl(arg1: cty::c_long) -> cty::c_int;
}
extern "C" {
    pub fn flsll(arg1: cty::c_longlong) -> cty::c_int;
}
extern "C" {
    pub fn index(arg1: *const cty::c_char, arg2: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn rindex(arg1: *const cty::c_char, arg2: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcasecmp(arg1: *const cty::c_char, arg2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const cty::c_char,
        arg2: *const cty::c_char,
        arg3: cty::c_uint,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const cty::c_char,
        arg2: *const cty::c_char,
        arg3: locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const cty::c_char,
        arg2: *const cty::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn memchr(
        arg1: *const cty::c_void,
        arg2: cty::c_int,
        arg3: cty::c_uint,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memcmp(
        arg1: *const cty::c_void,
        arg2: *const cty::c_void,
        arg3: cty::c_uint,
    ) -> cty::c_int;
}
extern "C" {
    pub fn memcpy(
        arg1: *mut cty::c_void,
        arg2: *const cty::c_void,
        arg3: cty::c_uint,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memmove(
        arg1: *mut cty::c_void,
        arg2: *const cty::c_void,
        arg3: cty::c_uint,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memset(arg1: *mut cty::c_void, arg2: cty::c_int, arg3: cty::c_uint) -> *mut cty::c_void;
}
extern "C" {
    pub fn strcat(arg1: *mut cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strchr(arg1: *const cty::c_char, arg2: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcmp(arg1: *const cty::c_char, arg2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strcoll(arg1: *const cty::c_char, arg2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strcpy(arg1: *mut cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcspn(arg1: *const cty::c_char, arg2: *const cty::c_char) -> cty::c_uint;
}
extern "C" {
    pub fn strerror(arg1: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strlen(arg1: *const cty::c_char) -> cty::c_uint;
}
extern "C" {
    pub fn strncat(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: cty::c_uint,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strncmp(
        arg1: *const cty::c_char,
        arg2: *const cty::c_char,
        arg3: cty::c_uint,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strncpy(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: cty::c_uint,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strpbrk(arg1: *const cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strrchr(arg1: *const cty::c_char, arg2: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strspn(arg1: *const cty::c_char, arg2: *const cty::c_char) -> cty::c_uint;
}
extern "C" {
    pub fn strstr(arg1: *const cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strtok(arg1: *mut cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strxfrm(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: cty::c_uint,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const cty::c_char,
        arg2: *const cty::c_char,
        arg3: locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strerror_l(arg1: cty::c_int, arg2: locale_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strtok_r(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: *mut *mut cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn timingsafe_bcmp(
        arg1: *const cty::c_void,
        arg2: *const cty::c_void,
        arg3: usize,
    ) -> cty::c_int;
}
extern "C" {
    pub fn timingsafe_memcmp(
        arg1: *const cty::c_void,
        arg2: *const cty::c_void,
        arg3: usize,
    ) -> cty::c_int;
}
extern "C" {
    pub fn memccpy(
        arg1: *mut cty::c_void,
        arg2: *const cty::c_void,
        arg3: cty::c_int,
        arg4: cty::c_uint,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn stpcpy(arg1: *mut cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn stpncpy(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: cty::c_uint,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strdup(arg1: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strdup_r(arg1: *mut _reent, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strndup(arg1: *const cty::c_char, arg2: cty::c_uint) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strndup_r(arg1: *mut _reent, arg2: *const cty::c_char, arg3: usize)
        -> *mut cty::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(arg1: cty::c_int, arg2: *mut cty::c_char, arg3: usize) -> cty::c_int;
}
extern "C" {
    pub fn _strerror_r(
        arg1: *mut _reent,
        arg2: cty::c_int,
        arg3: cty::c_int,
        arg4: *mut cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: cty::c_uint,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn strlcpy(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: cty::c_uint,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn strnlen(arg1: *const cty::c_char, arg2: usize) -> usize;
}
extern "C" {
    pub fn strsep(arg1: *mut *mut cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strnstr(
        arg1: *const cty::c_char,
        arg2: *const cty::c_char,
        arg3: usize,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strlwr(arg1: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strupr(arg1: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strsignal(__signo: cty::c_int) -> *mut cty::c_char;
}
pub type ratmr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dataQueue_t {
    pub pCurrEntry: *mut u8,
    pub pLastEntry: *mut u8,
}
impl Default for dataQueue_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type rfc_command_t = rfc_command_s;
pub type rfc_radioOp_t = rfc_radioOp_s;
pub type rfc_CMD_NOP_t = rfc_CMD_NOP_s;
pub type rfc_CMD_RADIO_SETUP_t = rfc_CMD_RADIO_SETUP_s;
pub type rfc_CMD_FS_t = rfc_CMD_FS_s;
pub type rfc_CMD_FS_OFF_t = rfc_CMD_FS_OFF_s;
pub type rfc_CMD_RX_TEST_t = rfc_CMD_RX_TEST_s;
pub type rfc_CMD_TX_TEST_t = rfc_CMD_TX_TEST_s;
pub type rfc_CMD_SYNC_STOP_RAT_t = rfc_CMD_SYNC_STOP_RAT_s;
pub type rfc_CMD_SYNC_START_RAT_t = rfc_CMD_SYNC_START_RAT_s;
pub type rfc_CMD_COUNT_t = rfc_CMD_COUNT_s;
pub type rfc_CMD_FS_POWERUP_t = rfc_CMD_FS_POWERUP_s;
pub type rfc_CMD_FS_POWERDOWN_t = rfc_CMD_FS_POWERDOWN_s;
pub type rfc_CMD_SCH_IMM_t = rfc_CMD_SCH_IMM_s;
pub type rfc_CMD_COUNT_BRANCH_t = rfc_CMD_COUNT_BRANCH_s;
pub type rfc_CMD_PATTERN_CHECK_t = rfc_CMD_PATTERN_CHECK_s;
pub type rfc_CMD_ABORT_t = rfc_CMD_ABORT_s;
pub type rfc_CMD_STOP_t = rfc_CMD_STOP_s;
pub type rfc_CMD_GET_RSSI_t = rfc_CMD_GET_RSSI_s;
pub type rfc_CMD_UPDATE_RADIO_SETUP_t = rfc_CMD_UPDATE_RADIO_SETUP_s;
pub type rfc_CMD_TRIGGER_t = rfc_CMD_TRIGGER_s;
pub type rfc_CMD_GET_FW_INFO_t = rfc_CMD_GET_FW_INFO_s;
pub type rfc_CMD_START_RAT_t = rfc_CMD_START_RAT_s;
pub type rfc_CMD_PING_t = rfc_CMD_PING_s;
pub type rfc_CMD_READ_RFREG_t = rfc_CMD_READ_RFREG_s;
pub type rfc_CMD_ADD_DATA_ENTRY_t = rfc_CMD_ADD_DATA_ENTRY_s;
pub type rfc_CMD_REMOVE_DATA_ENTRY_t = rfc_CMD_REMOVE_DATA_ENTRY_s;
pub type rfc_CMD_FLUSH_QUEUE_t = rfc_CMD_FLUSH_QUEUE_s;
pub type rfc_CMD_CLEAR_RX_t = rfc_CMD_CLEAR_RX_s;
pub type rfc_CMD_REMOVE_PENDING_ENTRIES_t = rfc_CMD_REMOVE_PENDING_ENTRIES_s;
pub type rfc_CMD_SET_RAT_CMP_t = rfc_CMD_SET_RAT_CMP_s;
pub type rfc_CMD_SET_RAT_CPT_t = rfc_CMD_SET_RAT_CPT_s;
pub type rfc_CMD_DISABLE_RAT_CH_t = rfc_CMD_DISABLE_RAT_CH_s;
pub type rfc_CMD_SET_RAT_OUTPUT_t = rfc_CMD_SET_RAT_OUTPUT_s;
pub type rfc_CMD_ARM_RAT_CH_t = rfc_CMD_ARM_RAT_CH_s;
pub type rfc_CMD_DISARM_RAT_CH_t = rfc_CMD_DISARM_RAT_CH_s;
pub type rfc_CMD_SET_TX_POWER_t = rfc_CMD_SET_TX_POWER_s;
pub type rfc_CMD_UPDATE_FS_t = rfc_CMD_UPDATE_FS_s;
pub type rfc_CMD_BUS_REQUEST_t = rfc_CMD_BUS_REQUEST_s;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_command_s {
    pub commandNo: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_radioOp_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_radioOp_s__bindgen_ty_1,
    pub condition: rfc_radioOp_s__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_radioOp_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_radioOp_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_radioOp_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_radioOp_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_radioOp_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_NOP_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_NOP_s__bindgen_ty_1,
    pub condition: rfc_CMD_NOP_s__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_NOP_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_NOP_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_NOP_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_NOP_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_NOP_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_RADIO_SETUP_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_RADIO_SETUP_s__bindgen_ty_1,
    pub condition: rfc_CMD_RADIO_SETUP_s__bindgen_ty_2,
    pub mode: u8,
    pub __dummy0: u8,
    pub config: rfc_CMD_RADIO_SETUP_s__bindgen_ty_3,
    pub txPower: u16,
    pub pRegOverride: *mut u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_RADIO_SETUP_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_RADIO_SETUP_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_RADIO_SETUP_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_RADIO_SETUP_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_RADIO_SETUP_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl rfc_CMD_RADIO_SETUP_s__bindgen_ty_3 {
    #[inline]
    pub fn frontEndMode(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_frontEndMode(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn biasMode(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_biasMode(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn analogCfgMode(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_analogCfgMode(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn bNoFsPowerUp(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bNoFsPowerUp(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        frontEndMode: u16,
        biasMode: u16,
        analogCfgMode: u16,
        bNoFsPowerUp: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let frontEndMode: u16 = unsafe { ::core::mem::transmute(frontEndMode) };
            frontEndMode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let biasMode: u16 = unsafe { ::core::mem::transmute(biasMode) };
            biasMode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 6u8, {
            let analogCfgMode: u16 = unsafe { ::core::mem::transmute(analogCfgMode) };
            analogCfgMode as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bNoFsPowerUp: u16 = unsafe { ::core::mem::transmute(bNoFsPowerUp) };
            bNoFsPowerUp as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_RADIO_SETUP_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_FS_s__bindgen_ty_1,
    pub condition: rfc_CMD_FS_s__bindgen_ty_2,
    pub frequency: u16,
    pub fractFreq: u16,
    pub synthConf: rfc_CMD_FS_s__bindgen_ty_3,
    pub __dummy0: u8,
    pub __dummy1: u8,
    pub __dummy2: u8,
    pub __dummy3: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_FS_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_FS_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_FS_s__bindgen_ty_3 {
    #[inline]
    pub fn bTxMode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bTxMode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn refFreq(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_refFreq(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(bTxMode: u8, refFreq: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bTxMode: u8 = unsafe { ::core::mem::transmute(bTxMode) };
            bTxMode as u64
        });
        __bindgen_bitfield_unit.set(1usize, 6u8, {
            let refFreq: u8 = unsafe { ::core::mem::transmute(refFreq) };
            refFreq as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_FS_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_OFF_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_FS_OFF_s__bindgen_ty_1,
    pub condition: rfc_CMD_FS_OFF_s__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_OFF_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_FS_OFF_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_OFF_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_FS_OFF_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_FS_OFF_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_RX_TEST_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_RX_TEST_s__bindgen_ty_1,
    pub condition: rfc_CMD_RX_TEST_s__bindgen_ty_2,
    pub config: rfc_CMD_RX_TEST_s__bindgen_ty_3,
    pub endTrigger: rfc_CMD_RX_TEST_s__bindgen_ty_4,
    pub syncWord: u32,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_RX_TEST_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_RX_TEST_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_RX_TEST_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_RX_TEST_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_RX_TEST_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_RX_TEST_s__bindgen_ty_3 {
    #[inline]
    pub fn bEnaFifo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaFifo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bFsOff(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bFsOff(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bNoSync(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bNoSync(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bEnaFifo: u8,
        bFsOff: u8,
        bNoSync: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bEnaFifo: u8 = unsafe { ::core::mem::transmute(bEnaFifo) };
            bEnaFifo as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bFsOff: u8 = unsafe { ::core::mem::transmute(bFsOff) };
            bFsOff as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bNoSync: u8 = unsafe { ::core::mem::transmute(bNoSync) };
            bNoSync as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_RX_TEST_s__bindgen_ty_4 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_RX_TEST_s__bindgen_ty_4 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_RX_TEST_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_TX_TEST_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_TX_TEST_s__bindgen_ty_1,
    pub condition: rfc_CMD_TX_TEST_s__bindgen_ty_2,
    pub config: rfc_CMD_TX_TEST_s__bindgen_ty_3,
    pub __dummy0: u8,
    pub txWord: u16,
    pub __dummy1: u8,
    pub endTrigger: rfc_CMD_TX_TEST_s__bindgen_ty_4,
    pub syncWord: u32,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_TX_TEST_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_TX_TEST_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_TX_TEST_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_TX_TEST_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_TX_TEST_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_TX_TEST_s__bindgen_ty_3 {
    #[inline]
    pub fn bUseCw(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bUseCw(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bFsOff(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bFsOff(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn whitenMode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_whitenMode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bUseCw: u8,
        bFsOff: u8,
        whitenMode: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bUseCw: u8 = unsafe { ::core::mem::transmute(bUseCw) };
            bUseCw as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bFsOff: u8 = unsafe { ::core::mem::transmute(bFsOff) };
            bFsOff as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let whitenMode: u8 = unsafe { ::core::mem::transmute(whitenMode) };
            whitenMode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_TX_TEST_s__bindgen_ty_4 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_TX_TEST_s__bindgen_ty_4 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_TX_TEST_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SYNC_STOP_RAT_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_SYNC_STOP_RAT_s__bindgen_ty_1,
    pub condition: rfc_CMD_SYNC_STOP_RAT_s__bindgen_ty_2,
    pub __dummy0: u16,
    pub rat0: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SYNC_STOP_RAT_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_SYNC_STOP_RAT_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SYNC_STOP_RAT_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_SYNC_STOP_RAT_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_SYNC_STOP_RAT_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SYNC_START_RAT_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_SYNC_START_RAT_s__bindgen_ty_1,
    pub condition: rfc_CMD_SYNC_START_RAT_s__bindgen_ty_2,
    pub __dummy0: u16,
    pub rat0: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SYNC_START_RAT_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_SYNC_START_RAT_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SYNC_START_RAT_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_SYNC_START_RAT_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_SYNC_START_RAT_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_COUNT_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_COUNT_s__bindgen_ty_1,
    pub condition: rfc_CMD_COUNT_s__bindgen_ty_2,
    pub counter: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_COUNT_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_COUNT_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_COUNT_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_COUNT_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_COUNT_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_POWERUP_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_FS_POWERUP_s__bindgen_ty_1,
    pub condition: rfc_CMD_FS_POWERUP_s__bindgen_ty_2,
    pub __dummy0: u16,
    pub pRegOverride: *mut u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_POWERUP_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_FS_POWERUP_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_POWERUP_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_FS_POWERUP_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_FS_POWERUP_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_POWERDOWN_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_FS_POWERDOWN_s__bindgen_ty_1,
    pub condition: rfc_CMD_FS_POWERDOWN_s__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_POWERDOWN_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_FS_POWERDOWN_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FS_POWERDOWN_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_FS_POWERDOWN_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_FS_POWERDOWN_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SCH_IMM_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_SCH_IMM_s__bindgen_ty_1,
    pub condition: rfc_CMD_SCH_IMM_s__bindgen_ty_2,
    pub __dummy0: u16,
    pub cmdrVal: u32,
    pub cmdstaVal: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SCH_IMM_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_SCH_IMM_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SCH_IMM_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_SCH_IMM_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_SCH_IMM_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_COUNT_BRANCH_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_COUNT_BRANCH_s__bindgen_ty_1,
    pub condition: rfc_CMD_COUNT_BRANCH_s__bindgen_ty_2,
    pub counter: u16,
    pub pNextOpIfOk: *mut rfc_radioOp_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_COUNT_BRANCH_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_COUNT_BRANCH_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_COUNT_BRANCH_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_COUNT_BRANCH_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_COUNT_BRANCH_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PATTERN_CHECK_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_PATTERN_CHECK_s__bindgen_ty_1,
    pub condition: rfc_CMD_PATTERN_CHECK_s__bindgen_ty_2,
    pub patternOpt: rfc_CMD_PATTERN_CHECK_s__bindgen_ty_3,
    pub pNextOpIfOk: *mut rfc_radioOp_t,
    pub pValue: *mut u8,
    pub mask: u32,
    pub compareVal: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PATTERN_CHECK_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PATTERN_CHECK_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PATTERN_CHECK_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PATTERN_CHECK_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PATTERN_CHECK_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl rfc_CMD_PATTERN_CHECK_s__bindgen_ty_3 {
    #[inline]
    pub fn operation(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_operation(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn bByteRev(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bByteRev(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bBitRev(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bBitRev(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn signExtend(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_signExtend(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn bRxVal(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bRxVal(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        operation: u16,
        bByteRev: u16,
        bBitRev: u16,
        signExtend: u16,
        bRxVal: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let operation: u16 = unsafe { ::core::mem::transmute(operation) };
            operation as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bByteRev: u16 = unsafe { ::core::mem::transmute(bByteRev) };
            bByteRev as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bBitRev: u16 = unsafe { ::core::mem::transmute(bBitRev) };
            bBitRev as u64
        });
        __bindgen_bitfield_unit.set(4usize, 5u8, {
            let signExtend: u16 = unsafe { ::core::mem::transmute(signExtend) };
            signExtend as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bRxVal: u16 = unsafe { ::core::mem::transmute(bRxVal) };
            bRxVal as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_PATTERN_CHECK_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_ABORT_s {
    pub commandNo: u16,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_STOP_s {
    pub commandNo: u16,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_GET_RSSI_s {
    pub commandNo: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_UPDATE_RADIO_SETUP_s {
    pub commandNo: u16,
    pub __dummy0: u16,
    pub pRegOverride: *mut u32,
}
impl Default for rfc_CMD_UPDATE_RADIO_SETUP_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_TRIGGER_s {
    pub commandNo: u16,
    pub triggerNo: u8,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_GET_FW_INFO_s {
    pub commandNo: u16,
    pub versionNo: u16,
    pub startOffset: u16,
    pub freeRamSz: u16,
    pub availRatCh: u16,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_START_RAT_s {
    pub commandNo: u16,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PING_s {
    pub commandNo: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_READ_RFREG_s {
    pub commandNo: u16,
    pub address: u16,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_ADD_DATA_ENTRY_s {
    pub commandNo: u16,
    pub __dummy0: u16,
    pub pQueue: *mut dataQueue_t,
    pub pEntry: *mut u8,
}
impl Default for rfc_CMD_ADD_DATA_ENTRY_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_REMOVE_DATA_ENTRY_s {
    pub commandNo: u16,
    pub __dummy0: u16,
    pub pQueue: *mut dataQueue_t,
    pub pEntry: *mut u8,
}
impl Default for rfc_CMD_REMOVE_DATA_ENTRY_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_FLUSH_QUEUE_s {
    pub commandNo: u16,
    pub __dummy0: u16,
    pub pQueue: *mut dataQueue_t,
    pub pFirstEntry: *mut u8,
}
impl Default for rfc_CMD_FLUSH_QUEUE_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_CLEAR_RX_s {
    pub commandNo: u16,
    pub __dummy0: u16,
    pub pQueue: *mut dataQueue_t,
}
impl Default for rfc_CMD_CLEAR_RX_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_REMOVE_PENDING_ENTRIES_s {
    pub commandNo: u16,
    pub __dummy0: u16,
    pub pQueue: *mut dataQueue_t,
    pub pFirstEntry: *mut u8,
}
impl Default for rfc_CMD_REMOVE_PENDING_ENTRIES_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SET_RAT_CMP_s {
    pub commandNo: u16,
    pub ratCh: u8,
    pub __dummy0: u8,
    pub compareTime: ratmr_t,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SET_RAT_CPT_s {
    pub commandNo: u16,
    pub config: rfc_CMD_SET_RAT_CPT_s__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SET_RAT_CPT_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl rfc_CMD_SET_RAT_CPT_s__bindgen_ty_1 {
    #[inline]
    pub fn inputSrc(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_inputSrc(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn ratCh(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_ratCh(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bRepeated(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bRepeated(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn inputMode(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_inputMode(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        inputSrc: u16,
        ratCh: u16,
        bRepeated: u16,
        inputMode: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let inputSrc: u16 = unsafe { ::core::mem::transmute(inputSrc) };
            inputSrc as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let ratCh: u16 = unsafe { ::core::mem::transmute(ratCh) };
            ratCh as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bRepeated: u16 = unsafe { ::core::mem::transmute(bRepeated) };
            bRepeated as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let inputMode: u16 = unsafe { ::core::mem::transmute(inputMode) };
            inputMode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_DISABLE_RAT_CH_s {
    pub commandNo: u16,
    pub ratCh: u8,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SET_RAT_OUTPUT_s {
    pub commandNo: u16,
    pub config: rfc_CMD_SET_RAT_OUTPUT_s__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SET_RAT_OUTPUT_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl rfc_CMD_SET_RAT_OUTPUT_s__bindgen_ty_1 {
    #[inline]
    pub fn outputSel(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_outputSel(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn outputMode(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_outputMode(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn ratCh(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_ratCh(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        outputSel: u16,
        outputMode: u16,
        ratCh: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(2usize, 3u8, {
            let outputSel: u16 = unsafe { ::core::mem::transmute(outputSel) };
            outputSel as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let outputMode: u16 = unsafe { ::core::mem::transmute(outputMode) };
            outputMode as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let ratCh: u16 = unsafe { ::core::mem::transmute(ratCh) };
            ratCh as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_ARM_RAT_CH_s {
    pub commandNo: u16,
    pub ratCh: u8,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_DISARM_RAT_CH_s {
    pub commandNo: u16,
    pub ratCh: u8,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_SET_TX_POWER_s {
    pub commandNo: u16,
    pub txPower: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_UPDATE_FS_s {
    pub commandNo: u16,
    pub __dummy0: u16,
    pub __dummy1: u32,
    pub __dummy2: u32,
    pub __dummy3: u16,
    pub frequency: u16,
    pub fractFreq: u16,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BUS_REQUEST_s {
    pub commandNo: u16,
    pub bSysBusNeeded: u8,
}
pub type rfc_bleRadioOp_t = rfc_bleRadioOp_s;
pub type rfc_CMD_BLE_SLAVE_t = rfc_CMD_BLE_SLAVE_s;
pub type rfc_CMD_BLE_MASTER_t = rfc_CMD_BLE_MASTER_s;
pub type rfc_CMD_BLE_ADV_t = rfc_CMD_BLE_ADV_s;
pub type rfc_CMD_BLE_ADV_DIR_t = rfc_CMD_BLE_ADV_DIR_s;
pub type rfc_CMD_BLE_ADV_NC_t = rfc_CMD_BLE_ADV_NC_s;
pub type rfc_CMD_BLE_ADV_SCAN_t = rfc_CMD_BLE_ADV_SCAN_s;
pub type rfc_CMD_BLE_SCANNER_t = rfc_CMD_BLE_SCANNER_s;
pub type rfc_CMD_BLE_INITIATOR_t = rfc_CMD_BLE_INITIATOR_s;
pub type rfc_CMD_BLE_GENERIC_RX_t = rfc_CMD_BLE_GENERIC_RX_s;
pub type rfc_CMD_BLE_TX_TEST_t = rfc_CMD_BLE_TX_TEST_s;
pub type rfc_CMD_BLE_ADV_PAYLOAD_t = rfc_CMD_BLE_ADV_PAYLOAD_s;
pub type rfc_CMD_BLE5_RADIO_SETUP_t = rfc_CMD_BLE5_RADIO_SETUP_s;
pub type rfc_bleMasterSlavePar_t = rfc_bleMasterSlavePar_s;
pub type rfc_bleMasterPar_t = rfc_bleMasterPar_s;
pub type rfc_bleSlavePar_t = rfc_bleSlavePar_s;
pub type rfc_bleAdvPar_t = rfc_bleAdvPar_s;
pub type rfc_bleScannerPar_t = rfc_bleScannerPar_s;
pub type rfc_bleInitiatorPar_t = rfc_bleInitiatorPar_s;
pub type rfc_bleGenericRxPar_t = rfc_bleGenericRxPar_s;
pub type rfc_bleTxTestPar_t = rfc_bleTxTestPar_s;
pub type rfc_bleMasterSlaveOutput_t = rfc_bleMasterSlaveOutput_s;
pub type rfc_bleAdvOutput_t = rfc_bleAdvOutput_s;
pub type rfc_bleScannerOutput_t = rfc_bleScannerOutput_s;
pub type rfc_bleInitiatorOutput_t = rfc_bleInitiatorOutput_s;
pub type rfc_bleGenericRxOutput_t = rfc_bleGenericRxOutput_s;
pub type rfc_bleTxTestOutput_t = rfc_bleTxTestOutput_s;
pub type rfc_bleWhiteListEntry_t = rfc_bleWhiteListEntry_s;
pub type rfc_bleRxStatus_t = rfc_bleRxStatus_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_bleRadioOp_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_bleRadioOp_s__bindgen_ty_1,
    pub condition: rfc_bleRadioOp_s__bindgen_ty_2,
    pub channel: u8,
    pub whitening: rfc_bleRadioOp_s__bindgen_ty_3,
    pub pParams: *mut u8,
    pub pOutput: *mut u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleRadioOp_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleRadioOp_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleRadioOp_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleRadioOp_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleRadioOp_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleRadioOp_s__bindgen_ty_3 {
    #[inline]
    pub fn init(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_init(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bOverride(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bOverride(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(init: u8, bOverride: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let init: u8 = unsafe { ::core::mem::transmute(init) };
            init as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bOverride: u8 = unsafe { ::core::mem::transmute(bOverride) };
            bOverride as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_bleRadioOp_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_SLAVE_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_BLE_SLAVE_s__bindgen_ty_1,
    pub condition: rfc_CMD_BLE_SLAVE_s__bindgen_ty_2,
    pub channel: u8,
    pub whitening: rfc_CMD_BLE_SLAVE_s__bindgen_ty_3,
    pub pParams: *mut rfc_bleSlavePar_t,
    pub pOutput: *mut rfc_bleMasterSlaveOutput_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_SLAVE_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_SLAVE_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_SLAVE_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_SLAVE_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_SLAVE_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_SLAVE_s__bindgen_ty_3 {
    #[inline]
    pub fn init(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_init(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bOverride(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bOverride(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(init: u8, bOverride: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let init: u8 = unsafe { ::core::mem::transmute(init) };
            init as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bOverride: u8 = unsafe { ::core::mem::transmute(bOverride) };
            bOverride as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_BLE_SLAVE_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_MASTER_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_BLE_MASTER_s__bindgen_ty_1,
    pub condition: rfc_CMD_BLE_MASTER_s__bindgen_ty_2,
    pub channel: u8,
    pub whitening: rfc_CMD_BLE_MASTER_s__bindgen_ty_3,
    pub pParams: *mut rfc_bleMasterPar_t,
    pub pOutput: *mut rfc_bleMasterSlaveOutput_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_MASTER_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_MASTER_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_MASTER_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_MASTER_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_MASTER_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_MASTER_s__bindgen_ty_3 {
    #[inline]
    pub fn init(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_init(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bOverride(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bOverride(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(init: u8, bOverride: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let init: u8 = unsafe { ::core::mem::transmute(init) };
            init as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bOverride: u8 = unsafe { ::core::mem::transmute(bOverride) };
            bOverride as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_BLE_MASTER_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_BLE_ADV_s__bindgen_ty_1,
    pub condition: rfc_CMD_BLE_ADV_s__bindgen_ty_2,
    pub channel: u8,
    pub whitening: rfc_CMD_BLE_ADV_s__bindgen_ty_3,
    pub pParams: *mut rfc_bleAdvPar_t,
    pub pOutput: *mut rfc_bleAdvOutput_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_ADV_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_ADV_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_ADV_s__bindgen_ty_3 {
    #[inline]
    pub fn init(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_init(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bOverride(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bOverride(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(init: u8, bOverride: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let init: u8 = unsafe { ::core::mem::transmute(init) };
            init as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bOverride: u8 = unsafe { ::core::mem::transmute(bOverride) };
            bOverride as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_BLE_ADV_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_DIR_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_BLE_ADV_DIR_s__bindgen_ty_1,
    pub condition: rfc_CMD_BLE_ADV_DIR_s__bindgen_ty_2,
    pub channel: u8,
    pub whitening: rfc_CMD_BLE_ADV_DIR_s__bindgen_ty_3,
    pub pParams: *mut rfc_bleAdvPar_t,
    pub pOutput: *mut rfc_bleAdvOutput_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_DIR_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_ADV_DIR_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_DIR_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_ADV_DIR_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_DIR_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_ADV_DIR_s__bindgen_ty_3 {
    #[inline]
    pub fn init(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_init(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bOverride(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bOverride(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(init: u8, bOverride: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let init: u8 = unsafe { ::core::mem::transmute(init) };
            init as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bOverride: u8 = unsafe { ::core::mem::transmute(bOverride) };
            bOverride as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_BLE_ADV_DIR_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_NC_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_BLE_ADV_NC_s__bindgen_ty_1,
    pub condition: rfc_CMD_BLE_ADV_NC_s__bindgen_ty_2,
    pub channel: u8,
    pub whitening: rfc_CMD_BLE_ADV_NC_s__bindgen_ty_3,
    pub pParams: *mut rfc_bleAdvPar_t,
    pub pOutput: *mut rfc_bleAdvOutput_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_NC_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_ADV_NC_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_NC_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_ADV_NC_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_NC_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_ADV_NC_s__bindgen_ty_3 {
    #[inline]
    pub fn init(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_init(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bOverride(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bOverride(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(init: u8, bOverride: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let init: u8 = unsafe { ::core::mem::transmute(init) };
            init as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bOverride: u8 = unsafe { ::core::mem::transmute(bOverride) };
            bOverride as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_BLE_ADV_NC_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_SCAN_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_BLE_ADV_SCAN_s__bindgen_ty_1,
    pub condition: rfc_CMD_BLE_ADV_SCAN_s__bindgen_ty_2,
    pub channel: u8,
    pub whitening: rfc_CMD_BLE_ADV_SCAN_s__bindgen_ty_3,
    pub pParams: *mut rfc_bleAdvPar_t,
    pub pOutput: *mut rfc_bleAdvOutput_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_SCAN_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_ADV_SCAN_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_SCAN_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_ADV_SCAN_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_SCAN_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_ADV_SCAN_s__bindgen_ty_3 {
    #[inline]
    pub fn init(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_init(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bOverride(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bOverride(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(init: u8, bOverride: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let init: u8 = unsafe { ::core::mem::transmute(init) };
            init as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bOverride: u8 = unsafe { ::core::mem::transmute(bOverride) };
            bOverride as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_BLE_ADV_SCAN_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_SCANNER_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_BLE_SCANNER_s__bindgen_ty_1,
    pub condition: rfc_CMD_BLE_SCANNER_s__bindgen_ty_2,
    pub channel: u8,
    pub whitening: rfc_CMD_BLE_SCANNER_s__bindgen_ty_3,
    pub pParams: *mut rfc_bleScannerPar_t,
    pub pOutput: *mut rfc_bleScannerOutput_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_SCANNER_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_SCANNER_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_SCANNER_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_SCANNER_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_SCANNER_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_SCANNER_s__bindgen_ty_3 {
    #[inline]
    pub fn init(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_init(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bOverride(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bOverride(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(init: u8, bOverride: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let init: u8 = unsafe { ::core::mem::transmute(init) };
            init as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bOverride: u8 = unsafe { ::core::mem::transmute(bOverride) };
            bOverride as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_BLE_SCANNER_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_INITIATOR_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_BLE_INITIATOR_s__bindgen_ty_1,
    pub condition: rfc_CMD_BLE_INITIATOR_s__bindgen_ty_2,
    pub channel: u8,
    pub whitening: rfc_CMD_BLE_INITIATOR_s__bindgen_ty_3,
    pub pParams: *mut rfc_bleInitiatorPar_t,
    pub pOutput: *mut rfc_bleInitiatorOutput_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_INITIATOR_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_INITIATOR_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_INITIATOR_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_INITIATOR_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_INITIATOR_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_INITIATOR_s__bindgen_ty_3 {
    #[inline]
    pub fn init(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_init(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bOverride(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bOverride(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(init: u8, bOverride: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let init: u8 = unsafe { ::core::mem::transmute(init) };
            init as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bOverride: u8 = unsafe { ::core::mem::transmute(bOverride) };
            bOverride as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_BLE_INITIATOR_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_GENERIC_RX_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_BLE_GENERIC_RX_s__bindgen_ty_1,
    pub condition: rfc_CMD_BLE_GENERIC_RX_s__bindgen_ty_2,
    pub channel: u8,
    pub whitening: rfc_CMD_BLE_GENERIC_RX_s__bindgen_ty_3,
    pub pParams: *mut rfc_bleGenericRxPar_t,
    pub pOutput: *mut rfc_bleGenericRxOutput_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_GENERIC_RX_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_GENERIC_RX_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_GENERIC_RX_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_GENERIC_RX_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_GENERIC_RX_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_GENERIC_RX_s__bindgen_ty_3 {
    #[inline]
    pub fn init(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_init(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bOverride(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bOverride(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(init: u8, bOverride: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let init: u8 = unsafe { ::core::mem::transmute(init) };
            init as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bOverride: u8 = unsafe { ::core::mem::transmute(bOverride) };
            bOverride as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_BLE_GENERIC_RX_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_TX_TEST_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_BLE_TX_TEST_s__bindgen_ty_1,
    pub condition: rfc_CMD_BLE_TX_TEST_s__bindgen_ty_2,
    pub channel: u8,
    pub whitening: rfc_CMD_BLE_TX_TEST_s__bindgen_ty_3,
    pub pParams: *mut rfc_bleTxTestPar_t,
    pub pOutput: *mut rfc_bleTxTestOutput_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_TX_TEST_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_TX_TEST_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_TX_TEST_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_TX_TEST_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_TX_TEST_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_BLE_TX_TEST_s__bindgen_ty_3 {
    #[inline]
    pub fn init(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_init(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bOverride(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bOverride(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(init: u8, bOverride: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let init: u8 = unsafe { ::core::mem::transmute(init) };
            init as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bOverride: u8 = unsafe { ::core::mem::transmute(bOverride) };
            bOverride as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_BLE_TX_TEST_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE_ADV_PAYLOAD_s {
    pub commandNo: u16,
    pub payloadType: u8,
    pub newLen: u8,
    pub pNewData: *mut u8,
    pub pParams: *mut rfc_bleAdvPar_t,
}
impl Default for rfc_CMD_BLE_ADV_PAYLOAD_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_BLE5_RADIO_SETUP_s {
    pub dummy0: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_bleMasterSlavePar_s {
    pub pRxQ: *mut dataQueue_t,
    pub pTxQ: *mut dataQueue_t,
    pub rxConfig: rfc_bleMasterSlavePar_s__bindgen_ty_1,
    pub seqStat: rfc_bleMasterSlavePar_s__bindgen_ty_2,
    pub maxNack: u8,
    pub maxPkt: u8,
    pub accessAddress: u32,
    pub crcInit0: u8,
    pub crcInit1: u8,
    pub crcInit2: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleMasterSlavePar_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleMasterSlavePar_s__bindgen_ty_1 {
    #[inline]
    pub fn bAutoFlushIgnored(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushIgnored(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushCrcErr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushCrcErr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushEmpty(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushEmpty(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeLenByte(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeLenByte(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendRssi(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendRssi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendStatus(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendStatus(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendTimestamp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendTimestamp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bAutoFlushIgnored: u8,
        bAutoFlushCrcErr: u8,
        bAutoFlushEmpty: u8,
        bIncludeLenByte: u8,
        bIncludeCrc: u8,
        bAppendRssi: u8,
        bAppendStatus: u8,
        bAppendTimestamp: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bAutoFlushIgnored: u8 = unsafe { ::core::mem::transmute(bAutoFlushIgnored) };
            bAutoFlushIgnored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bAutoFlushCrcErr: u8 = unsafe { ::core::mem::transmute(bAutoFlushCrcErr) };
            bAutoFlushCrcErr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bAutoFlushEmpty: u8 = unsafe { ::core::mem::transmute(bAutoFlushEmpty) };
            bAutoFlushEmpty as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bIncludeLenByte: u8 = unsafe { ::core::mem::transmute(bIncludeLenByte) };
            bIncludeLenByte as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bIncludeCrc: u8 = unsafe { ::core::mem::transmute(bIncludeCrc) };
            bIncludeCrc as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAppendRssi: u8 = unsafe { ::core::mem::transmute(bAppendRssi) };
            bAppendRssi as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bAppendStatus: u8 = unsafe { ::core::mem::transmute(bAppendStatus) };
            bAppendStatus as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bAppendTimestamp: u8 = unsafe { ::core::mem::transmute(bAppendTimestamp) };
            bAppendTimestamp as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleMasterSlavePar_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleMasterSlavePar_s__bindgen_ty_2 {
    #[inline]
    pub fn lastRxSn(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lastRxSn(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lastTxSn(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lastTxSn(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nextTxSn(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nextTxSn(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bFirstPkt(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bFirstPkt(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoEmpty(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoEmpty(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLlCtrlTx(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLlCtrlTx(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLlCtrlAckRx(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLlCtrlAckRx(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLlCtrlAckPending(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLlCtrlAckPending(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lastRxSn: u8,
        lastTxSn: u8,
        nextTxSn: u8,
        bFirstPkt: u8,
        bAutoEmpty: u8,
        bLlCtrlTx: u8,
        bLlCtrlAckRx: u8,
        bLlCtrlAckPending: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lastRxSn: u8 = unsafe { ::core::mem::transmute(lastRxSn) };
            lastRxSn as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lastTxSn: u8 = unsafe { ::core::mem::transmute(lastTxSn) };
            lastTxSn as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let nextTxSn: u8 = unsafe { ::core::mem::transmute(nextTxSn) };
            nextTxSn as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bFirstPkt: u8 = unsafe { ::core::mem::transmute(bFirstPkt) };
            bFirstPkt as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bAutoEmpty: u8 = unsafe { ::core::mem::transmute(bAutoEmpty) };
            bAutoEmpty as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bLlCtrlTx: u8 = unsafe { ::core::mem::transmute(bLlCtrlTx) };
            bLlCtrlTx as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bLlCtrlAckRx: u8 = unsafe { ::core::mem::transmute(bLlCtrlAckRx) };
            bLlCtrlAckRx as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bLlCtrlAckPending: u8 = unsafe { ::core::mem::transmute(bLlCtrlAckPending) };
            bLlCtrlAckPending as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_bleMasterSlavePar_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_bleMasterPar_s {
    pub pRxQ: *mut dataQueue_t,
    pub pTxQ: *mut dataQueue_t,
    pub rxConfig: rfc_bleMasterPar_s__bindgen_ty_1,
    pub seqStat: rfc_bleMasterPar_s__bindgen_ty_2,
    pub maxNack: u8,
    pub maxPkt: u8,
    pub accessAddress: u32,
    pub crcInit0: u8,
    pub crcInit1: u8,
    pub crcInit2: u8,
    pub endTrigger: rfc_bleMasterPar_s__bindgen_ty_3,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleMasterPar_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleMasterPar_s__bindgen_ty_1 {
    #[inline]
    pub fn bAutoFlushIgnored(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushIgnored(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushCrcErr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushCrcErr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushEmpty(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushEmpty(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeLenByte(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeLenByte(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendRssi(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendRssi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendStatus(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendStatus(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendTimestamp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendTimestamp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bAutoFlushIgnored: u8,
        bAutoFlushCrcErr: u8,
        bAutoFlushEmpty: u8,
        bIncludeLenByte: u8,
        bIncludeCrc: u8,
        bAppendRssi: u8,
        bAppendStatus: u8,
        bAppendTimestamp: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bAutoFlushIgnored: u8 = unsafe { ::core::mem::transmute(bAutoFlushIgnored) };
            bAutoFlushIgnored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bAutoFlushCrcErr: u8 = unsafe { ::core::mem::transmute(bAutoFlushCrcErr) };
            bAutoFlushCrcErr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bAutoFlushEmpty: u8 = unsafe { ::core::mem::transmute(bAutoFlushEmpty) };
            bAutoFlushEmpty as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bIncludeLenByte: u8 = unsafe { ::core::mem::transmute(bIncludeLenByte) };
            bIncludeLenByte as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bIncludeCrc: u8 = unsafe { ::core::mem::transmute(bIncludeCrc) };
            bIncludeCrc as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAppendRssi: u8 = unsafe { ::core::mem::transmute(bAppendRssi) };
            bAppendRssi as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bAppendStatus: u8 = unsafe { ::core::mem::transmute(bAppendStatus) };
            bAppendStatus as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bAppendTimestamp: u8 = unsafe { ::core::mem::transmute(bAppendTimestamp) };
            bAppendTimestamp as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleMasterPar_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleMasterPar_s__bindgen_ty_2 {
    #[inline]
    pub fn lastRxSn(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lastRxSn(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lastTxSn(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lastTxSn(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nextTxSn(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nextTxSn(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bFirstPkt(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bFirstPkt(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoEmpty(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoEmpty(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLlCtrlTx(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLlCtrlTx(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLlCtrlAckRx(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLlCtrlAckRx(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLlCtrlAckPending(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLlCtrlAckPending(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lastRxSn: u8,
        lastTxSn: u8,
        nextTxSn: u8,
        bFirstPkt: u8,
        bAutoEmpty: u8,
        bLlCtrlTx: u8,
        bLlCtrlAckRx: u8,
        bLlCtrlAckPending: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lastRxSn: u8 = unsafe { ::core::mem::transmute(lastRxSn) };
            lastRxSn as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lastTxSn: u8 = unsafe { ::core::mem::transmute(lastTxSn) };
            lastTxSn as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let nextTxSn: u8 = unsafe { ::core::mem::transmute(nextTxSn) };
            nextTxSn as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bFirstPkt: u8 = unsafe { ::core::mem::transmute(bFirstPkt) };
            bFirstPkt as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bAutoEmpty: u8 = unsafe { ::core::mem::transmute(bAutoEmpty) };
            bAutoEmpty as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bLlCtrlTx: u8 = unsafe { ::core::mem::transmute(bLlCtrlTx) };
            bLlCtrlTx as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bLlCtrlAckRx: u8 = unsafe { ::core::mem::transmute(bLlCtrlAckRx) };
            bLlCtrlAckRx as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bLlCtrlAckPending: u8 = unsafe { ::core::mem::transmute(bLlCtrlAckPending) };
            bLlCtrlAckPending as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleMasterPar_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleMasterPar_s__bindgen_ty_3 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_bleMasterPar_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_bleSlavePar_s {
    pub pRxQ: *mut dataQueue_t,
    pub pTxQ: *mut dataQueue_t,
    pub rxConfig: rfc_bleSlavePar_s__bindgen_ty_1,
    pub seqStat: rfc_bleSlavePar_s__bindgen_ty_2,
    pub maxNack: u8,
    pub maxPkt: u8,
    pub accessAddress: u32,
    pub crcInit0: u8,
    pub crcInit1: u8,
    pub crcInit2: u8,
    pub timeoutTrigger: rfc_bleSlavePar_s__bindgen_ty_3,
    pub timeoutTime: ratmr_t,
    pub __dummy0: u16,
    pub __dummy1: u8,
    pub endTrigger: rfc_bleSlavePar_s__bindgen_ty_4,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleSlavePar_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleSlavePar_s__bindgen_ty_1 {
    #[inline]
    pub fn bAutoFlushIgnored(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushIgnored(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushCrcErr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushCrcErr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushEmpty(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushEmpty(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeLenByte(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeLenByte(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendRssi(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendRssi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendStatus(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendStatus(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendTimestamp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendTimestamp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bAutoFlushIgnored: u8,
        bAutoFlushCrcErr: u8,
        bAutoFlushEmpty: u8,
        bIncludeLenByte: u8,
        bIncludeCrc: u8,
        bAppendRssi: u8,
        bAppendStatus: u8,
        bAppendTimestamp: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bAutoFlushIgnored: u8 = unsafe { ::core::mem::transmute(bAutoFlushIgnored) };
            bAutoFlushIgnored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bAutoFlushCrcErr: u8 = unsafe { ::core::mem::transmute(bAutoFlushCrcErr) };
            bAutoFlushCrcErr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bAutoFlushEmpty: u8 = unsafe { ::core::mem::transmute(bAutoFlushEmpty) };
            bAutoFlushEmpty as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bIncludeLenByte: u8 = unsafe { ::core::mem::transmute(bIncludeLenByte) };
            bIncludeLenByte as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bIncludeCrc: u8 = unsafe { ::core::mem::transmute(bIncludeCrc) };
            bIncludeCrc as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAppendRssi: u8 = unsafe { ::core::mem::transmute(bAppendRssi) };
            bAppendRssi as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bAppendStatus: u8 = unsafe { ::core::mem::transmute(bAppendStatus) };
            bAppendStatus as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bAppendTimestamp: u8 = unsafe { ::core::mem::transmute(bAppendTimestamp) };
            bAppendTimestamp as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleSlavePar_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleSlavePar_s__bindgen_ty_2 {
    #[inline]
    pub fn lastRxSn(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lastRxSn(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lastTxSn(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lastTxSn(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nextTxSn(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nextTxSn(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bFirstPkt(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bFirstPkt(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoEmpty(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoEmpty(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLlCtrlTx(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLlCtrlTx(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLlCtrlAckRx(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLlCtrlAckRx(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLlCtrlAckPending(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLlCtrlAckPending(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lastRxSn: u8,
        lastTxSn: u8,
        nextTxSn: u8,
        bFirstPkt: u8,
        bAutoEmpty: u8,
        bLlCtrlTx: u8,
        bLlCtrlAckRx: u8,
        bLlCtrlAckPending: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lastRxSn: u8 = unsafe { ::core::mem::transmute(lastRxSn) };
            lastRxSn as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lastTxSn: u8 = unsafe { ::core::mem::transmute(lastTxSn) };
            lastTxSn as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let nextTxSn: u8 = unsafe { ::core::mem::transmute(nextTxSn) };
            nextTxSn as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bFirstPkt: u8 = unsafe { ::core::mem::transmute(bFirstPkt) };
            bFirstPkt as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bAutoEmpty: u8 = unsafe { ::core::mem::transmute(bAutoEmpty) };
            bAutoEmpty as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bLlCtrlTx: u8 = unsafe { ::core::mem::transmute(bLlCtrlTx) };
            bLlCtrlTx as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bLlCtrlAckRx: u8 = unsafe { ::core::mem::transmute(bLlCtrlAckRx) };
            bLlCtrlAckRx as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bLlCtrlAckPending: u8 = unsafe { ::core::mem::transmute(bLlCtrlAckPending) };
            bLlCtrlAckPending as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleSlavePar_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleSlavePar_s__bindgen_ty_3 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleSlavePar_s__bindgen_ty_4 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleSlavePar_s__bindgen_ty_4 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_bleSlavePar_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_bleAdvPar_s {
    pub pRxQ: *mut dataQueue_t,
    pub rxConfig: rfc_bleAdvPar_s__bindgen_ty_1,
    pub advConfig: rfc_bleAdvPar_s__bindgen_ty_2,
    pub advLen: u8,
    pub scanRspLen: u8,
    pub pAdvData: *mut u8,
    pub pScanRspData: *mut u8,
    pub pDeviceAddress: *mut u16,
    pub pWhiteList: *mut rfc_bleWhiteListEntry_t,
    pub __dummy0: u16,
    pub __dummy1: u8,
    pub endTrigger: rfc_bleAdvPar_s__bindgen_ty_3,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleAdvPar_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleAdvPar_s__bindgen_ty_1 {
    #[inline]
    pub fn bAutoFlushIgnored(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushIgnored(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushCrcErr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushCrcErr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushEmpty(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushEmpty(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeLenByte(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeLenByte(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendRssi(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendRssi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendStatus(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendStatus(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendTimestamp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendTimestamp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bAutoFlushIgnored: u8,
        bAutoFlushCrcErr: u8,
        bAutoFlushEmpty: u8,
        bIncludeLenByte: u8,
        bIncludeCrc: u8,
        bAppendRssi: u8,
        bAppendStatus: u8,
        bAppendTimestamp: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bAutoFlushIgnored: u8 = unsafe { ::core::mem::transmute(bAutoFlushIgnored) };
            bAutoFlushIgnored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bAutoFlushCrcErr: u8 = unsafe { ::core::mem::transmute(bAutoFlushCrcErr) };
            bAutoFlushCrcErr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bAutoFlushEmpty: u8 = unsafe { ::core::mem::transmute(bAutoFlushEmpty) };
            bAutoFlushEmpty as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bIncludeLenByte: u8 = unsafe { ::core::mem::transmute(bIncludeLenByte) };
            bIncludeLenByte as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bIncludeCrc: u8 = unsafe { ::core::mem::transmute(bIncludeCrc) };
            bIncludeCrc as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAppendRssi: u8 = unsafe { ::core::mem::transmute(bAppendRssi) };
            bAppendRssi as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bAppendStatus: u8 = unsafe { ::core::mem::transmute(bAppendStatus) };
            bAppendStatus as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bAppendTimestamp: u8 = unsafe { ::core::mem::transmute(bAppendTimestamp) };
            bAppendTimestamp as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleAdvPar_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleAdvPar_s__bindgen_ty_2 {
    #[inline]
    pub fn advFilterPolicy(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_advFilterPolicy(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn deviceAddrType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_deviceAddrType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn peerAddrType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_peerAddrType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bStrictLenFilter(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bStrictLenFilter(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rpaMode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rpaMode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        advFilterPolicy: u8,
        deviceAddrType: u8,
        peerAddrType: u8,
        bStrictLenFilter: u8,
        rpaMode: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let advFilterPolicy: u8 = unsafe { ::core::mem::transmute(advFilterPolicy) };
            advFilterPolicy as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let deviceAddrType: u8 = unsafe { ::core::mem::transmute(deviceAddrType) };
            deviceAddrType as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let peerAddrType: u8 = unsafe { ::core::mem::transmute(peerAddrType) };
            peerAddrType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bStrictLenFilter: u8 = unsafe { ::core::mem::transmute(bStrictLenFilter) };
            bStrictLenFilter as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let rpaMode: u8 = unsafe { ::core::mem::transmute(rpaMode) };
            rpaMode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleAdvPar_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleAdvPar_s__bindgen_ty_3 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_bleAdvPar_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_bleScannerPar_s {
    pub pRxQ: *mut dataQueue_t,
    pub rxConfig: rfc_bleScannerPar_s__bindgen_ty_1,
    pub scanConfig: rfc_bleScannerPar_s__bindgen_ty_2,
    pub randomState: u16,
    pub backoffCount: u16,
    pub backoffPar: rfc_bleScannerPar_s__bindgen_ty_3,
    pub scanReqLen: u8,
    pub pScanReqData: *mut u8,
    pub pDeviceAddress: *mut u16,
    pub pWhiteList: *mut rfc_bleWhiteListEntry_t,
    pub __dummy0: u16,
    pub timeoutTrigger: rfc_bleScannerPar_s__bindgen_ty_4,
    pub endTrigger: rfc_bleScannerPar_s__bindgen_ty_5,
    pub timeoutTime: ratmr_t,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleScannerPar_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleScannerPar_s__bindgen_ty_1 {
    #[inline]
    pub fn bAutoFlushIgnored(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushIgnored(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushCrcErr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushCrcErr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushEmpty(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushEmpty(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeLenByte(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeLenByte(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendRssi(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendRssi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendStatus(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendStatus(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendTimestamp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendTimestamp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bAutoFlushIgnored: u8,
        bAutoFlushCrcErr: u8,
        bAutoFlushEmpty: u8,
        bIncludeLenByte: u8,
        bIncludeCrc: u8,
        bAppendRssi: u8,
        bAppendStatus: u8,
        bAppendTimestamp: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bAutoFlushIgnored: u8 = unsafe { ::core::mem::transmute(bAutoFlushIgnored) };
            bAutoFlushIgnored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bAutoFlushCrcErr: u8 = unsafe { ::core::mem::transmute(bAutoFlushCrcErr) };
            bAutoFlushCrcErr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bAutoFlushEmpty: u8 = unsafe { ::core::mem::transmute(bAutoFlushEmpty) };
            bAutoFlushEmpty as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bIncludeLenByte: u8 = unsafe { ::core::mem::transmute(bIncludeLenByte) };
            bIncludeLenByte as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bIncludeCrc: u8 = unsafe { ::core::mem::transmute(bIncludeCrc) };
            bIncludeCrc as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAppendRssi: u8 = unsafe { ::core::mem::transmute(bAppendRssi) };
            bAppendRssi as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bAppendStatus: u8 = unsafe { ::core::mem::transmute(bAppendStatus) };
            bAppendStatus as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bAppendTimestamp: u8 = unsafe { ::core::mem::transmute(bAppendTimestamp) };
            bAppendTimestamp as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleScannerPar_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleScannerPar_s__bindgen_ty_2 {
    #[inline]
    pub fn scanFilterPolicy(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_scanFilterPolicy(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bActiveScan(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bActiveScan(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deviceAddrType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_deviceAddrType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bStrictLenFilter(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bStrictLenFilter(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoWlIgnore(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoWlIgnore(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bEndOnRpt(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEndOnRpt(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rpaMode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rpaMode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        scanFilterPolicy: u8,
        bActiveScan: u8,
        deviceAddrType: u8,
        bStrictLenFilter: u8,
        bAutoWlIgnore: u8,
        bEndOnRpt: u8,
        rpaMode: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let scanFilterPolicy: u8 = unsafe { ::core::mem::transmute(scanFilterPolicy) };
            scanFilterPolicy as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bActiveScan: u8 = unsafe { ::core::mem::transmute(bActiveScan) };
            bActiveScan as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let deviceAddrType: u8 = unsafe { ::core::mem::transmute(deviceAddrType) };
            deviceAddrType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bStrictLenFilter: u8 = unsafe { ::core::mem::transmute(bStrictLenFilter) };
            bStrictLenFilter as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAutoWlIgnore: u8 = unsafe { ::core::mem::transmute(bAutoWlIgnore) };
            bAutoWlIgnore as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bEndOnRpt: u8 = unsafe { ::core::mem::transmute(bEndOnRpt) };
            bEndOnRpt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let rpaMode: u8 = unsafe { ::core::mem::transmute(rpaMode) };
            rpaMode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleScannerPar_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleScannerPar_s__bindgen_ty_3 {
    #[inline]
    pub fn logUpperLimit(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_logUpperLimit(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bLastSucceeded(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLastSucceeded(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLastFailed(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLastFailed(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        logUpperLimit: u8,
        bLastSucceeded: u8,
        bLastFailed: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let logUpperLimit: u8 = unsafe { ::core::mem::transmute(logUpperLimit) };
            logUpperLimit as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bLastSucceeded: u8 = unsafe { ::core::mem::transmute(bLastSucceeded) };
            bLastSucceeded as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bLastFailed: u8 = unsafe { ::core::mem::transmute(bLastFailed) };
            bLastFailed as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleScannerPar_s__bindgen_ty_4 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleScannerPar_s__bindgen_ty_4 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleScannerPar_s__bindgen_ty_5 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleScannerPar_s__bindgen_ty_5 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_bleScannerPar_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_bleInitiatorPar_s {
    pub pRxQ: *mut dataQueue_t,
    pub rxConfig: rfc_bleInitiatorPar_s__bindgen_ty_1,
    pub initConfig: rfc_bleInitiatorPar_s__bindgen_ty_2,
    pub __dummy0: u8,
    pub connectReqLen: u8,
    pub pConnectReqData: *mut u8,
    pub pDeviceAddress: *mut u16,
    pub pWhiteList: *mut rfc_bleWhiteListEntry_t,
    pub connectTime: ratmr_t,
    pub __dummy1: u16,
    pub timeoutTrigger: rfc_bleInitiatorPar_s__bindgen_ty_3,
    pub endTrigger: rfc_bleInitiatorPar_s__bindgen_ty_4,
    pub timeoutTime: ratmr_t,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleInitiatorPar_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleInitiatorPar_s__bindgen_ty_1 {
    #[inline]
    pub fn bAutoFlushIgnored(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushIgnored(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushCrcErr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushCrcErr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushEmpty(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushEmpty(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeLenByte(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeLenByte(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendRssi(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendRssi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendStatus(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendStatus(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendTimestamp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendTimestamp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bAutoFlushIgnored: u8,
        bAutoFlushCrcErr: u8,
        bAutoFlushEmpty: u8,
        bIncludeLenByte: u8,
        bIncludeCrc: u8,
        bAppendRssi: u8,
        bAppendStatus: u8,
        bAppendTimestamp: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bAutoFlushIgnored: u8 = unsafe { ::core::mem::transmute(bAutoFlushIgnored) };
            bAutoFlushIgnored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bAutoFlushCrcErr: u8 = unsafe { ::core::mem::transmute(bAutoFlushCrcErr) };
            bAutoFlushCrcErr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bAutoFlushEmpty: u8 = unsafe { ::core::mem::transmute(bAutoFlushEmpty) };
            bAutoFlushEmpty as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bIncludeLenByte: u8 = unsafe { ::core::mem::transmute(bIncludeLenByte) };
            bIncludeLenByte as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bIncludeCrc: u8 = unsafe { ::core::mem::transmute(bIncludeCrc) };
            bIncludeCrc as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAppendRssi: u8 = unsafe { ::core::mem::transmute(bAppendRssi) };
            bAppendRssi as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bAppendStatus: u8 = unsafe { ::core::mem::transmute(bAppendStatus) };
            bAppendStatus as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bAppendTimestamp: u8 = unsafe { ::core::mem::transmute(bAppendTimestamp) };
            bAppendTimestamp as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleInitiatorPar_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleInitiatorPar_s__bindgen_ty_2 {
    #[inline]
    pub fn bUseWhiteList(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bUseWhiteList(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bDynamicWinOffset(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bDynamicWinOffset(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deviceAddrType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_deviceAddrType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn peerAddrType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_peerAddrType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bStrictLenFilter(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bStrictLenFilter(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bUseWhiteList: u8,
        bDynamicWinOffset: u8,
        deviceAddrType: u8,
        peerAddrType: u8,
        bStrictLenFilter: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bUseWhiteList: u8 = unsafe { ::core::mem::transmute(bUseWhiteList) };
            bUseWhiteList as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bDynamicWinOffset: u8 = unsafe { ::core::mem::transmute(bDynamicWinOffset) };
            bDynamicWinOffset as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let deviceAddrType: u8 = unsafe { ::core::mem::transmute(deviceAddrType) };
            deviceAddrType as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let peerAddrType: u8 = unsafe { ::core::mem::transmute(peerAddrType) };
            peerAddrType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bStrictLenFilter: u8 = unsafe { ::core::mem::transmute(bStrictLenFilter) };
            bStrictLenFilter as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleInitiatorPar_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleInitiatorPar_s__bindgen_ty_3 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleInitiatorPar_s__bindgen_ty_4 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleInitiatorPar_s__bindgen_ty_4 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_bleInitiatorPar_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_bleGenericRxPar_s {
    pub pRxQ: *mut dataQueue_t,
    pub rxConfig: rfc_bleGenericRxPar_s__bindgen_ty_1,
    pub bRepeat: u8,
    pub __dummy0: u16,
    pub accessAddress: u32,
    pub crcInit0: u8,
    pub crcInit1: u8,
    pub crcInit2: u8,
    pub endTrigger: rfc_bleGenericRxPar_s__bindgen_ty_2,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleGenericRxPar_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleGenericRxPar_s__bindgen_ty_1 {
    #[inline]
    pub fn bAutoFlushIgnored(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushIgnored(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushCrcErr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushCrcErr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushEmpty(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushEmpty(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeLenByte(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeLenByte(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendRssi(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendRssi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendStatus(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendStatus(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendTimestamp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendTimestamp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bAutoFlushIgnored: u8,
        bAutoFlushCrcErr: u8,
        bAutoFlushEmpty: u8,
        bIncludeLenByte: u8,
        bIncludeCrc: u8,
        bAppendRssi: u8,
        bAppendStatus: u8,
        bAppendTimestamp: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bAutoFlushIgnored: u8 = unsafe { ::core::mem::transmute(bAutoFlushIgnored) };
            bAutoFlushIgnored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bAutoFlushCrcErr: u8 = unsafe { ::core::mem::transmute(bAutoFlushCrcErr) };
            bAutoFlushCrcErr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bAutoFlushEmpty: u8 = unsafe { ::core::mem::transmute(bAutoFlushEmpty) };
            bAutoFlushEmpty as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bIncludeLenByte: u8 = unsafe { ::core::mem::transmute(bIncludeLenByte) };
            bIncludeLenByte as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bIncludeCrc: u8 = unsafe { ::core::mem::transmute(bIncludeCrc) };
            bIncludeCrc as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAppendRssi: u8 = unsafe { ::core::mem::transmute(bAppendRssi) };
            bAppendRssi as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bAppendStatus: u8 = unsafe { ::core::mem::transmute(bAppendStatus) };
            bAppendStatus as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bAppendTimestamp: u8 = unsafe { ::core::mem::transmute(bAppendTimestamp) };
            bAppendTimestamp as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleGenericRxPar_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleGenericRxPar_s__bindgen_ty_2 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_bleGenericRxPar_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleTxTestPar_s {
    pub numPackets: u16,
    pub payloadLength: u8,
    pub packetType: u8,
    pub period: ratmr_t,
    pub config: rfc_bleTxTestPar_s__bindgen_ty_1,
    pub byteVal: u8,
    pub __dummy0: u8,
    pub endTrigger: rfc_bleTxTestPar_s__bindgen_ty_2,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleTxTestPar_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleTxTestPar_s__bindgen_ty_1 {
    #[inline]
    pub fn bOverrideDefault(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bOverrideDefault(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bUsePrbs9(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bUsePrbs9(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bUsePrbs15(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bUsePrbs15(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bOverrideDefault: u8,
        bUsePrbs9: u8,
        bUsePrbs15: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bOverrideDefault: u8 = unsafe { ::core::mem::transmute(bOverrideDefault) };
            bOverrideDefault as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bUsePrbs9: u8 = unsafe { ::core::mem::transmute(bUsePrbs9) };
            bUsePrbs9 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bUsePrbs15: u8 = unsafe { ::core::mem::transmute(bUsePrbs15) };
            bUsePrbs15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleTxTestPar_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleTxTestPar_s__bindgen_ty_2 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleMasterSlaveOutput_s {
    pub nTx: u8,
    pub nTxAck: u8,
    pub nTxCtrl: u8,
    pub nTxCtrlAck: u8,
    pub nTxCtrlAckAck: u8,
    pub nTxRetrans: u8,
    pub nTxEntryDone: u8,
    pub nRxOk: u8,
    pub nRxCtrl: u8,
    pub nRxCtrlAck: u8,
    pub nRxNok: u8,
    pub nRxIgnored: u8,
    pub nRxEmpty: u8,
    pub nRxBufFull: u8,
    pub lastRssi: i8,
    pub pktStatus: rfc_bleMasterSlaveOutput_s__bindgen_ty_1,
    pub timeStamp: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleMasterSlaveOutput_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleMasterSlaveOutput_s__bindgen_ty_1 {
    #[inline]
    pub fn bTimeStampValid(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bTimeStampValid(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLastCrcErr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLastCrcErr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLastIgnored(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLastIgnored(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLastEmpty(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLastEmpty(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLastCtrl(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLastCtrl(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLastMd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLastMd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLastAck(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bLastAck(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bTimeStampValid: u8,
        bLastCrcErr: u8,
        bLastIgnored: u8,
        bLastEmpty: u8,
        bLastCtrl: u8,
        bLastMd: u8,
        bLastAck: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bTimeStampValid: u8 = unsafe { ::core::mem::transmute(bTimeStampValid) };
            bTimeStampValid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bLastCrcErr: u8 = unsafe { ::core::mem::transmute(bLastCrcErr) };
            bLastCrcErr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bLastIgnored: u8 = unsafe { ::core::mem::transmute(bLastIgnored) };
            bLastIgnored as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bLastEmpty: u8 = unsafe { ::core::mem::transmute(bLastEmpty) };
            bLastEmpty as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bLastCtrl: u8 = unsafe { ::core::mem::transmute(bLastCtrl) };
            bLastCtrl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bLastMd: u8 = unsafe { ::core::mem::transmute(bLastMd) };
            bLastMd as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bLastAck: u8 = unsafe { ::core::mem::transmute(bLastAck) };
            bLastAck as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleAdvOutput_s {
    pub nTxAdvInd: u16,
    pub nTxScanRsp: u8,
    pub nRxScanReq: u8,
    pub nRxConnectReq: u8,
    pub __dummy0: u8,
    pub nRxNok: u16,
    pub nRxIgnored: u16,
    pub nRxBufFull: u8,
    pub lastRssi: i8,
    pub timeStamp: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleScannerOutput_s {
    pub nTxScanReq: u16,
    pub nBackedOffScanReq: u16,
    pub nRxAdvOk: u16,
    pub nRxAdvIgnored: u16,
    pub nRxAdvNok: u16,
    pub nRxScanRspOk: u16,
    pub nRxScanRspIgnored: u16,
    pub nRxScanRspNok: u16,
    pub nRxAdvBufFull: u8,
    pub nRxScanRspBufFull: u8,
    pub lastRssi: i8,
    pub __dummy0: u8,
    pub timeStamp: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleInitiatorOutput_s {
    pub nTxConnectReq: u8,
    pub nRxAdvOk: u8,
    pub nRxAdvIgnored: u16,
    pub nRxAdvNok: u16,
    pub nRxAdvBufFull: u8,
    pub lastRssi: i8,
    pub timeStamp: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleGenericRxOutput_s {
    pub nRxOk: u16,
    pub nRxNok: u16,
    pub nRxBufFull: u16,
    pub lastRssi: i8,
    pub __dummy0: u8,
    pub timeStamp: ratmr_t,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleTxTestOutput_s {
    pub nTx: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleWhiteListEntry_s {
    pub size: u8,
    pub conf: rfc_bleWhiteListEntry_s__bindgen_ty_1,
    pub address: u16,
    pub addressHi: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleWhiteListEntry_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleWhiteListEntry_s__bindgen_ty_1 {
    #[inline]
    pub fn bEnable(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnable(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn addrType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_addrType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bWlIgn(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bWlIgn(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIrkValid(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIrkValid(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bEnable: u8,
        addrType: u8,
        bWlIgn: u8,
        bIrkValid: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bEnable: u8 = unsafe { ::core::mem::transmute(bEnable) };
            bEnable as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let addrType: u8 = unsafe { ::core::mem::transmute(addrType) };
            addrType as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bWlIgn: u8 = unsafe { ::core::mem::transmute(bWlIgn) };
            bWlIgn as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bIrkValid: u8 = unsafe { ::core::mem::transmute(bIrkValid) };
            bIrkValid as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleRxStatus_s {
    pub status: rfc_bleRxStatus_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_bleRxStatus_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_bleRxStatus_s__bindgen_ty_1 {
    #[inline]
    pub fn channel(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_channel(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn bIgnore(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIgnore(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bCrcErr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bCrcErr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        channel: u8,
        bIgnore: u8,
        bCrcErr: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let channel: u8 = unsafe { ::core::mem::transmute(channel) };
            channel as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bIgnore: u8 = unsafe { ::core::mem::transmute(bIgnore) };
            bIgnore as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bCrcErr: u8 = unsafe { ::core::mem::transmute(bCrcErr) };
            bCrcErr as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type rfc_CMD_PROP_TX_t = rfc_CMD_PROP_TX_s;
pub type rfc_CMD_PROP_RX_t = rfc_CMD_PROP_RX_s;
pub type rfc_CMD_PROP_TX_ADV_t = rfc_CMD_PROP_TX_ADV_s;
pub type rfc_CMD_PROP_RX_ADV_t = rfc_CMD_PROP_RX_ADV_s;
pub type rfc_CMD_PROP_RADIO_SETUP_t = rfc_CMD_PROP_RADIO_SETUP_s;
pub type rfc_CMD_PROP_RADIO_DIV_SETUP_t = rfc_CMD_PROP_RADIO_DIV_SETUP_s;
pub type rfc_CMD_PROP_SET_LEN_t = rfc_CMD_PROP_SET_LEN_s;
pub type rfc_CMD_PROP_RESTART_RX_t = rfc_CMD_PROP_RESTART_RX_s;
pub type rfc_propRxOutput_t = rfc_propRxOutput_s;
pub type rfc_propRxStatus_t = rfc_propRxStatus_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_TX_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_PROP_TX_s__bindgen_ty_1,
    pub condition: rfc_CMD_PROP_TX_s__bindgen_ty_2,
    pub pktConf: rfc_CMD_PROP_TX_s__bindgen_ty_3,
    pub pktLen: u8,
    pub syncWord: u32,
    pub pPkt: *mut u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_TX_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_TX_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_TX_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_TX_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_TX_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_TX_s__bindgen_ty_3 {
    #[inline]
    pub fn bFsOff(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bFsOff(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bUseCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bUseCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bVarLen(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bVarLen(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bFsOff: u8,
        bUseCrc: u8,
        bVarLen: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bFsOff: u8 = unsafe { ::core::mem::transmute(bFsOff) };
            bFsOff as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bUseCrc: u8 = unsafe { ::core::mem::transmute(bUseCrc) };
            bUseCrc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bVarLen: u8 = unsafe { ::core::mem::transmute(bVarLen) };
            bVarLen as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_PROP_TX_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_PROP_RX_s__bindgen_ty_1,
    pub condition: rfc_CMD_PROP_RX_s__bindgen_ty_2,
    pub pktConf: rfc_CMD_PROP_RX_s__bindgen_ty_3,
    pub rxConf: rfc_CMD_PROP_RX_s__bindgen_ty_4,
    pub syncWord: u32,
    pub maxPktLen: u8,
    pub address0: u8,
    pub address1: u8,
    pub endTrigger: rfc_CMD_PROP_RX_s__bindgen_ty_5,
    pub endTime: ratmr_t,
    pub pQueue: *mut dataQueue_t,
    pub pOutput: *mut u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RX_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RX_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RX_s__bindgen_ty_3 {
    #[inline]
    pub fn bFsOff(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bFsOff(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bRepeatOk(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bRepeatOk(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bRepeatNok(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bRepeatNok(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bUseCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bUseCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bVarLen(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bVarLen(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bChkAddress(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bChkAddress(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn endType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_endType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn filterOp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_filterOp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bFsOff: u8,
        bRepeatOk: u8,
        bRepeatNok: u8,
        bUseCrc: u8,
        bVarLen: u8,
        bChkAddress: u8,
        endType: u8,
        filterOp: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bFsOff: u8 = unsafe { ::core::mem::transmute(bFsOff) };
            bFsOff as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bRepeatOk: u8 = unsafe { ::core::mem::transmute(bRepeatOk) };
            bRepeatOk as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bRepeatNok: u8 = unsafe { ::core::mem::transmute(bRepeatNok) };
            bRepeatNok as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bUseCrc: u8 = unsafe { ::core::mem::transmute(bUseCrc) };
            bUseCrc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bVarLen: u8 = unsafe { ::core::mem::transmute(bVarLen) };
            bVarLen as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bChkAddress: u8 = unsafe { ::core::mem::transmute(bChkAddress) };
            bChkAddress as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let endType: u8 = unsafe { ::core::mem::transmute(endType) };
            endType as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let filterOp: u8 = unsafe { ::core::mem::transmute(filterOp) };
            filterOp as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_s__bindgen_ty_4 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RX_s__bindgen_ty_4 {
    #[inline]
    pub fn bAutoFlushIgnored(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushIgnored(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushCrcErr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushCrcErr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeHdr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeHdr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendRssi(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendRssi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendTimestamp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendTimestamp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendStatus(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendStatus(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bAutoFlushIgnored: u8,
        bAutoFlushCrcErr: u8,
        bIncludeHdr: u8,
        bIncludeCrc: u8,
        bAppendRssi: u8,
        bAppendTimestamp: u8,
        bAppendStatus: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bAutoFlushIgnored: u8 = unsafe { ::core::mem::transmute(bAutoFlushIgnored) };
            bAutoFlushIgnored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bAutoFlushCrcErr: u8 = unsafe { ::core::mem::transmute(bAutoFlushCrcErr) };
            bAutoFlushCrcErr as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bIncludeHdr: u8 = unsafe { ::core::mem::transmute(bIncludeHdr) };
            bIncludeHdr as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bIncludeCrc: u8 = unsafe { ::core::mem::transmute(bIncludeCrc) };
            bIncludeCrc as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAppendRssi: u8 = unsafe { ::core::mem::transmute(bAppendRssi) };
            bAppendRssi as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bAppendTimestamp: u8 = unsafe { ::core::mem::transmute(bAppendTimestamp) };
            bAppendTimestamp as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bAppendStatus: u8 = unsafe { ::core::mem::transmute(bAppendStatus) };
            bAppendStatus as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_s__bindgen_ty_5 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RX_s__bindgen_ty_5 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_PROP_RX_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_TX_ADV_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_PROP_TX_ADV_s__bindgen_ty_1,
    pub condition: rfc_CMD_PROP_TX_ADV_s__bindgen_ty_2,
    pub pktConf: rfc_CMD_PROP_TX_ADV_s__bindgen_ty_3,
    pub numHdrBits: u8,
    pub pktLen: u16,
    pub startConf: rfc_CMD_PROP_TX_ADV_s__bindgen_ty_4,
    pub preTrigger: rfc_CMD_PROP_TX_ADV_s__bindgen_ty_5,
    pub preTime: ratmr_t,
    pub syncWord: u32,
    pub pPkt: *mut u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_TX_ADV_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_TX_ADV_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_TX_ADV_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_TX_ADV_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_TX_ADV_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_TX_ADV_s__bindgen_ty_3 {
    #[inline]
    pub fn bFsOff(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bFsOff(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bUseCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bUseCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bCrcIncSw(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bCrcIncSw(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bCrcIncHdr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bCrcIncHdr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bFsOff: u8,
        bUseCrc: u8,
        bCrcIncSw: u8,
        bCrcIncHdr: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bFsOff: u8 = unsafe { ::core::mem::transmute(bFsOff) };
            bFsOff as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bUseCrc: u8 = unsafe { ::core::mem::transmute(bUseCrc) };
            bUseCrc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bCrcIncSw: u8 = unsafe { ::core::mem::transmute(bCrcIncSw) };
            bCrcIncSw as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bCrcIncHdr: u8 = unsafe { ::core::mem::transmute(bCrcIncHdr) };
            bCrcIncHdr as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_TX_ADV_s__bindgen_ty_4 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_TX_ADV_s__bindgen_ty_4 {
    #[inline]
    pub fn bExtTxTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bExtTxTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn inputMode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_inputMode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn source(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_source(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bExtTxTrig: u8,
        inputMode: u8,
        source: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bExtTxTrig: u8 = unsafe { ::core::mem::transmute(bExtTxTrig) };
            bExtTxTrig as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let inputMode: u8 = unsafe { ::core::mem::transmute(inputMode) };
            inputMode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let source: u8 = unsafe { ::core::mem::transmute(source) };
            source as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_TX_ADV_s__bindgen_ty_5 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_TX_ADV_s__bindgen_ty_5 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_PROP_TX_ADV_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_ADV_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_PROP_RX_ADV_s__bindgen_ty_1,
    pub condition: rfc_CMD_PROP_RX_ADV_s__bindgen_ty_2,
    pub pktConf: rfc_CMD_PROP_RX_ADV_s__bindgen_ty_3,
    pub rxConf: rfc_CMD_PROP_RX_ADV_s__bindgen_ty_4,
    pub syncWord0: u32,
    pub syncWord1: u32,
    pub maxPktLen: u16,
    pub hdrConf: rfc_CMD_PROP_RX_ADV_s__bindgen_ty_5,
    pub addrConf: rfc_CMD_PROP_RX_ADV_s__bindgen_ty_6,
    pub lenOffset: i8,
    pub endTrigger: rfc_CMD_PROP_RX_ADV_s__bindgen_ty_7,
    pub endTime: ratmr_t,
    pub pAddr: *mut u8,
    pub pQueue: *mut dataQueue_t,
    pub pOutput: *mut u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_ADV_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RX_ADV_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_ADV_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RX_ADV_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_ADV_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RX_ADV_s__bindgen_ty_3 {
    #[inline]
    pub fn bFsOff(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bFsOff(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bRepeatOk(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bRepeatOk(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bRepeatNok(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bRepeatNok(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bUseCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bUseCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bCrcIncSw(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bCrcIncSw(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bCrcIncHdr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bCrcIncHdr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn endType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_endType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn filterOp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_filterOp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bFsOff: u8,
        bRepeatOk: u8,
        bRepeatNok: u8,
        bUseCrc: u8,
        bCrcIncSw: u8,
        bCrcIncHdr: u8,
        endType: u8,
        filterOp: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bFsOff: u8 = unsafe { ::core::mem::transmute(bFsOff) };
            bFsOff as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bRepeatOk: u8 = unsafe { ::core::mem::transmute(bRepeatOk) };
            bRepeatOk as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bRepeatNok: u8 = unsafe { ::core::mem::transmute(bRepeatNok) };
            bRepeatNok as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bUseCrc: u8 = unsafe { ::core::mem::transmute(bUseCrc) };
            bUseCrc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bCrcIncSw: u8 = unsafe { ::core::mem::transmute(bCrcIncSw) };
            bCrcIncSw as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bCrcIncHdr: u8 = unsafe { ::core::mem::transmute(bCrcIncHdr) };
            bCrcIncHdr as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let endType: u8 = unsafe { ::core::mem::transmute(endType) };
            endType as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let filterOp: u8 = unsafe { ::core::mem::transmute(filterOp) };
            filterOp as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_ADV_s__bindgen_ty_4 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RX_ADV_s__bindgen_ty_4 {
    #[inline]
    pub fn bAutoFlushIgnored(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushIgnored(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushCrcErr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushCrcErr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeHdr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeHdr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendRssi(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendRssi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendTimestamp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendTimestamp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendStatus(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendStatus(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bAutoFlushIgnored: u8,
        bAutoFlushCrcErr: u8,
        bIncludeHdr: u8,
        bIncludeCrc: u8,
        bAppendRssi: u8,
        bAppendTimestamp: u8,
        bAppendStatus: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bAutoFlushIgnored: u8 = unsafe { ::core::mem::transmute(bAutoFlushIgnored) };
            bAutoFlushIgnored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bAutoFlushCrcErr: u8 = unsafe { ::core::mem::transmute(bAutoFlushCrcErr) };
            bAutoFlushCrcErr as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bIncludeHdr: u8 = unsafe { ::core::mem::transmute(bIncludeHdr) };
            bIncludeHdr as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bIncludeCrc: u8 = unsafe { ::core::mem::transmute(bIncludeCrc) };
            bIncludeCrc as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAppendRssi: u8 = unsafe { ::core::mem::transmute(bAppendRssi) };
            bAppendRssi as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bAppendTimestamp: u8 = unsafe { ::core::mem::transmute(bAppendTimestamp) };
            bAppendTimestamp as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bAppendStatus: u8 = unsafe { ::core::mem::transmute(bAppendStatus) };
            bAppendStatus as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_ADV_s__bindgen_ty_5 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl rfc_CMD_PROP_RX_ADV_s__bindgen_ty_5 {
    #[inline]
    pub fn numHdrBits(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_numHdrBits(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn lenPos(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_lenPos(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn numLenBits(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_numLenBits(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        numHdrBits: u16,
        lenPos: u16,
        numLenBits: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let numHdrBits: u16 = unsafe { ::core::mem::transmute(numHdrBits) };
            numHdrBits as u64
        });
        __bindgen_bitfield_unit.set(6usize, 5u8, {
            let lenPos: u16 = unsafe { ::core::mem::transmute(lenPos) };
            lenPos as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let numLenBits: u16 = unsafe { ::core::mem::transmute(numLenBits) };
            numLenBits as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_ADV_s__bindgen_ty_6 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl rfc_CMD_PROP_RX_ADV_s__bindgen_ty_6 {
    #[inline]
    pub fn addrType(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_addrType(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn addrSize(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_addrSize(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn addrPos(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_addrPos(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn numAddr(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_numAddr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        addrType: u16,
        addrSize: u16,
        addrPos: u16,
        numAddr: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let addrType: u16 = unsafe { ::core::mem::transmute(addrType) };
            addrType as u64
        });
        __bindgen_bitfield_unit.set(1usize, 5u8, {
            let addrSize: u16 = unsafe { ::core::mem::transmute(addrSize) };
            addrSize as u64
        });
        __bindgen_bitfield_unit.set(6usize, 5u8, {
            let addrPos: u16 = unsafe { ::core::mem::transmute(addrPos) };
            addrPos as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let numAddr: u16 = unsafe { ::core::mem::transmute(numAddr) };
            numAddr as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RX_ADV_s__bindgen_ty_7 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RX_ADV_s__bindgen_ty_7 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_PROP_RX_ADV_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RADIO_SETUP_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_1,
    pub condition: rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_2,
    pub modulation: rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_3,
    pub symbolRate: rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_4,
    pub rxBw: u8,
    pub preamConf: rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_5,
    pub formatConf: rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_6,
    pub config: rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_7,
    pub txPower: u16,
    pub pRegOverride: *mut u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_3 {
    #[inline]
    pub fn modType(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_modType(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn deviation(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 13u8) as u16) }
    }
    #[inline]
    pub fn set_deviation(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(modType: u16, deviation: u16) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let modType: u16 = unsafe { ::core::mem::transmute(modType) };
            modType as u64
        });
        __bindgen_bitfield_unit.set(3usize, 13u8, {
            let deviation: u16 = unsafe { ::core::mem::transmute(deviation) };
            deviation as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_4 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_4 {
    #[inline]
    pub fn preScale(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_preScale(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rateWord(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_rateWord(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(preScale: u32, rateWord: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let preScale: u32 = unsafe { ::core::mem::transmute(preScale) };
            preScale as u64
        });
        __bindgen_bitfield_unit.set(8usize, 21u8, {
            let rateWord: u32 = unsafe { ::core::mem::transmute(rateWord) };
            rateWord as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_5 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_5 {
    #[inline]
    pub fn nPreamBytes(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_nPreamBytes(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn preamMode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_preamMode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(nPreamBytes: u8, preamMode: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let nPreamBytes: u8 = unsafe { ::core::mem::transmute(nPreamBytes) };
            nPreamBytes as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let preamMode: u8 = unsafe { ::core::mem::transmute(preamMode) };
            preamMode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_6 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_6 {
    #[inline]
    pub fn nSwBits(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_nSwBits(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn bBitReversal(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bBitReversal(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bMsbFirst(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bMsbFirst(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fecMode(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_fecMode(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bOuterCode(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bOuterCode(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn whitenMode(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_whitenMode(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn bAgcDisable(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bAgcDisable(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nSwBits: u16,
        bBitReversal: u16,
        bMsbFirst: u16,
        fecMode: u16,
        bOuterCode: u16,
        whitenMode: u16,
        bAgcDisable: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let nSwBits: u16 = unsafe { ::core::mem::transmute(nSwBits) };
            nSwBits as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bBitReversal: u16 = unsafe { ::core::mem::transmute(bBitReversal) };
            bBitReversal as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bMsbFirst: u16 = unsafe { ::core::mem::transmute(bMsbFirst) };
            bMsbFirst as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let fecMode: u16 = unsafe { ::core::mem::transmute(fecMode) };
            fecMode as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bOuterCode: u16 = unsafe { ::core::mem::transmute(bOuterCode) };
            bOuterCode as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let whitenMode: u16 = unsafe { ::core::mem::transmute(whitenMode) };
            whitenMode as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bAgcDisable: u16 = unsafe { ::core::mem::transmute(bAgcDisable) };
            bAgcDisable as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_7 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl rfc_CMD_PROP_RADIO_SETUP_s__bindgen_ty_7 {
    #[inline]
    pub fn frontEndMode(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_frontEndMode(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn biasMode(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_biasMode(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn analogCfgMode(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_analogCfgMode(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn bNoFsPowerUp(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bNoFsPowerUp(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        frontEndMode: u16,
        biasMode: u16,
        analogCfgMode: u16,
        bNoFsPowerUp: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let frontEndMode: u16 = unsafe { ::core::mem::transmute(frontEndMode) };
            frontEndMode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let biasMode: u16 = unsafe { ::core::mem::transmute(biasMode) };
            biasMode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 6u8, {
            let analogCfgMode: u16 = unsafe { ::core::mem::transmute(analogCfgMode) };
            analogCfgMode as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bNoFsPowerUp: u16 = unsafe { ::core::mem::transmute(bNoFsPowerUp) };
            bNoFsPowerUp as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_PROP_RADIO_SETUP_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RADIO_DIV_SETUP_s {
    pub dummy0: u8,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_SET_LEN_s {
    pub commandNo: u16,
    pub rxLen: u16,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_PROP_RESTART_RX_s {
    pub commandNo: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_propRxOutput_s {
    pub nRxOk: u16,
    pub nRxNok: u16,
    pub nRxIgnored: u8,
    pub nRxStopped: u8,
    pub nRxBufFull: u8,
    pub lastRssi: i8,
    pub timeStamp: ratmr_t,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_propRxStatus_s {
    pub status: rfc_propRxStatus_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_propRxStatus_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_propRxStatus_s__bindgen_ty_1 {
    #[inline]
    pub fn addressInd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_addressInd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn syncWordId(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_syncWordId(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn result(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_result(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        addressInd: u8,
        syncWordId: u8,
        result: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let addressInd: u8 = unsafe { ::core::mem::transmute(addressInd) };
            addressInd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let syncWordId: u8 = unsafe { ::core::mem::transmute(syncWordId) };
            syncWordId as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let result: u8 = unsafe { ::core::mem::transmute(result) };
            result as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfTrim_t {
    pub configIfAdc: u32,
    pub configRfFrontend: u32,
    pub configSynth: u32,
    pub configMiscAdc: u32,
}
extern "C" {
    #[link_name = "RFCClockEnable__extern"]
    pub fn RFCClockEnable();
}
extern "C" {
    #[link_name = "RFCClockDisable__extern"]
    pub fn RFCClockDisable();
}
extern "C" {
    #[link_name = "RFCClockSet__extern"]
    pub fn RFCClockSet(ui32Mask: u32);
}
extern "C" {
    #[link_name = "RFCClockClear__extern"]
    pub fn RFCClockClear(ui32Mask: u32);
}
extern "C" {
    #[link_name = "RFCCpe0IntEnable__extern"]
    pub fn RFCCpe0IntEnable(ui32Mask: u32);
}
extern "C" {
    #[link_name = "RFCCpe1IntEnable__extern"]
    pub fn RFCCpe1IntEnable(ui32Mask: u32);
}
extern "C" {
    #[link_name = "RFCHwIntEnable__extern"]
    pub fn RFCHwIntEnable(ui32Mask: u32);
}
extern "C" {
    #[link_name = "RFCCpeIntDisable__extern"]
    pub fn RFCCpeIntDisable(ui32Mask: u32);
}
extern "C" {
    #[link_name = "RFCHwIntDisable__extern"]
    pub fn RFCHwIntDisable(ui32Mask: u32);
}
extern "C" {
    pub fn RFCCpeIntGetAndClear() -> u32;
}
extern "C" {
    #[link_name = "RFCCpeIntClear__extern"]
    pub fn RFCCpeIntClear(ui32Mask: u32);
}
extern "C" {
    #[link_name = "RFCHwIntClear__extern"]
    pub fn RFCHwIntClear(ui32Mask: u32);
}
extern "C" {
    #[link_name = "RFCAckIntClear__extern"]
    pub fn RFCAckIntClear();
}
extern "C" {
    #[link_name = "RFCOverrideSearch__extern"]
    pub fn RFCOverrideSearch(pOverride: *const u32, pattern: u32, mask: u32) -> u8;
}
extern "C" {
    pub fn RFCDoorbellSendTo(pOp: u32) -> u32;
}
extern "C" {
    pub fn RFCSynthPowerDown();
}
extern "C" {
    pub fn RFCRfTrimRead(pOpSetup: *mut rfc_radioOp_t, rfTrim: *mut rfTrim_t);
}
extern "C" {
    pub fn RFCRfTrimSet(rfTrim: *mut rfTrim_t);
}
extern "C" {
    pub fn RFCRTrim(pOpSetup: *mut rfc_radioOp_t);
}
extern "C" {
    pub fn RFCCPEPatchReset();
}
extern "C" {
    pub fn RFCAdi3VcoLdoVoltageMode(bEnable: bool);
}
extern "C" {
    pub fn RFCOverrideUpdate(pOpSetup: *mut rfc_radioOp_t, pParams: *mut u32) -> u8;
}
extern "C" {
    pub fn RFCHWIntGetAndClear(ui32Mask: u32) -> u32;
}
pub type rfc_dataEntry_t = rfc_dataEntry_s;
pub type rfc_dataEntryGeneral_t = rfc_dataEntryGeneral_s;
pub type rfc_dataEntryMulti_t = rfc_dataEntryMulti_s;
pub type rfc_dataEntryPointer_t = rfc_dataEntryPointer_s;
pub type rfc_dataEntryPartial_t = rfc_dataEntryPartial_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_dataEntry_s {
    pub pNextEntry: *mut u8,
    pub status: u8,
    pub config: rfc_dataEntry_s__bindgen_ty_1,
    pub length: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_dataEntry_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_dataEntry_s__bindgen_ty_1 {
    #[inline]
    pub fn type_(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lenSz(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lenSz(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn irqIntv(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_irqIntv(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: u8,
        lenSz: u8,
        irqIntv: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let type_: u8 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let lenSz: u8 = unsafe { ::core::mem::transmute(lenSz) };
            lenSz as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let irqIntv: u8 = unsafe { ::core::mem::transmute(irqIntv) };
            irqIntv as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_dataEntry_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_dataEntryGeneral_s {
    pub pNextEntry: *mut u8,
    pub status: u8,
    pub config: rfc_dataEntryGeneral_s__bindgen_ty_1,
    pub length: u16,
    pub data: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_dataEntryGeneral_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_dataEntryGeneral_s__bindgen_ty_1 {
    #[inline]
    pub fn type_(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lenSz(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lenSz(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn irqIntv(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_irqIntv(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: u8,
        lenSz: u8,
        irqIntv: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let type_: u8 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let lenSz: u8 = unsafe { ::core::mem::transmute(lenSz) };
            lenSz as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let irqIntv: u8 = unsafe { ::core::mem::transmute(irqIntv) };
            irqIntv as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_dataEntryGeneral_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_dataEntryMulti_s {
    pub pNextEntry: *mut u8,
    pub status: u8,
    pub config: rfc_dataEntryMulti_s__bindgen_ty_1,
    pub length: u16,
    pub numElements: u16,
    pub nextIndex: u16,
    pub rxData: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_dataEntryMulti_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_dataEntryMulti_s__bindgen_ty_1 {
    #[inline]
    pub fn type_(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lenSz(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lenSz(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn irqIntv(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_irqIntv(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: u8,
        lenSz: u8,
        irqIntv: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let type_: u8 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let lenSz: u8 = unsafe { ::core::mem::transmute(lenSz) };
            lenSz as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let irqIntv: u8 = unsafe { ::core::mem::transmute(irqIntv) };
            irqIntv as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_dataEntryMulti_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_dataEntryPointer_s {
    pub pNextEntry: *mut u8,
    pub status: u8,
    pub config: rfc_dataEntryPointer_s__bindgen_ty_1,
    pub length: u16,
    pub pData: *mut u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_dataEntryPointer_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_dataEntryPointer_s__bindgen_ty_1 {
    #[inline]
    pub fn type_(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lenSz(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lenSz(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn irqIntv(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_irqIntv(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: u8,
        lenSz: u8,
        irqIntv: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let type_: u8 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let lenSz: u8 = unsafe { ::core::mem::transmute(lenSz) };
            lenSz as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let irqIntv: u8 = unsafe { ::core::mem::transmute(irqIntv) };
            irqIntv as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_dataEntryPointer_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfc_dataEntryPartial_s {
    pub pNextEntry: *mut u8,
    pub status: u8,
    pub config: rfc_dataEntryPartial_s__bindgen_ty_1,
    pub length: u16,
    pub pktStatus: rfc_dataEntryPartial_s__bindgen_ty_2,
    pub nextIndex: u16,
    pub rxData: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_dataEntryPartial_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_dataEntryPartial_s__bindgen_ty_1 {
    #[inline]
    pub fn type_(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lenSz(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lenSz(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn irqIntv(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_irqIntv(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: u8,
        lenSz: u8,
        irqIntv: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let type_: u8 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let lenSz: u8 = unsafe { ::core::mem::transmute(lenSz) };
            lenSz as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let irqIntv: u8 = unsafe { ::core::mem::transmute(irqIntv) };
            irqIntv as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_dataEntryPartial_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl rfc_dataEntryPartial_s__bindgen_ty_2 {
    #[inline]
    pub fn numElements(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 13u8) as u16) }
    }
    #[inline]
    pub fn set_numElements(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn bEntryOpen(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bEntryOpen(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bFirstCont(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bFirstCont(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bLastCont(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bLastCont(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        numElements: u16,
        bEntryOpen: u16,
        bFirstCont: u16,
        bLastCont: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 13u8, {
            let numElements: u16 = unsafe { ::core::mem::transmute(numElements) };
            numElements as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bEntryOpen: u16 = unsafe { ::core::mem::transmute(bEntryOpen) };
            bEntryOpen as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bFirstCont: u16 = unsafe { ::core::mem::transmute(bFirstCont) };
            bFirstCont as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bLastCont: u16 = unsafe { ::core::mem::transmute(bLastCont) };
            bLastCont as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_dataEntryPartial_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type rfc_CMD_IEEE_RX_t = rfc_CMD_IEEE_RX_s;
pub type rfc_CMD_IEEE_ED_SCAN_t = rfc_CMD_IEEE_ED_SCAN_s;
pub type rfc_CMD_IEEE_TX_t = rfc_CMD_IEEE_TX_s;
pub type rfc_CMD_IEEE_CSMA_t = rfc_CMD_IEEE_CSMA_s;
pub type rfc_CMD_IEEE_RX_ACK_t = rfc_CMD_IEEE_RX_ACK_s;
pub type rfc_CMD_IEEE_ABORT_BG_t = rfc_CMD_IEEE_ABORT_BG_s;
pub type rfc_CMD_IEEE_MOD_CCA_t = rfc_CMD_IEEE_MOD_CCA_s;
pub type rfc_CMD_IEEE_MOD_FILT_t = rfc_CMD_IEEE_MOD_FILT_s;
pub type rfc_CMD_IEEE_MOD_SRC_MATCH_t = rfc_CMD_IEEE_MOD_SRC_MATCH_s;
pub type rfc_CMD_IEEE_ABORT_FG_t = rfc_CMD_IEEE_ABORT_FG_s;
pub type rfc_CMD_IEEE_STOP_FG_t = rfc_CMD_IEEE_STOP_FG_s;
pub type rfc_CMD_IEEE_CCA_REQ_t = rfc_CMD_IEEE_CCA_REQ_s;
pub type rfc_ieeeRxOutput_t = rfc_ieeeRxOutput_s;
pub type rfc_shortAddrEntry_t = rfc_shortAddrEntry_s;
pub type rfc_ieeeRxCorrCrc_t = rfc_ieeeRxCorrCrc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_RX_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_IEEE_RX_s__bindgen_ty_1,
    pub condition: rfc_CMD_IEEE_RX_s__bindgen_ty_2,
    pub channel: u8,
    pub rxConfig: rfc_CMD_IEEE_RX_s__bindgen_ty_3,
    pub pRxQ: *mut dataQueue_t,
    pub pOutput: *mut rfc_ieeeRxOutput_t,
    pub frameFiltOpt: rfc_CMD_IEEE_RX_s__bindgen_ty_4,
    pub frameTypes: rfc_CMD_IEEE_RX_s__bindgen_ty_5,
    pub ccaOpt: rfc_CMD_IEEE_RX_s__bindgen_ty_6,
    pub ccaRssiThr: i8,
    pub __dummy0: u8,
    pub numExtEntries: u8,
    pub numShortEntries: u8,
    pub pExtEntryList: *mut u32,
    pub pShortEntryList: *mut u32,
    pub localExtAddr: u64,
    pub localShortAddr: u16,
    pub localPanID: u16,
    pub __dummy1: u16,
    pub __dummy2: u8,
    pub endTrigger: rfc_CMD_IEEE_RX_s__bindgen_ty_7,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_RX_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_RX_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_RX_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_RX_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_RX_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_RX_s__bindgen_ty_3 {
    #[inline]
    pub fn bAutoFlushCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAutoFlushIgn(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAutoFlushIgn(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludePhyHdr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludePhyHdr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendRssi(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendRssi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendCorrCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendCorrCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendSrcInd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendSrcInd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAppendTimestamp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAppendTimestamp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bAutoFlushCrc: u8,
        bAutoFlushIgn: u8,
        bIncludePhyHdr: u8,
        bIncludeCrc: u8,
        bAppendRssi: u8,
        bAppendCorrCrc: u8,
        bAppendSrcInd: u8,
        bAppendTimestamp: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bAutoFlushCrc: u8 = unsafe { ::core::mem::transmute(bAutoFlushCrc) };
            bAutoFlushCrc as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bAutoFlushIgn: u8 = unsafe { ::core::mem::transmute(bAutoFlushIgn) };
            bAutoFlushIgn as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bIncludePhyHdr: u8 = unsafe { ::core::mem::transmute(bIncludePhyHdr) };
            bIncludePhyHdr as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bIncludeCrc: u8 = unsafe { ::core::mem::transmute(bIncludeCrc) };
            bIncludeCrc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bAppendRssi: u8 = unsafe { ::core::mem::transmute(bAppendRssi) };
            bAppendRssi as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAppendCorrCrc: u8 = unsafe { ::core::mem::transmute(bAppendCorrCrc) };
            bAppendCorrCrc as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bAppendSrcInd: u8 = unsafe { ::core::mem::transmute(bAppendSrcInd) };
            bAppendSrcInd as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bAppendTimestamp: u8 = unsafe { ::core::mem::transmute(bAppendTimestamp) };
            bAppendTimestamp as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_RX_s__bindgen_ty_4 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl rfc_CMD_IEEE_RX_s__bindgen_ty_4 {
    #[inline]
    pub fn frameFiltEn(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_frameFiltEn(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frameFiltStop(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_frameFiltStop(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn autoAckEn(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_autoAckEn(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slottedAckEn(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_slottedAckEn(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn autoPendEn(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_autoPendEn(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn defaultPend(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_defaultPend(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bPendDataReqOnly(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bPendDataReqOnly(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bPanCoord(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bPanCoord(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn maxFrameVersion(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_maxFrameVersion(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn fcfReservedMask(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_fcfReservedMask(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn modifyFtFilter(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_modifyFtFilter(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn bStrictLenFilter(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bStrictLenFilter(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        frameFiltEn: u16,
        frameFiltStop: u16,
        autoAckEn: u16,
        slottedAckEn: u16,
        autoPendEn: u16,
        defaultPend: u16,
        bPendDataReqOnly: u16,
        bPanCoord: u16,
        maxFrameVersion: u16,
        fcfReservedMask: u16,
        modifyFtFilter: u16,
        bStrictLenFilter: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let frameFiltEn: u16 = unsafe { ::core::mem::transmute(frameFiltEn) };
            frameFiltEn as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let frameFiltStop: u16 = unsafe { ::core::mem::transmute(frameFiltStop) };
            frameFiltStop as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let autoAckEn: u16 = unsafe { ::core::mem::transmute(autoAckEn) };
            autoAckEn as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let slottedAckEn: u16 = unsafe { ::core::mem::transmute(slottedAckEn) };
            slottedAckEn as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let autoPendEn: u16 = unsafe { ::core::mem::transmute(autoPendEn) };
            autoPendEn as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let defaultPend: u16 = unsafe { ::core::mem::transmute(defaultPend) };
            defaultPend as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bPendDataReqOnly: u16 = unsafe { ::core::mem::transmute(bPendDataReqOnly) };
            bPendDataReqOnly as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bPanCoord: u16 = unsafe { ::core::mem::transmute(bPanCoord) };
            bPanCoord as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let maxFrameVersion: u16 = unsafe { ::core::mem::transmute(maxFrameVersion) };
            maxFrameVersion as u64
        });
        __bindgen_bitfield_unit.set(10usize, 3u8, {
            let fcfReservedMask: u16 = unsafe { ::core::mem::transmute(fcfReservedMask) };
            fcfReservedMask as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let modifyFtFilter: u16 = unsafe { ::core::mem::transmute(modifyFtFilter) };
            modifyFtFilter as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bStrictLenFilter: u16 = unsafe { ::core::mem::transmute(bStrictLenFilter) };
            bStrictLenFilter as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_RX_s__bindgen_ty_5 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_RX_s__bindgen_ty_5 {
    #[inline]
    pub fn bAcceptFt0Beacon(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt0Beacon(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt1Data(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt1Data(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt2Ack(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt2Ack(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt3MacCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt3MacCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt4Reserved(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt4Reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt5Reserved(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt5Reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt6Reserved(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt6Reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt7Reserved(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt7Reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bAcceptFt0Beacon: u8,
        bAcceptFt1Data: u8,
        bAcceptFt2Ack: u8,
        bAcceptFt3MacCmd: u8,
        bAcceptFt4Reserved: u8,
        bAcceptFt5Reserved: u8,
        bAcceptFt6Reserved: u8,
        bAcceptFt7Reserved: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bAcceptFt0Beacon: u8 = unsafe { ::core::mem::transmute(bAcceptFt0Beacon) };
            bAcceptFt0Beacon as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bAcceptFt1Data: u8 = unsafe { ::core::mem::transmute(bAcceptFt1Data) };
            bAcceptFt1Data as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bAcceptFt2Ack: u8 = unsafe { ::core::mem::transmute(bAcceptFt2Ack) };
            bAcceptFt2Ack as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bAcceptFt3MacCmd: u8 = unsafe { ::core::mem::transmute(bAcceptFt3MacCmd) };
            bAcceptFt3MacCmd as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bAcceptFt4Reserved: u8 = unsafe { ::core::mem::transmute(bAcceptFt4Reserved) };
            bAcceptFt4Reserved as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAcceptFt5Reserved: u8 = unsafe { ::core::mem::transmute(bAcceptFt5Reserved) };
            bAcceptFt5Reserved as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bAcceptFt6Reserved: u8 = unsafe { ::core::mem::transmute(bAcceptFt6Reserved) };
            bAcceptFt6Reserved as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bAcceptFt7Reserved: u8 = unsafe { ::core::mem::transmute(bAcceptFt7Reserved) };
            bAcceptFt7Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_RX_s__bindgen_ty_6 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_RX_s__bindgen_ty_6 {
    #[inline]
    pub fn ccaEnEnergy(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaEnEnergy(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaEnCorr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaEnCorr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaEnSync(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaEnSync(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaCorrOp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaCorrOp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaSyncOp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaSyncOp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaCorrThr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ccaCorrThr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ccaEnEnergy: u8,
        ccaEnCorr: u8,
        ccaEnSync: u8,
        ccaCorrOp: u8,
        ccaSyncOp: u8,
        ccaCorrThr: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ccaEnEnergy: u8 = unsafe { ::core::mem::transmute(ccaEnEnergy) };
            ccaEnEnergy as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ccaEnCorr: u8 = unsafe { ::core::mem::transmute(ccaEnCorr) };
            ccaEnCorr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ccaEnSync: u8 = unsafe { ::core::mem::transmute(ccaEnSync) };
            ccaEnSync as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ccaCorrOp: u8 = unsafe { ::core::mem::transmute(ccaCorrOp) };
            ccaCorrOp as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ccaSyncOp: u8 = unsafe { ::core::mem::transmute(ccaSyncOp) };
            ccaSyncOp as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let ccaCorrThr: u8 = unsafe { ::core::mem::transmute(ccaCorrThr) };
            ccaCorrThr as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_RX_s__bindgen_ty_7 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_RX_s__bindgen_ty_7 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_IEEE_RX_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_ED_SCAN_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_IEEE_ED_SCAN_s__bindgen_ty_1,
    pub condition: rfc_CMD_IEEE_ED_SCAN_s__bindgen_ty_2,
    pub channel: u8,
    pub ccaOpt: rfc_CMD_IEEE_ED_SCAN_s__bindgen_ty_3,
    pub ccaRssiThr: i8,
    pub __dummy0: u8,
    pub maxRssi: i8,
    pub endTrigger: rfc_CMD_IEEE_ED_SCAN_s__bindgen_ty_4,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_ED_SCAN_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_ED_SCAN_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_ED_SCAN_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_ED_SCAN_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_ED_SCAN_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_ED_SCAN_s__bindgen_ty_3 {
    #[inline]
    pub fn ccaEnEnergy(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaEnEnergy(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaEnCorr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaEnCorr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaEnSync(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaEnSync(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaCorrOp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaCorrOp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaSyncOp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaSyncOp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaCorrThr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ccaCorrThr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ccaEnEnergy: u8,
        ccaEnCorr: u8,
        ccaEnSync: u8,
        ccaCorrOp: u8,
        ccaSyncOp: u8,
        ccaCorrThr: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ccaEnEnergy: u8 = unsafe { ::core::mem::transmute(ccaEnEnergy) };
            ccaEnEnergy as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ccaEnCorr: u8 = unsafe { ::core::mem::transmute(ccaEnCorr) };
            ccaEnCorr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ccaEnSync: u8 = unsafe { ::core::mem::transmute(ccaEnSync) };
            ccaEnSync as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ccaCorrOp: u8 = unsafe { ::core::mem::transmute(ccaCorrOp) };
            ccaCorrOp as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ccaSyncOp: u8 = unsafe { ::core::mem::transmute(ccaSyncOp) };
            ccaSyncOp as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let ccaCorrThr: u8 = unsafe { ::core::mem::transmute(ccaCorrThr) };
            ccaCorrThr as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_ED_SCAN_s__bindgen_ty_4 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_ED_SCAN_s__bindgen_ty_4 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_IEEE_ED_SCAN_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_TX_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_IEEE_TX_s__bindgen_ty_1,
    pub condition: rfc_CMD_IEEE_TX_s__bindgen_ty_2,
    pub txOpt: rfc_CMD_IEEE_TX_s__bindgen_ty_3,
    pub payloadLen: u8,
    pub pPayload: *mut u8,
    pub timeStamp: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_TX_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_TX_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_TX_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_TX_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_TX_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_TX_s__bindgen_ty_3 {
    #[inline]
    pub fn bIncludePhyHdr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludePhyHdr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bIncludeCrc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIncludeCrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn payloadLenMsb(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_payloadLenMsb(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bIncludePhyHdr: u8,
        bIncludeCrc: u8,
        payloadLenMsb: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bIncludePhyHdr: u8 = unsafe { ::core::mem::transmute(bIncludePhyHdr) };
            bIncludePhyHdr as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bIncludeCrc: u8 = unsafe { ::core::mem::transmute(bIncludeCrc) };
            bIncludeCrc as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let payloadLenMsb: u8 = unsafe { ::core::mem::transmute(payloadLenMsb) };
            payloadLenMsb as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_IEEE_TX_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_CSMA_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_IEEE_CSMA_s__bindgen_ty_1,
    pub condition: rfc_CMD_IEEE_CSMA_s__bindgen_ty_2,
    pub randomState: u16,
    pub macMaxBE: u8,
    pub macMaxCSMABackoffs: u8,
    pub csmaConfig: rfc_CMD_IEEE_CSMA_s__bindgen_ty_3,
    pub NB: u8,
    pub BE: u8,
    pub remainingPeriods: u8,
    pub lastRssi: i8,
    pub endTrigger: rfc_CMD_IEEE_CSMA_s__bindgen_ty_4,
    pub lastTimeStamp: ratmr_t,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_CSMA_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_CSMA_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_CSMA_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_CSMA_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_CSMA_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_CSMA_s__bindgen_ty_3 {
    #[inline]
    pub fn initCW(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_initCW(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn bSlotted(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bSlotted(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rxOffMode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_rxOffMode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        initCW: u8,
        bSlotted: u8,
        rxOffMode: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let initCW: u8 = unsafe { ::core::mem::transmute(initCW) };
            initCW as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bSlotted: u8 = unsafe { ::core::mem::transmute(bSlotted) };
            bSlotted as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let rxOffMode: u8 = unsafe { ::core::mem::transmute(rxOffMode) };
            rxOffMode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_CSMA_s__bindgen_ty_4 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_CSMA_s__bindgen_ty_4 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_IEEE_CSMA_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_RX_ACK_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_IEEE_RX_ACK_s__bindgen_ty_1,
    pub condition: rfc_CMD_IEEE_RX_ACK_s__bindgen_ty_2,
    pub seqNo: u8,
    pub endTrigger: rfc_CMD_IEEE_RX_ACK_s__bindgen_ty_3,
    pub endTime: ratmr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_RX_ACK_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_RX_ACK_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_RX_ACK_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_RX_ACK_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_RX_ACK_s__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_RX_ACK_s__bindgen_ty_3 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_IEEE_RX_ACK_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_ABORT_BG_s {
    pub commandNo: u16,
    pub status: u16,
    pub pNextOp: *mut rfc_radioOp_t,
    pub startTime: ratmr_t,
    pub startTrigger: rfc_CMD_IEEE_ABORT_BG_s__bindgen_ty_1,
    pub condition: rfc_CMD_IEEE_ABORT_BG_s__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_ABORT_BG_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_ABORT_BG_s__bindgen_ty_1 {
    #[inline]
    pub fn triggerType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_triggerType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bEnaCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnaCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn triggerNo(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_triggerNo(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pastTrig(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pastTrig(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triggerType: u8,
        bEnaCmd: u8,
        triggerNo: u8,
        pastTrig: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let triggerType: u8 = unsafe { ::core::mem::transmute(triggerType) };
            triggerType as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bEnaCmd: u8 = unsafe { ::core::mem::transmute(bEnaCmd) };
            bEnaCmd as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let triggerNo: u8 = unsafe { ::core::mem::transmute(triggerNo) };
            triggerNo as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pastTrig: u8 = unsafe { ::core::mem::transmute(pastTrig) };
            pastTrig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_ABORT_BG_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_ABORT_BG_s__bindgen_ty_2 {
    #[inline]
    pub fn rule(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_rule(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nSkip(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nSkip(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rule: u8, nSkip: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rule: u8 = unsafe { ::core::mem::transmute(rule) };
            rule as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nSkip: u8 = unsafe { ::core::mem::transmute(nSkip) };
            nSkip as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rfc_CMD_IEEE_ABORT_BG_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_MOD_CCA_s {
    pub commandNo: u16,
    pub newCcaOpt: rfc_CMD_IEEE_MOD_CCA_s__bindgen_ty_1,
    pub newCcaRssiThr: i8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_MOD_CCA_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_MOD_CCA_s__bindgen_ty_1 {
    #[inline]
    pub fn ccaEnEnergy(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaEnEnergy(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaEnCorr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaEnCorr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaEnSync(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaEnSync(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaCorrOp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaCorrOp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaSyncOp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaSyncOp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaCorrThr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ccaCorrThr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ccaEnEnergy: u8,
        ccaEnCorr: u8,
        ccaEnSync: u8,
        ccaCorrOp: u8,
        ccaSyncOp: u8,
        ccaCorrThr: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ccaEnEnergy: u8 = unsafe { ::core::mem::transmute(ccaEnEnergy) };
            ccaEnEnergy as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ccaEnCorr: u8 = unsafe { ::core::mem::transmute(ccaEnCorr) };
            ccaEnCorr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ccaEnSync: u8 = unsafe { ::core::mem::transmute(ccaEnSync) };
            ccaEnSync as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ccaCorrOp: u8 = unsafe { ::core::mem::transmute(ccaCorrOp) };
            ccaCorrOp as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ccaSyncOp: u8 = unsafe { ::core::mem::transmute(ccaSyncOp) };
            ccaSyncOp as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let ccaCorrThr: u8 = unsafe { ::core::mem::transmute(ccaCorrThr) };
            ccaCorrThr as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_MOD_FILT_s {
    pub commandNo: u16,
    pub newFrameFiltOpt: rfc_CMD_IEEE_MOD_FILT_s__bindgen_ty_1,
    pub newFrameTypes: rfc_CMD_IEEE_MOD_FILT_s__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_MOD_FILT_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl rfc_CMD_IEEE_MOD_FILT_s__bindgen_ty_1 {
    #[inline]
    pub fn frameFiltEn(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_frameFiltEn(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frameFiltStop(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_frameFiltStop(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn autoAckEn(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_autoAckEn(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slottedAckEn(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_slottedAckEn(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn autoPendEn(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_autoPendEn(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn defaultPend(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_defaultPend(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bPendDataReqOnly(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bPendDataReqOnly(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bPanCoord(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bPanCoord(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn maxFrameVersion(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_maxFrameVersion(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn fcfReservedMask(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_fcfReservedMask(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn modifyFtFilter(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_modifyFtFilter(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn bStrictLenFilter(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bStrictLenFilter(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        frameFiltEn: u16,
        frameFiltStop: u16,
        autoAckEn: u16,
        slottedAckEn: u16,
        autoPendEn: u16,
        defaultPend: u16,
        bPendDataReqOnly: u16,
        bPanCoord: u16,
        maxFrameVersion: u16,
        fcfReservedMask: u16,
        modifyFtFilter: u16,
        bStrictLenFilter: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let frameFiltEn: u16 = unsafe { ::core::mem::transmute(frameFiltEn) };
            frameFiltEn as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let frameFiltStop: u16 = unsafe { ::core::mem::transmute(frameFiltStop) };
            frameFiltStop as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let autoAckEn: u16 = unsafe { ::core::mem::transmute(autoAckEn) };
            autoAckEn as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let slottedAckEn: u16 = unsafe { ::core::mem::transmute(slottedAckEn) };
            slottedAckEn as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let autoPendEn: u16 = unsafe { ::core::mem::transmute(autoPendEn) };
            autoPendEn as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let defaultPend: u16 = unsafe { ::core::mem::transmute(defaultPend) };
            defaultPend as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bPendDataReqOnly: u16 = unsafe { ::core::mem::transmute(bPendDataReqOnly) };
            bPendDataReqOnly as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bPanCoord: u16 = unsafe { ::core::mem::transmute(bPanCoord) };
            bPanCoord as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let maxFrameVersion: u16 = unsafe { ::core::mem::transmute(maxFrameVersion) };
            maxFrameVersion as u64
        });
        __bindgen_bitfield_unit.set(10usize, 3u8, {
            let fcfReservedMask: u16 = unsafe { ::core::mem::transmute(fcfReservedMask) };
            fcfReservedMask as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let modifyFtFilter: u16 = unsafe { ::core::mem::transmute(modifyFtFilter) };
            modifyFtFilter as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bStrictLenFilter: u16 = unsafe { ::core::mem::transmute(bStrictLenFilter) };
            bStrictLenFilter as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_MOD_FILT_s__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_MOD_FILT_s__bindgen_ty_2 {
    #[inline]
    pub fn bAcceptFt0Beacon(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt0Beacon(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt1Data(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt1Data(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt2Ack(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt2Ack(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt3MacCmd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt3MacCmd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt4Reserved(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt4Reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt5Reserved(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt5Reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt6Reserved(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt6Reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bAcceptFt7Reserved(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bAcceptFt7Reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bAcceptFt0Beacon: u8,
        bAcceptFt1Data: u8,
        bAcceptFt2Ack: u8,
        bAcceptFt3MacCmd: u8,
        bAcceptFt4Reserved: u8,
        bAcceptFt5Reserved: u8,
        bAcceptFt6Reserved: u8,
        bAcceptFt7Reserved: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bAcceptFt0Beacon: u8 = unsafe { ::core::mem::transmute(bAcceptFt0Beacon) };
            bAcceptFt0Beacon as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bAcceptFt1Data: u8 = unsafe { ::core::mem::transmute(bAcceptFt1Data) };
            bAcceptFt1Data as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bAcceptFt2Ack: u8 = unsafe { ::core::mem::transmute(bAcceptFt2Ack) };
            bAcceptFt2Ack as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bAcceptFt3MacCmd: u8 = unsafe { ::core::mem::transmute(bAcceptFt3MacCmd) };
            bAcceptFt3MacCmd as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bAcceptFt4Reserved: u8 = unsafe { ::core::mem::transmute(bAcceptFt4Reserved) };
            bAcceptFt4Reserved as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bAcceptFt5Reserved: u8 = unsafe { ::core::mem::transmute(bAcceptFt5Reserved) };
            bAcceptFt5Reserved as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bAcceptFt6Reserved: u8 = unsafe { ::core::mem::transmute(bAcceptFt6Reserved) };
            bAcceptFt6Reserved as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bAcceptFt7Reserved: u8 = unsafe { ::core::mem::transmute(bAcceptFt7Reserved) };
            bAcceptFt7Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_MOD_SRC_MATCH_s {
    pub commandNo: u16,
    pub options: rfc_CMD_IEEE_MOD_SRC_MATCH_s__bindgen_ty_1,
    pub entryNo: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_MOD_SRC_MATCH_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_MOD_SRC_MATCH_s__bindgen_ty_1 {
    #[inline]
    pub fn bEnable(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bEnable(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srcPend(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srcPend(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn entryType(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_entryType(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bEnable: u8,
        srcPend: u8,
        entryType: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bEnable: u8 = unsafe { ::core::mem::transmute(bEnable) };
            bEnable as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srcPend: u8 = unsafe { ::core::mem::transmute(srcPend) };
            srcPend as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let entryType: u8 = unsafe { ::core::mem::transmute(entryType) };
            entryType as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_ABORT_FG_s {
    pub commandNo: u16,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_STOP_FG_s {
    pub commandNo: u16,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_CCA_REQ_s {
    pub commandNo: u16,
    pub currentRssi: i8,
    pub maxRssi: i8,
    pub ccaInfo: rfc_CMD_IEEE_CCA_REQ_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
#[must_use]
pub struct rfc_CMD_IEEE_CCA_REQ_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_CMD_IEEE_CCA_REQ_s__bindgen_ty_1 {
    #[inline]
    pub fn ccaState(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ccaState(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaEnergy(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ccaEnergy(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaCorr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ccaCorr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ccaSync(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ccaSync(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ccaState: u8,
        ccaEnergy: u8,
        ccaCorr: u8,
        ccaSync: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let ccaState: u8 = unsafe { ::core::mem::transmute(ccaState) };
            ccaState as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let ccaEnergy: u8 = unsafe { ::core::mem::transmute(ccaEnergy) };
            ccaEnergy as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let ccaCorr: u8 = unsafe { ::core::mem::transmute(ccaCorr) };
            ccaCorr as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ccaSync: u8 = unsafe { ::core::mem::transmute(ccaSync) };
            ccaSync as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_ieeeRxOutput_s {
    pub nTxAck: u8,
    pub nRxBeacon: u8,
    pub nRxData: u8,
    pub nRxAck: u8,
    pub nRxMacCmd: u8,
    pub nRxReserved: u8,
    pub nRxNok: u8,
    pub nRxIgnored: u8,
    pub nRxBufFull: u8,
    pub lastRssi: i8,
    pub maxRssi: i8,
    pub __dummy0: u8,
    pub beaconTimeStamp: ratmr_t,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_shortAddrEntry_s {
    pub shortAddr: u16,
    pub panId: u16,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_ieeeRxCorrCrc_s {
    pub status: rfc_ieeeRxCorrCrc_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rfc_ieeeRxCorrCrc_s__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl rfc_ieeeRxCorrCrc_s__bindgen_ty_1 {
    #[inline]
    pub fn corr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_corr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn bIgnore(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bIgnore(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bCrcErr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bCrcErr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        corr: u8,
        bIgnore: u8,
        bCrcErr: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let corr: u8 = unsafe { ::core::mem::transmute(corr) };
            corr as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bIgnore: u8 = unsafe { ::core::mem::transmute(bIgnore) };
            bIgnore as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bCrcErr: u8 = unsafe { ::core::mem::transmute(bCrcErr) };
            bCrcErr as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn AES_ECB_EncryptData(text: *mut u8, textLen: u16, aesKey: *mut u8);
}
extern "C" {
    pub fn AES_ECB_DecryptData(text: *mut u8, textLen: u16, aesKey: *mut u8);
}
extern "C" {
    pub fn AES_CCM_EncryptData(
        encryptFlag: u8,
        MACLen: u8,
        nonce: *mut u8,
        plainText: *mut u8,
        textLen: u16,
        addDataBuf: *mut u8,
        addBufLen: u16,
        aesKey: *mut u8,
        MAC: *mut u8,
        ccmLVal: u8,
    ) -> i8;
}
extern "C" {
    pub fn AES_CCM_DecryptData(
        decryptFlag: u8,
        MACLen: u8,
        nonce: *mut u8,
        cipherText: *mut u8,
        textLen: u16,
        addDataBuf: *mut u8,
        addBufLen: u16,
        aesKey: *mut u8,
        MAC: *mut u8,
        ccmLVal: u8,
    ) -> i8;
}
extern "C" {
    pub fn AES_CTR_EncryptData(
        plainText: *mut u8,
        textLen: u16,
        aesKey: *mut u8,
        nonce: *mut u8,
        initVector: *mut u8,
    ) -> u8;
}
extern "C" {
    pub fn AES_CTR_DecryptData(
        cipherText: *mut u8,
        textLen: u16,
        aesKey: *mut u8,
        nonce: *mut u8,
        initVector: *mut u8,
    ) -> u8;
}
extern "C" {
    pub fn ECC_initialize(pWorkzone: *mut u32);
}
extern "C" {
    pub fn ECC_generateKey(
        randString: *mut u32,
        privateKey: *mut u32,
        publicKey_x: *mut u32,
        publicKey_y: *mut u32,
    ) -> u8;
}
extern "C" {
    pub fn ECC_ECDSA_sign(
        secretKey: *mut u32,
        text: *mut u32,
        randString: *mut u32,
        sign1: *mut u32,
        sign2: *mut u32,
    ) -> u8;
}
extern "C" {
    pub fn ECC_ECDSA_verify(
        publicKey_x: *mut u32,
        publicKey_y: *mut u32,
        text: *mut u32,
        sign1: *mut u32,
        sign2: *mut u32,
    ) -> u8;
}
extern "C" {
    pub fn ECC_ECDH_computeSharedSecret(
        privateKey: *mut u32,
        publicKey_x: *mut u32,
        publicKey_y: *mut u32,
        sharedSecret_x: *mut u32,
        sharedSecret_y: *mut u32,
    ) -> u8;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SHA256_memory_t {
    pub state: [u32; 8usize],
    pub textLen: [u32; 2usize],
    pub W: [u32; 16usize],
}
extern "C" {
    pub fn SHA256_runFullAlgorithm(
        memory: *mut SHA256_memory_t,
        pBufIn: *mut u8,
        bufLen: u32,
        pBufOut: *mut u8,
    ) -> u8;
}
extern "C" {
    pub fn SHA256_initialize(workZone: *mut SHA256_memory_t) -> u8;
}
extern "C" {
    pub fn SHA256_execute(config: *mut SHA256_memory_t, pBufIn: *mut u8, bufLen: u32) -> u8;
}
extern "C" {
    pub fn SHA256_output(memory: *mut SHA256_memory_t, pBufOut: *mut u8) -> u8;
}
extern "C" {
    pub fn SetupTrimDevice();
}
extern "C" {
    pub fn SetupAfterColdResetWakeupFromShutDownCfg1(ccfg_ModeConfReg: u32);
}
extern "C" {
    pub fn SetupAfterColdResetWakeupFromShutDownCfg2(ui32Fcfg1Revision: u32, ccfg_ModeConfReg: u32);
}
extern "C" {
    pub fn SetupAfterColdResetWakeupFromShutDownCfg3(ccfg_ModeConfReg: u32);
}
extern "C" {
    pub fn SetupGetTrimForAdcShModeEn(ui32Fcfg1Revision: u32) -> u32;
}
extern "C" {
    pub fn SetupGetTrimForAdcShVbufEn(ui32Fcfg1Revision: u32) -> u32;
}
extern "C" {
    pub fn SetupGetTrimForAmpcompCtrl(ui32Fcfg1Revision: u32) -> u32;
}
extern "C" {
    pub fn SetupGetTrimForAmpcompTh1() -> u32;
}
extern "C" {
    pub fn SetupGetTrimForAmpcompTh2() -> u32;
}
extern "C" {
    pub fn SetupGetTrimForAnabypassValue1(ccfg_ModeConfReg: u32) -> u32;
}
extern "C" {
    pub fn SetupGetTrimForDblrLoopFilterResetVoltage(ui32Fcfg1Revision: u32) -> u32;
}
extern "C" {
    pub fn SetupGetTrimForRadcExtCfg(ui32Fcfg1Revision: u32) -> u32;
}
extern "C" {
    pub fn SetupGetTrimForRcOscLfIBiasTrim(ui32Fcfg1Revision: u32) -> u32;
}
extern "C" {
    pub fn SetupGetTrimForRcOscLfRtuneCtuneTrim() -> u32;
}
extern "C" {
    pub fn SetupGetTrimForXoscHfCtl(ui32Fcfg1Revision: u32) -> u32;
}
extern "C" {
    pub fn SetupGetTrimForXoscHfFastStart() -> u32;
}
extern "C" {
    pub fn SetupGetTrimForXoscHfIbiastherm() -> u32;
}
extern "C" {
    pub fn SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio(ui32Fcfg1Revision: u32) -> u32;
}
extern "C" {
    #[link_name = "SetupSignExtendVddrTrimValue__extern"]
    pub fn SetupSignExtendVddrTrimValue(ui32VddrTrimVal: u32) -> i32;
}
extern "C" {
    pub fn SetupSetCacheModeAccordingToCcfgSetting();
}
extern "C" {
    pub fn SetupSetAonRtcSubSecInc(subSecInc: u32);
}
extern "C" {
    pub fn SMPHAcquire(ui32Semaphore: u32);
}
extern "C" {
    #[link_name = "SMPHTryAcquire__extern"]
    pub fn SMPHTryAcquire(ui32Semaphore: u32) -> bool;
}
extern "C" {
    #[link_name = "SMPHRelease__extern"]
    pub fn SMPHRelease(ui32Semaphore: u32);
}
extern "C" {
    pub fn SSIConfigSetExpClk(
        ui32Base: u32,
        ui32SSIClk: u32,
        ui32Protocol: u32,
        ui32Mode: u32,
        ui32BitRate: u32,
        ui32DataWidth: u32,
    );
}
extern "C" {
    #[link_name = "SSIEnable__extern"]
    pub fn SSIEnable(ui32Base: u32);
}
extern "C" {
    #[link_name = "SSIDisable__extern"]
    pub fn SSIDisable(ui32Base: u32);
}
extern "C" {
    pub fn SSIDataPut(ui32Base: u32, ui32Data: u32);
}
extern "C" {
    pub fn SSIDataPutNonBlocking(ui32Base: u32, ui32Data: u32) -> i32;
}
extern "C" {
    pub fn SSIDataGet(ui32Base: u32, pui32Data: *mut u32);
}
extern "C" {
    pub fn SSIDataGetNonBlocking(ui32Base: u32, pui32Data: *mut u32) -> i32;
}
extern "C" {
    #[link_name = "SSIBusy__extern"]
    pub fn SSIBusy(ui32Base: u32) -> bool;
}
extern "C" {
    #[link_name = "SSIStatus__extern"]
    pub fn SSIStatus(ui32Base: u32) -> u32;
}
extern "C" {
    pub fn SSIIntRegister(
        ui32Base: u32,
        pfnHandler: ::core::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn SSIIntUnregister(ui32Base: u32);
}
extern "C" {
    #[link_name = "SSIIntEnable__extern"]
    pub fn SSIIntEnable(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "SSIIntDisable__extern"]
    pub fn SSIIntDisable(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "SSIIntClear__extern"]
    pub fn SSIIntClear(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "SSIIntStatus__extern"]
    pub fn SSIIntStatus(ui32Base: u32, bMasked: bool) -> u32;
}
extern "C" {
    #[link_name = "SSIDMAEnable__extern"]
    pub fn SSIDMAEnable(ui32Base: u32, ui32DMAFlags: u32);
}
extern "C" {
    #[link_name = "SSIDMADisable__extern"]
    pub fn SSIDMADisable(ui32Base: u32, ui32DMAFlags: u32);
}
pub type s8 = cty::c_schar;
pub type u8_ = cty::c_uchar;
pub type s16 = cty::c_short;
pub type u16_ = cty::c_ushort;
pub type s32 = cty::c_int;
pub type u32_ = cty::c_uint;
pub type s64 = cty::c_longlong;
pub type u64_ = cty::c_ulonglong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ECRYPT_ctx {
    pub input: [u32_; 16usize],
}
extern "C" {
    pub fn ECRYPT_init();
}
extern "C" {
    pub fn ECRYPT_keysetup(ctx: *mut ECRYPT_ctx, key: *const u8_, keysize: u32_, ivsize: u32_);
}
extern "C" {
    pub fn ECRYPT_ivsetup(ctx: *mut ECRYPT_ctx, iv: *const u8_);
}
extern "C" {
    pub fn ECRYPT_encrypt_bytes(
        ctx: *mut ECRYPT_ctx,
        plaintext: *const u8_,
        ciphertext: *mut u8_,
        msglen: u32_,
    );
}
extern "C" {
    pub fn ECRYPT_decrypt_bytes(
        ctx: *mut ECRYPT_ctx,
        ciphertext: *const u8_,
        plaintext: *mut u8_,
        msglen: u32_,
    );
}
extern "C" {
    pub fn ECRYPT_keystream_bytes(ctx: *mut ECRYPT_ctx, keystream: *mut u8_, length: u32_);
}
extern "C" {
    pub fn ECRYPT_encrypt_packet(
        ctx: *mut ECRYPT_ctx,
        iv: *const u8_,
        plaintext: *const u8_,
        ciphertext: *mut u8_,
        msglen: u32_,
    );
}
extern "C" {
    pub fn ECRYPT_decrypt_packet(
        ctx: *mut ECRYPT_ctx,
        iv: *const u8_,
        ciphertext: *const u8_,
        plaintext: *mut u8_,
        msglen: u32_,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly1305_context {
    pub aligner: usize,
    pub opaque: [cty::c_uchar; 136usize],
}
impl Default for poly1305_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn poly1305_init(ctx: *mut poly1305_context, key: *const cty::c_uchar);
}
extern "C" {
    pub fn poly1305_update(ctx: *mut poly1305_context, m: *const cty::c_uchar, bytes: usize);
}
extern "C" {
    pub fn poly1305_finish(ctx: *mut poly1305_context, mac: *mut cty::c_uchar);
}
extern "C" {
    pub fn poly1305_auth(
        mac: *mut cty::c_uchar,
        m: *const cty::c_uchar,
        bytes: usize,
        key: *const cty::c_uchar,
    );
}
extern "C" {
    pub fn poly1305_verify(mac1: *const cty::c_uchar, mac2: *const cty::c_uchar) -> cty::c_int;
}
extern "C" {
    pub fn poly1305_power_on_self_test() -> cty::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly1305_state_internal_t {
    pub r: [cty::c_ulong; 5usize],
    pub h: [cty::c_ulong; 5usize],
    pub pad: [cty::c_ulong; 4usize],
    pub leftover: usize,
    pub buffer: [cty::c_uchar; 16usize],
    pub final_: cty::c_uchar,
}
extern "C" {
    #[link_name = "U8TO32__extern"]
    pub fn U8TO32(p: *const cty::c_uchar) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "U32TO8__extern"]
    pub fn U32TO8(p: *mut cty::c_uchar, v: cty::c_ulong);
}
extern "C" {
    #[link_name = "poly1305_blocks__extern"]
    pub fn poly1305_blocks(
        st: *mut poly1305_state_internal_t,
        m: *const cty::c_uchar,
        bytes: usize,
    );
}
extern "C" {
    pub fn VIMSConfigure(ui32Base: u32, bRoundRobin: bool, bPrefetch: bool);
}
extern "C" {
    pub fn VIMSModeSet(ui32Base: u32, ui32Mode: u32);
}
extern "C" {
    pub fn VIMSModeGet(ui32Base: u32) -> u32;
}
extern "C" {
    pub fn VIMSModeSafeSet(ui32Base: u32, ui32NewMode: u32, blocking: bool);
}
extern "C" {
    #[link_name = "VIMSLineBufDisable__extern"]
    pub fn VIMSLineBufDisable(ui32Base: u32);
}
extern "C" {
    #[link_name = "VIMSLineBufEnable__extern"]
    pub fn VIMSLineBufEnable(ui32Base: u32);
}
extern "C" {
    #[link_name = "SysCtrlClockGet__extern"]
    pub fn SysCtrlClockGet() -> u32;
}
extern "C" {
    #[link_name = "SysCtrlAonSync__extern"]
    pub fn SysCtrlAonSync();
}
extern "C" {
    #[link_name = "SysCtrlAonUpdate__extern"]
    pub fn SysCtrlAonUpdate();
}
extern "C" {
    pub fn SysCtrlSetRechargeBeforePowerDown(xoscPowerMode: u32);
}
extern "C" {
    pub fn SysCtrlAdjustRechargeAfterPowerDown(vddrRechargeMargin: u32);
}
extern "C" {
    pub fn SysCtrl_DCDC_VoltageConditionalControl();
}
extern "C" {
    pub fn SysCtrlResetSourceGet() -> u32;
}
extern "C" {
    #[link_name = "SysCtrlSystemReset__extern"]
    pub fn SysCtrlSystemReset();
}
extern "C" {
    #[link_name = "SysCtrlClockLossResetEnable__extern"]
    pub fn SysCtrlClockLossResetEnable();
}
extern "C" {
    #[link_name = "SysCtrlClockLossResetDisable__extern"]
    pub fn SysCtrlClockLossResetDisable();
}
extern "C" {
    #[link_name = "SysTickEnable__extern"]
    pub fn SysTickEnable();
}
extern "C" {
    #[link_name = "SysTickDisable__extern"]
    pub fn SysTickDisable();
}
extern "C" {
    #[link_name = "SysTickIntRegister__extern"]
    pub fn SysTickIntRegister(pfnHandler: ::core::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    #[link_name = "SysTickIntUnregister__extern"]
    pub fn SysTickIntUnregister();
}
extern "C" {
    #[link_name = "SysTickIntEnable__extern"]
    pub fn SysTickIntEnable();
}
extern "C" {
    #[link_name = "SysTickIntDisable__extern"]
    pub fn SysTickIntDisable();
}
extern "C" {
    #[link_name = "SysTickPeriodSet__extern"]
    pub fn SysTickPeriodSet(ui32Period: u32);
}
extern "C" {
    #[link_name = "SysTickPeriodGet__extern"]
    pub fn SysTickPeriodGet() -> u32;
}
extern "C" {
    #[link_name = "SysTickValueGet__extern"]
    pub fn SysTickValueGet() -> u32;
}
extern "C" {
    #[link_name = "TimerEnable__extern"]
    pub fn TimerEnable(ui32Base: u32, ui32Timer: u32);
}
extern "C" {
    #[link_name = "TimerDisable__extern"]
    pub fn TimerDisable(ui32Base: u32, ui32Timer: u32);
}
extern "C" {
    pub fn TimerConfigure(ui32Base: u32, ui32Config: u32);
}
extern "C" {
    pub fn TimerLevelControl(ui32Base: u32, ui32Timer: u32, bInvert: bool);
}
extern "C" {
    #[link_name = "TimerEventControl__extern"]
    pub fn TimerEventControl(ui32Base: u32, ui32Timer: u32, ui32Event: u32);
}
extern "C" {
    pub fn TimerStallControl(ui32Base: u32, ui32Timer: u32, bStall: bool);
}
extern "C" {
    pub fn TimerWaitOnTriggerControl(ui32Base: u32, ui32Timer: u32, bWait: bool);
}
extern "C" {
    #[link_name = "TimerPrescaleSet__extern"]
    pub fn TimerPrescaleSet(ui32Base: u32, ui32Timer: u32, ui32Value: u32);
}
extern "C" {
    #[link_name = "TimerPrescaleGet__extern"]
    pub fn TimerPrescaleGet(ui32Base: u32, ui32Timer: u32) -> u32;
}
extern "C" {
    #[link_name = "TimerPrescaleMatchSet__extern"]
    pub fn TimerPrescaleMatchSet(ui32Base: u32, ui32Timer: u32, ui32Value: u32);
}
extern "C" {
    #[link_name = "TimerPrescaleMatchGet__extern"]
    pub fn TimerPrescaleMatchGet(ui32Base: u32, ui32Timer: u32) -> u32;
}
extern "C" {
    #[link_name = "TimerLoadSet__extern"]
    pub fn TimerLoadSet(ui32Base: u32, ui32Timer: u32, ui32Value: u32);
}
extern "C" {
    #[link_name = "TimerLoadGet__extern"]
    pub fn TimerLoadGet(ui32Base: u32, ui32Timer: u32) -> u32;
}
extern "C" {
    #[link_name = "TimerValueGet__extern"]
    pub fn TimerValueGet(ui32Base: u32, ui32Timer: u32) -> u32;
}
extern "C" {
    #[link_name = "TimerMatchSet__extern"]
    pub fn TimerMatchSet(ui32Base: u32, ui32Timer: u32, ui32Value: u32);
}
extern "C" {
    #[link_name = "TimerMatchGet__extern"]
    pub fn TimerMatchGet(ui32Base: u32, ui32Timer: u32) -> u32;
}
extern "C" {
    pub fn TimerIntRegister(
        ui32Base: u32,
        ui32Timer: u32,
        pfnHandler: ::core::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn TimerIntUnregister(ui32Base: u32, ui32Timer: u32);
}
extern "C" {
    #[link_name = "TimerIntEnable__extern"]
    pub fn TimerIntEnable(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "TimerIntDisable__extern"]
    pub fn TimerIntDisable(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "TimerIntStatus__extern"]
    pub fn TimerIntStatus(ui32Base: u32, bMasked: bool) -> u32;
}
extern "C" {
    #[link_name = "TimerIntClear__extern"]
    pub fn TimerIntClear(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "TimerSynchronize__extern"]
    pub fn TimerSynchronize(ui32Base: u32, ui32Timers: u32);
}
extern "C" {
    #[link_name = "TimerCcpCombineEnable__extern"]
    pub fn TimerCcpCombineEnable(ui32Base: u32);
}
extern "C" {
    #[link_name = "TimerCcpCombineDisable__extern"]
    pub fn TimerCcpCombineDisable(ui32Base: u32);
}
extern "C" {
    pub fn TimerMatchUpdateMode(ui32Base: u32, ui32Timer: u32, ui32Mode: u32);
}
extern "C" {
    pub fn TimerIntervalLoadMode(ui32Base: u32, ui32Timer: u32, ui32Mode: u32);
}
extern "C" {
    pub fn TRNGConfigure(
        ui32MinSamplesPerCycle: u32,
        ui32MaxSamplesPerCycle: u32,
        ui32ClocksPerSample: u32,
    );
}
extern "C" {
    #[link_name = "TRNGEnable__extern"]
    pub fn TRNGEnable();
}
extern "C" {
    #[link_name = "TRNGDisable__extern"]
    pub fn TRNGDisable();
}
extern "C" {
    pub fn TRNGNumberGet(ui32Word: u32) -> u32;
}
extern "C" {
    #[link_name = "TRNGStatusGet__extern"]
    pub fn TRNGStatusGet() -> u32;
}
extern "C" {
    #[link_name = "TRNGReset__extern"]
    pub fn TRNGReset();
}
extern "C" {
    #[link_name = "TRNGIntEnable__extern"]
    pub fn TRNGIntEnable(ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "TRNGIntDisable__extern"]
    pub fn TRNGIntDisable(ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "TRNGIntStatus__extern"]
    pub fn TRNGIntStatus(bMasked: bool) -> u32;
}
extern "C" {
    #[link_name = "TRNGIntClear__extern"]
    pub fn TRNGIntClear(ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "TRNGIntRegister__extern"]
    pub fn TRNGIntRegister(pfnHandler: ::core::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    #[link_name = "TRNGIntUnregister__extern"]
    pub fn TRNGIntUnregister();
}
extern "C" {
    #[link_name = "UARTParityModeSet__extern"]
    pub fn UARTParityModeSet(ui32Base: u32, ui32Parity: u32);
}
extern "C" {
    #[link_name = "UARTParityModeGet__extern"]
    pub fn UARTParityModeGet(ui32Base: u32) -> u32;
}
extern "C" {
    #[link_name = "UARTFIFOLevelSet__extern"]
    pub fn UARTFIFOLevelSet(ui32Base: u32, ui32TxLevel: u32, ui32RxLevel: u32);
}
extern "C" {
    pub fn UARTFIFOLevelGet(ui32Base: u32, pui32TxLevel: *mut u32, pui32RxLevel: *mut u32);
}
extern "C" {
    pub fn UARTConfigSetExpClk(ui32Base: u32, ui32UARTClk: u32, ui32Baud: u32, ui32Config: u32);
}
extern "C" {
    pub fn UARTConfigGetExpClk(
        ui32Base: u32,
        ui32UARTClk: u32,
        pui32Baud: *mut u32,
        pui32Config: *mut u32,
    );
}
extern "C" {
    #[link_name = "UARTEnable__extern"]
    pub fn UARTEnable(ui32Base: u32);
}
extern "C" {
    pub fn UARTDisable(ui32Base: u32);
}
extern "C" {
    #[link_name = "UARTFIFOEnable__extern"]
    pub fn UARTFIFOEnable(ui32Base: u32);
}
extern "C" {
    #[link_name = "UARTFIFODisable__extern"]
    pub fn UARTFIFODisable(ui32Base: u32);
}
extern "C" {
    #[link_name = "UARTCharsAvail__extern"]
    pub fn UARTCharsAvail(ui32Base: u32) -> bool;
}
extern "C" {
    #[link_name = "UARTSpaceAvail__extern"]
    pub fn UARTSpaceAvail(ui32Base: u32) -> bool;
}
extern "C" {
    pub fn UARTCharGetNonBlocking(ui32Base: u32) -> i32;
}
extern "C" {
    pub fn UARTCharGet(ui32Base: u32) -> i32;
}
extern "C" {
    pub fn UARTCharPutNonBlocking(ui32Base: u32, ui8Data: u8) -> bool;
}
extern "C" {
    pub fn UARTCharPut(ui32Base: u32, ui8Data: u8);
}
extern "C" {
    #[link_name = "UARTBusy__extern"]
    pub fn UARTBusy(ui32Base: u32) -> bool;
}
extern "C" {
    #[link_name = "UARTBreakCtl__extern"]
    pub fn UARTBreakCtl(ui32Base: u32, bBreakState: bool);
}
extern "C" {
    pub fn UARTIntRegister(
        ui32Base: u32,
        pfnHandler: ::core::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn UARTIntUnregister(ui32Base: u32);
}
extern "C" {
    #[link_name = "UARTIntEnable__extern"]
    pub fn UARTIntEnable(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "UARTIntDisable__extern"]
    pub fn UARTIntDisable(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "UARTIntStatus__extern"]
    pub fn UARTIntStatus(ui32Base: u32, bMasked: bool) -> u32;
}
extern "C" {
    #[link_name = "UARTIntClear__extern"]
    pub fn UARTIntClear(ui32Base: u32, ui32IntFlags: u32);
}
extern "C" {
    #[link_name = "UARTDMAEnable__extern"]
    pub fn UARTDMAEnable(ui32Base: u32, ui32DMAFlags: u32);
}
extern "C" {
    #[link_name = "UARTDMADisable__extern"]
    pub fn UARTDMADisable(ui32Base: u32, ui32DMAFlags: u32);
}
extern "C" {
    #[link_name = "UARTRxErrorGet__extern"]
    pub fn UARTRxErrorGet(ui32Base: u32) -> u32;
}
extern "C" {
    #[link_name = "UARTRxErrorClear__extern"]
    pub fn UARTRxErrorClear(ui32Base: u32);
}
extern "C" {
    #[link_name = "UARTHwFlowControlEnable__extern"]
    pub fn UARTHwFlowControlEnable(ui32Base: u32);
}
extern "C" {
    #[link_name = "UARTHwFlowControlDisable__extern"]
    pub fn UARTHwFlowControlDisable(ui32Base: u32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tDMAControlTable {
    pub pvSrcEndAddr: *mut cty::c_void,
    pub pvDstEndAddr: *mut cty::c_void,
    pub ui32Control: u32,
    pub ui32Spare: u32,
}
impl Default for tDMAControlTable {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[link_name = "uDMAEnable__extern"]
    pub fn uDMAEnable(ui32Base: u32);
}
extern "C" {
    #[link_name = "uDMADisable__extern"]
    pub fn uDMADisable(ui32Base: u32);
}
extern "C" {
    #[link_name = "uDMAErrorStatusGet__extern"]
    pub fn uDMAErrorStatusGet(ui32Base: u32) -> u32;
}
extern "C" {
    #[link_name = "uDMAErrorStatusClear__extern"]
    pub fn uDMAErrorStatusClear(ui32Base: u32);
}
extern "C" {
    #[link_name = "uDMAChannelEnable__extern"]
    pub fn uDMAChannelEnable(ui32Base: u32, ui32ChannelNum: u32);
}
extern "C" {
    #[link_name = "uDMAChannelDisable__extern"]
    pub fn uDMAChannelDisable(ui32Base: u32, ui32ChannelNum: u32);
}
extern "C" {
    #[link_name = "uDMAChannelIsEnabled__extern"]
    pub fn uDMAChannelIsEnabled(ui32Base: u32, ui32ChannelNum: u32) -> bool;
}
extern "C" {
    #[link_name = "uDMAControlBaseSet__extern"]
    pub fn uDMAControlBaseSet(ui32Base: u32, pControlTable: *mut cty::c_void);
}
extern "C" {
    #[link_name = "uDMAControlBaseGet__extern"]
    pub fn uDMAControlBaseGet(ui32Base: u32) -> *mut cty::c_void;
}
extern "C" {
    #[link_name = "uDMAControlAlternateBaseGet__extern"]
    pub fn uDMAControlAlternateBaseGet(ui32Base: u32) -> *mut cty::c_void;
}
extern "C" {
    #[link_name = "uDMAChannelRequest__extern"]
    pub fn uDMAChannelRequest(ui32Base: u32, ui32ChannelNum: u32);
}
extern "C" {
    pub fn uDMAChannelAttributeEnable(ui32Base: u32, ui32ChannelNum: u32, ui32Attr: u32);
}
extern "C" {
    pub fn uDMAChannelAttributeDisable(ui32Base: u32, ui32ChannelNum: u32, ui32Attr: u32);
}
extern "C" {
    pub fn uDMAChannelAttributeGet(ui32Base: u32, ui32ChannelNum: u32) -> u32;
}
extern "C" {
    pub fn uDMAChannelControlSet(ui32Base: u32, ui32ChannelStructIndex: u32, ui32Control: u32);
}
extern "C" {
    pub fn uDMAChannelTransferSet(
        ui32Base: u32,
        ui32ChannelStructIndex: u32,
        ui32Mode: u32,
        pvSrcAddr: *mut cty::c_void,
        pvDstAddr: *mut cty::c_void,
        ui32TransferSize: u32,
    );
}
extern "C" {
    pub fn uDMAChannelScatterGatherSet(
        ui32Base: u32,
        ui32ChannelNum: u32,
        ui32TaskCount: u32,
        pvTaskList: *mut cty::c_void,
        ui32IsPeriphSG: u32,
    );
}
extern "C" {
    pub fn uDMAChannelSizeGet(ui32Base: u32, ui32ChannelStructIndex: u32) -> u32;
}
extern "C" {
    pub fn uDMAChannelModeGet(ui32Base: u32, ui32ChannelStructIndex: u32) -> u32;
}
extern "C" {
    #[link_name = "uDMAIntRegister__extern"]
    pub fn uDMAIntRegister(
        ui32Base: u32,
        ui32IntChannel: u32,
        pfnHandler: ::core::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    #[link_name = "uDMAIntUnregister__extern"]
    pub fn uDMAIntUnregister(ui32Base: u32, ui32IntChannel: u32);
}
extern "C" {
    #[link_name = "uDMAIntClear__extern"]
    pub fn uDMAIntClear(ui32Base: u32, ui32ChanMask: u32);
}
extern "C" {
    #[link_name = "uDMAIntStatus__extern"]
    pub fn uDMAIntStatus(ui32Base: u32) -> u32;
}
extern "C" {
    #[link_name = "uDMAIntSwEventEnable__extern"]
    pub fn uDMAIntSwEventEnable(ui32Base: u32, ui32IntChannel: u32);
}
extern "C" {
    #[link_name = "uDMAIntSwEventDisable__extern"]
    pub fn uDMAIntSwEventDisable(ui32Base: u32, ui32IntChannel: u32);
}
extern "C" {
    #[link_name = "uDMAGetStatus__extern"]
    pub fn uDMAGetStatus(ui32Base: u32) -> u32;
}
extern "C" {
    #[link_name = "uDMAChannelPrioritySet__extern"]
    pub fn uDMAChannelPrioritySet(ui32Base: u32, ui32ChannelNum: u32);
}
extern "C" {
    #[link_name = "uDMAChannelPriorityGet__extern"]
    pub fn uDMAChannelPriorityGet(ui32Base: u32, ui32ChannelNum: u32) -> bool;
}
extern "C" {
    #[link_name = "uDMAChannelPriorityClear__extern"]
    pub fn uDMAChannelPriorityClear(ui32Base: u32, ui32ChannelNum: u32);
}
extern "C" {
    #[link_name = "WatchdogRunning__extern"]
    pub fn WatchdogRunning() -> bool;
}
extern "C" {
    #[link_name = "WatchdogEnable__extern"]
    pub fn WatchdogEnable();
}
extern "C" {
    #[link_name = "WatchdogResetEnable__extern"]
    pub fn WatchdogResetEnable();
}
extern "C" {
    #[link_name = "WatchdogResetDisable__extern"]
    pub fn WatchdogResetDisable();
}
extern "C" {
    #[link_name = "WatchdogLock__extern"]
    pub fn WatchdogLock();
}
extern "C" {
    #[link_name = "WatchdogUnlock__extern"]
    pub fn WatchdogUnlock();
}
extern "C" {
    #[link_name = "WatchdogLockState__extern"]
    pub fn WatchdogLockState() -> bool;
}
extern "C" {
    #[link_name = "WatchdogReloadSet__extern"]
    pub fn WatchdogReloadSet(ui32LoadVal: u32);
}
extern "C" {
    #[link_name = "WatchdogReloadGet__extern"]
    pub fn WatchdogReloadGet() -> u32;
}
extern "C" {
    #[link_name = "WatchdogValueGet__extern"]
    pub fn WatchdogValueGet() -> u32;
}
extern "C" {
    #[link_name = "WatchdogIntRegister__extern"]
    pub fn WatchdogIntRegister(pfnHandler: ::core::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    #[link_name = "WatchdogIntUnregister__extern"]
    pub fn WatchdogIntUnregister();
}
extern "C" {
    #[link_name = "WatchdogIntEnable__extern"]
    pub fn WatchdogIntEnable();
}
extern "C" {
    #[link_name = "WatchdogIntStatus__extern"]
    pub fn WatchdogIntStatus() -> u32;
}
extern "C" {
    #[link_name = "WatchdogIntClear__extern"]
    pub fn WatchdogIntClear();
}
extern "C" {
    #[link_name = "WatchdogIntTypeSet__extern"]
    pub fn WatchdogIntTypeSet(ui32Type: u32);
}
extern "C" {
    #[link_name = "WatchdogStallEnable__extern"]
    pub fn WatchdogStallEnable();
}
extern "C" {
    #[link_name = "WatchdogStallDisable__extern"]
    pub fn WatchdogStallDisable();
}
